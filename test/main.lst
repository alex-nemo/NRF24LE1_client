                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Thu Jan 30 10:58:01 2014
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _watchdog_start_and_set_timeout_in_ms
                             14 	.globl _watchdog_set_wdsv_count
                             15 	.globl _gpio_pin_val_write
                             16 	.globl _gpio_pin_val_set
                             17 	.globl _gpio_pin_val_clear
                             18 	.globl _gpio_pin_val_read
                             19 	.globl _uart_configure_manual_baud_calc
                             20 	.globl _printf
                             21 	.globl _FSR_SB_ENDBG
                             22 	.globl _FSR_SB_STP
                             23 	.globl _FSR_SB_WEN
                             24 	.globl _FSR_SB_RDYN
                             25 	.globl _FSR_SB_INFEN
                             26 	.globl _FSR_SB_RDISMB
                             27 	.globl _RFCON_SB_RFCKEN
                             28 	.globl _RFCON_SB_RFCSN
                             29 	.globl _RFCON_SB_RFCE
                             30 	.globl _ADCON_SB_BD
                             31 	.globl _PSW_SB_P
                             32 	.globl _PSW_SB_F1
                             33 	.globl _PSW_SB_OV
                             34 	.globl _PSW_SB_RS0
                             35 	.globl _PSW_SB_RS1
                             36 	.globl _PSW_SB_F0
                             37 	.globl _PSW_SB_AC
                             38 	.globl _PSW_SB_CY
                             39 	.globl _T2CON_SB_T2PS
                             40 	.globl _T2CON_SB_I3FR
                             41 	.globl _T2CON_SB_I2FR
                             42 	.globl _T2CON_SB_T2R1
                             43 	.globl _T2CON_SB_T2R0
                             44 	.globl _T2CON_SB_T2CM
                             45 	.globl _T2CON_SB_T2I1
                             46 	.globl _T2CON_SB_T2I0
                             47 	.globl _IRCON_SB_EXF2
                             48 	.globl _IRCON_SB_TF2
                             49 	.globl _IRCON_SB_TICK
                             50 	.globl _IRCON_SB_MISCIRQ
                             51 	.globl _IRCON_SB_WUOPIRQ
                             52 	.globl _IRCON_SB_SPI_2WIRE
                             53 	.globl _IRCON_SB_RFIRQ
                             54 	.globl _IRCON_SB_RFRDY
                             55 	.globl _IEN1_SB_T2EXTRLD
                             56 	.globl _IEN1_SB_TICK
                             57 	.globl _IEN1_SB_MISCIRQ
                             58 	.globl _IEN1_SB_WUOPIRQ
                             59 	.globl _IEN1_SB_SPI_2WIRE
                             60 	.globl _IEN1_SB_RFIRQ
                             61 	.globl _IEN1_SB_RFRDY
                             62 	.globl _P3_SB_D7
                             63 	.globl _P3_SB_D6
                             64 	.globl _P3_SB_D5
                             65 	.globl _P3_SB_D4
                             66 	.globl _P3_SB_D3
                             67 	.globl _P3_SB_D2
                             68 	.globl _P3_SB_D1
                             69 	.globl _P3_SB_D0
                             70 	.globl _IEN0_SB_GLOBAL
                             71 	.globl _IEN0_SB_T2
                             72 	.globl _IEN0_SB_UART
                             73 	.globl _IEN0_SB_T1
                             74 	.globl _IEN0_SB_POFIRQ
                             75 	.globl _IEN0_SB_T0
                             76 	.globl _IEN0_SB_IFP
                             77 	.globl _P2_SB_D7
                             78 	.globl _P2_SB_D6
                             79 	.globl _P2_SB_D5
                             80 	.globl _P2_SB_D4
                             81 	.globl _P2_SB_D3
                             82 	.globl _P2_SB_D2
                             83 	.globl _P2_SB_D1
                             84 	.globl _P2_SB_D0
                             85 	.globl _S0CON_SB_SM0
                             86 	.globl _S0CON_SB_SM1
                             87 	.globl _S0CON_SB_SM20
                             88 	.globl _S0CON_SB_REN0
                             89 	.globl _S0CON_SB_TB80
                             90 	.globl _S0CON_SB_RB80
                             91 	.globl _S0CON_SB_TI0
                             92 	.globl _S0CON_SB_RI0
                             93 	.globl _P1_SB_D7
                             94 	.globl _P1_SB_D6
                             95 	.globl _P1_SB_D5
                             96 	.globl _P1_SB_D4
                             97 	.globl _P1_SB_D3
                             98 	.globl _P1_SB_D2
                             99 	.globl _P1_SB_D1
                            100 	.globl _P1_SB_D0
                            101 	.globl _TCON_SB_TF1
                            102 	.globl _TCON_SB_TR1
                            103 	.globl _TCON_SB_TF0
                            104 	.globl _TCON_SB_TR0
                            105 	.globl _TCON_SB_IE1
                            106 	.globl _TCON_SB_IT1
                            107 	.globl _TCON_SB_IE0
                            108 	.globl _TCON_SB_IT0
                            109 	.globl _P0_SB_D7
                            110 	.globl _P0_SB_D6
                            111 	.globl _P0_SB_D5
                            112 	.globl _P0_SB_D4
                            113 	.globl _P0_SB_D3
                            114 	.globl _P0_SB_D2
                            115 	.globl _P0_SB_D1
                            116 	.globl _P0_SB_D0
                            117 	.globl _ADCDAT
                            118 	.globl _S0REL
                            119 	.globl _T2
                            120 	.globl _T1
                            121 	.globl _T0
                            122 	.globl _CRC
                            123 	.globl _CC3
                            124 	.globl _CC2
                            125 	.globl _CC1
                            126 	.globl _SPIMDAT
                            127 	.globl _SPIMSTAT
                            128 	.globl _SPIMCON1
                            129 	.globl _SPIMCON0
                            130 	.globl _FCR
                            131 	.globl _FPCR
                            132 	.globl _FSR
                            133 	.globl _B
                            134 	.globl _ARCON
                            135 	.globl _MD5
                            136 	.globl _MD4
                            137 	.globl _MD3
                            138 	.globl _MD2
                            139 	.globl _MD1
                            140 	.globl _MD0
                            141 	.globl _RFCON
                            142 	.globl _SPIRDAT
                            143 	.globl _SPIRSTAT
                            144 	.globl _SPIRCON1
                            145 	.globl _SPIRCON0
                            146 	.globl _W2CON0
                            147 	.globl _W2CON1
                            148 	.globl _ACC
                            149 	.globl _CCPDATO
                            150 	.globl _CCPDATIB
                            151 	.globl _CCPDATIA
                            152 	.globl _POFCON
                            153 	.globl _COMPCON
                            154 	.globl _W2DAT
                            155 	.globl _W2SADR
                            156 	.globl _ADCON
                            157 	.globl _RNGDAT
                            158 	.globl _RNGCTL
                            159 	.globl _ADCDATL
                            160 	.globl _ADCDATH
                            161 	.globl _ADCCON1
                            162 	.globl _ADCCON2
                            163 	.globl _ADCCON3
                            164 	.globl _PSW
                            165 	.globl _WUOPC0
                            166 	.globl _WUOPC1
                            167 	.globl _TH2
                            168 	.globl _TL2
                            169 	.globl _CRCH
                            170 	.globl _CRCL
                            171 	.globl __XPAGE
                            172 	.globl _MPAGE
                            173 	.globl _T2CON
                            174 	.globl _CCH3
                            175 	.globl _CCL3
                            176 	.globl _CCH2
                            177 	.globl _CCL2
                            178 	.globl _CCH1
                            179 	.globl _CCL1
                            180 	.globl _CCEN
                            181 	.globl _IRCON
                            182 	.globl _SPISDAT
                            183 	.globl _SPISSTAT
                            184 	.globl _SPISCON1
                            185 	.globl _SPISCON0
                            186 	.globl _S0RELH
                            187 	.globl _IP1
                            188 	.globl _IEN1
                            189 	.globl _SPISRDSZ
                            190 	.globl _RTC2CPT00
                            191 	.globl _RTC2CMP1
                            192 	.globl _RTC2CMP0
                            193 	.globl _RTC2CON
                            194 	.globl _PWMCON
                            195 	.globl _RSTREAS
                            196 	.globl _P3
                            197 	.globl _WDSV
                            198 	.globl _OPMCON
                            199 	.globl _CLKLFCTRL
                            200 	.globl _RTC2CPT10
                            201 	.globl _RTC2CPT01
                            202 	.globl _S0RELL
                            203 	.globl _IP0
                            204 	.globl _IEN0
                            205 	.globl _MEMCON
                            206 	.globl _INTEXP
                            207 	.globl _WUCON
                            208 	.globl _PWRDWN
                            209 	.globl _CLKCTRL
                            210 	.globl _PWMDC1
                            211 	.globl _PWMDC0
                            212 	.globl _P2
                            213 	.globl _P1CON
                            214 	.globl _P0CON
                            215 	.globl _S0BUF
                            216 	.globl _S0CON
                            217 	.globl _P2CON
                            218 	.globl _P3DIR
                            219 	.globl _P2DIR
                            220 	.globl _P1DIR
                            221 	.globl _P0DIR
                            222 	.globl _DPS
                            223 	.globl _P1
                            224 	.globl _P3CON
                            225 	.globl _TH1
                            226 	.globl _TH0
                            227 	.globl _TL1
                            228 	.globl _TL0
                            229 	.globl _TMOD
                            230 	.globl _TCON
                            231 	.globl _PCON
                            232 	.globl _DPH1
                            233 	.globl _DPL1
                            234 	.globl _DPH
                            235 	.globl _DPL
                            236 	.globl _SP
                            237 	.globl _P0
                            238 	.globl _timer1_configure_PARM_2
                            239 	.globl _timer0_configure_PARM_2
                            240 	.globl _interrupt_configure_ifp_PARM_2
                            241 	.globl _pwm_start_PARM_2
                            242 	.globl _gpio_pin_val_write_PARM_2
                            243 	.globl _gpio_pin_configure_PARM_2
                            244 	.globl _rf_set_rx_addr_PARM_3
                            245 	.globl _rf_set_rx_addr_PARM_2
                            246 	.globl _rf_read_register_PARM_3
                            247 	.globl _rf_read_register_PARM_2
                            248 	.globl _rf_power_up_param_PARM_2
                            249 	.globl _rf_spi_send_read_PARM_3
                            250 	.globl _rf_spi_send_read_PARM_2
                            251 	.globl _rf_spi_execute_command_PARM_4
                            252 	.globl _rf_spi_execute_command_PARM_3
                            253 	.globl _rf_spi_execute_command_PARM_2
                            254 	.globl _rf_write_tx_payload_PARM_3
                            255 	.globl _rf_write_tx_payload_PARM_2
                            256 	.globl _rf_write_register_PARM_3
                            257 	.globl _rf_write_register_PARM_2
                            258 	.globl _rf_configure_debug_lite_PARM_2
                            259 	.globl _rf_read_rx_payload_PARM_2
                            260 	.globl _rf_read_rx_payload
                            261 	.globl _rf_configure_debug_lite
                            262 	.globl _rf_write_register
                            263 	.globl _rf_spi_configure_enable
                            264 	.globl _rf_write_tx_payload
                            265 	.globl _rf_transmit
                            266 	.globl _rf_set_as_rx
                            267 	.globl _rf_irq_clear_all
                            268 	.globl _rf_set_as_tx
                            269 	.globl _rf_spi_execute_command
                            270 	.globl _rf_spi_send_read
                            271 	.globl _rf_power_up_param
                            272 	.globl _rf_read_register
                            273 	.globl _rf_spi_send_read_byte
                            274 	.globl _rf_set_rx_addr
                            275 	.globl _gpio_pin_configure
                            276 	.globl _delay_us
                            277 	.globl _delay_s
                            278 	.globl _delay_ms
                            279 	.globl _pwm_configure
                            280 	.globl _pwm_start
                            281 	.globl _pwr_clk_mgmt_clklf_configure
                            282 	.globl _pwr_clk_mgmt_get_cclk_freq_in_hz
                            283 	.globl _interrupt_configure_ifp
                            284 	.globl _adc_configure
                            285 	.globl _adc_set_input_channel
                            286 	.globl _adc_start_single_conversion
                            287 	.globl _adc_start_single_conversion_get_value
                            288 	.globl _timer0_configure
                            289 	.globl _timer1_configure
                            290 	.globl _initialize
                            291 	.globl _putchar
                            292 	.globl _getchar
                            293 ;--------------------------------------------------------
                            294 ; special function registers
                            295 ;--------------------------------------------------------
                            296 	.area RSEG    (ABS,DATA)
   0000                     297 	.org 0x0000
                     0080   298 _P0	=	0x0080
                     0081   299 _SP	=	0x0081
                     0082   300 _DPL	=	0x0082
                     0083   301 _DPH	=	0x0083
                     0084   302 _DPL1	=	0x0084
                     0085   303 _DPH1	=	0x0085
                     0087   304 _PCON	=	0x0087
                     0088   305 _TCON	=	0x0088
                     0089   306 _TMOD	=	0x0089
                     008A   307 _TL0	=	0x008a
                     008B   308 _TL1	=	0x008b
                     008C   309 _TH0	=	0x008c
                     008D   310 _TH1	=	0x008d
                     008F   311 _P3CON	=	0x008f
                     0090   312 _P1	=	0x0090
                     0092   313 _DPS	=	0x0092
                     0093   314 _P0DIR	=	0x0093
                     0094   315 _P1DIR	=	0x0094
                     0095   316 _P2DIR	=	0x0095
                     0096   317 _P3DIR	=	0x0096
                     0097   318 _P2CON	=	0x0097
                     0098   319 _S0CON	=	0x0098
                     0099   320 _S0BUF	=	0x0099
                     009E   321 _P0CON	=	0x009e
                     009F   322 _P1CON	=	0x009f
                     00A0   323 _P2	=	0x00a0
                     00A1   324 _PWMDC0	=	0x00a1
                     00A2   325 _PWMDC1	=	0x00a2
                     00A3   326 _CLKCTRL	=	0x00a3
                     00A4   327 _PWRDWN	=	0x00a4
                     00A5   328 _WUCON	=	0x00a5
                     00A6   329 _INTEXP	=	0x00a6
                     00A7   330 _MEMCON	=	0x00a7
                     00A8   331 _IEN0	=	0x00a8
                     00A9   332 _IP0	=	0x00a9
                     00AA   333 _S0RELL	=	0x00aa
                     00AB   334 _RTC2CPT01	=	0x00ab
                     00AC   335 _RTC2CPT10	=	0x00ac
                     00AD   336 _CLKLFCTRL	=	0x00ad
                     00AE   337 _OPMCON	=	0x00ae
                     00AF   338 _WDSV	=	0x00af
                     00B0   339 _P3	=	0x00b0
                     00B1   340 _RSTREAS	=	0x00b1
                     00B2   341 _PWMCON	=	0x00b2
                     00B3   342 _RTC2CON	=	0x00b3
                     00B4   343 _RTC2CMP0	=	0x00b4
                     00B5   344 _RTC2CMP1	=	0x00b5
                     00B6   345 _RTC2CPT00	=	0x00b6
                     00B7   346 _SPISRDSZ	=	0x00b7
                     00B8   347 _IEN1	=	0x00b8
                     00B9   348 _IP1	=	0x00b9
                     00BA   349 _S0RELH	=	0x00ba
                     00BC   350 _SPISCON0	=	0x00bc
                     00BD   351 _SPISCON1	=	0x00bd
                     00BE   352 _SPISSTAT	=	0x00be
                     00BF   353 _SPISDAT	=	0x00bf
                     00C0   354 _IRCON	=	0x00c0
                     00C1   355 _CCEN	=	0x00c1
                     00C2   356 _CCL1	=	0x00c2
                     00C3   357 _CCH1	=	0x00c3
                     00C4   358 _CCL2	=	0x00c4
                     00C5   359 _CCH2	=	0x00c5
                     00C6   360 _CCL3	=	0x00c6
                     00C7   361 _CCH3	=	0x00c7
                     00C8   362 _T2CON	=	0x00c8
                     00C9   363 _MPAGE	=	0x00c9
                     00C9   364 __XPAGE	=	0x00c9
                     00CA   365 _CRCL	=	0x00ca
                     00CB   366 _CRCH	=	0x00cb
                     00CC   367 _TL2	=	0x00cc
                     00CD   368 _TH2	=	0x00cd
                     00CE   369 _WUOPC1	=	0x00ce
                     00CF   370 _WUOPC0	=	0x00cf
                     00D0   371 _PSW	=	0x00d0
                     00D1   372 _ADCCON3	=	0x00d1
                     00D2   373 _ADCCON2	=	0x00d2
                     00D3   374 _ADCCON1	=	0x00d3
                     00D4   375 _ADCDATH	=	0x00d4
                     00D5   376 _ADCDATL	=	0x00d5
                     00D6   377 _RNGCTL	=	0x00d6
                     00D7   378 _RNGDAT	=	0x00d7
                     00D8   379 _ADCON	=	0x00d8
                     00D9   380 _W2SADR	=	0x00d9
                     00DA   381 _W2DAT	=	0x00da
                     00DB   382 _COMPCON	=	0x00db
                     00DC   383 _POFCON	=	0x00dc
                     00DD   384 _CCPDATIA	=	0x00dd
                     00DE   385 _CCPDATIB	=	0x00de
                     00DF   386 _CCPDATO	=	0x00df
                     00E0   387 _ACC	=	0x00e0
                     00E1   388 _W2CON1	=	0x00e1
                     00E2   389 _W2CON0	=	0x00e2
                     00E4   390 _SPIRCON0	=	0x00e4
                     00E5   391 _SPIRCON1	=	0x00e5
                     00E6   392 _SPIRSTAT	=	0x00e6
                     00E7   393 _SPIRDAT	=	0x00e7
                     00E8   394 _RFCON	=	0x00e8
                     00E9   395 _MD0	=	0x00e9
                     00EA   396 _MD1	=	0x00ea
                     00EB   397 _MD2	=	0x00eb
                     00EC   398 _MD3	=	0x00ec
                     00ED   399 _MD4	=	0x00ed
                     00EE   400 _MD5	=	0x00ee
                     00EF   401 _ARCON	=	0x00ef
                     00F0   402 _B	=	0x00f0
                     00F8   403 _FSR	=	0x00f8
                     00F9   404 _FPCR	=	0x00f9
                     00FA   405 _FCR	=	0x00fa
                     00FC   406 _SPIMCON0	=	0x00fc
                     00FD   407 _SPIMCON1	=	0x00fd
                     00FE   408 _SPIMSTAT	=	0x00fe
                     00FF   409 _SPIMDAT	=	0x00ff
                     C3C2   410 _CC1	=	0xc3c2
                     C5C4   411 _CC2	=	0xc5c4
                     C7C6   412 _CC3	=	0xc7c6
                     CBCA   413 _CRC	=	0xcbca
                     8C8A   414 _T0	=	0x8c8a
                     8D8B   415 _T1	=	0x8d8b
                     CDCC   416 _T2	=	0xcdcc
                     BAAA   417 _S0REL	=	0xbaaa
                     D4D5   418 _ADCDAT	=	0xd4d5
                            419 ;--------------------------------------------------------
                            420 ; special function bits
                            421 ;--------------------------------------------------------
                            422 	.area RSEG    (ABS,DATA)
   0000                     423 	.org 0x0000
                     0080   424 _P0_SB_D0	=	0x0080
                     0081   425 _P0_SB_D1	=	0x0081
                     0082   426 _P0_SB_D2	=	0x0082
                     0083   427 _P0_SB_D3	=	0x0083
                     0084   428 _P0_SB_D4	=	0x0084
                     0085   429 _P0_SB_D5	=	0x0085
                     0086   430 _P0_SB_D6	=	0x0086
                     0087   431 _P0_SB_D7	=	0x0087
                     0088   432 _TCON_SB_IT0	=	0x0088
                     0089   433 _TCON_SB_IE0	=	0x0089
                     008A   434 _TCON_SB_IT1	=	0x008a
                     008B   435 _TCON_SB_IE1	=	0x008b
                     008C   436 _TCON_SB_TR0	=	0x008c
                     008D   437 _TCON_SB_TF0	=	0x008d
                     008E   438 _TCON_SB_TR1	=	0x008e
                     008F   439 _TCON_SB_TF1	=	0x008f
                     0090   440 _P1_SB_D0	=	0x0090
                     0091   441 _P1_SB_D1	=	0x0091
                     0092   442 _P1_SB_D2	=	0x0092
                     0093   443 _P1_SB_D3	=	0x0093
                     0094   444 _P1_SB_D4	=	0x0094
                     0095   445 _P1_SB_D5	=	0x0095
                     0096   446 _P1_SB_D6	=	0x0096
                     0097   447 _P1_SB_D7	=	0x0097
                     0098   448 _S0CON_SB_RI0	=	0x0098
                     0099   449 _S0CON_SB_TI0	=	0x0099
                     009A   450 _S0CON_SB_RB80	=	0x009a
                     009B   451 _S0CON_SB_TB80	=	0x009b
                     009C   452 _S0CON_SB_REN0	=	0x009c
                     009D   453 _S0CON_SB_SM20	=	0x009d
                     009E   454 _S0CON_SB_SM1	=	0x009e
                     009F   455 _S0CON_SB_SM0	=	0x009f
                     00A0   456 _P2_SB_D0	=	0x00a0
                     00A1   457 _P2_SB_D1	=	0x00a1
                     00A2   458 _P2_SB_D2	=	0x00a2
                     00A3   459 _P2_SB_D3	=	0x00a3
                     00A4   460 _P2_SB_D4	=	0x00a4
                     00A5   461 _P2_SB_D5	=	0x00a5
                     00A6   462 _P2_SB_D6	=	0x00a6
                     00A7   463 _P2_SB_D7	=	0x00a7
                     00A8   464 _IEN0_SB_IFP	=	0x00a8
                     00A9   465 _IEN0_SB_T0	=	0x00a9
                     00AA   466 _IEN0_SB_POFIRQ	=	0x00aa
                     00AB   467 _IEN0_SB_T1	=	0x00ab
                     00AC   468 _IEN0_SB_UART	=	0x00ac
                     00AD   469 _IEN0_SB_T2	=	0x00ad
                     00AF   470 _IEN0_SB_GLOBAL	=	0x00af
                     00B0   471 _P3_SB_D0	=	0x00b0
                     00B1   472 _P3_SB_D1	=	0x00b1
                     00B2   473 _P3_SB_D2	=	0x00b2
                     00B3   474 _P3_SB_D3	=	0x00b3
                     00B4   475 _P3_SB_D4	=	0x00b4
                     00B5   476 _P3_SB_D5	=	0x00b5
                     00B6   477 _P3_SB_D6	=	0x00b6
                     00B7   478 _P3_SB_D7	=	0x00b7
                     00B8   479 _IEN1_SB_RFRDY	=	0x00b8
                     00B9   480 _IEN1_SB_RFIRQ	=	0x00b9
                     00BA   481 _IEN1_SB_SPI_2WIRE	=	0x00ba
                     00BB   482 _IEN1_SB_WUOPIRQ	=	0x00bb
                     00BC   483 _IEN1_SB_MISCIRQ	=	0x00bc
                     00BD   484 _IEN1_SB_TICK	=	0x00bd
                     00BF   485 _IEN1_SB_T2EXTRLD	=	0x00bf
                     00C0   486 _IRCON_SB_RFRDY	=	0x00c0
                     00C1   487 _IRCON_SB_RFIRQ	=	0x00c1
                     00C2   488 _IRCON_SB_SPI_2WIRE	=	0x00c2
                     00C3   489 _IRCON_SB_WUOPIRQ	=	0x00c3
                     00C4   490 _IRCON_SB_MISCIRQ	=	0x00c4
                     00C5   491 _IRCON_SB_TICK	=	0x00c5
                     00C6   492 _IRCON_SB_TF2	=	0x00c6
                     00C7   493 _IRCON_SB_EXF2	=	0x00c7
                     00C8   494 _T2CON_SB_T2I0	=	0x00c8
                     00C9   495 _T2CON_SB_T2I1	=	0x00c9
                     00CA   496 _T2CON_SB_T2CM	=	0x00ca
                     00CB   497 _T2CON_SB_T2R0	=	0x00cb
                     00CC   498 _T2CON_SB_T2R1	=	0x00cc
                     00CD   499 _T2CON_SB_I2FR	=	0x00cd
                     00CE   500 _T2CON_SB_I3FR	=	0x00ce
                     00CF   501 _T2CON_SB_T2PS	=	0x00cf
                     00D7   502 _PSW_SB_CY	=	0x00d7
                     00D6   503 _PSW_SB_AC	=	0x00d6
                     00D5   504 _PSW_SB_F0	=	0x00d5
                     00D4   505 _PSW_SB_RS1	=	0x00d4
                     00D3   506 _PSW_SB_RS0	=	0x00d3
                     00D2   507 _PSW_SB_OV	=	0x00d2
                     00D1   508 _PSW_SB_F1	=	0x00d1
                     00D0   509 _PSW_SB_P	=	0x00d0
                     00DF   510 _ADCON_SB_BD	=	0x00df
                     00E8   511 _RFCON_SB_RFCE	=	0x00e8
                     00E9   512 _RFCON_SB_RFCSN	=	0x00e9
                     00EA   513 _RFCON_SB_RFCKEN	=	0x00ea
                     00FA   514 _FSR_SB_RDISMB	=	0x00fa
                     00FB   515 _FSR_SB_INFEN	=	0x00fb
                     00FC   516 _FSR_SB_RDYN	=	0x00fc
                     00FD   517 _FSR_SB_WEN	=	0x00fd
                     00FE   518 _FSR_SB_STP	=	0x00fe
                     00FF   519 _FSR_SB_ENDBG	=	0x00ff
                            520 ;--------------------------------------------------------
                            521 ; overlayable register banks
                            522 ;--------------------------------------------------------
                            523 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     524 	.ds 8
                            525 ;--------------------------------------------------------
                            526 ; internal ram data
                            527 ;--------------------------------------------------------
                            528 	.area DSEG    (DATA)
   0000                     529 _rf_spi_send_read_sloc0_1_0:
   0000                     530 	.ds 3
   0003                     531 _rf_spi_send_read_sloc1_1_0:
   0003                     532 	.ds 1
                            533 ;--------------------------------------------------------
                            534 ; overlayable items in internal ram 
                            535 ;--------------------------------------------------------
                            536 ;--------------------------------------------------------
                            537 ; Stack segment in internal ram 
                            538 ;--------------------------------------------------------
                            539 	.area	SSEG	(DATA)
   0000                     540 __start__stack:
   0000                     541 	.ds	1
                            542 
                            543 ;--------------------------------------------------------
                            544 ; indirectly addressable internal ram data
                            545 ;--------------------------------------------------------
                            546 	.area ISEG    (DATA)
                            547 ;--------------------------------------------------------
                            548 ; absolute internal ram data
                            549 ;--------------------------------------------------------
                            550 	.area IABS    (ABS,DATA)
                            551 	.area IABS    (ABS,DATA)
                            552 ;--------------------------------------------------------
                            553 ; bit data
                            554 ;--------------------------------------------------------
                            555 	.area BSEG    (BIT)
                            556 ;--------------------------------------------------------
                            557 ; paged external ram data
                            558 ;--------------------------------------------------------
                            559 	.area PSEG    (PAG,XDATA)
                            560 ;--------------------------------------------------------
                            561 ; external ram data
                            562 ;--------------------------------------------------------
                            563 	.area XSEG    (XDATA)
   0000                     564 _rf_read_rx_payload_PARM_2:
   0000                     565 	.ds 2
   0002                     566 _rf_read_rx_payload_dataptr_1_44:
   0002                     567 	.ds 3
   0005                     568 _rf_configure_debug_lite_PARM_2:
   0005                     569 	.ds 1
   0006                     570 _rf_configure_debug_lite_rx_1_46:
   0006                     571 	.ds 1
   0007                     572 _rf_configure_debug_lite_config_1_47:
   0007                     573 	.ds 1
   0008                     574 _rf_write_register_PARM_2:
   0008                     575 	.ds 3
   000B                     576 _rf_write_register_PARM_3:
   000B                     577 	.ds 2
   000D                     578 _rf_write_register_regnumber_1_49:
   000D                     579 	.ds 1
   000E                     580 _rf_write_tx_payload_PARM_2:
   000E                     581 	.ds 2
   0010                     582 _rf_write_tx_payload_PARM_3:
   0010                     583 	.ds 1
   0011                     584 _rf_write_tx_payload_dataptr_1_52:
   0011                     585 	.ds 3
   0014                     586 _rf_set_as_rx_rx_active_mode_1_56:
   0014                     587 	.ds 1
   0015                     588 _rf_set_as_rx_config_1_57:
   0015                     589 	.ds 1
   0016                     590 _rf_irq_clear_all_dataptr_1_61:
   0016                     591 	.ds 1
   0017                     592 _rf_set_as_tx_config_1_62:
   0017                     593 	.ds 1
   0018                     594 _rf_spi_execute_command_PARM_2:
   0018                     595 	.ds 3
   001B                     596 _rf_spi_execute_command_PARM_3:
   001B                     597 	.ds 2
   001D                     598 _rf_spi_execute_command_PARM_4:
   001D                     599 	.ds 1
   001E                     600 _rf_spi_execute_command_instruction_1_64:
   001E                     601 	.ds 1
   001F                     602 _rf_spi_execute_command_status_1_65:
   001F                     603 	.ds 1
   0020                     604 _rf_spi_send_read_PARM_2:
   0020                     605 	.ds 2
   0022                     606 _rf_spi_send_read_PARM_3:
   0022                     607 	.ds 1
   0023                     608 _rf_spi_send_read_dataptr_1_66:
   0023                     609 	.ds 3
   0026                     610 _rf_power_up_param_PARM_2:
   0026                     611 	.ds 1
   0027                     612 _rf_power_up_param_rx_active_mode_1_70:
   0027                     613 	.ds 1
   0028                     614 _rf_read_register_PARM_2:
   0028                     615 	.ds 3
   002B                     616 _rf_read_register_PARM_3:
   002B                     617 	.ds 2
   002D                     618 _rf_read_register_regnumber_1_76:
   002D                     619 	.ds 1
   002E                     620 _rf_spi_send_read_byte_byte_1_78:
   002E                     621 	.ds 1
   002F                     622 _rf_set_rx_addr_PARM_2:
   002F                     623 	.ds 2
   0031                     624 _rf_set_rx_addr_PARM_3:
   0031                     625 	.ds 1
   0032                     626 _rf_set_rx_addr_address_1_80:
   0032                     627 	.ds 3
   0035                     628 _gpio_pin_configure_PARM_2:
   0035                     629 	.ds 1
   0036                     630 _gpio_pin_configure_gpio_pin_id_1_83:
   0036                     631 	.ds 1
   0037                     632 _gpio_pin_val_read_gpio_pin_id_1_105:
   0037                     633 	.ds 1
   0038                     634 _gpio_pin_val_read_value_1_106:
   0038                     635 	.ds 1
   0039                     636 _gpio_pin_val_clear_gpio_pin_id_1_113:
   0039                     637 	.ds 1
   003A                     638 _gpio_pin_val_set_gpio_pin_id_1_119:
   003A                     639 	.ds 1
   003B                     640 _gpio_pin_val_write_PARM_2:
   003B                     641 	.ds 1
   003C                     642 _gpio_pin_val_write_gpio_pin_id_1_125:
   003C                     643 	.ds 1
   003D                     644 _delay_us_microseconds_1_129:
   003D                     645 	.ds 2
   003F                     646 _delay_s_seconds_1_132:
   003F                     647 	.ds 2
   0041                     648 _delay_ms_milliseconds_1_135:
   0041                     649 	.ds 2
   0043                     650 _pwm_configure_pwm_config_options_1_140:
   0043                     651 	.ds 1
   0044                     652 _pwm_start_PARM_2:
   0044                     653 	.ds 1
   0045                     654 _pwm_start_pwm_channel_1_142:
   0045                     655 	.ds 1
   0046                     656 _pwr_clk_mgmt_clklf_configure_clklf_config_options_1_151:
   0046                     657 	.ds 1
   0047                     658 _pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_153:
   0047                     659 	.ds 4
   004B                     660 _watchdog_set_wdsv_count_wdsv_value_1_156:
   004B                     661 	.ds 2
   004D                     662 _watchdog_start_and_set_timeout_in_ms_milliseconds_1_158:
   004D                     663 	.ds 4
   0051                     664 _watchdog_start_and_set_timeout_in_ms_wd_value_1_159:
   0051                     665 	.ds 2
   0053                     666 _interrupt_configure_ifp_PARM_2:
   0053                     667 	.ds 1
   0054                     668 _interrupt_configure_ifp_interrupt_ifp_input_1_162:
   0054                     669 	.ds 1
   0055                     670 _adc_configure_adc_config_options_1_176:
   0055                     671 	.ds 2
   0057                     672 _adc_set_input_channel_adc_channel_1_178:
   0057                     673 	.ds 1
   0058                     674 _adc_start_single_conversion_adc_channel_1_180:
   0058                     675 	.ds 1
   0059                     676 _adc_start_single_conversion_get_value_adc_channel_1_182:
   0059                     677 	.ds 1
   005A                     678 _timer0_configure_PARM_2:
   005A                     679 	.ds 2
   005C                     680 _timer0_configure_timer0_config_options_1_185:
   005C                     681 	.ds 1
   005D                     682 _timer1_configure_PARM_2:
   005D                     683 	.ds 2
   005F                     684 _timer1_configure_timer1_config_options_1_190:
   005F                     685 	.ds 1
   0060                     686 _main_datavar_1_195:
   0060                     687 	.ds 1
   0061                     688 _putchar_c_1_200:
   0061                     689 	.ds 1
   0062                     690 _getchar_retchar_1_202:
   0062                     691 	.ds 1
                            692 ;--------------------------------------------------------
                            693 ; absolute external ram data
                            694 ;--------------------------------------------------------
                            695 	.area XABS    (ABS,XDATA)
                            696 ;--------------------------------------------------------
                            697 ; external initialized ram data
                            698 ;--------------------------------------------------------
                            699 	.area XISEG   (XDATA)
                            700 	.area HOME    (CODE)
                            701 	.area GSINIT0 (CODE)
                            702 	.area GSINIT1 (CODE)
                            703 	.area GSINIT2 (CODE)
                            704 	.area GSINIT3 (CODE)
                            705 	.area GSINIT4 (CODE)
                            706 	.area GSINIT5 (CODE)
                            707 	.area GSINIT  (CODE)
                            708 	.area GSFINAL (CODE)
                            709 	.area CSEG    (CODE)
                            710 ;--------------------------------------------------------
                            711 ; interrupt vector 
                            712 ;--------------------------------------------------------
                            713 	.area HOME    (CODE)
   0000                     714 __interrupt_vect:
   0000 02r00r00      [24]  715 	ljmp	__sdcc_gsinit_startup
                            716 ;--------------------------------------------------------
                            717 ; global & static initialisations
                            718 ;--------------------------------------------------------
                            719 	.area HOME    (CODE)
                            720 	.area GSINIT  (CODE)
                            721 	.area GSFINAL (CODE)
                            722 	.area GSINIT  (CODE)
                            723 	.globl __sdcc_gsinit_startup
                            724 	.globl __sdcc_program_startup
                            725 	.globl __start__stack
                            726 	.globl __mcs51_genXINIT
                            727 	.globl __mcs51_genXRAMCLEAR
                            728 	.globl __mcs51_genRAMCLEAR
                            729 	.area GSFINAL (CODE)
   0000 02r00r03      [24]  730 	ljmp	__sdcc_program_startup
                            731 ;--------------------------------------------------------
                            732 ; Home
                            733 ;--------------------------------------------------------
                            734 	.area HOME    (CODE)
                            735 	.area HOME    (CODE)
   0003                     736 __sdcc_program_startup:
   0003 02r0ArF9      [24]  737 	ljmp	_main
                            738 ;	return from main will return to caller
                            739 ;--------------------------------------------------------
                            740 ; code
                            741 ;--------------------------------------------------------
                            742 	.area CSEG    (CODE)
                            743 ;------------------------------------------------------------
                            744 ;Allocation info for local variables in function 'rf_read_rx_payload'
                            745 ;------------------------------------------------------------
                            746 ;len                       Allocated with name '_rf_read_rx_payload_PARM_2'
                            747 ;dataptr                   Allocated with name '_rf_read_rx_payload_dataptr_1_44'
                            748 ;status                    Allocated with name '_rf_read_rx_payload_status_1_45'
                            749 ;------------------------------------------------------------
                            750 ;	../src/rf/src/rf_read_rx_payload.c:48: unsigned char rf_read_rx_payload(unsigned char * dataptr, unsigned int len)
                            751 ;	-----------------------------------------
                            752 ;	 function rf_read_rx_payload
                            753 ;	-----------------------------------------
   0000                     754 _rf_read_rx_payload:
                     0007   755 	ar7 = 0x07
                     0006   756 	ar6 = 0x06
                     0005   757 	ar5 = 0x05
                     0004   758 	ar4 = 0x04
                     0003   759 	ar3 = 0x03
                     0002   760 	ar2 = 0x02
                     0001   761 	ar1 = 0x01
                     0000   762 	ar0 = 0x00
   0000 AF F0         [24]  763 	mov	r7,b
   0002 AE 83         [24]  764 	mov	r6,dph
   0004 E5 82         [12]  765 	mov	a,dpl
   0006 90r00r02      [24]  766 	mov	dptr,#_rf_read_rx_payload_dataptr_1_44
   0009 F0            [24]  767 	movx	@dptr,a
   000A EE            [12]  768 	mov	a,r6
   000B A3            [24]  769 	inc	dptr
   000C F0            [24]  770 	movx	@dptr,a
   000D EF            [12]  771 	mov	a,r7
   000E A3            [24]  772 	inc	dptr
   000F F0            [24]  773 	movx	@dptr,a
                            774 ;	../src/rf/src/rf_read_rx_payload.c:53: rf_clear_ce();
   0010 C2 E8         [12]  775 	clr _RFCON_SB_RFCE 
                            776 ;	../src/rf/src/rf_read_rx_payload.c:54: status = rf_spi_execute_command(RF_R_RX_PAYLOAD, dataptr, len, true);
   0012 90r00r02      [24]  777 	mov	dptr,#_rf_read_rx_payload_dataptr_1_44
   0015 E0            [24]  778 	movx	a,@dptr
   0016 FD            [12]  779 	mov	r5,a
   0017 A3            [24]  780 	inc	dptr
   0018 E0            [24]  781 	movx	a,@dptr
   0019 FE            [12]  782 	mov	r6,a
   001A A3            [24]  783 	inc	dptr
   001B E0            [24]  784 	movx	a,@dptr
   001C FF            [12]  785 	mov	r7,a
   001D 90r00r00      [24]  786 	mov	dptr,#_rf_read_rx_payload_PARM_2
   0020 E0            [24]  787 	movx	a,@dptr
   0021 FB            [12]  788 	mov	r3,a
   0022 A3            [24]  789 	inc	dptr
   0023 E0            [24]  790 	movx	a,@dptr
   0024 FC            [12]  791 	mov	r4,a
   0025 90r00r18      [24]  792 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0028 ED            [12]  793 	mov	a,r5
   0029 F0            [24]  794 	movx	@dptr,a
   002A EE            [12]  795 	mov	a,r6
   002B A3            [24]  796 	inc	dptr
   002C F0            [24]  797 	movx	@dptr,a
   002D EF            [12]  798 	mov	a,r7
   002E A3            [24]  799 	inc	dptr
   002F F0            [24]  800 	movx	@dptr,a
   0030 90r00r1B      [24]  801 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0033 EB            [12]  802 	mov	a,r3
   0034 F0            [24]  803 	movx	@dptr,a
   0035 EC            [12]  804 	mov	a,r4
   0036 A3            [24]  805 	inc	dptr
   0037 F0            [24]  806 	movx	@dptr,a
   0038 90r00r1D      [24]  807 	mov	dptr,#_rf_spi_execute_command_PARM_4
   003B 74 01         [12]  808 	mov	a,#0x01
   003D F0            [24]  809 	movx	@dptr,a
   003E 75 82 61      [24]  810 	mov	dpl,#0x61
   0041 12r02r35      [24]  811 	lcall	_rf_spi_execute_command
   0044 AF 82         [24]  812 	mov	r7,dpl
                            813 ;	../src/rf/src/rf_read_rx_payload.c:55: rf_set_ce();
   0046 D2 E8         [12]  814 	setb _RFCON_SB_RFCE 
   0048 90 00 04      [24]  815 	mov	dptr,#0x0004
   004B C0 07         [24]  816 	push	ar7
   004D 12r07r87      [24]  817 	lcall	_delay_us
   0050 D0 07         [24]  818 	pop	ar7
                            819 ;	../src/rf/src/rf_read_rx_payload.c:57: return status; //Return the STATUS register value
   0052 8F 82         [24]  820 	mov	dpl,r7
   0054 22            [24]  821 	ret
                            822 ;------------------------------------------------------------
                            823 ;Allocation info for local variables in function 'rf_configure_debug_lite'
                            824 ;------------------------------------------------------------
                            825 ;p0_payload_width          Allocated with name '_rf_configure_debug_lite_PARM_2'
                            826 ;rx                        Allocated with name '_rf_configure_debug_lite_rx_1_46'
                            827 ;config                    Allocated with name '_rf_configure_debug_lite_config_1_47'
                            828 ;------------------------------------------------------------
                            829 ;	../src/rf/src/rf_configure_debug_lite.c:48: void rf_configure_debug_lite(bool rx, unsigned char p0_payload_width)
                            830 ;	-----------------------------------------
                            831 ;	 function rf_configure_debug_lite
                            832 ;	-----------------------------------------
   0055                     833 _rf_configure_debug_lite:
   0055 E5 82         [12]  834 	mov	a,dpl
   0057 90r00r06      [24]  835 	mov	dptr,#_rf_configure_debug_lite_rx_1_46
   005A F0            [24]  836 	movx	@dptr,a
                            837 ;	../src/rf/src/rf_configure_debug_lite.c:52: rf_spi_configure_enable(); //Enable RF SPI
   005B 12r00rF9      [24]  838 	lcall	_rf_spi_configure_enable
                            839 ;	../src/rf/src/rf_configure_debug_lite.c:55: config = 0;
   005E 90r00r07      [24]  840 	mov	dptr,#_rf_configure_debug_lite_config_1_47
   0061 E4            [12]  841 	clr	a
   0062 F0            [24]  842 	movx	@dptr,a
                            843 ;	../src/rf/src/rf_configure_debug_lite.c:56: rf_write_register(RF_EN_AA, &config, 1); //Turn auto-acknowledge off
   0063 90r00r08      [24]  844 	mov	dptr,#_rf_write_register_PARM_2
   0066 74r07         [12]  845 	mov	a,#_rf_configure_debug_lite_config_1_47
   0068 F0            [24]  846 	movx	@dptr,a
   0069 74s00         [12]  847 	mov	a,#(_rf_configure_debug_lite_config_1_47 >> 8)
   006B A3            [24]  848 	inc	dptr
   006C F0            [24]  849 	movx	@dptr,a
   006D E4            [12]  850 	clr	a
   006E A3            [24]  851 	inc	dptr
   006F F0            [24]  852 	movx	@dptr,a
   0070 90r00r0B      [24]  853 	mov	dptr,#_rf_write_register_PARM_3
   0073 74 01         [12]  854 	mov	a,#0x01
   0075 F0            [24]  855 	movx	@dptr,a
   0076 E4            [12]  856 	clr	a
   0077 A3            [24]  857 	inc	dptr
   0078 F0            [24]  858 	movx	@dptr,a
   0079 75 82 01      [24]  859 	mov	dpl,#0x01
   007C 12r00rBC      [24]  860 	lcall	_rf_write_register
                            861 ;	../src/rf/src/rf_configure_debug_lite.c:59: config = RF_CONFIG_DEFAULT_VAL; //Set config to the default value of the CONFIG register
   007F 90r00r07      [24]  862 	mov	dptr,#_rf_configure_debug_lite_config_1_47
   0082 74 08         [12]  863 	mov	a,#0x08
   0084 F0            [24]  864 	movx	@dptr,a
                            865 ;	../src/rf/src/rf_configure_debug_lite.c:62: rf_write_register(RF_RX_PW_P0, &p0_payload_width, 1);
   0085 90r00r08      [24]  866 	mov	dptr,#_rf_write_register_PARM_2
   0088 74r05         [12]  867 	mov	a,#_rf_configure_debug_lite_PARM_2
   008A F0            [24]  868 	movx	@dptr,a
   008B 74s00         [12]  869 	mov	a,#(_rf_configure_debug_lite_PARM_2 >> 8)
   008D A3            [24]  870 	inc	dptr
   008E F0            [24]  871 	movx	@dptr,a
   008F E4            [12]  872 	clr	a
   0090 A3            [24]  873 	inc	dptr
   0091 F0            [24]  874 	movx	@dptr,a
   0092 90r00r0B      [24]  875 	mov	dptr,#_rf_write_register_PARM_3
   0095 74 01         [12]  876 	mov	a,#0x01
   0097 F0            [24]  877 	movx	@dptr,a
   0098 E4            [12]  878 	clr	a
   0099 A3            [24]  879 	inc	dptr
   009A F0            [24]  880 	movx	@dptr,a
   009B 75 82 11      [24]  881 	mov	dpl,#0x11
   009E 12r00rBC      [24]  882 	lcall	_rf_write_register
                            883 ;	../src/rf/src/rf_configure_debug_lite.c:65: if(rx != false)
   00A1 90r00r06      [24]  884 	mov	dptr,#_rf_configure_debug_lite_rx_1_46
   00A4 E0            [24]  885 	movx	a,@dptr
   00A5 FF            [12]  886 	mov	r7,a
   00A6 60 06         [24]  887 	jz	00102$
                            888 ;	../src/rf/src/rf_configure_debug_lite.c:67: config |= RF_CONFIG_PRIM_RX;
   00A8 90r00r07      [24]  889 	mov	dptr,#_rf_configure_debug_lite_config_1_47
   00AB 74 09         [12]  890 	mov	a,#0x09
   00AD F0            [24]  891 	movx	@dptr,a
   00AE                     892 00102$:
                            893 ;	../src/rf/src/rf_configure_debug_lite.c:70: rf_power_up_param(true, config);
   00AE 90r00r07      [24]  894 	mov	dptr,#_rf_configure_debug_lite_config_1_47
   00B1 E0            [24]  895 	movx	a,@dptr
   00B2 90r00r26      [24]  896 	mov	dptr,#_rf_power_up_param_PARM_2
   00B5 F0            [24]  897 	movx	@dptr,a
   00B6 75 82 01      [24]  898 	mov	dpl,#0x01
   00B9 02r03r24      [24]  899 	ljmp	_rf_power_up_param
                            900 ;------------------------------------------------------------
                            901 ;Allocation info for local variables in function 'rf_write_register'
                            902 ;------------------------------------------------------------
                            903 ;dataptr                   Allocated with name '_rf_write_register_PARM_2'
                            904 ;len                       Allocated with name '_rf_write_register_PARM_3'
                            905 ;regnumber                 Allocated with name '_rf_write_register_regnumber_1_49'
                            906 ;------------------------------------------------------------
                            907 ;	../src/rf/src/rf_write_register.c:49: unsigned char rf_write_register(unsigned char regnumber, unsigned char * dataptr, unsigned int len)
                            908 ;	-----------------------------------------
                            909 ;	 function rf_write_register
                            910 ;	-----------------------------------------
   00BC                     911 _rf_write_register:
   00BC E5 82         [12]  912 	mov	a,dpl
                            913 ;	../src/rf/src/rf_write_register.c:52: return rf_spi_execute_command(RF_W_REGISTER | (regnumber & RF_W_REGISTER_DATA), dataptr, len, false);
   00BE 90r00r0D      [24]  914 	mov	dptr,#_rf_write_register_regnumber_1_49
   00C1 F0            [24]  915 	movx	@dptr,a
   00C2 FF            [12]  916 	mov	r7,a
   00C3 74 1F         [12]  917 	mov	a,#0x1F
   00C5 5F            [12]  918 	anl	a,r7
   00C6 44 20         [12]  919 	orl	a,#0x20
   00C8 FF            [12]  920 	mov	r7,a
   00C9 90r00r08      [24]  921 	mov	dptr,#_rf_write_register_PARM_2
   00CC E0            [24]  922 	movx	a,@dptr
   00CD FC            [12]  923 	mov	r4,a
   00CE A3            [24]  924 	inc	dptr
   00CF E0            [24]  925 	movx	a,@dptr
   00D0 FD            [12]  926 	mov	r5,a
   00D1 A3            [24]  927 	inc	dptr
   00D2 E0            [24]  928 	movx	a,@dptr
   00D3 FE            [12]  929 	mov	r6,a
   00D4 90r00r0B      [24]  930 	mov	dptr,#_rf_write_register_PARM_3
   00D7 E0            [24]  931 	movx	a,@dptr
   00D8 FA            [12]  932 	mov	r2,a
   00D9 A3            [24]  933 	inc	dptr
   00DA E0            [24]  934 	movx	a,@dptr
   00DB FB            [12]  935 	mov	r3,a
   00DC 90r00r18      [24]  936 	mov	dptr,#_rf_spi_execute_command_PARM_2
   00DF EC            [12]  937 	mov	a,r4
   00E0 F0            [24]  938 	movx	@dptr,a
   00E1 ED            [12]  939 	mov	a,r5
   00E2 A3            [24]  940 	inc	dptr
   00E3 F0            [24]  941 	movx	@dptr,a
   00E4 EE            [12]  942 	mov	a,r6
   00E5 A3            [24]  943 	inc	dptr
   00E6 F0            [24]  944 	movx	@dptr,a
   00E7 90r00r1B      [24]  945 	mov	dptr,#_rf_spi_execute_command_PARM_3
   00EA EA            [12]  946 	mov	a,r2
   00EB F0            [24]  947 	movx	@dptr,a
   00EC EB            [12]  948 	mov	a,r3
   00ED A3            [24]  949 	inc	dptr
   00EE F0            [24]  950 	movx	@dptr,a
   00EF 90r00r1D      [24]  951 	mov	dptr,#_rf_spi_execute_command_PARM_4
   00F2 E4            [12]  952 	clr	a
   00F3 F0            [24]  953 	movx	@dptr,a
   00F4 8F 82         [24]  954 	mov	dpl,r7
   00F6 02r02r35      [24]  955 	ljmp	_rf_spi_execute_command
                            956 ;------------------------------------------------------------
                            957 ;Allocation info for local variables in function 'rf_spi_configure_enable'
                            958 ;------------------------------------------------------------
                            959 ;	../src/rf/src/rf_spi_configure_enable.c:47: void rf_spi_configure_enable()
                            960 ;	-----------------------------------------
                            961 ;	 function rf_spi_configure_enable
                            962 ;	-----------------------------------------
   00F9                     963 _rf_spi_configure_enable:
                            964 ;	../src/rf/src/rf_spi_configure_enable.c:50: RFCON = 0x02;
   00F9 75 E8 02      [24]  965 	mov	_RFCON,#0x02
                            966 ;	../src/rf/src/rf_spi_configure_enable.c:51: RFCON = RFCON_RFCKEN;
   00FC 75 E8 04      [24]  967 	mov	_RFCON,#0x04
   00FF 22            [24]  968 	ret
                            969 ;------------------------------------------------------------
                            970 ;Allocation info for local variables in function 'rf_write_tx_payload'
                            971 ;------------------------------------------------------------
                            972 ;len                       Allocated with name '_rf_write_tx_payload_PARM_2'
                            973 ;transmit                  Allocated with name '_rf_write_tx_payload_PARM_3'
                            974 ;dataptr                   Allocated with name '_rf_write_tx_payload_dataptr_1_52'
                            975 ;status                    Allocated with name '_rf_write_tx_payload_status_1_53'
                            976 ;------------------------------------------------------------
                            977 ;	../src/rf/src/rf_write_tx_payload.c:49: unsigned char rf_write_tx_payload(unsigned char * dataptr, unsigned int len, bool transmit)
                            978 ;	-----------------------------------------
                            979 ;	 function rf_write_tx_payload
                            980 ;	-----------------------------------------
   0100                     981 _rf_write_tx_payload:
   0100 AF F0         [24]  982 	mov	r7,b
   0102 AE 83         [24]  983 	mov	r6,dph
   0104 E5 82         [12]  984 	mov	a,dpl
   0106 90r00r11      [24]  985 	mov	dptr,#_rf_write_tx_payload_dataptr_1_52
   0109 F0            [24]  986 	movx	@dptr,a
   010A EE            [12]  987 	mov	a,r6
   010B A3            [24]  988 	inc	dptr
   010C F0            [24]  989 	movx	@dptr,a
   010D EF            [12]  990 	mov	a,r7
   010E A3            [24]  991 	inc	dptr
   010F F0            [24]  992 	movx	@dptr,a
                            993 ;	../src/rf/src/rf_write_tx_payload.c:53: status = rf_spi_execute_command(RF_W_TX_PAYLOAD, dataptr, len, false); //Write the payload
   0110 90r00r11      [24]  994 	mov	dptr,#_rf_write_tx_payload_dataptr_1_52
   0113 E0            [24]  995 	movx	a,@dptr
   0114 FD            [12]  996 	mov	r5,a
   0115 A3            [24]  997 	inc	dptr
   0116 E0            [24]  998 	movx	a,@dptr
   0117 FE            [12]  999 	mov	r6,a
   0118 A3            [24] 1000 	inc	dptr
   0119 E0            [24] 1001 	movx	a,@dptr
   011A FF            [12] 1002 	mov	r7,a
   011B 90r00r0E      [24] 1003 	mov	dptr,#_rf_write_tx_payload_PARM_2
   011E E0            [24] 1004 	movx	a,@dptr
   011F FB            [12] 1005 	mov	r3,a
   0120 A3            [24] 1006 	inc	dptr
   0121 E0            [24] 1007 	movx	a,@dptr
   0122 FC            [12] 1008 	mov	r4,a
   0123 90r00r18      [24] 1009 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0126 ED            [12] 1010 	mov	a,r5
   0127 F0            [24] 1011 	movx	@dptr,a
   0128 EE            [12] 1012 	mov	a,r6
   0129 A3            [24] 1013 	inc	dptr
   012A F0            [24] 1014 	movx	@dptr,a
   012B EF            [12] 1015 	mov	a,r7
   012C A3            [24] 1016 	inc	dptr
   012D F0            [24] 1017 	movx	@dptr,a
   012E 90r00r1B      [24] 1018 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0131 EB            [12] 1019 	mov	a,r3
   0132 F0            [24] 1020 	movx	@dptr,a
   0133 EC            [12] 1021 	mov	a,r4
   0134 A3            [24] 1022 	inc	dptr
   0135 F0            [24] 1023 	movx	@dptr,a
   0136 90r00r1D      [24] 1024 	mov	dptr,#_rf_spi_execute_command_PARM_4
   0139 E4            [12] 1025 	clr	a
   013A F0            [24] 1026 	movx	@dptr,a
   013B 75 82 A0      [24] 1027 	mov	dpl,#0xA0
   013E 12r02r35      [24] 1028 	lcall	_rf_spi_execute_command
   0141 AF 82         [24] 1029 	mov	r7,dpl
                           1030 ;	../src/rf/src/rf_write_tx_payload.c:56: if(transmit == true)
   0143 90r00r10      [24] 1031 	mov	dptr,#_rf_write_tx_payload_PARM_3
   0146 E0            [24] 1032 	movx	a,@dptr
   0147 FE            [12] 1033 	mov	r6,a
   0148 BE 01 07      [24] 1034 	cjne	r6,#0x01,00102$
                           1035 ;	../src/rf/src/rf_write_tx_payload.c:58: rf_transmit();
   014B C0 07         [24] 1036 	push	ar7
   014D 12r01r55      [24] 1037 	lcall	_rf_transmit
   0150 D0 07         [24] 1038 	pop	ar7
   0152                    1039 00102$:
                           1040 ;	../src/rf/src/rf_write_tx_payload.c:61: return status; //Return the value of STATUS
   0152 8F 82         [24] 1041 	mov	dpl,r7
   0154 22            [24] 1042 	ret
                           1043 ;------------------------------------------------------------
                           1044 ;Allocation info for local variables in function 'rf_transmit'
                           1045 ;------------------------------------------------------------
                           1046 ;	../src/rf/src/rf_transmit.c:47: void rf_transmit()
                           1047 ;	-----------------------------------------
                           1048 ;	 function rf_transmit
                           1049 ;	-----------------------------------------
   0155                    1050 _rf_transmit:
                           1051 ;	../src/rf/src/rf_transmit.c:50: rf_set_ce();
   0155 D2 E8         [12] 1052 	setb _RFCON_SB_RFCE 
   0157 90 00 04      [24] 1053 	mov	dptr,#0x0004
   015A 12r07r87      [24] 1054 	lcall	_delay_us
                           1055 ;	../src/rf/src/rf_transmit.c:51: delay_us(10);
   015D 90 00 0A      [24] 1056 	mov	dptr,#0x000A
   0160 12r07r87      [24] 1057 	lcall	_delay_us
                           1058 ;	../src/rf/src/rf_transmit.c:52: rf_clear_ce();
   0163 C2 E8         [12] 1059 	clr _RFCON_SB_RFCE 
   0165 22            [24] 1060 	ret
                           1061 ;------------------------------------------------------------
                           1062 ;Allocation info for local variables in function 'rf_set_as_rx'
                           1063 ;------------------------------------------------------------
                           1064 ;rx_active_mode            Allocated with name '_rf_set_as_rx_rx_active_mode_1_56'
                           1065 ;config                    Allocated with name '_rf_set_as_rx_config_1_57'
                           1066 ;------------------------------------------------------------
                           1067 ;	../src/rf/src/rf_set_as_rx.c:47: void rf_set_as_rx(bool rx_active_mode)
                           1068 ;	-----------------------------------------
                           1069 ;	 function rf_set_as_rx
                           1070 ;	-----------------------------------------
   0166                    1071 _rf_set_as_rx:
   0166 E5 82         [12] 1072 	mov	a,dpl
   0168 90r00r14      [24] 1073 	mov	dptr,#_rf_set_as_rx_rx_active_mode_1_56
   016B F0            [24] 1074 	movx	@dptr,a
                           1075 ;	../src/rf/src/rf_set_as_rx.c:51: rf_read_register(RF_CONFIG, &config, 1); //Read the current CONFIG value
   016C 90r00r28      [24] 1076 	mov	dptr,#_rf_read_register_PARM_2
   016F 74r15         [12] 1077 	mov	a,#_rf_set_as_rx_config_1_57
   0171 F0            [24] 1078 	movx	@dptr,a
   0172 74s00         [12] 1079 	mov	a,#(_rf_set_as_rx_config_1_57 >> 8)
   0174 A3            [24] 1080 	inc	dptr
   0175 F0            [24] 1081 	movx	@dptr,a
   0176 E4            [12] 1082 	clr	a
   0177 A3            [24] 1083 	inc	dptr
   0178 F0            [24] 1084 	movx	@dptr,a
   0179 90r00r2B      [24] 1085 	mov	dptr,#_rf_read_register_PARM_3
   017C 74 01         [12] 1086 	mov	a,#0x01
   017E F0            [24] 1087 	movx	@dptr,a
   017F E4            [12] 1088 	clr	a
   0180 A3            [24] 1089 	inc	dptr
   0181 F0            [24] 1090 	movx	@dptr,a
   0182 75 82 00      [24] 1091 	mov	dpl,#0x00
   0185 12r03r70      [24] 1092 	lcall	_rf_read_register
                           1093 ;	../src/rf/src/rf_set_as_rx.c:54: if((config & RF_CONFIG_PRIM_RX) != 0)
   0188 90r00r15      [24] 1094 	mov	dptr,#_rf_set_as_rx_config_1_57
   018B E0            [24] 1095 	movx	a,@dptr
   018C FF            [12] 1096 	mov	r7,a
   018D 30 E0 01      [24] 1097 	jnb	acc.0,00102$
                           1098 ;	../src/rf/src/rf_set_as_rx.c:56: return;
   0190 22            [24] 1099 	ret
   0191                    1100 00102$:
                           1101 ;	../src/rf/src/rf_set_as_rx.c:60: config |= RF_CONFIG_PRIM_RX;
   0191 90r00r15      [24] 1102 	mov	dptr,#_rf_set_as_rx_config_1_57
   0194 74 01         [12] 1103 	mov	a,#0x01
   0196 4F            [12] 1104 	orl	a,r7
   0197 F0            [24] 1105 	movx	@dptr,a
                           1106 ;	../src/rf/src/rf_set_as_rx.c:61: rf_write_register(RF_CONFIG, &config, 1);
   0198 90r00r08      [24] 1107 	mov	dptr,#_rf_write_register_PARM_2
   019B 74r15         [12] 1108 	mov	a,#_rf_set_as_rx_config_1_57
   019D F0            [24] 1109 	movx	@dptr,a
   019E 74s00         [12] 1110 	mov	a,#(_rf_set_as_rx_config_1_57 >> 8)
   01A0 A3            [24] 1111 	inc	dptr
   01A1 F0            [24] 1112 	movx	@dptr,a
   01A2 E4            [12] 1113 	clr	a
   01A3 A3            [24] 1114 	inc	dptr
   01A4 F0            [24] 1115 	movx	@dptr,a
   01A5 90r00r0B      [24] 1116 	mov	dptr,#_rf_write_register_PARM_3
   01A8 74 01         [12] 1117 	mov	a,#0x01
   01AA F0            [24] 1118 	movx	@dptr,a
   01AB E4            [12] 1119 	clr	a
   01AC A3            [24] 1120 	inc	dptr
   01AD F0            [24] 1121 	movx	@dptr,a
   01AE 75 82 00      [24] 1122 	mov	dpl,#0x00
   01B1 12r00rBC      [24] 1123 	lcall	_rf_write_register
                           1124 ;	../src/rf/src/rf_set_as_rx.c:64: if(rx_active_mode != false)
   01B4 90r00r14      [24] 1125 	mov	dptr,#_rf_set_as_rx_rx_active_mode_1_56
   01B7 E0            [24] 1126 	movx	a,@dptr
   01B8 FF            [12] 1127 	mov	r7,a
   01B9 60 08         [24] 1128 	jz	00104$
                           1129 ;	../src/rf/src/rf_set_as_rx.c:66: rf_set_ce();
   01BB D2 E8         [12] 1130 	setb _RFCON_SB_RFCE 
   01BD 90 00 04      [24] 1131 	mov	dptr,#0x0004
   01C0 02r07r87      [24] 1132 	ljmp	_delay_us
   01C3                    1133 00104$:
                           1134 ;	../src/rf/src/rf_set_as_rx.c:70: rf_clear_ce();
   01C3 C2 E8         [12] 1135 	clr _RFCON_SB_RFCE 
   01C5 22            [24] 1136 	ret
                           1137 ;------------------------------------------------------------
                           1138 ;Allocation info for local variables in function 'rf_irq_clear_all'
                           1139 ;------------------------------------------------------------
                           1140 ;dataptr                   Allocated with name '_rf_irq_clear_all_dataptr_1_61'
                           1141 ;------------------------------------------------------------
                           1142 ;	../src/rf/src/rf_irq_clear_all.c:47: void rf_irq_clear_all()
                           1143 ;	-----------------------------------------
                           1144 ;	 function rf_irq_clear_all
                           1145 ;	-----------------------------------------
   01C6                    1146 _rf_irq_clear_all:
                           1147 ;	../src/rf/src/rf_irq_clear_all.c:50: unsigned char dataptr = RF_STATUS_RX_DR | RF_STATUS_TX_DS | RF_STATUS_MAX_RT;
   01C6 90r00r16      [24] 1148 	mov	dptr,#_rf_irq_clear_all_dataptr_1_61
   01C9 74 70         [12] 1149 	mov	a,#0x70
   01CB F0            [24] 1150 	movx	@dptr,a
                           1151 ;	../src/rf/src/rf_irq_clear_all.c:52: rf_write_register(RF_STATUS, &dataptr, 1);
   01CC 90r00r08      [24] 1152 	mov	dptr,#_rf_write_register_PARM_2
   01CF 74r16         [12] 1153 	mov	a,#_rf_irq_clear_all_dataptr_1_61
   01D1 F0            [24] 1154 	movx	@dptr,a
   01D2 74s00         [12] 1155 	mov	a,#(_rf_irq_clear_all_dataptr_1_61 >> 8)
   01D4 A3            [24] 1156 	inc	dptr
   01D5 F0            [24] 1157 	movx	@dptr,a
   01D6 E4            [12] 1158 	clr	a
   01D7 A3            [24] 1159 	inc	dptr
   01D8 F0            [24] 1160 	movx	@dptr,a
   01D9 90r00r0B      [24] 1161 	mov	dptr,#_rf_write_register_PARM_3
   01DC 74 01         [12] 1162 	mov	a,#0x01
   01DE F0            [24] 1163 	movx	@dptr,a
   01DF E4            [12] 1164 	clr	a
   01E0 A3            [24] 1165 	inc	dptr
   01E1 F0            [24] 1166 	movx	@dptr,a
   01E2 75 82 07      [24] 1167 	mov	dpl,#0x07
   01E5 12r00rBC      [24] 1168 	lcall	_rf_write_register
                           1169 ;	../src/rf/src/rf_irq_clear_all.c:54: sbit_clear(IRCON_SB_RFIRQ); //Clear the master interrupt
   01E8 C2 C1         [12] 1170 	clr _IRCON_SB_RFIRQ 
   01EA 22            [24] 1171 	ret
                           1172 ;------------------------------------------------------------
                           1173 ;Allocation info for local variables in function 'rf_set_as_tx'
                           1174 ;------------------------------------------------------------
                           1175 ;config                    Allocated with name '_rf_set_as_tx_config_1_62'
                           1176 ;------------------------------------------------------------
                           1177 ;	../src/rf/src/rf_set_as_tx.c:47: void rf_set_as_tx()
                           1178 ;	-----------------------------------------
                           1179 ;	 function rf_set_as_tx
                           1180 ;	-----------------------------------------
   01EB                    1181 _rf_set_as_tx:
                           1182 ;	../src/rf/src/rf_set_as_tx.c:51: rf_read_register(RF_CONFIG, &config, 1); //Read the current CONFIG value
   01EB 90r00r28      [24] 1183 	mov	dptr,#_rf_read_register_PARM_2
   01EE 74r17         [12] 1184 	mov	a,#_rf_set_as_tx_config_1_62
   01F0 F0            [24] 1185 	movx	@dptr,a
   01F1 74s00         [12] 1186 	mov	a,#(_rf_set_as_tx_config_1_62 >> 8)
   01F3 A3            [24] 1187 	inc	dptr
   01F4 F0            [24] 1188 	movx	@dptr,a
   01F5 E4            [12] 1189 	clr	a
   01F6 A3            [24] 1190 	inc	dptr
   01F7 F0            [24] 1191 	movx	@dptr,a
   01F8 90r00r2B      [24] 1192 	mov	dptr,#_rf_read_register_PARM_3
   01FB 74 01         [12] 1193 	mov	a,#0x01
   01FD F0            [24] 1194 	movx	@dptr,a
   01FE E4            [12] 1195 	clr	a
   01FF A3            [24] 1196 	inc	dptr
   0200 F0            [24] 1197 	movx	@dptr,a
   0201 75 82 00      [24] 1198 	mov	dpl,#0x00
   0204 12r03r70      [24] 1199 	lcall	_rf_read_register
                           1200 ;	../src/rf/src/rf_set_as_tx.c:54: if((config & RF_CONFIG_PRIM_RX) == 0)
   0207 90r00r17      [24] 1201 	mov	dptr,#_rf_set_as_tx_config_1_62
   020A E0            [24] 1202 	movx	a,@dptr
   020B FF            [12] 1203 	mov	r7,a
   020C 20 E0 01      [24] 1204 	jb	acc.0,00102$
                           1205 ;	../src/rf/src/rf_set_as_tx.c:56: return;
   020F 22            [24] 1206 	ret
   0210                    1207 00102$:
                           1208 ;	../src/rf/src/rf_set_as_tx.c:59: rf_clear_ce(); //Clear the CE pin
   0210 C2 E8         [12] 1209 	clr _RFCON_SB_RFCE 
                           1210 ;	../src/rf/src/rf_set_as_tx.c:62: config &= (~RF_CONFIG_PRIM_RX);
   0212 90r00r17      [24] 1211 	mov	dptr,#_rf_set_as_tx_config_1_62
   0215 74 FE         [12] 1212 	mov	a,#0xFE
   0217 5F            [12] 1213 	anl	a,r7
   0218 F0            [24] 1214 	movx	@dptr,a
                           1215 ;	../src/rf/src/rf_set_as_tx.c:63: rf_write_register(RF_CONFIG, &config, 1);
   0219 90r00r08      [24] 1216 	mov	dptr,#_rf_write_register_PARM_2
   021C 74r17         [12] 1217 	mov	a,#_rf_set_as_tx_config_1_62
   021E F0            [24] 1218 	movx	@dptr,a
   021F 74s00         [12] 1219 	mov	a,#(_rf_set_as_tx_config_1_62 >> 8)
   0221 A3            [24] 1220 	inc	dptr
   0222 F0            [24] 1221 	movx	@dptr,a
   0223 E4            [12] 1222 	clr	a
   0224 A3            [24] 1223 	inc	dptr
   0225 F0            [24] 1224 	movx	@dptr,a
   0226 90r00r0B      [24] 1225 	mov	dptr,#_rf_write_register_PARM_3
   0229 74 01         [12] 1226 	mov	a,#0x01
   022B F0            [24] 1227 	movx	@dptr,a
   022C E4            [12] 1228 	clr	a
   022D A3            [24] 1229 	inc	dptr
   022E F0            [24] 1230 	movx	@dptr,a
   022F 75 82 00      [24] 1231 	mov	dpl,#0x00
   0232 02r00rBC      [24] 1232 	ljmp	_rf_write_register
                           1233 ;------------------------------------------------------------
                           1234 ;Allocation info for local variables in function 'rf_spi_execute_command'
                           1235 ;------------------------------------------------------------
                           1236 ;dataptr                   Allocated with name '_rf_spi_execute_command_PARM_2'
                           1237 ;len                       Allocated with name '_rf_spi_execute_command_PARM_3'
                           1238 ;copydata                  Allocated with name '_rf_spi_execute_command_PARM_4'
                           1239 ;instruction               Allocated with name '_rf_spi_execute_command_instruction_1_64'
                           1240 ;status                    Allocated with name '_rf_spi_execute_command_status_1_65'
                           1241 ;------------------------------------------------------------
                           1242 ;	../src/rf/src/rf_spi_execute_command.c:50: unsigned char rf_spi_execute_command(unsigned char instruction, unsigned char * dataptr, unsigned int len, bool copydata)
                           1243 ;	-----------------------------------------
                           1244 ;	 function rf_spi_execute_command
                           1245 ;	-----------------------------------------
   0235                    1246 _rf_spi_execute_command:
   0235 E5 82         [12] 1247 	mov	a,dpl
                           1248 ;	../src/rf/src/rf_spi_execute_command.c:52: unsigned char status = instruction; //status writes the instruction, then reads the current STATUS value
   0237 90r00r1E      [24] 1249 	mov	dptr,#_rf_spi_execute_command_instruction_1_64
   023A F0            [24] 1250 	movx	@dptr,a
   023B FF            [12] 1251 	mov	r7,a
   023C 90r00r1F      [24] 1252 	mov	dptr,#_rf_spi_execute_command_status_1_65
   023F F0            [24] 1253 	movx	@dptr,a
                           1254 ;	../src/rf/src/rf_spi_execute_command.c:54: rf_clear_csn(); //Clear CSN to start the transaction
   0240 C2 E9         [12] 1255 	clr _RFCON_SB_RFCSN 
                           1256 ;	../src/rf/src/rf_spi_execute_command.c:57: rf_spi_send_read(&status, 1, true);
   0242 90r00r20      [24] 1257 	mov	dptr,#_rf_spi_send_read_PARM_2
   0245 74 01         [12] 1258 	mov	a,#0x01
   0247 F0            [24] 1259 	movx	@dptr,a
   0248 E4            [12] 1260 	clr	a
   0249 A3            [24] 1261 	inc	dptr
   024A F0            [24] 1262 	movx	@dptr,a
   024B 90r00r22      [24] 1263 	mov	dptr,#_rf_spi_send_read_PARM_3
   024E 74 01         [12] 1264 	mov	a,#0x01
   0250 F0            [24] 1265 	movx	@dptr,a
   0251 90r00r1F      [24] 1266 	mov	dptr,#_rf_spi_execute_command_status_1_65
   0254 75 F0 00      [24] 1267 	mov	b,#0x00
   0257 12r02r91      [24] 1268 	lcall	_rf_spi_send_read
                           1269 ;	../src/rf/src/rf_spi_execute_command.c:58: rf_spi_send_read(dataptr, len, copydata);
   025A 90r00r18      [24] 1270 	mov	dptr,#_rf_spi_execute_command_PARM_2
   025D E0            [24] 1271 	movx	a,@dptr
   025E FD            [12] 1272 	mov	r5,a
   025F A3            [24] 1273 	inc	dptr
   0260 E0            [24] 1274 	movx	a,@dptr
   0261 FE            [12] 1275 	mov	r6,a
   0262 A3            [24] 1276 	inc	dptr
   0263 E0            [24] 1277 	movx	a,@dptr
   0264 FF            [12] 1278 	mov	r7,a
   0265 90r00r1B      [24] 1279 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0268 E0            [24] 1280 	movx	a,@dptr
   0269 FB            [12] 1281 	mov	r3,a
   026A A3            [24] 1282 	inc	dptr
   026B E0            [24] 1283 	movx	a,@dptr
   026C FC            [12] 1284 	mov	r4,a
   026D 90r00r1D      [24] 1285 	mov	dptr,#_rf_spi_execute_command_PARM_4
   0270 E0            [24] 1286 	movx	a,@dptr
   0271 FA            [12] 1287 	mov	r2,a
   0272 90r00r20      [24] 1288 	mov	dptr,#_rf_spi_send_read_PARM_2
   0275 EB            [12] 1289 	mov	a,r3
   0276 F0            [24] 1290 	movx	@dptr,a
   0277 EC            [12] 1291 	mov	a,r4
   0278 A3            [24] 1292 	inc	dptr
   0279 F0            [24] 1293 	movx	@dptr,a
   027A 90r00r22      [24] 1294 	mov	dptr,#_rf_spi_send_read_PARM_3
   027D EA            [12] 1295 	mov	a,r2
   027E F0            [24] 1296 	movx	@dptr,a
   027F 8D 82         [24] 1297 	mov	dpl,r5
   0281 8E 83         [24] 1298 	mov	dph,r6
   0283 8F F0         [24] 1299 	mov	b,r7
   0285 12r02r91      [24] 1300 	lcall	_rf_spi_send_read
                           1301 ;	../src/rf/src/rf_spi_execute_command.c:60: rf_set_csn(); //Set CSN to end the transaction
   0288 D2 E9         [12] 1302 	setb _RFCON_SB_RFCSN 
                           1303 ;	../src/rf/src/rf_spi_execute_command.c:62: return status; //Return the value of STATUS
   028A 90r00r1F      [24] 1304 	mov	dptr,#_rf_spi_execute_command_status_1_65
   028D E0            [24] 1305 	movx	a,@dptr
   028E F5 82         [12] 1306 	mov	dpl,a
   0290 22            [24] 1307 	ret
                           1308 ;------------------------------------------------------------
                           1309 ;Allocation info for local variables in function 'rf_spi_send_read'
                           1310 ;------------------------------------------------------------
                           1311 ;sloc0                     Allocated with name '_rf_spi_send_read_sloc0_1_0'
                           1312 ;sloc1                     Allocated with name '_rf_spi_send_read_sloc1_1_0'
                           1313 ;len                       Allocated with name '_rf_spi_send_read_PARM_2'
                           1314 ;copydata                  Allocated with name '_rf_spi_send_read_PARM_3'
                           1315 ;dataptr                   Allocated with name '_rf_spi_send_read_dataptr_1_66'
                           1316 ;i                         Allocated with name '_rf_spi_send_read_i_1_67'
                           1317 ;tempbyte                  Allocated with name '_rf_spi_send_read_tempbyte_1_67'
                           1318 ;------------------------------------------------------------
                           1319 ;	../src/rf/src/rf_spi_send_read.c:49: void rf_spi_send_read(unsigned char * dataptr, unsigned int len, bool copydata)
                           1320 ;	-----------------------------------------
                           1321 ;	 function rf_spi_send_read
                           1322 ;	-----------------------------------------
   0291                    1323 _rf_spi_send_read:
   0291 AF F0         [24] 1324 	mov	r7,b
   0293 AE 83         [24] 1325 	mov	r6,dph
   0295 E5 82         [12] 1326 	mov	a,dpl
   0297 90r00r23      [24] 1327 	mov	dptr,#_rf_spi_send_read_dataptr_1_66
   029A F0            [24] 1328 	movx	@dptr,a
   029B EE            [12] 1329 	mov	a,r6
   029C A3            [24] 1330 	inc	dptr
   029D F0            [24] 1331 	movx	@dptr,a
   029E EF            [12] 1332 	mov	a,r7
   029F A3            [24] 1333 	inc	dptr
   02A0 F0            [24] 1334 	movx	@dptr,a
                           1335 ;	../src/rf/src/rf_spi_send_read.c:55: for(i = 0; i < len; i++)
   02A1 90r00r23      [24] 1336 	mov	dptr,#_rf_spi_send_read_dataptr_1_66
   02A4 E0            [24] 1337 	movx	a,@dptr
   02A5 FD            [12] 1338 	mov	r5,a
   02A6 A3            [24] 1339 	inc	dptr
   02A7 E0            [24] 1340 	movx	a,@dptr
   02A8 FE            [12] 1341 	mov	r6,a
   02A9 A3            [24] 1342 	inc	dptr
   02AA E0            [24] 1343 	movx	a,@dptr
   02AB FF            [12] 1344 	mov	r7,a
   02AC 90r00r22      [24] 1345 	mov	dptr,#_rf_spi_send_read_PARM_3
   02AF E0            [24] 1346 	movx	a,@dptr
   02B0 FC            [12] 1347 	mov	r4,a
   02B1 90r00r20      [24] 1348 	mov	dptr,#_rf_spi_send_read_PARM_2
   02B4 E0            [24] 1349 	movx	a,@dptr
   02B5 FA            [12] 1350 	mov	r2,a
   02B6 A3            [24] 1351 	inc	dptr
   02B7 E0            [24] 1352 	movx	a,@dptr
   02B8 FB            [12] 1353 	mov	r3,a
   02B9 78 00         [12] 1354 	mov	r0,#0x00
   02BB 79 00         [12] 1355 	mov	r1,#0x00
   02BD                    1356 00105$:
   02BD C3            [12] 1357 	clr	c
   02BE E8            [12] 1358 	mov	a,r0
   02BF 9A            [12] 1359 	subb	a,r2
   02C0 E9            [12] 1360 	mov	a,r1
   02C1 9B            [12] 1361 	subb	a,r3
   02C2 50 5F         [24] 1362 	jnc	00107$
                           1363 ;	../src/rf/src/rf_spi_send_read.c:57: tempbyte = rf_spi_send_read_byte(dataptr[i]); //Send the value, and then save the received value
   02C4 C0 02         [24] 1364 	push	ar2
   02C6 C0 03         [24] 1365 	push	ar3
   02C8 E8            [12] 1366 	mov	a,r0
   02C9 2D            [12] 1367 	add	a,r5
   02CA F5*00         [12] 1368 	mov	_rf_spi_send_read_sloc0_1_0,a
   02CC E9            [12] 1369 	mov	a,r1
   02CD 3E            [12] 1370 	addc	a,r6
   02CE F5*01         [12] 1371 	mov	(_rf_spi_send_read_sloc0_1_0 + 1),a
   02D0 8F*02         [24] 1372 	mov	(_rf_spi_send_read_sloc0_1_0 + 2),r7
   02D2 85*00 82      [24] 1373 	mov	dpl,_rf_spi_send_read_sloc0_1_0
   02D5 85*01 83      [24] 1374 	mov	dph,(_rf_spi_send_read_sloc0_1_0 + 1)
   02D8 85*02 F0      [24] 1375 	mov	b,(_rf_spi_send_read_sloc0_1_0 + 2)
   02DB 12r00r00      [24] 1376 	lcall	__gptrget
   02DE FB            [12] 1377 	mov	r3,a
   02DF F5 82         [12] 1378 	mov	dpl,a
   02E1 C0 07         [24] 1379 	push	ar7
   02E3 C0 06         [24] 1380 	push	ar6
   02E5 C0 05         [24] 1381 	push	ar5
   02E7 C0 04         [24] 1382 	push	ar4
   02E9 C0 03         [24] 1383 	push	ar3
   02EB C0 02         [24] 1384 	push	ar2
   02ED C0 01         [24] 1385 	push	ar1
   02EF C0 00         [24] 1386 	push	ar0
   02F1 12r03rAB      [24] 1387 	lcall	_rf_spi_send_read_byte
   02F4 85 82*03      [24] 1388 	mov	_rf_spi_send_read_sloc1_1_0,dpl
   02F7 D0 00         [24] 1389 	pop	ar0
   02F9 D0 01         [24] 1390 	pop	ar1
   02FB D0 02         [24] 1391 	pop	ar2
   02FD D0 03         [24] 1392 	pop	ar3
   02FF D0 04         [24] 1393 	pop	ar4
   0301 D0 05         [24] 1394 	pop	ar5
   0303 D0 06         [24] 1395 	pop	ar6
   0305 D0 07         [24] 1396 	pop	ar7
                           1397 ;	../src/rf/src/rf_spi_send_read.c:60: if(copydata != false)
   0307 D0 03         [24] 1398 	pop	ar3
   0309 D0 02         [24] 1399 	pop	ar2
   030B EC            [12] 1400 	mov	a,r4
   030C 60 0E         [24] 1401 	jz	00106$
                           1402 ;	../src/rf/src/rf_spi_send_read.c:62: dataptr[i] = tempbyte;
   030E 85*00 82      [24] 1403 	mov	dpl,_rf_spi_send_read_sloc0_1_0
   0311 85*01 83      [24] 1404 	mov	dph,(_rf_spi_send_read_sloc0_1_0 + 1)
   0314 85*02 F0      [24] 1405 	mov	b,(_rf_spi_send_read_sloc0_1_0 + 2)
   0317 E5*03         [12] 1406 	mov	a,_rf_spi_send_read_sloc1_1_0
   0319 12r00r00      [24] 1407 	lcall	__gptrput
   031C                    1408 00106$:
                           1409 ;	../src/rf/src/rf_spi_send_read.c:55: for(i = 0; i < len; i++)
   031C 08            [12] 1410 	inc	r0
   031D B8 00 9D      [24] 1411 	cjne	r0,#0x00,00105$
   0320 09            [12] 1412 	inc	r1
   0321 80 9A         [24] 1413 	sjmp	00105$
   0323                    1414 00107$:
   0323 22            [24] 1415 	ret
                           1416 ;------------------------------------------------------------
                           1417 ;Allocation info for local variables in function 'rf_power_up_param'
                           1418 ;------------------------------------------------------------
                           1419 ;config                    Allocated with name '_rf_power_up_param_PARM_2'
                           1420 ;rx_active_mode            Allocated with name '_rf_power_up_param_rx_active_mode_1_70'
                           1421 ;------------------------------------------------------------
                           1422 ;	../src/rf/src/rf_power_up_param.c:49: void rf_power_up_param(bool rx_active_mode, unsigned char config)
                           1423 ;	-----------------------------------------
                           1424 ;	 function rf_power_up_param
                           1425 ;	-----------------------------------------
   0324                    1426 _rf_power_up_param:
   0324 E5 82         [12] 1427 	mov	a,dpl
   0326 90r00r27      [24] 1428 	mov	dptr,#_rf_power_up_param_rx_active_mode_1_70
   0329 F0            [24] 1429 	movx	@dptr,a
                           1430 ;	../src/rf/src/rf_power_up_param.c:52: config |= RF_CONFIG_PWR_UP;
   032A 90r00r26      [24] 1431 	mov	dptr,#_rf_power_up_param_PARM_2
   032D E0            [24] 1432 	movx	a,@dptr
   032E 44 02         [12] 1433 	orl	a,#0x02
   0330 F0            [24] 1434 	movx	@dptr,a
                           1435 ;	../src/rf/src/rf_power_up_param.c:53: rf_write_register(RF_CONFIG, &config, 1);
   0331 90r00r08      [24] 1436 	mov	dptr,#_rf_write_register_PARM_2
   0334 74r26         [12] 1437 	mov	a,#_rf_power_up_param_PARM_2
   0336 F0            [24] 1438 	movx	@dptr,a
   0337 74s00         [12] 1439 	mov	a,#(_rf_power_up_param_PARM_2 >> 8)
   0339 A3            [24] 1440 	inc	dptr
   033A F0            [24] 1441 	movx	@dptr,a
   033B E4            [12] 1442 	clr	a
   033C A3            [24] 1443 	inc	dptr
   033D F0            [24] 1444 	movx	@dptr,a
   033E 90r00r0B      [24] 1445 	mov	dptr,#_rf_write_register_PARM_3
   0341 74 01         [12] 1446 	mov	a,#0x01
   0343 F0            [24] 1447 	movx	@dptr,a
   0344 E4            [12] 1448 	clr	a
   0345 A3            [24] 1449 	inc	dptr
   0346 F0            [24] 1450 	movx	@dptr,a
   0347 75 82 00      [24] 1451 	mov	dpl,#0x00
   034A 12r00rBC      [24] 1452 	lcall	_rf_write_register
                           1453 ;	../src/rf/src/rf_power_up_param.c:55: delay_us(1); //Delay for power up
   034D 90 00 01      [24] 1454 	mov	dptr,#0x0001
   0350 12r07r87      [24] 1455 	lcall	_delay_us
                           1456 ;	../src/rf/src/rf_power_up_param.c:58: if((config & RF_CONFIG_PRIM_RX) == 0)
   0353 90r00r26      [24] 1457 	mov	dptr,#_rf_power_up_param_PARM_2
   0356 E0            [24] 1458 	movx	a,@dptr
   0357 FF            [12] 1459 	mov	r7,a
   0358 20 E0 03      [24] 1460 	jb	acc.0,00105$
                           1461 ;	../src/rf/src/rf_power_up_param.c:60: rf_clear_ce(); //Clear CE for TX mode
   035B C2 E8         [12] 1462 	clr _RFCON_SB_RFCE 
   035D 22            [24] 1463 	ret
   035E                    1464 00105$:
                           1465 ;	../src/rf/src/rf_power_up_param.c:65: if(rx_active_mode != false)
   035E 90r00r27      [24] 1466 	mov	dptr,#_rf_power_up_param_rx_active_mode_1_70
   0361 E0            [24] 1467 	movx	a,@dptr
   0362 FF            [12] 1468 	mov	r7,a
   0363 60 08         [24] 1469 	jz	00102$
                           1470 ;	../src/rf/src/rf_power_up_param.c:67: rf_set_ce();
   0365 D2 E8         [12] 1471 	setb _RFCON_SB_RFCE 
   0367 90 00 04      [24] 1472 	mov	dptr,#0x0004
   036A 02r07r87      [24] 1473 	ljmp	_delay_us
   036D                    1474 00102$:
                           1475 ;	../src/rf/src/rf_power_up_param.c:71: rf_clear_ce();
   036D C2 E8         [12] 1476 	clr _RFCON_SB_RFCE 
   036F 22            [24] 1477 	ret
                           1478 ;------------------------------------------------------------
                           1479 ;Allocation info for local variables in function 'rf_read_register'
                           1480 ;------------------------------------------------------------
                           1481 ;dataptr                   Allocated with name '_rf_read_register_PARM_2'
                           1482 ;len                       Allocated with name '_rf_read_register_PARM_3'
                           1483 ;regnumber                 Allocated with name '_rf_read_register_regnumber_1_76'
                           1484 ;------------------------------------------------------------
                           1485 ;	../src/rf/src/rf_read_register.c:49: unsigned char rf_read_register(unsigned char regnumber, unsigned char * dataptr, unsigned int len)
                           1486 ;	-----------------------------------------
                           1487 ;	 function rf_read_register
                           1488 ;	-----------------------------------------
   0370                    1489 _rf_read_register:
   0370 E5 82         [12] 1490 	mov	a,dpl
                           1491 ;	../src/rf/src/rf_read_register.c:52: return rf_spi_execute_command(regnumber & RF_R_REGISTER_DATA, dataptr, len, true);
   0372 90r00r2D      [24] 1492 	mov	dptr,#_rf_read_register_regnumber_1_76
   0375 F0            [24] 1493 	movx	@dptr,a
   0376 FF            [12] 1494 	mov	r7,a
   0377 53 07 1F      [24] 1495 	anl	ar7,#0x1F
   037A 90r00r28      [24] 1496 	mov	dptr,#_rf_read_register_PARM_2
   037D E0            [24] 1497 	movx	a,@dptr
   037E FC            [12] 1498 	mov	r4,a
   037F A3            [24] 1499 	inc	dptr
   0380 E0            [24] 1500 	movx	a,@dptr
   0381 FD            [12] 1501 	mov	r5,a
   0382 A3            [24] 1502 	inc	dptr
   0383 E0            [24] 1503 	movx	a,@dptr
   0384 FE            [12] 1504 	mov	r6,a
   0385 90r00r2B      [24] 1505 	mov	dptr,#_rf_read_register_PARM_3
   0388 E0            [24] 1506 	movx	a,@dptr
   0389 FA            [12] 1507 	mov	r2,a
   038A A3            [24] 1508 	inc	dptr
   038B E0            [24] 1509 	movx	a,@dptr
   038C FB            [12] 1510 	mov	r3,a
   038D 90r00r18      [24] 1511 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0390 EC            [12] 1512 	mov	a,r4
   0391 F0            [24] 1513 	movx	@dptr,a
   0392 ED            [12] 1514 	mov	a,r5
   0393 A3            [24] 1515 	inc	dptr
   0394 F0            [24] 1516 	movx	@dptr,a
   0395 EE            [12] 1517 	mov	a,r6
   0396 A3            [24] 1518 	inc	dptr
   0397 F0            [24] 1519 	movx	@dptr,a
   0398 90r00r1B      [24] 1520 	mov	dptr,#_rf_spi_execute_command_PARM_3
   039B EA            [12] 1521 	mov	a,r2
   039C F0            [24] 1522 	movx	@dptr,a
   039D EB            [12] 1523 	mov	a,r3
   039E A3            [24] 1524 	inc	dptr
   039F F0            [24] 1525 	movx	@dptr,a
   03A0 90r00r1D      [24] 1526 	mov	dptr,#_rf_spi_execute_command_PARM_4
   03A3 74 01         [12] 1527 	mov	a,#0x01
   03A5 F0            [24] 1528 	movx	@dptr,a
   03A6 8F 82         [24] 1529 	mov	dpl,r7
   03A8 02r02r35      [24] 1530 	ljmp	_rf_spi_execute_command
                           1531 ;------------------------------------------------------------
                           1532 ;Allocation info for local variables in function 'rf_spi_send_read_byte'
                           1533 ;------------------------------------------------------------
                           1534 ;byte                      Allocated with name '_rf_spi_send_read_byte_byte_1_78'
                           1535 ;------------------------------------------------------------
                           1536 ;	../src/rf/src/rf_spi_send_read_byte.c:47: unsigned char rf_spi_send_read_byte(unsigned char byte)
                           1537 ;	-----------------------------------------
                           1538 ;	 function rf_spi_send_read_byte
                           1539 ;	-----------------------------------------
   03AB                    1540 _rf_spi_send_read_byte:
   03AB E5 82         [12] 1541 	mov	a,dpl
                           1542 ;	../src/rf/src/rf_spi_send_read_byte.c:49: SPIRDAT = byte; //Send byte over SPI
   03AD 90r00r2E      [24] 1543 	mov	dptr,#_rf_spi_send_read_byte_byte_1_78
   03B0 F0            [24] 1544 	movx	@dptr,a
   03B1 F5 E7         [12] 1545 	mov	_SPIRDAT,a
                           1546 ;	../src/rf/src/rf_spi_send_read_byte.c:51: while(!(SPIRSTAT & SPIRSTAT_IRQ_RX_FIFO_READY)); //Wait for the transaction to finish
   03B3                    1547 00101$:
   03B3 E5 E6         [12] 1548 	mov	a,_SPIRSTAT
   03B5 30 E2 FB      [24] 1549 	jnb	acc.2,00101$
                           1550 ;	../src/rf/src/rf_spi_send_read_byte.c:53: IRCON_SB_RFRDY = BIT_FALSE; //Clear the IRQ bit
   03B8 C2 C0         [12] 1551 	clr	_IRCON_SB_RFRDY
                           1552 ;	../src/rf/src/rf_spi_send_read_byte.c:55: return SPIRDAT; //Return the received value
   03BA 85 E7 82      [24] 1553 	mov	dpl,_SPIRDAT
   03BD 22            [24] 1554 	ret
                           1555 ;------------------------------------------------------------
                           1556 ;Allocation info for local variables in function 'rf_set_rx_addr'
                           1557 ;------------------------------------------------------------
                           1558 ;len                       Allocated with name '_rf_set_rx_addr_PARM_2'
                           1559 ;rxpipenum                 Allocated with name '_rf_set_rx_addr_PARM_3'
                           1560 ;address                   Allocated with name '_rf_set_rx_addr_address_1_80'
                           1561 ;------------------------------------------------------------
                           1562 ;	../src/rf/src/rf_set_rx_addr.c:49: void rf_set_rx_addr(unsigned char * address, unsigned int len, unsigned char rxpipenum)
                           1563 ;	-----------------------------------------
                           1564 ;	 function rf_set_rx_addr
                           1565 ;	-----------------------------------------
   03BE                    1566 _rf_set_rx_addr:
   03BE AF F0         [24] 1567 	mov	r7,b
   03C0 AE 83         [24] 1568 	mov	r6,dph
   03C2 E5 82         [12] 1569 	mov	a,dpl
   03C4 90r00r32      [24] 1570 	mov	dptr,#_rf_set_rx_addr_address_1_80
   03C7 F0            [24] 1571 	movx	@dptr,a
   03C8 EE            [12] 1572 	mov	a,r6
   03C9 A3            [24] 1573 	inc	dptr
   03CA F0            [24] 1574 	movx	@dptr,a
   03CB EF            [12] 1575 	mov	a,r7
   03CC A3            [24] 1576 	inc	dptr
   03CD F0            [24] 1577 	movx	@dptr,a
                           1578 ;	../src/rf/src/rf_set_rx_addr.c:52: if(rxpipenum > 5)
   03CE 90r00r31      [24] 1579 	mov	dptr,#_rf_set_rx_addr_PARM_3
   03D1 E0            [24] 1580 	movx	a,@dptr
   03D2 FF            [12] 1581 	mov  r7,a
   03D3 24 FA         [12] 1582 	add	a,#0xff - 0x05
   03D5 50 01         [24] 1583 	jnc	00102$
                           1584 ;	../src/rf/src/rf_set_rx_addr.c:54: return;
   03D7 22            [24] 1585 	ret
   03D8                    1586 00102$:
                           1587 ;	../src/rf/src/rf_set_rx_addr.c:57: rf_write_register(RF_RX_ADDR_P0 + rxpipenum, address, len); //Write the requested address to the requested RX pipe
   03D8 74 0A         [12] 1588 	mov	a,#0x0A
   03DA 2F            [12] 1589 	add	a,r7
   03DB FF            [12] 1590 	mov	r7,a
   03DC 90r00r32      [24] 1591 	mov	dptr,#_rf_set_rx_addr_address_1_80
   03DF E0            [24] 1592 	movx	a,@dptr
   03E0 FC            [12] 1593 	mov	r4,a
   03E1 A3            [24] 1594 	inc	dptr
   03E2 E0            [24] 1595 	movx	a,@dptr
   03E3 FD            [12] 1596 	mov	r5,a
   03E4 A3            [24] 1597 	inc	dptr
   03E5 E0            [24] 1598 	movx	a,@dptr
   03E6 FE            [12] 1599 	mov	r6,a
   03E7 90r00r2F      [24] 1600 	mov	dptr,#_rf_set_rx_addr_PARM_2
   03EA E0            [24] 1601 	movx	a,@dptr
   03EB FA            [12] 1602 	mov	r2,a
   03EC A3            [24] 1603 	inc	dptr
   03ED E0            [24] 1604 	movx	a,@dptr
   03EE FB            [12] 1605 	mov	r3,a
   03EF 90r00r08      [24] 1606 	mov	dptr,#_rf_write_register_PARM_2
   03F2 EC            [12] 1607 	mov	a,r4
   03F3 F0            [24] 1608 	movx	@dptr,a
   03F4 ED            [12] 1609 	mov	a,r5
   03F5 A3            [24] 1610 	inc	dptr
   03F6 F0            [24] 1611 	movx	@dptr,a
   03F7 EE            [12] 1612 	mov	a,r6
   03F8 A3            [24] 1613 	inc	dptr
   03F9 F0            [24] 1614 	movx	@dptr,a
   03FA 90r00r0B      [24] 1615 	mov	dptr,#_rf_write_register_PARM_3
   03FD EA            [12] 1616 	mov	a,r2
   03FE F0            [24] 1617 	movx	@dptr,a
   03FF EB            [12] 1618 	mov	a,r3
   0400 A3            [24] 1619 	inc	dptr
   0401 F0            [24] 1620 	movx	@dptr,a
   0402 8F 82         [24] 1621 	mov	dpl,r7
   0404 02r00rBC      [24] 1622 	ljmp	_rf_write_register
                           1623 ;------------------------------------------------------------
                           1624 ;Allocation info for local variables in function 'gpio_pin_configure'
                           1625 ;------------------------------------------------------------
                           1626 ;gpio_pin_config_options   Allocated with name '_gpio_pin_configure_PARM_2'
                           1627 ;gpio_pin_id               Allocated with name '_gpio_pin_configure_gpio_pin_id_1_83'
                           1628 ;------------------------------------------------------------
                           1629 ;	../src/gpio/src/gpio_pin_configure.c:47: void gpio_pin_configure(gpio_pin_id_t gpio_pin_id, uint8_t gpio_pin_config_options)
                           1630 ;	-----------------------------------------
                           1631 ;	 function gpio_pin_configure
                           1632 ;	-----------------------------------------
   0407                    1633 _gpio_pin_configure:
   0407 E5 82         [12] 1634 	mov	a,dpl
                           1635 ;	../src/gpio/src/gpio_pin_configure.c:50: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   0409 90r00r36      [24] 1636 	mov	dptr,#_gpio_pin_configure_gpio_pin_id_1_83
   040C F0            [24] 1637 	movx	@dptr,a
   040D FF            [12] 1638 	mov  r7,a
   040E 24 F8         [12] 1639 	add	a,#0xff - 0x07
   0410 50 03         [24] 1640 	jnc	00174$
   0412 02r04r8B      [24] 1641 	ljmp	00134$
   0415                    1642 00174$:
                           1643 ;	../src/gpio/src/gpio_pin_configure.c:53: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   0415 90r00r35      [24] 1644 	mov	dptr,#_gpio_pin_configure_PARM_2
   0418 E0            [24] 1645 	movx	a,@dptr
   0419 FE            [12] 1646 	mov	r6,a
   041A FD            [12] 1647 	mov	r5,a
   041B ED            [12] 1648 	mov	a,r5
   041C 30 E0 4C      [24] 1649 	jnb	acc.0,00105$
                           1650 ;	../src/gpio/src/gpio_pin_configure.c:56: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   041F EE            [12] 1651 	mov	a,r6
   0420 30 E1 15      [24] 1652 	jnb	acc.1,00102$
                           1653 ;	../src/gpio/src/gpio_pin_configure.c:58: gpio_pins_val_set(P0, (1 << (gpio_pin_id % 8)));
   0423 74 07         [12] 1654 	mov	a,#0x07
   0425 5F            [12] 1655 	anl	a,r7
   0426 F5 F0         [12] 1656 	mov	b,a
   0428 05 F0         [12] 1657 	inc	b
   042A 74 01         [12] 1658 	mov	a,#0x01
   042C 80 02         [24] 1659 	sjmp	00179$
   042E                    1660 00177$:
   042E 25 E0         [12] 1661 	add	a,acc
   0430                    1662 00179$:
   0430 D5 F0 FB      [24] 1663 	djnz	b,00177$
   0433 FD            [12] 1664 	mov	r5,a
   0434 42 80         [12] 1665 	orl	_P0,a
   0436 80 14         [24] 1666 	sjmp	00103$
   0438                    1667 00102$:
                           1668 ;	../src/gpio/src/gpio_pin_configure.c:62: gpio_pins_val_clear(P0, (1 << (gpio_pin_id % 8)));
   0438 74 07         [12] 1669 	mov	a,#0x07
   043A 5F            [12] 1670 	anl	a,r7
   043B F5 F0         [12] 1671 	mov	b,a
   043D 05 F0         [12] 1672 	inc	b
   043F 74 01         [12] 1673 	mov	a,#0x01
   0441 80 02         [24] 1674 	sjmp	00182$
   0443                    1675 00180$:
   0443 25 E0         [12] 1676 	add	a,acc
   0445                    1677 00182$:
   0445 D5 F0 FB      [24] 1678 	djnz	b,00180$
   0448 F4            [12] 1679 	cpl	a
   0449 FD            [12] 1680 	mov	r5,a
   044A 52 80         [12] 1681 	anl	_P0,a
   044C                    1682 00103$:
                           1683 ;	../src/gpio/src/gpio_pin_configure.c:66: P0CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   044C 74 07         [12] 1684 	mov	a,#0x07
   044E 5F            [12] 1685 	anl	a,r7
   044F FD            [12] 1686 	mov	r5,a
   0450 74 07         [12] 1687 	mov	a,#0x07
   0452 5D            [12] 1688 	anl	a,r5
   0453 FC            [12] 1689 	mov	r4,a
                           1690 ;	../src/gpio/src/gpio_pin_configure.c:67: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   0454 74 E0         [12] 1691 	mov	a,#0xE0
   0456 5E            [12] 1692 	anl	a,r6
   0457 4C            [12] 1693 	orl	a,r4
   0458 F5 9E         [12] 1694 	mov	_P0CON,a
                           1695 ;	../src/gpio/src/gpio_pin_configure.c:70: gpio_pins_dir_output(P0DIR, (1 << (gpio_pin_id % 8)));
   045A 8D F0         [24] 1696 	mov	b,r5
   045C 05 F0         [12] 1697 	inc	b
   045E 74 01         [12] 1698 	mov	a,#0x01
   0460 80 02         [24] 1699 	sjmp	00185$
   0462                    1700 00183$:
   0462 25 E0         [12] 1701 	add	a,acc
   0464                    1702 00185$:
   0464 D5 F0 FB      [24] 1703 	djnz	b,00183$
   0467 F4            [12] 1704 	cpl	a
   0468 52 93         [12] 1705 	anl	_P0DIR,a
   046A 22            [24] 1706 	ret
   046B                    1707 00105$:
                           1708 ;	../src/gpio/src/gpio_pin_configure.c:75: P0CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   046B 74 07         [12] 1709 	mov	a,#0x07
   046D 5F            [12] 1710 	anl	a,r7
   046E FD            [12] 1711 	mov	r5,a
   046F 74 07         [12] 1712 	mov	a,#0x07
   0471 5D            [12] 1713 	anl	a,r5
   0472 44 10         [12] 1714 	orl	a,#0x10
   0474 FC            [12] 1715 	mov	r4,a
                           1716 ;	../src/gpio/src/gpio_pin_configure.c:77: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   0475 74 E0         [12] 1717 	mov	a,#0xE0
   0477 5E            [12] 1718 	anl	a,r6
   0478 4C            [12] 1719 	orl	a,r4
   0479 F5 9E         [12] 1720 	mov	_P0CON,a
                           1721 ;	../src/gpio/src/gpio_pin_configure.c:80: gpio_pins_dir_input(P0DIR, (1 << (gpio_pin_id % 8)));
   047B 8D F0         [24] 1722 	mov	b,r5
   047D 05 F0         [12] 1723 	inc	b
   047F 74 01         [12] 1724 	mov	a,#0x01
   0481 80 02         [24] 1725 	sjmp	00188$
   0483                    1726 00186$:
   0483 25 E0         [12] 1727 	add	a,acc
   0485                    1728 00188$:
   0485 D5 F0 FB      [24] 1729 	djnz	b,00186$
   0488 42 93         [12] 1730 	orl	_P0DIR,a
   048A 22            [24] 1731 	ret
   048B                    1732 00134$:
                           1733 ;	../src/gpio/src/gpio_pin_configure.c:83: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   048B EF            [12] 1734 	mov	a,r7
   048C 24 F0         [12] 1735 	add	a,#0xff - 0x0F
   048E 50 03         [24] 1736 	jnc	00189$
   0490 02r05r09      [24] 1737 	ljmp	00131$
   0493                    1738 00189$:
                           1739 ;	../src/gpio/src/gpio_pin_configure.c:86: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   0493 90r00r35      [24] 1740 	mov	dptr,#_gpio_pin_configure_PARM_2
   0496 E0            [24] 1741 	movx	a,@dptr
   0497 FE            [12] 1742 	mov	r6,a
   0498 FD            [12] 1743 	mov	r5,a
   0499 ED            [12] 1744 	mov	a,r5
   049A 30 E0 4C      [24] 1745 	jnb	acc.0,00111$
                           1746 ;	../src/gpio/src/gpio_pin_configure.c:89: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   049D EE            [12] 1747 	mov	a,r6
   049E 30 E1 15      [24] 1748 	jnb	acc.1,00108$
                           1749 ;	../src/gpio/src/gpio_pin_configure.c:91: gpio_pins_val_set(P1, (1 << (gpio_pin_id % 8)));
   04A1 74 07         [12] 1750 	mov	a,#0x07
   04A3 5F            [12] 1751 	anl	a,r7
   04A4 F5 F0         [12] 1752 	mov	b,a
   04A6 05 F0         [12] 1753 	inc	b
   04A8 74 01         [12] 1754 	mov	a,#0x01
   04AA 80 02         [24] 1755 	sjmp	00194$
   04AC                    1756 00192$:
   04AC 25 E0         [12] 1757 	add	a,acc
   04AE                    1758 00194$:
   04AE D5 F0 FB      [24] 1759 	djnz	b,00192$
   04B1 FD            [12] 1760 	mov	r5,a
   04B2 42 90         [12] 1761 	orl	_P1,a
   04B4 80 14         [24] 1762 	sjmp	00109$
   04B6                    1763 00108$:
                           1764 ;	../src/gpio/src/gpio_pin_configure.c:95: gpio_pins_val_clear(P1, (1 << (gpio_pin_id % 8)));
   04B6 74 07         [12] 1765 	mov	a,#0x07
   04B8 5F            [12] 1766 	anl	a,r7
   04B9 F5 F0         [12] 1767 	mov	b,a
   04BB 05 F0         [12] 1768 	inc	b
   04BD 74 01         [12] 1769 	mov	a,#0x01
   04BF 80 02         [24] 1770 	sjmp	00197$
   04C1                    1771 00195$:
   04C1 25 E0         [12] 1772 	add	a,acc
   04C3                    1773 00197$:
   04C3 D5 F0 FB      [24] 1774 	djnz	b,00195$
   04C6 F4            [12] 1775 	cpl	a
   04C7 FD            [12] 1776 	mov	r5,a
   04C8 52 90         [12] 1777 	anl	_P1,a
   04CA                    1778 00109$:
                           1779 ;	../src/gpio/src/gpio_pin_configure.c:99: P1CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   04CA 74 07         [12] 1780 	mov	a,#0x07
   04CC 5F            [12] 1781 	anl	a,r7
   04CD FD            [12] 1782 	mov	r5,a
   04CE 74 07         [12] 1783 	mov	a,#0x07
   04D0 5D            [12] 1784 	anl	a,r5
   04D1 FC            [12] 1785 	mov	r4,a
                           1786 ;	../src/gpio/src/gpio_pin_configure.c:100: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   04D2 74 E0         [12] 1787 	mov	a,#0xE0
   04D4 5E            [12] 1788 	anl	a,r6
   04D5 4C            [12] 1789 	orl	a,r4
   04D6 F5 9F         [12] 1790 	mov	_P1CON,a
                           1791 ;	../src/gpio/src/gpio_pin_configure.c:103: gpio_pins_dir_output(P1DIR, (1 << (gpio_pin_id % 8)));
   04D8 8D F0         [24] 1792 	mov	b,r5
   04DA 05 F0         [12] 1793 	inc	b
   04DC 74 01         [12] 1794 	mov	a,#0x01
   04DE 80 02         [24] 1795 	sjmp	00200$
   04E0                    1796 00198$:
   04E0 25 E0         [12] 1797 	add	a,acc
   04E2                    1798 00200$:
   04E2 D5 F0 FB      [24] 1799 	djnz	b,00198$
   04E5 F4            [12] 1800 	cpl	a
   04E6 52 94         [12] 1801 	anl	_P1DIR,a
   04E8 22            [24] 1802 	ret
   04E9                    1803 00111$:
                           1804 ;	../src/gpio/src/gpio_pin_configure.c:108: P1CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   04E9 74 07         [12] 1805 	mov	a,#0x07
   04EB 5F            [12] 1806 	anl	a,r7
   04EC FD            [12] 1807 	mov	r5,a
   04ED 74 07         [12] 1808 	mov	a,#0x07
   04EF 5D            [12] 1809 	anl	a,r5
   04F0 44 10         [12] 1810 	orl	a,#0x10
   04F2 FC            [12] 1811 	mov	r4,a
                           1812 ;	../src/gpio/src/gpio_pin_configure.c:110: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   04F3 74 E0         [12] 1813 	mov	a,#0xE0
   04F5 5E            [12] 1814 	anl	a,r6
   04F6 4C            [12] 1815 	orl	a,r4
   04F7 F5 9F         [12] 1816 	mov	_P1CON,a
                           1817 ;	../src/gpio/src/gpio_pin_configure.c:113: gpio_pins_dir_input(P1DIR, (1 << (gpio_pin_id % 8)));
   04F9 8D F0         [24] 1818 	mov	b,r5
   04FB 05 F0         [12] 1819 	inc	b
   04FD 74 01         [12] 1820 	mov	a,#0x01
   04FF 80 02         [24] 1821 	sjmp	00203$
   0501                    1822 00201$:
   0501 25 E0         [12] 1823 	add	a,acc
   0503                    1824 00203$:
   0503 D5 F0 FB      [24] 1825 	djnz	b,00201$
   0506 42 94         [12] 1826 	orl	_P1DIR,a
   0508 22            [24] 1827 	ret
   0509                    1828 00131$:
                           1829 ;	../src/gpio/src/gpio_pin_configure.c:116: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   0509 EF            [12] 1830 	mov	a,r7
   050A 24 E8         [12] 1831 	add	a,#0xff - 0x17
   050C 50 03         [24] 1832 	jnc	00204$
   050E 02r05r87      [24] 1833 	ljmp	00128$
   0511                    1834 00204$:
                           1835 ;	../src/gpio/src/gpio_pin_configure.c:119: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   0511 90r00r35      [24] 1836 	mov	dptr,#_gpio_pin_configure_PARM_2
   0514 E0            [24] 1837 	movx	a,@dptr
   0515 FE            [12] 1838 	mov	r6,a
   0516 FD            [12] 1839 	mov	r5,a
   0517 ED            [12] 1840 	mov	a,r5
   0518 30 E0 4C      [24] 1841 	jnb	acc.0,00117$
                           1842 ;	../src/gpio/src/gpio_pin_configure.c:122: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   051B EE            [12] 1843 	mov	a,r6
   051C 30 E1 15      [24] 1844 	jnb	acc.1,00114$
                           1845 ;	../src/gpio/src/gpio_pin_configure.c:124: gpio_pins_val_set(P2, (1 << (gpio_pin_id % 8)));
   051F 74 07         [12] 1846 	mov	a,#0x07
   0521 5F            [12] 1847 	anl	a,r7
   0522 F5 F0         [12] 1848 	mov	b,a
   0524 05 F0         [12] 1849 	inc	b
   0526 74 01         [12] 1850 	mov	a,#0x01
   0528 80 02         [24] 1851 	sjmp	00209$
   052A                    1852 00207$:
   052A 25 E0         [12] 1853 	add	a,acc
   052C                    1854 00209$:
   052C D5 F0 FB      [24] 1855 	djnz	b,00207$
   052F FD            [12] 1856 	mov	r5,a
   0530 42 A0         [12] 1857 	orl	_P2,a
   0532 80 14         [24] 1858 	sjmp	00115$
   0534                    1859 00114$:
                           1860 ;	../src/gpio/src/gpio_pin_configure.c:128: gpio_pins_val_clear(P2, (1 << (gpio_pin_id % 8)));
   0534 74 07         [12] 1861 	mov	a,#0x07
   0536 5F            [12] 1862 	anl	a,r7
   0537 F5 F0         [12] 1863 	mov	b,a
   0539 05 F0         [12] 1864 	inc	b
   053B 74 01         [12] 1865 	mov	a,#0x01
   053D 80 02         [24] 1866 	sjmp	00212$
   053F                    1867 00210$:
   053F 25 E0         [12] 1868 	add	a,acc
   0541                    1869 00212$:
   0541 D5 F0 FB      [24] 1870 	djnz	b,00210$
   0544 F4            [12] 1871 	cpl	a
   0545 FD            [12] 1872 	mov	r5,a
   0546 52 A0         [12] 1873 	anl	_P2,a
   0548                    1874 00115$:
                           1875 ;	../src/gpio/src/gpio_pin_configure.c:132: P2CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0548 74 07         [12] 1876 	mov	a,#0x07
   054A 5F            [12] 1877 	anl	a,r7
   054B FD            [12] 1878 	mov	r5,a
   054C 74 07         [12] 1879 	mov	a,#0x07
   054E 5D            [12] 1880 	anl	a,r5
   054F FC            [12] 1881 	mov	r4,a
                           1882 ;	../src/gpio/src/gpio_pin_configure.c:133: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   0550 74 E0         [12] 1883 	mov	a,#0xE0
   0552 5E            [12] 1884 	anl	a,r6
   0553 4C            [12] 1885 	orl	a,r4
   0554 F5 97         [12] 1886 	mov	_P2CON,a
                           1887 ;	../src/gpio/src/gpio_pin_configure.c:136: gpio_pins_dir_output(P2DIR, (1 << (gpio_pin_id % 8)));
   0556 8D F0         [24] 1888 	mov	b,r5
   0558 05 F0         [12] 1889 	inc	b
   055A 74 01         [12] 1890 	mov	a,#0x01
   055C 80 02         [24] 1891 	sjmp	00215$
   055E                    1892 00213$:
   055E 25 E0         [12] 1893 	add	a,acc
   0560                    1894 00215$:
   0560 D5 F0 FB      [24] 1895 	djnz	b,00213$
   0563 F4            [12] 1896 	cpl	a
   0564 52 95         [12] 1897 	anl	_P2DIR,a
   0566 22            [24] 1898 	ret
   0567                    1899 00117$:
                           1900 ;	../src/gpio/src/gpio_pin_configure.c:141: P2CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0567 74 07         [12] 1901 	mov	a,#0x07
   0569 5F            [12] 1902 	anl	a,r7
   056A FD            [12] 1903 	mov	r5,a
   056B 74 07         [12] 1904 	mov	a,#0x07
   056D 5D            [12] 1905 	anl	a,r5
   056E 44 10         [12] 1906 	orl	a,#0x10
   0570 FC            [12] 1907 	mov	r4,a
                           1908 ;	../src/gpio/src/gpio_pin_configure.c:143: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   0571 74 E0         [12] 1909 	mov	a,#0xE0
   0573 5E            [12] 1910 	anl	a,r6
   0574 4C            [12] 1911 	orl	a,r4
   0575 F5 97         [12] 1912 	mov	_P2CON,a
                           1913 ;	../src/gpio/src/gpio_pin_configure.c:146: gpio_pins_dir_input(P2DIR, (1 << (gpio_pin_id % 8)));
   0577 8D F0         [24] 1914 	mov	b,r5
   0579 05 F0         [12] 1915 	inc	b
   057B 74 01         [12] 1916 	mov	a,#0x01
   057D 80 02         [24] 1917 	sjmp	00218$
   057F                    1918 00216$:
   057F 25 E0         [12] 1919 	add	a,acc
   0581                    1920 00218$:
   0581 D5 F0 FB      [24] 1921 	djnz	b,00216$
   0584 42 95         [12] 1922 	orl	_P2DIR,a
   0586 22            [24] 1923 	ret
   0587                    1924 00128$:
                           1925 ;	../src/gpio/src/gpio_pin_configure.c:149: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   0587 EF            [12] 1926 	mov	a,r7
   0588 24 E1         [12] 1927 	add	a,#0xff - 0x1E
   058A 40 75         [24] 1928 	jc	00136$
                           1929 ;	../src/gpio/src/gpio_pin_configure.c:152: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   058C 90r00r35      [24] 1930 	mov	dptr,#_gpio_pin_configure_PARM_2
   058F E0            [24] 1931 	movx	a,@dptr
   0590 FE            [12] 1932 	mov	r6,a
   0591 FD            [12] 1933 	mov	r5,a
   0592 ED            [12] 1934 	mov	a,r5
   0593 30 E0 4C      [24] 1935 	jnb	acc.0,00123$
                           1936 ;	../src/gpio/src/gpio_pin_configure.c:155: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   0596 EE            [12] 1937 	mov	a,r6
   0597 30 E1 15      [24] 1938 	jnb	acc.1,00120$
                           1939 ;	../src/gpio/src/gpio_pin_configure.c:157: gpio_pins_val_set(P3, (1 << (gpio_pin_id % 8)));
   059A 74 07         [12] 1940 	mov	a,#0x07
   059C 5F            [12] 1941 	anl	a,r7
   059D F5 F0         [12] 1942 	mov	b,a
   059F 05 F0         [12] 1943 	inc	b
   05A1 74 01         [12] 1944 	mov	a,#0x01
   05A3 80 02         [24] 1945 	sjmp	00224$
   05A5                    1946 00222$:
   05A5 25 E0         [12] 1947 	add	a,acc
   05A7                    1948 00224$:
   05A7 D5 F0 FB      [24] 1949 	djnz	b,00222$
   05AA FD            [12] 1950 	mov	r5,a
   05AB 42 B0         [12] 1951 	orl	_P3,a
   05AD 80 14         [24] 1952 	sjmp	00121$
   05AF                    1953 00120$:
                           1954 ;	../src/gpio/src/gpio_pin_configure.c:161: gpio_pins_val_clear(P3, (1 << (gpio_pin_id % 8)));
   05AF 74 07         [12] 1955 	mov	a,#0x07
   05B1 5F            [12] 1956 	anl	a,r7
   05B2 F5 F0         [12] 1957 	mov	b,a
   05B4 05 F0         [12] 1958 	inc	b
   05B6 74 01         [12] 1959 	mov	a,#0x01
   05B8 80 02         [24] 1960 	sjmp	00227$
   05BA                    1961 00225$:
   05BA 25 E0         [12] 1962 	add	a,acc
   05BC                    1963 00227$:
   05BC D5 F0 FB      [24] 1964 	djnz	b,00225$
   05BF F4            [12] 1965 	cpl	a
   05C0 FD            [12] 1966 	mov	r5,a
   05C1 52 B0         [12] 1967 	anl	_P3,a
   05C3                    1968 00121$:
                           1969 ;	../src/gpio/src/gpio_pin_configure.c:165: P3CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   05C3 74 07         [12] 1970 	mov	a,#0x07
   05C5 5F            [12] 1971 	anl	a,r7
   05C6 FD            [12] 1972 	mov	r5,a
   05C7 74 07         [12] 1973 	mov	a,#0x07
   05C9 5D            [12] 1974 	anl	a,r5
   05CA FC            [12] 1975 	mov	r4,a
                           1976 ;	../src/gpio/src/gpio_pin_configure.c:166: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   05CB 74 E0         [12] 1977 	mov	a,#0xE0
   05CD 5E            [12] 1978 	anl	a,r6
   05CE 4C            [12] 1979 	orl	a,r4
   05CF F5 8F         [12] 1980 	mov	_P3CON,a
                           1981 ;	../src/gpio/src/gpio_pin_configure.c:169: gpio_pins_dir_output(P3DIR, (1 << (gpio_pin_id % 8)));
   05D1 8D F0         [24] 1982 	mov	b,r5
   05D3 05 F0         [12] 1983 	inc	b
   05D5 74 01         [12] 1984 	mov	a,#0x01
   05D7 80 02         [24] 1985 	sjmp	00230$
   05D9                    1986 00228$:
   05D9 25 E0         [12] 1987 	add	a,acc
   05DB                    1988 00230$:
   05DB D5 F0 FB      [24] 1989 	djnz	b,00228$
   05DE F4            [12] 1990 	cpl	a
   05DF 52 96         [12] 1991 	anl	_P3DIR,a
   05E1 22            [24] 1992 	ret
   05E2                    1993 00123$:
                           1994 ;	../src/gpio/src/gpio_pin_configure.c:174: P3CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   05E2 53 07 07      [24] 1995 	anl	ar7,#0x07
   05E5 74 07         [12] 1996 	mov	a,#0x07
   05E7 5F            [12] 1997 	anl	a,r7
   05E8 44 10         [12] 1998 	orl	a,#0x10
   05EA FD            [12] 1999 	mov	r5,a
                           2000 ;	../src/gpio/src/gpio_pin_configure.c:176: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   05EB 74 E0         [12] 2001 	mov	a,#0xE0
   05ED 5E            [12] 2002 	anl	a,r6
   05EE 4D            [12] 2003 	orl	a,r5
   05EF F5 8F         [12] 2004 	mov	_P3CON,a
                           2005 ;	../src/gpio/src/gpio_pin_configure.c:179: gpio_pins_dir_input(P3DIR, (1 << (gpio_pin_id % 8)));
   05F1 8F F0         [24] 2006 	mov	b,r7
   05F3 05 F0         [12] 2007 	inc	b
   05F5 74 01         [12] 2008 	mov	a,#0x01
   05F7 80 02         [24] 2009 	sjmp	00233$
   05F9                    2010 00231$:
   05F9 25 E0         [12] 2011 	add	a,acc
   05FB                    2012 00233$:
   05FB D5 F0 FB      [24] 2013 	djnz	b,00231$
   05FE FF            [12] 2014 	mov	r7,a
   05FF 42 96         [12] 2015 	orl	_P3DIR,a
   0601                    2016 00136$:
   0601 22            [24] 2017 	ret
                           2018 ;------------------------------------------------------------
                           2019 ;Allocation info for local variables in function 'gpio_pin_val_read'
                           2020 ;------------------------------------------------------------
                           2021 ;gpio_pin_id               Allocated with name '_gpio_pin_val_read_gpio_pin_id_1_105'
                           2022 ;value                     Allocated with name '_gpio_pin_val_read_value_1_106'
                           2023 ;------------------------------------------------------------
                           2024 ;	../src/gpio/src/gpio_pin_val_read.c:46: bool gpio_pin_val_read(gpio_pin_id_t gpio_pin_id)
                           2025 ;	-----------------------------------------
                           2026 ;	 function gpio_pin_val_read
                           2027 ;	-----------------------------------------
   0602                    2028 _gpio_pin_val_read:
   0602 E5 82         [12] 2029 	mov	a,dpl
   0604 90r00r37      [24] 2030 	mov	dptr,#_gpio_pin_val_read_gpio_pin_id_1_105
   0607 F0            [24] 2031 	movx	@dptr,a
                           2032 ;	../src/gpio/src/gpio_pin_val_read.c:48: bool value = false;
   0608 90r00r38      [24] 2033 	mov	dptr,#_gpio_pin_val_read_value_1_106
   060B E4            [12] 2034 	clr	a
   060C F0            [24] 2035 	movx	@dptr,a
                           2036 ;	../src/gpio/src/gpio_pin_val_read.c:51: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   060D 90r00r37      [24] 2037 	mov	dptr,#_gpio_pin_val_read_gpio_pin_id_1_105
   0610 E0            [24] 2038 	movx	a,@dptr
   0611 FF            [12] 2039 	mov  r7,a
   0612 24 F8         [12] 2040 	add	a,#0xff - 0x07
   0614 40 19         [24] 2041 	jc	00110$
                           2042 ;	../src/gpio/src/gpio_pin_val_read.c:53: value = P0 & (1 << (gpio_pin_id % 8));
   0616 74 07         [12] 2043 	mov	a,#0x07
   0618 5F            [12] 2044 	anl	a,r7
   0619 F5 F0         [12] 2045 	mov	b,a
   061B 05 F0         [12] 2046 	inc	b
   061D 74 01         [12] 2047 	mov	a,#0x01
   061F 80 02         [24] 2048 	sjmp	00135$
   0621                    2049 00133$:
   0621 25 E0         [12] 2050 	add	a,acc
   0623                    2051 00135$:
   0623 D5 F0 FB      [24] 2052 	djnz	b,00133$
   0626 FE            [12] 2053 	mov	r6,a
   0627 90r00r38      [24] 2054 	mov	dptr,#_gpio_pin_val_read_value_1_106
   062A 55 80         [12] 2055 	anl	a,_P0
   062C F0            [24] 2056 	movx	@dptr,a
   062D 80 58         [24] 2057 	sjmp	00111$
   062F                    2058 00110$:
                           2059 ;	../src/gpio/src/gpio_pin_val_read.c:55: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   062F EF            [12] 2060 	mov	a,r7
   0630 24 F0         [12] 2061 	add	a,#0xff - 0x0F
   0632 40 19         [24] 2062 	jc	00107$
                           2063 ;	../src/gpio/src/gpio_pin_val_read.c:57: value = P1 & (1 << (gpio_pin_id % 8));
   0634 74 07         [12] 2064 	mov	a,#0x07
   0636 5F            [12] 2065 	anl	a,r7
   0637 F5 F0         [12] 2066 	mov	b,a
   0639 05 F0         [12] 2067 	inc	b
   063B 74 01         [12] 2068 	mov	a,#0x01
   063D 80 02         [24] 2069 	sjmp	00139$
   063F                    2070 00137$:
   063F 25 E0         [12] 2071 	add	a,acc
   0641                    2072 00139$:
   0641 D5 F0 FB      [24] 2073 	djnz	b,00137$
   0644 FE            [12] 2074 	mov	r6,a
   0645 90r00r38      [24] 2075 	mov	dptr,#_gpio_pin_val_read_value_1_106
   0648 55 90         [12] 2076 	anl	a,_P1
   064A F0            [24] 2077 	movx	@dptr,a
   064B 80 3A         [24] 2078 	sjmp	00111$
   064D                    2079 00107$:
                           2080 ;	../src/gpio/src/gpio_pin_val_read.c:59: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   064D EF            [12] 2081 	mov	a,r7
   064E 24 E8         [12] 2082 	add	a,#0xff - 0x17
   0650 40 19         [24] 2083 	jc	00104$
                           2084 ;	../src/gpio/src/gpio_pin_val_read.c:61: value = P2 & (1 << (gpio_pin_id % 8));
   0652 74 07         [12] 2085 	mov	a,#0x07
   0654 5F            [12] 2086 	anl	a,r7
   0655 F5 F0         [12] 2087 	mov	b,a
   0657 05 F0         [12] 2088 	inc	b
   0659 74 01         [12] 2089 	mov	a,#0x01
   065B 80 02         [24] 2090 	sjmp	00143$
   065D                    2091 00141$:
   065D 25 E0         [12] 2092 	add	a,acc
   065F                    2093 00143$:
   065F D5 F0 FB      [24] 2094 	djnz	b,00141$
   0662 FE            [12] 2095 	mov	r6,a
   0663 90r00r38      [24] 2096 	mov	dptr,#_gpio_pin_val_read_value_1_106
   0666 55 A0         [12] 2097 	anl	a,_P2
   0668 F0            [24] 2098 	movx	@dptr,a
   0669 80 1C         [24] 2099 	sjmp	00111$
   066B                    2100 00104$:
                           2101 ;	../src/gpio/src/gpio_pin_val_read.c:63: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   066B EF            [12] 2102 	mov	a,r7
   066C 24 E1         [12] 2103 	add	a,#0xff - 0x1E
   066E 40 17         [24] 2104 	jc	00111$
                           2105 ;	../src/gpio/src/gpio_pin_val_read.c:65: value = P3 & (1 << (gpio_pin_id % 8));
   0670 74 07         [12] 2106 	mov	a,#0x07
   0672 5F            [12] 2107 	anl	a,r7
   0673 F5 F0         [12] 2108 	mov	b,a
   0675 05 F0         [12] 2109 	inc	b
   0677 74 01         [12] 2110 	mov	a,#0x01
   0679 80 02         [24] 2111 	sjmp	00147$
   067B                    2112 00145$:
   067B 25 E0         [12] 2113 	add	a,acc
   067D                    2114 00147$:
   067D D5 F0 FB      [24] 2115 	djnz	b,00145$
   0680 FF            [12] 2116 	mov	r7,a
   0681 90r00r38      [24] 2117 	mov	dptr,#_gpio_pin_val_read_value_1_106
   0684 55 B0         [12] 2118 	anl	a,_P3
   0686 F0            [24] 2119 	movx	@dptr,a
   0687                    2120 00111$:
                           2121 ;	../src/gpio/src/gpio_pin_val_read.c:68: if(value)
   0687 90r00r38      [24] 2122 	mov	dptr,#_gpio_pin_val_read_value_1_106
   068A E0            [24] 2123 	movx	a,@dptr
   068B FF            [12] 2124 	mov	r7,a
   068C 60 04         [24] 2125 	jz	00113$
                           2126 ;	../src/gpio/src/gpio_pin_val_read.c:70: return true;
   068E 75 82 01      [24] 2127 	mov	dpl,#0x01
   0691 22            [24] 2128 	ret
   0692                    2129 00113$:
                           2130 ;	../src/gpio/src/gpio_pin_val_read.c:74: return false;
   0692 75 82 00      [24] 2131 	mov	dpl,#0x00
   0695 22            [24] 2132 	ret
                           2133 ;------------------------------------------------------------
                           2134 ;Allocation info for local variables in function 'gpio_pin_val_clear'
                           2135 ;------------------------------------------------------------
                           2136 ;gpio_pin_id               Allocated with name '_gpio_pin_val_clear_gpio_pin_id_1_113'
                           2137 ;------------------------------------------------------------
                           2138 ;	../src/gpio/src/gpio_pin_val_clear.c:46: void gpio_pin_val_clear(gpio_pin_id_t gpio_pin_id)
                           2139 ;	-----------------------------------------
                           2140 ;	 function gpio_pin_val_clear
                           2141 ;	-----------------------------------------
   0696                    2142 _gpio_pin_val_clear:
   0696 E5 82         [12] 2143 	mov	a,dpl
                           2144 ;	../src/gpio/src/gpio_pin_val_clear.c:49: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   0698 90r00r39      [24] 2145 	mov	dptr,#_gpio_pin_val_clear_gpio_pin_id_1_113
   069B F0            [24] 2146 	movx	@dptr,a
   069C FF            [12] 2147 	mov  r7,a
   069D 24 F8         [12] 2148 	add	a,#0xff - 0x07
   069F 40 14         [24] 2149 	jc	00110$
                           2150 ;	../src/gpio/src/gpio_pin_val_clear.c:51: gpio_pins_val_clear(P0, (1 << (gpio_pin_id % 8)));
   06A1 74 07         [12] 2151 	mov	a,#0x07
   06A3 5F            [12] 2152 	anl	a,r7
   06A4 F5 F0         [12] 2153 	mov	b,a
   06A6 05 F0         [12] 2154 	inc	b
   06A8 74 01         [12] 2155 	mov	a,#0x01
   06AA 80 02         [24] 2156 	sjmp	00129$
   06AC                    2157 00127$:
   06AC 25 E0         [12] 2158 	add	a,acc
   06AE                    2159 00129$:
   06AE D5 F0 FB      [24] 2160 	djnz	b,00127$
   06B1 F4            [12] 2161 	cpl	a
   06B2 52 80         [12] 2162 	anl	_P0,a
   06B4 22            [24] 2163 	ret
   06B5                    2164 00110$:
                           2165 ;	../src/gpio/src/gpio_pin_val_clear.c:53: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   06B5 EF            [12] 2166 	mov	a,r7
   06B6 24 F0         [12] 2167 	add	a,#0xff - 0x0F
   06B8 40 14         [24] 2168 	jc	00107$
                           2169 ;	../src/gpio/src/gpio_pin_val_clear.c:55: gpio_pins_val_clear(P1, (1 << (gpio_pin_id % 8)));
   06BA 74 07         [12] 2170 	mov	a,#0x07
   06BC 5F            [12] 2171 	anl	a,r7
   06BD F5 F0         [12] 2172 	mov	b,a
   06BF 05 F0         [12] 2173 	inc	b
   06C1 74 01         [12] 2174 	mov	a,#0x01
   06C3 80 02         [24] 2175 	sjmp	00133$
   06C5                    2176 00131$:
   06C5 25 E0         [12] 2177 	add	a,acc
   06C7                    2178 00133$:
   06C7 D5 F0 FB      [24] 2179 	djnz	b,00131$
   06CA F4            [12] 2180 	cpl	a
   06CB 52 90         [12] 2181 	anl	_P1,a
   06CD 22            [24] 2182 	ret
   06CE                    2183 00107$:
                           2184 ;	../src/gpio/src/gpio_pin_val_clear.c:57: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   06CE EF            [12] 2185 	mov	a,r7
   06CF 24 E8         [12] 2186 	add	a,#0xff - 0x17
   06D1 40 14         [24] 2187 	jc	00104$
                           2188 ;	../src/gpio/src/gpio_pin_val_clear.c:59: gpio_pins_val_clear(P2, (1 << (gpio_pin_id % 8)));
   06D3 74 07         [12] 2189 	mov	a,#0x07
   06D5 5F            [12] 2190 	anl	a,r7
   06D6 F5 F0         [12] 2191 	mov	b,a
   06D8 05 F0         [12] 2192 	inc	b
   06DA 74 01         [12] 2193 	mov	a,#0x01
   06DC 80 02         [24] 2194 	sjmp	00137$
   06DE                    2195 00135$:
   06DE 25 E0         [12] 2196 	add	a,acc
   06E0                    2197 00137$:
   06E0 D5 F0 FB      [24] 2198 	djnz	b,00135$
   06E3 F4            [12] 2199 	cpl	a
   06E4 52 A0         [12] 2200 	anl	_P2,a
   06E6 22            [24] 2201 	ret
   06E7                    2202 00104$:
                           2203 ;	../src/gpio/src/gpio_pin_val_clear.c:61: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   06E7 EF            [12] 2204 	mov	a,r7
   06E8 24 E1         [12] 2205 	add	a,#0xff - 0x1E
   06EA 40 14         [24] 2206 	jc	00112$
                           2207 ;	../src/gpio/src/gpio_pin_val_clear.c:63: gpio_pins_val_clear(P3, (1 << (gpio_pin_id % 8)));
   06EC 74 07         [12] 2208 	mov	a,#0x07
   06EE 5F            [12] 2209 	anl	a,r7
   06EF F5 F0         [12] 2210 	mov	b,a
   06F1 05 F0         [12] 2211 	inc	b
   06F3 74 01         [12] 2212 	mov	a,#0x01
   06F5 80 02         [24] 2213 	sjmp	00141$
   06F7                    2214 00139$:
   06F7 25 E0         [12] 2215 	add	a,acc
   06F9                    2216 00141$:
   06F9 D5 F0 FB      [24] 2217 	djnz	b,00139$
   06FC F4            [12] 2218 	cpl	a
   06FD FF            [12] 2219 	mov	r7,a
   06FE 52 B0         [12] 2220 	anl	_P3,a
   0700                    2221 00112$:
   0700 22            [24] 2222 	ret
                           2223 ;------------------------------------------------------------
                           2224 ;Allocation info for local variables in function 'gpio_pin_val_set'
                           2225 ;------------------------------------------------------------
                           2226 ;gpio_pin_id               Allocated with name '_gpio_pin_val_set_gpio_pin_id_1_119'
                           2227 ;------------------------------------------------------------
                           2228 ;	../src/gpio/src/gpio_pin_val_set.c:46: void gpio_pin_val_set(gpio_pin_id_t gpio_pin_id)
                           2229 ;	-----------------------------------------
                           2230 ;	 function gpio_pin_val_set
                           2231 ;	-----------------------------------------
   0701                    2232 _gpio_pin_val_set:
   0701 E5 82         [12] 2233 	mov	a,dpl
                           2234 ;	../src/gpio/src/gpio_pin_val_set.c:49: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   0703 90r00r3A      [24] 2235 	mov	dptr,#_gpio_pin_val_set_gpio_pin_id_1_119
   0706 F0            [24] 2236 	movx	@dptr,a
   0707 FF            [12] 2237 	mov  r7,a
   0708 24 F8         [12] 2238 	add	a,#0xff - 0x07
   070A 40 13         [24] 2239 	jc	00110$
                           2240 ;	../src/gpio/src/gpio_pin_val_set.c:51: gpio_pins_val_set(P0, (1 << (gpio_pin_id % 8)));
   070C 74 07         [12] 2241 	mov	a,#0x07
   070E 5F            [12] 2242 	anl	a,r7
   070F F5 F0         [12] 2243 	mov	b,a
   0711 05 F0         [12] 2244 	inc	b
   0713 74 01         [12] 2245 	mov	a,#0x01
   0715 80 02         [24] 2246 	sjmp	00129$
   0717                    2247 00127$:
   0717 25 E0         [12] 2248 	add	a,acc
   0719                    2249 00129$:
   0719 D5 F0 FB      [24] 2250 	djnz	b,00127$
   071C 42 80         [12] 2251 	orl	_P0,a
   071E 22            [24] 2252 	ret
   071F                    2253 00110$:
                           2254 ;	../src/gpio/src/gpio_pin_val_set.c:53: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   071F EF            [12] 2255 	mov	a,r7
   0720 24 F0         [12] 2256 	add	a,#0xff - 0x0F
   0722 40 13         [24] 2257 	jc	00107$
                           2258 ;	../src/gpio/src/gpio_pin_val_set.c:55: gpio_pins_val_set(P1, (1 << (gpio_pin_id % 8)));
   0724 74 07         [12] 2259 	mov	a,#0x07
   0726 5F            [12] 2260 	anl	a,r7
   0727 F5 F0         [12] 2261 	mov	b,a
   0729 05 F0         [12] 2262 	inc	b
   072B 74 01         [12] 2263 	mov	a,#0x01
   072D 80 02         [24] 2264 	sjmp	00133$
   072F                    2265 00131$:
   072F 25 E0         [12] 2266 	add	a,acc
   0731                    2267 00133$:
   0731 D5 F0 FB      [24] 2268 	djnz	b,00131$
   0734 42 90         [12] 2269 	orl	_P1,a
   0736 22            [24] 2270 	ret
   0737                    2271 00107$:
                           2272 ;	../src/gpio/src/gpio_pin_val_set.c:57: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   0737 EF            [12] 2273 	mov	a,r7
   0738 24 E8         [12] 2274 	add	a,#0xff - 0x17
   073A 40 13         [24] 2275 	jc	00104$
                           2276 ;	../src/gpio/src/gpio_pin_val_set.c:59: gpio_pins_val_set(P2, (1 << (gpio_pin_id % 8)));
   073C 74 07         [12] 2277 	mov	a,#0x07
   073E 5F            [12] 2278 	anl	a,r7
   073F F5 F0         [12] 2279 	mov	b,a
   0741 05 F0         [12] 2280 	inc	b
   0743 74 01         [12] 2281 	mov	a,#0x01
   0745 80 02         [24] 2282 	sjmp	00137$
   0747                    2283 00135$:
   0747 25 E0         [12] 2284 	add	a,acc
   0749                    2285 00137$:
   0749 D5 F0 FB      [24] 2286 	djnz	b,00135$
   074C 42 A0         [12] 2287 	orl	_P2,a
   074E 22            [24] 2288 	ret
   074F                    2289 00104$:
                           2290 ;	../src/gpio/src/gpio_pin_val_set.c:61: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   074F EF            [12] 2291 	mov	a,r7
   0750 24 E1         [12] 2292 	add	a,#0xff - 0x1E
   0752 40 13         [24] 2293 	jc	00112$
                           2294 ;	../src/gpio/src/gpio_pin_val_set.c:63: gpio_pins_val_set(P3, (1 << (gpio_pin_id % 8)));
   0754 74 07         [12] 2295 	mov	a,#0x07
   0756 5F            [12] 2296 	anl	a,r7
   0757 F5 F0         [12] 2297 	mov	b,a
   0759 05 F0         [12] 2298 	inc	b
   075B 74 01         [12] 2299 	mov	a,#0x01
   075D 80 02         [24] 2300 	sjmp	00141$
   075F                    2301 00139$:
   075F 25 E0         [12] 2302 	add	a,acc
   0761                    2303 00141$:
   0761 D5 F0 FB      [24] 2304 	djnz	b,00139$
   0764 FF            [12] 2305 	mov	r7,a
   0765 42 B0         [12] 2306 	orl	_P3,a
   0767                    2307 00112$:
   0767 22            [24] 2308 	ret
                           2309 ;------------------------------------------------------------
                           2310 ;Allocation info for local variables in function 'gpio_pin_val_write'
                           2311 ;------------------------------------------------------------
                           2312 ;value                     Allocated with name '_gpio_pin_val_write_PARM_2'
                           2313 ;gpio_pin_id               Allocated with name '_gpio_pin_val_write_gpio_pin_id_1_125'
                           2314 ;------------------------------------------------------------
                           2315 ;	../src/gpio/src/gpio_pin_val_write.c:47: void gpio_pin_val_write(gpio_pin_id_t gpio_pin_id, bool value)
                           2316 ;	-----------------------------------------
                           2317 ;	 function gpio_pin_val_write
                           2318 ;	-----------------------------------------
   0768                    2319 _gpio_pin_val_write:
   0768 E5 82         [12] 2320 	mov	a,dpl
   076A 90r00r3C      [24] 2321 	mov	dptr,#_gpio_pin_val_write_gpio_pin_id_1_125
   076D F0            [24] 2322 	movx	@dptr,a
                           2323 ;	../src/gpio/src/gpio_pin_val_write.c:50: if(value)
   076E 90r00r3B      [24] 2324 	mov	dptr,#_gpio_pin_val_write_PARM_2
   0771 E0            [24] 2325 	movx	a,@dptr
   0772 FF            [12] 2326 	mov	r7,a
   0773 60 09         [24] 2327 	jz	00102$
                           2328 ;	../src/gpio/src/gpio_pin_val_write.c:52: gpio_pin_val_set(gpio_pin_id);
   0775 90r00r3C      [24] 2329 	mov	dptr,#_gpio_pin_val_write_gpio_pin_id_1_125
   0778 E0            [24] 2330 	movx	a,@dptr
   0779 F5 82         [12] 2331 	mov	dpl,a
   077B 02r07r01      [24] 2332 	ljmp	_gpio_pin_val_set
   077E                    2333 00102$:
                           2334 ;	../src/gpio/src/gpio_pin_val_write.c:56: gpio_pin_val_clear(gpio_pin_id);
   077E 90r00r3C      [24] 2335 	mov	dptr,#_gpio_pin_val_write_gpio_pin_id_1_125
   0781 E0            [24] 2336 	movx	a,@dptr
   0782 F5 82         [12] 2337 	mov	dpl,a
   0784 02r06r96      [24] 2338 	ljmp	_gpio_pin_val_clear
                           2339 ;------------------------------------------------------------
                           2340 ;Allocation info for local variables in function 'delay_us'
                           2341 ;------------------------------------------------------------
                           2342 ;microseconds              Allocated with name '_delay_us_microseconds_1_129'
                           2343 ;count                     Allocated with name '_delay_us_count_1_130'
                           2344 ;------------------------------------------------------------
                           2345 ;	../src/delay/src/delay_us.c:46: void delay_us(uint16_t microseconds)
                           2346 ;	-----------------------------------------
                           2347 ;	 function delay_us
                           2348 ;	-----------------------------------------
   0787                    2349 _delay_us:
   0787 AF 83         [24] 2350 	mov	r7,dph
   0789 E5 82         [12] 2351 	mov	a,dpl
   078B 90r00r3D      [24] 2352 	mov	dptr,#_delay_us_microseconds_1_129
   078E F0            [24] 2353 	movx	@dptr,a
   078F EF            [12] 2354 	mov	a,r7
   0790 A3            [24] 2355 	inc	dptr
   0791 F0            [24] 2356 	movx	@dptr,a
                           2357 ;	../src/delay/src/delay_us.c:51: if(microseconds == 0)
   0792 90r00r3D      [24] 2358 	mov	dptr,#_delay_us_microseconds_1_129
   0795 E0            [24] 2359 	movx	a,@dptr
   0796 FE            [12] 2360 	mov	r6,a
   0797 A3            [24] 2361 	inc	dptr
   0798 E0            [24] 2362 	movx	a,@dptr
   0799 FF            [12] 2363 	mov	r7,a
   079A 4E            [12] 2364 	orl	a,r6
   079B 70 01         [24] 2365 	jnz	00102$
                           2366 ;	../src/delay/src/delay_us.c:52: return;
   079D 22            [24] 2367 	ret
   079E                    2368 00102$:
                           2369 ;	../src/delay/src/delay_us.c:54: microseconds -= 1;
   079E 1E            [12] 2370 	dec	r6
   079F BE FF 01      [24] 2371 	cjne	r6,#0xFF,00121$
   07A2 1F            [12] 2372 	dec	r7
   07A3                    2373 00121$:
   07A3 90r00r3D      [24] 2374 	mov	dptr,#_delay_us_microseconds_1_129
   07A6 EE            [12] 2375 	mov	a,r6
   07A7 F0            [24] 2376 	movx	@dptr,a
   07A8 EF            [12] 2377 	mov	a,r7
   07A9 A3            [24] 2378 	inc	dptr
   07AA F0            [24] 2379 	movx	@dptr,a
                           2380 ;	../src/delay/src/delay_us.c:56: for(count = 0; count < microseconds; count++)
   07AB 90r00r3D      [24] 2381 	mov	dptr,#_delay_us_microseconds_1_129
   07AE E0            [24] 2382 	movx	a,@dptr
   07AF FE            [12] 2383 	mov	r6,a
   07B0 A3            [24] 2384 	inc	dptr
   07B1 E0            [24] 2385 	movx	a,@dptr
   07B2 FF            [12] 2386 	mov	r7,a
   07B3 7C 00         [12] 2387 	mov	r4,#0x00
   07B5 7D 00         [12] 2388 	mov	r5,#0x00
   07B7                    2389 00106$:
   07B7 C3            [12] 2390 	clr	c
   07B8 EC            [12] 2391 	mov	a,r4
   07B9 9E            [12] 2392 	subb	a,r6
   07BA ED            [12] 2393 	mov	a,r5
   07BB 9F            [12] 2394 	subb	a,r7
   07BC 50 09         [24] 2395 	jnc	00108$
                           2396 ;	../src/delay/src/delay_us.c:58: nop();
   07BE 00            [12] 2397 	nop 
                           2398 ;	../src/delay/src/delay_us.c:59: nop();
   07BF 00            [12] 2399 	nop 
                           2400 ;	../src/delay/src/delay_us.c:56: for(count = 0; count < microseconds; count++)
   07C0 0C            [12] 2401 	inc	r4
   07C1 BC 00 F3      [24] 2402 	cjne	r4,#0x00,00106$
   07C4 0D            [12] 2403 	inc	r5
   07C5 80 F0         [24] 2404 	sjmp	00106$
   07C7                    2405 00108$:
   07C7 22            [24] 2406 	ret
                           2407 ;------------------------------------------------------------
                           2408 ;Allocation info for local variables in function 'delay_s'
                           2409 ;------------------------------------------------------------
                           2410 ;seconds                   Allocated with name '_delay_s_seconds_1_132'
                           2411 ;count                     Allocated with name '_delay_s_count_1_133'
                           2412 ;------------------------------------------------------------
                           2413 ;	../src/delay/src/delay_s.c:46: void delay_s(uint16_t seconds)
                           2414 ;	-----------------------------------------
                           2415 ;	 function delay_s
                           2416 ;	-----------------------------------------
   07C8                    2417 _delay_s:
   07C8 AF 83         [24] 2418 	mov	r7,dph
   07CA E5 82         [12] 2419 	mov	a,dpl
   07CC 90r00r3F      [24] 2420 	mov	dptr,#_delay_s_seconds_1_132
   07CF F0            [24] 2421 	movx	@dptr,a
   07D0 EF            [12] 2422 	mov	a,r7
   07D1 A3            [24] 2423 	inc	dptr
   07D2 F0            [24] 2424 	movx	@dptr,a
                           2425 ;	../src/delay/src/delay_s.c:51: for(count = 0; count < seconds; count++)
   07D3 90r00r3F      [24] 2426 	mov	dptr,#_delay_s_seconds_1_132
   07D6 E0            [24] 2427 	movx	a,@dptr
   07D7 FE            [12] 2428 	mov	r6,a
   07D8 A3            [24] 2429 	inc	dptr
   07D9 E0            [24] 2430 	movx	a,@dptr
   07DA FF            [12] 2431 	mov	r7,a
   07DB 7C 00         [12] 2432 	mov	r4,#0x00
   07DD 7D 00         [12] 2433 	mov	r5,#0x00
   07DF                    2434 00103$:
   07DF C3            [12] 2435 	clr	c
   07E0 EC            [12] 2436 	mov	a,r4
   07E1 9E            [12] 2437 	subb	a,r6
   07E2 ED            [12] 2438 	mov	a,r5
   07E3 9F            [12] 2439 	subb	a,r7
   07E4 50 1D         [24] 2440 	jnc	00105$
                           2441 ;	../src/delay/src/delay_s.c:53: delay_ms(1000);
   07E6 90 03 E8      [24] 2442 	mov	dptr,#0x03E8
   07E9 C0 07         [24] 2443 	push	ar7
   07EB C0 06         [24] 2444 	push	ar6
   07ED C0 05         [24] 2445 	push	ar5
   07EF C0 04         [24] 2446 	push	ar4
   07F1 12r08r04      [24] 2447 	lcall	_delay_ms
   07F4 D0 04         [24] 2448 	pop	ar4
   07F6 D0 05         [24] 2449 	pop	ar5
   07F8 D0 06         [24] 2450 	pop	ar6
   07FA D0 07         [24] 2451 	pop	ar7
                           2452 ;	../src/delay/src/delay_s.c:51: for(count = 0; count < seconds; count++)
   07FC 0C            [12] 2453 	inc	r4
   07FD BC 00 DF      [24] 2454 	cjne	r4,#0x00,00103$
   0800 0D            [12] 2455 	inc	r5
   0801 80 DC         [24] 2456 	sjmp	00103$
   0803                    2457 00105$:
   0803 22            [24] 2458 	ret
                           2459 ;------------------------------------------------------------
                           2460 ;Allocation info for local variables in function 'delay_ms'
                           2461 ;------------------------------------------------------------
                           2462 ;milliseconds              Allocated with name '_delay_ms_milliseconds_1_135'
                           2463 ;count                     Allocated with name '_delay_ms_count_1_136'
                           2464 ;------------------------------------------------------------
                           2465 ;	../src/delay/src/delay_ms.c:46: void delay_ms(uint16_t milliseconds)
                           2466 ;	-----------------------------------------
                           2467 ;	 function delay_ms
                           2468 ;	-----------------------------------------
   0804                    2469 _delay_ms:
   0804 AF 83         [24] 2470 	mov	r7,dph
   0806 E5 82         [12] 2471 	mov	a,dpl
   0808 90r00r41      [24] 2472 	mov	dptr,#_delay_ms_milliseconds_1_135
   080B F0            [24] 2473 	movx	@dptr,a
   080C EF            [12] 2474 	mov	a,r7
   080D A3            [24] 2475 	inc	dptr
   080E F0            [24] 2476 	movx	@dptr,a
                           2477 ;	../src/delay/src/delay_ms.c:51: for(count = 0; count < milliseconds; count++)
   080F 90r00r41      [24] 2478 	mov	dptr,#_delay_ms_milliseconds_1_135
   0812 E0            [24] 2479 	movx	a,@dptr
   0813 FE            [12] 2480 	mov	r6,a
   0814 A3            [24] 2481 	inc	dptr
   0815 E0            [24] 2482 	movx	a,@dptr
   0816 FF            [12] 2483 	mov	r7,a
   0817 7C 00         [12] 2484 	mov	r4,#0x00
   0819 7D 00         [12] 2485 	mov	r5,#0x00
   081B                    2486 00103$:
   081B C3            [12] 2487 	clr	c
   081C EC            [12] 2488 	mov	a,r4
   081D 9E            [12] 2489 	subb	a,r6
   081E ED            [12] 2490 	mov	a,r5
   081F 9F            [12] 2491 	subb	a,r7
   0820 50 1D         [24] 2492 	jnc	00105$
                           2493 ;	../src/delay/src/delay_ms.c:53: delay_us(1000);
   0822 90 03 E8      [24] 2494 	mov	dptr,#0x03E8
   0825 C0 07         [24] 2495 	push	ar7
   0827 C0 06         [24] 2496 	push	ar6
   0829 C0 05         [24] 2497 	push	ar5
   082B C0 04         [24] 2498 	push	ar4
   082D 12r07r87      [24] 2499 	lcall	_delay_us
   0830 D0 04         [24] 2500 	pop	ar4
   0832 D0 05         [24] 2501 	pop	ar5
   0834 D0 06         [24] 2502 	pop	ar6
   0836 D0 07         [24] 2503 	pop	ar7
                           2504 ;	../src/delay/src/delay_ms.c:51: for(count = 0; count < milliseconds; count++)
   0838 0C            [12] 2505 	inc	r4
   0839 BC 00 DF      [24] 2506 	cjne	r4,#0x00,00103$
   083C 0D            [12] 2507 	inc	r5
   083D 80 DC         [24] 2508 	sjmp	00103$
   083F                    2509 00105$:
   083F 22            [24] 2510 	ret
                           2511 ;------------------------------------------------------------
                           2512 ;Allocation info for local variables in function 'pwm_configure'
                           2513 ;------------------------------------------------------------
                           2514 ;pwm_config_options        Allocated with name '_pwm_configure_pwm_config_options_1_140'
                           2515 ;------------------------------------------------------------
                           2516 ;	../src/pwm/src/pwm_configure.c:52: void pwm_configure(uint8_t pwm_config_options)
                           2517 ;	-----------------------------------------
                           2518 ;	 function pwm_configure
                           2519 ;	-----------------------------------------
   0840                    2520 _pwm_configure:
   0840 E5 82         [12] 2521 	mov	a,dpl
   0842 90r00r43      [24] 2522 	mov	dptr,#_pwm_configure_pwm_config_options_1_140
   0845 F0            [24] 2523 	movx	@dptr,a
                           2524 ;	../src/pwm/src/pwm_configure.c:55: PWMCON = (PWMCON & ~PWM_CONFIG_OPTION_PWMCON_MASK) | (pwm_config_options & PWM_CONFIG_OPTION_PWMCON_MASK);
   0846 AF B2         [24] 2525 	mov	r7,_PWMCON
   0848 53 07 03      [24] 2526 	anl	ar7,#0x03
   084B 90r00r43      [24] 2527 	mov	dptr,#_pwm_configure_pwm_config_options_1_140
   084E E0            [24] 2528 	movx	a,@dptr
   084F 54 FC         [12] 2529 	anl	a,#0xFC
   0851 4F            [12] 2530 	orl	a,r7
   0852 F5 B2         [12] 2531 	mov	_PWMCON,a
   0854 22            [24] 2532 	ret
                           2533 ;------------------------------------------------------------
                           2534 ;Allocation info for local variables in function 'pwm_start'
                           2535 ;------------------------------------------------------------
                           2536 ;pwm_duty_cycle            Allocated with name '_pwm_start_PARM_2'
                           2537 ;pwm_channel               Allocated with name '_pwm_start_pwm_channel_1_142'
                           2538 ;------------------------------------------------------------
                           2539 ;	../src/pwm/src/pwm_start.c:47: void pwm_start(pwm_channel_t pwm_channel, uint8_t pwm_duty_cycle)
                           2540 ;	-----------------------------------------
                           2541 ;	 function pwm_start
                           2542 ;	-----------------------------------------
   0855                    2543 _pwm_start:
   0855 E5 82         [12] 2544 	mov	a,dpl
                           2545 ;	../src/pwm/src/pwm_start.c:50: if(pwm_channel == PWM_CHANNEL_0)
   0857 90r00r45      [24] 2546 	mov	dptr,#_pwm_start_pwm_channel_1_142
   085A F0            [24] 2547 	movx	@dptr,a
   085B FF            [12] 2548 	mov	r7,a
   085C 70 0A         [24] 2549 	jnz	00102$
                           2550 ;	../src/pwm/src/pwm_start.c:52: PWMDC0 = pwm_duty_cycle;
   085E 90r00r44      [24] 2551 	mov	dptr,#_pwm_start_PARM_2
   0861 E0            [24] 2552 	movx	a,@dptr
   0862 F5 A1         [12] 2553 	mov	_PWMDC0,a
                           2554 ;	../src/pwm/src/pwm_start.c:53: reg_bits_set(PWMCON, PWMCON_PWM0_ENABLE);
   0864 43 B2 01      [24] 2555 	orl	_PWMCON,#0x01
   0867 22            [24] 2556 	ret
   0868                    2557 00102$:
                           2558 ;	../src/pwm/src/pwm_start.c:57: PWMDC1 = pwm_duty_cycle;
   0868 90r00r44      [24] 2559 	mov	dptr,#_pwm_start_PARM_2
   086B E0            [24] 2560 	movx	a,@dptr
   086C F5 A2         [12] 2561 	mov	_PWMDC1,a
                           2562 ;	../src/pwm/src/pwm_start.c:58: reg_bits_set(PWMCON, PWMCON_PWM1_ENABLE);
   086E 43 B2 02      [24] 2563 	orl	_PWMCON,#0x02
   0871 22            [24] 2564 	ret
                           2565 ;------------------------------------------------------------
                           2566 ;Allocation info for local variables in function 'pwr_clk_mgmt_clklf_configure'
                           2567 ;------------------------------------------------------------
                           2568 ;clklf_config_options      Allocated with name '_pwr_clk_mgmt_clklf_configure_clklf_config_options_1_151'
                           2569 ;------------------------------------------------------------
                           2570 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_clklf_configure.c:52: void pwr_clk_mgmt_clklf_configure(uint8_t clklf_config_options)
                           2571 ;	-----------------------------------------
                           2572 ;	 function pwr_clk_mgmt_clklf_configure
                           2573 ;	-----------------------------------------
   0872                    2574 _pwr_clk_mgmt_clklf_configure:
   0872 E5 82         [12] 2575 	mov	a,dpl
   0874 90r00r46      [24] 2576 	mov	dptr,#_pwr_clk_mgmt_clklf_configure_clklf_config_options_1_151
   0877 F0            [24] 2577 	movx	@dptr,a
                           2578 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_clklf_configure.c:55: CLKLFCTRL = (CLKLFCTRL & ~PWR_CLK_MGMT_CLKLF_CONFIG_OPTION_CLKLFCTRL_MASK) | (clklf_config_options & PWR_CLK_MGMT_CLKLF_CONFIG_OPTION_CLKLFCTRL_MASK);
   0878 AF AD         [24] 2579 	mov	r7,_CLKLFCTRL
   087A 53 07 F8      [24] 2580 	anl	ar7,#0xF8
   087D 90r00r46      [24] 2581 	mov	dptr,#_pwr_clk_mgmt_clklf_configure_clklf_config_options_1_151
   0880 E0            [24] 2582 	movx	a,@dptr
   0881 54 07         [12] 2583 	anl	a,#0x07
   0883 4F            [12] 2584 	orl	a,r7
   0884 F5 AD         [12] 2585 	mov	_CLKLFCTRL,a
   0886 22            [24] 2586 	ret
                           2587 ;------------------------------------------------------------
                           2588 ;Allocation info for local variables in function 'pwr_clk_mgmt_get_cclk_freq_in_hz'
                           2589 ;------------------------------------------------------------
                           2590 ;divider                   Allocated with name '_pwr_clk_mgmt_get_cclk_freq_in_hz_divider_1_153'
                           2591 ;i                         Allocated with name '_pwr_clk_mgmt_get_cclk_freq_in_hz_i_1_153'
                           2592 ;cclk_freq_hz              Allocated with name '_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_153'
                           2593 ;------------------------------------------------------------
                           2594 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:46: uint32_t pwr_clk_mgmt_get_cclk_freq_in_hz()
                           2595 ;	-----------------------------------------
                           2596 ;	 function pwr_clk_mgmt_get_cclk_freq_in_hz
                           2597 ;	-----------------------------------------
   0887                    2598 _pwr_clk_mgmt_get_cclk_freq_in_hz:
                           2599 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:48: uint8_t divider = (CLKCTRL & CLKCTRL_CLK_FREQ_MASK) >> CLKCTRL_CLK_FREQ_SHIFT;
   0887 74 07         [12] 2600 	mov	a,#0x07
   0889 55 A3         [12] 2601 	anl	a,_CLKCTRL
   088B FF            [12] 2602 	mov	r7,a
                           2603 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:50: uint32_t cclk_freq_hz = CCLK_MAX_FREQ_HZ;
   088C 90r00r47      [24] 2604 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_153
   088F E4            [12] 2605 	clr	a
   0890 F0            [24] 2606 	movx	@dptr,a
   0891 74 24         [12] 2607 	mov	a,#0x24
   0893 A3            [24] 2608 	inc	dptr
   0894 F0            [24] 2609 	movx	@dptr,a
   0895 74 F4         [12] 2610 	mov	a,#0xF4
   0897 A3            [24] 2611 	inc	dptr
   0898 F0            [24] 2612 	movx	@dptr,a
   0899 E4            [12] 2613 	clr	a
   089A A3            [24] 2614 	inc	dptr
   089B F0            [24] 2615 	movx	@dptr,a
                           2616 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:52: for(i = 0; i < divider; i++)
   089C 7E 00         [12] 2617 	mov	r6,#0x00
   089E                    2618 00103$:
   089E C3            [12] 2619 	clr	c
   089F EE            [12] 2620 	mov	a,r6
   08A0 9F            [12] 2621 	subb	a,r7
   08A1 50 29         [24] 2622 	jnc	00101$
                           2623 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:54: cclk_freq_hz /= 2;
   08A3 90r00r47      [24] 2624 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_153
   08A6 E0            [24] 2625 	movx	a,@dptr
   08A7 FA            [12] 2626 	mov	r2,a
   08A8 A3            [24] 2627 	inc	dptr
   08A9 E0            [24] 2628 	movx	a,@dptr
   08AA FB            [12] 2629 	mov	r3,a
   08AB A3            [24] 2630 	inc	dptr
   08AC E0            [24] 2631 	movx	a,@dptr
   08AD FC            [12] 2632 	mov	r4,a
   08AE A3            [24] 2633 	inc	dptr
   08AF E0            [24] 2634 	movx	a,@dptr
   08B0 C3            [12] 2635 	clr	c
   08B1 13            [12] 2636 	rrc	a
   08B2 FD            [12] 2637 	mov	r5,a
   08B3 EC            [12] 2638 	mov	a,r4
   08B4 13            [12] 2639 	rrc	a
   08B5 FC            [12] 2640 	mov	r4,a
   08B6 EB            [12] 2641 	mov	a,r3
   08B7 13            [12] 2642 	rrc	a
   08B8 FB            [12] 2643 	mov	r3,a
   08B9 EA            [12] 2644 	mov	a,r2
   08BA 13            [12] 2645 	rrc	a
   08BB FA            [12] 2646 	mov	r2,a
   08BC 90r00r47      [24] 2647 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_153
   08BF F0            [24] 2648 	movx	@dptr,a
   08C0 EB            [12] 2649 	mov	a,r3
   08C1 A3            [24] 2650 	inc	dptr
   08C2 F0            [24] 2651 	movx	@dptr,a
   08C3 EC            [12] 2652 	mov	a,r4
   08C4 A3            [24] 2653 	inc	dptr
   08C5 F0            [24] 2654 	movx	@dptr,a
   08C6 ED            [12] 2655 	mov	a,r5
   08C7 A3            [24] 2656 	inc	dptr
   08C8 F0            [24] 2657 	movx	@dptr,a
                           2658 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:52: for(i = 0; i < divider; i++)
   08C9 0E            [12] 2659 	inc	r6
   08CA 80 D2         [24] 2660 	sjmp	00103$
   08CC                    2661 00101$:
                           2662 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:57: return cclk_freq_hz;
   08CC 90r00r47      [24] 2663 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_153
   08CF E0            [24] 2664 	movx	a,@dptr
   08D0 FC            [12] 2665 	mov	r4,a
   08D1 A3            [24] 2666 	inc	dptr
   08D2 E0            [24] 2667 	movx	a,@dptr
   08D3 FD            [12] 2668 	mov	r5,a
   08D4 A3            [24] 2669 	inc	dptr
   08D5 E0            [24] 2670 	movx	a,@dptr
   08D6 FE            [12] 2671 	mov	r6,a
   08D7 A3            [24] 2672 	inc	dptr
   08D8 E0            [24] 2673 	movx	a,@dptr
   08D9 8C 82         [24] 2674 	mov	dpl,r4
   08DB 8D 83         [24] 2675 	mov	dph,r5
   08DD 8E F0         [24] 2676 	mov	b,r6
   08DF 22            [24] 2677 	ret
                           2678 ;------------------------------------------------------------
                           2679 ;Allocation info for local variables in function 'watchdog_set_wdsv_count'
                           2680 ;------------------------------------------------------------
                           2681 ;wdsv_value                Allocated with name '_watchdog_set_wdsv_count_wdsv_value_1_156'
                           2682 ;------------------------------------------------------------
                           2683 ;	../src/watchdog/src/watchdog_set_wdsv_count.c:46: void watchdog_set_wdsv_count(uint16_t wdsv_value)
                           2684 ;	-----------------------------------------
                           2685 ;	 function watchdog_set_wdsv_count
                           2686 ;	-----------------------------------------
   08E0                    2687 _watchdog_set_wdsv_count:
   08E0 AF 83         [24] 2688 	mov	r7,dph
   08E2 E5 82         [12] 2689 	mov	a,dpl
   08E4 90r00r4B      [24] 2690 	mov	dptr,#_watchdog_set_wdsv_count_wdsv_value_1_156
   08E7 F0            [24] 2691 	movx	@dptr,a
   08E8 EF            [12] 2692 	mov	a,r7
   08E9 A3            [24] 2693 	inc	dptr
   08EA F0            [24] 2694 	movx	@dptr,a
                           2695 ;	../src/watchdog/src/watchdog_set_wdsv_count.c:49: WDSV = (uint8_t)wdsv_value;
   08EB 90r00r4B      [24] 2696 	mov	dptr,#_watchdog_set_wdsv_count_wdsv_value_1_156
   08EE E0            [24] 2697 	movx	a,@dptr
   08EF FE            [12] 2698 	mov	r6,a
   08F0 A3            [24] 2699 	inc	dptr
   08F1 E0            [24] 2700 	movx	a,@dptr
   08F2 FF            [12] 2701 	mov	r7,a
   08F3 8E AF         [24] 2702 	mov	_WDSV,r6
                           2703 ;	../src/watchdog/src/watchdog_set_wdsv_count.c:50: WDSV = (uint8_t)(wdsv_value >> 8);
   08F5 8F AF         [24] 2704 	mov	_WDSV,r7
   08F7 22            [24] 2705 	ret
                           2706 ;------------------------------------------------------------
                           2707 ;Allocation info for local variables in function 'watchdog_start_and_set_timeout_in_ms'
                           2708 ;------------------------------------------------------------
                           2709 ;milliseconds              Allocated with name '_watchdog_start_and_set_timeout_in_ms_milliseconds_1_158'
                           2710 ;wd_value                  Allocated with name '_watchdog_start_and_set_timeout_in_ms_wd_value_1_159'
                           2711 ;------------------------------------------------------------
                           2712 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:50: uint16_t watchdog_start_and_set_timeout_in_ms(uint32_t milliseconds)
                           2713 ;	-----------------------------------------
                           2714 ;	 function watchdog_start_and_set_timeout_in_ms
                           2715 ;	-----------------------------------------
   08F8                    2716 _watchdog_start_and_set_timeout_in_ms:
   08F8 AF 82         [24] 2717 	mov	r7,dpl
   08FA AE 83         [24] 2718 	mov	r6,dph
   08FC AD F0         [24] 2719 	mov	r5,b
   08FE FC            [12] 2720 	mov	r4,a
   08FF 90r00r4D      [24] 2721 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_milliseconds_1_158
   0902 EF            [12] 2722 	mov	a,r7
   0903 F0            [24] 2723 	movx	@dptr,a
   0904 EE            [12] 2724 	mov	a,r6
   0905 A3            [24] 2725 	inc	dptr
   0906 F0            [24] 2726 	movx	@dptr,a
   0907 ED            [12] 2727 	mov	a,r5
   0908 A3            [24] 2728 	inc	dptr
   0909 F0            [24] 2729 	movx	@dptr,a
   090A EC            [12] 2730 	mov	a,r4
   090B A3            [24] 2731 	inc	dptr
   090C F0            [24] 2732 	movx	@dptr,a
                           2733 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:52: uint16_t wd_value = 0;
   090D 90r00r51      [24] 2734 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_wd_value_1_159
   0910 E4            [12] 2735 	clr	a
   0911 F0            [24] 2736 	movx	@dptr,a
   0912 E4            [12] 2737 	clr	a
   0913 A3            [24] 2738 	inc	dptr
   0914 F0            [24] 2739 	movx	@dptr,a
                           2740 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:55: if(!pwr_clk_mgmt_is_clklf_enabled())
   0915 74 07         [12] 2741 	mov	a,#0x07
   0917 55 AD         [12] 2742 	anl	a,_CLKLFCTRL
   0919 FF            [12] 2743 	mov	r7,a
   091A BF 07 0B      [24] 2744 	cjne	r7,#0x07,00105$
                           2745 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:58: pwr_clk_mgmt_clklf_configure(PWR_CLK_MGMT_CLKLF_CONFIG_OPTION_CLK_SRC_XOSC16M);
   091D 75 82 02      [24] 2746 	mov	dpl,#0x02
   0920 12r08r72      [24] 2747 	lcall	_pwr_clk_mgmt_clklf_configure
                           2748 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:59: pwr_clk_mgmt_wait_until_clklf_is_ready();
   0923                    2749 00101$:
   0923 E5 AD         [12] 2750 	mov	a,_CLKLFCTRL
   0925 30 E6 FB      [24] 2751 	jnb	acc.6,00101$
   0928                    2752 00105$:
                           2753 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:63: if(milliseconds < 511992)
   0928 90r00r4D      [24] 2754 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_milliseconds_1_158
   092B E0            [24] 2755 	movx	a,@dptr
   092C FC            [12] 2756 	mov	r4,a
   092D A3            [24] 2757 	inc	dptr
   092E E0            [24] 2758 	movx	a,@dptr
   092F FD            [12] 2759 	mov	r5,a
   0930 A3            [24] 2760 	inc	dptr
   0931 E0            [24] 2761 	movx	a,@dptr
   0932 FE            [12] 2762 	mov	r6,a
   0933 A3            [24] 2763 	inc	dptr
   0934 E0            [24] 2764 	movx	a,@dptr
   0935 FF            [12] 2765 	mov	r7,a
   0936 C3            [12] 2766 	clr	c
   0937 EC            [12] 2767 	mov	a,r4
   0938 94 F8         [12] 2768 	subb	a,#0xF8
   093A ED            [12] 2769 	mov	a,r5
   093B 94 CF         [12] 2770 	subb	a,#0xCF
   093D EE            [12] 2771 	mov	a,r6
   093E 94 07         [12] 2772 	subb	a,#0x07
   0940 EF            [12] 2773 	mov	a,r7
   0941 94 00         [12] 2774 	subb	a,#0x00
   0943 50 52         [24] 2775 	jnc	00107$
                           2776 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:90: wd_value = (uint16_t)(((uint32_t)(milliseconds * ((uint32_t)128)) + (uint32_t)500) / ((uint32_t)1000));
   0945 EF            [12] 2777 	mov	a,r7
   0946 54 01         [12] 2778 	anl	a,#0x01
   0948 A2 E0         [12] 2779 	mov	c,acc.0
   094A CE            [12] 2780 	xch	a,r6
   094B 13            [12] 2781 	rrc	a
   094C CE            [12] 2782 	xch	a,r6
   094D 13            [12] 2783 	rrc	a
   094E CE            [12] 2784 	xch	a,r6
   094F FF            [12] 2785 	mov	r7,a
   0950 ED            [12] 2786 	mov	a,r5
   0951 C3            [12] 2787 	clr	c
   0952 13            [12] 2788 	rrc	a
   0953 4E            [12] 2789 	orl	a,r6
   0954 FE            [12] 2790 	mov	r6,a
   0955 ED            [12] 2791 	mov	a,r5
   0956 54 01         [12] 2792 	anl	a,#0x01
   0958 A2 E0         [12] 2793 	mov	c,acc.0
   095A CC            [12] 2794 	xch	a,r4
   095B 13            [12] 2795 	rrc	a
   095C CC            [12] 2796 	xch	a,r4
   095D 13            [12] 2797 	rrc	a
   095E CC            [12] 2798 	xch	a,r4
   095F FD            [12] 2799 	mov	r5,a
   0960 74 F4         [12] 2800 	mov	a,#0xF4
   0962 2C            [12] 2801 	add	a,r4
   0963 FC            [12] 2802 	mov	r4,a
   0964 74 01         [12] 2803 	mov	a,#0x01
   0966 3D            [12] 2804 	addc	a,r5
   0967 FD            [12] 2805 	mov	r5,a
   0968 E4            [12] 2806 	clr	a
   0969 3E            [12] 2807 	addc	a,r6
   096A FE            [12] 2808 	mov	r6,a
   096B E4            [12] 2809 	clr	a
   096C 3F            [12] 2810 	addc	a,r7
   096D FF            [12] 2811 	mov	r7,a
   096E 90r00r00      [24] 2812 	mov	dptr,#__divulong_PARM_2
   0971 74 E8         [12] 2813 	mov	a,#0xE8
   0973 F0            [24] 2814 	movx	@dptr,a
   0974 74 03         [12] 2815 	mov	a,#0x03
   0976 A3            [24] 2816 	inc	dptr
   0977 F0            [24] 2817 	movx	@dptr,a
   0978 E4            [12] 2818 	clr	a
   0979 A3            [24] 2819 	inc	dptr
   097A F0            [24] 2820 	movx	@dptr,a
   097B E4            [12] 2821 	clr	a
   097C A3            [24] 2822 	inc	dptr
   097D F0            [24] 2823 	movx	@dptr,a
   097E 8C 82         [24] 2824 	mov	dpl,r4
   0980 8D 83         [24] 2825 	mov	dph,r5
   0982 8E F0         [24] 2826 	mov	b,r6
   0984 EF            [12] 2827 	mov	a,r7
   0985 12r00r00      [24] 2828 	lcall	__divulong
   0988 AC 82         [24] 2829 	mov	r4,dpl
   098A AD 83         [24] 2830 	mov	r5,dph
   098C AE F0         [24] 2831 	mov	r6,b
   098E FF            [12] 2832 	mov	r7,a
   098F 90r00r51      [24] 2833 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_wd_value_1_159
   0992 EC            [12] 2834 	mov	a,r4
   0993 F0            [24] 2835 	movx	@dptr,a
   0994 ED            [12] 2836 	mov	a,r5
   0995 A3            [24] 2837 	inc	dptr
   0996 F0            [24] 2838 	movx	@dptr,a
   0997                    2839 00107$:
                           2840 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:93: watchdog_set_wdsv_count(wd_value);
   0997 90r00r51      [24] 2841 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_wd_value_1_159
   099A E0            [24] 2842 	movx	a,@dptr
   099B FE            [12] 2843 	mov	r6,a
   099C A3            [24] 2844 	inc	dptr
   099D E0            [24] 2845 	movx	a,@dptr
   099E FF            [12] 2846 	mov	r7,a
   099F 8E 82         [24] 2847 	mov	dpl,r6
   09A1 8F 83         [24] 2848 	mov	dph,r7
   09A3 C0 07         [24] 2849 	push	ar7
   09A5 C0 06         [24] 2850 	push	ar6
   09A7 12r08rE0      [24] 2851 	lcall	_watchdog_set_wdsv_count
   09AA D0 06         [24] 2852 	pop	ar6
   09AC D0 07         [24] 2853 	pop	ar7
                           2854 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:95: return wd_value;
   09AE 8E 82         [24] 2855 	mov	dpl,r6
   09B0 8F 83         [24] 2856 	mov	dph,r7
   09B2 22            [24] 2857 	ret
                           2858 ;------------------------------------------------------------
                           2859 ;Allocation info for local variables in function 'interrupt_configure_ifp'
                           2860 ;------------------------------------------------------------
                           2861 ;ifp_int_config_options    Allocated with name '_interrupt_configure_ifp_PARM_2'
                           2862 ;interrupt_ifp_input       Allocated with name '_interrupt_configure_ifp_interrupt_ifp_input_1_162'
                           2863 ;------------------------------------------------------------
                           2864 ;	../src/interrupt/src/interrupt_configure_ifp.c:57: bool interrupt_configure_ifp(interrupt_ifp_input_t interrupt_ifp_input, uint8_t ifp_int_config_options)
                           2865 ;	-----------------------------------------
                           2866 ;	 function interrupt_configure_ifp
                           2867 ;	-----------------------------------------
   09B3                    2868 _interrupt_configure_ifp:
   09B3 E5 82         [12] 2869 	mov	a,dpl
   09B5 90r00r54      [24] 2870 	mov	dptr,#_interrupt_configure_ifp_interrupt_ifp_input_1_162
   09B8 F0            [24] 2871 	movx	@dptr,a
                           2872 ;	../src/interrupt/src/interrupt_configure_ifp.c:60: if(ifp_int_config_options & INTERRUPT_IFP_CONFIG_OPTION_ENABLE)
   09B9 90r00r53      [24] 2873 	mov	dptr,#_interrupt_configure_ifp_PARM_2
   09BC E0            [24] 2874 	movx	a,@dptr
   09BD FF            [12] 2875 	mov	r7,a
   09BE 30 E7 41      [24] 2876 	jnb	acc.7,00116$
                           2877 ;	../src/interrupt/src/interrupt_configure_ifp.c:63: if(interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT0)
   09C1 90r00r54      [24] 2878 	mov	dptr,#_interrupt_configure_ifp_interrupt_ifp_input_1_162
   09C4 E0            [24] 2879 	movx	a,@dptr
   09C5 FE            [12] 2880 	mov	r6,a
   09C6 BE 08 0B      [24] 2881 	cjne	r6,#0x08,00108$
                           2882 ;	../src/interrupt/src/interrupt_configure_ifp.c:65: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK) | INTERRUPT_IFP_INPUT_GPINT0;
   09C9 AD A6         [24] 2883 	mov	r5,_INTEXP
   09CB 74 C7         [12] 2884 	mov	a,#0xC7
   09CD 5D            [12] 2885 	anl	a,r5
   09CE 44 08         [12] 2886 	orl	a,#0x08
   09D0 F5 A6         [12] 2887 	mov	_INTEXP,a
   09D2 80 20         [24] 2888 	sjmp	00109$
   09D4                    2889 00108$:
                           2890 ;	../src/interrupt/src/interrupt_configure_ifp.c:67: else if(interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT1)
   09D4 BE 10 0B      [24] 2891 	cjne	r6,#0x10,00105$
                           2892 ;	../src/interrupt/src/interrupt_configure_ifp.c:69: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK) | INTERRUPT_IFP_INPUT_GPINT1;
   09D7 AD A6         [24] 2893 	mov	r5,_INTEXP
   09D9 74 C7         [12] 2894 	mov	a,#0xC7
   09DB 5D            [12] 2895 	anl	a,r5
   09DC 44 10         [12] 2896 	orl	a,#0x10
   09DE F5 A6         [12] 2897 	mov	_INTEXP,a
   09E0 80 12         [24] 2898 	sjmp	00109$
   09E2                    2899 00105$:
                           2900 ;	../src/interrupt/src/interrupt_configure_ifp.c:71: else if(interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT2)
   09E2 BE 20 0B      [24] 2901 	cjne	r6,#0x20,00102$
                           2902 ;	../src/interrupt/src/interrupt_configure_ifp.c:73: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK) | INTERRUPT_IFP_INPUT_GPINT2;
   09E5 AE A6         [24] 2903 	mov	r6,_INTEXP
   09E7 74 C7         [12] 2904 	mov	a,#0xC7
   09E9 5E            [12] 2905 	anl	a,r6
   09EA 44 20         [12] 2906 	orl	a,#0x20
   09EC F5 A6         [12] 2907 	mov	_INTEXP,a
   09EE 80 04         [24] 2908 	sjmp	00109$
   09F0                    2909 00102$:
                           2910 ;	../src/interrupt/src/interrupt_configure_ifp.c:78: return false;
   09F0 75 82 00      [24] 2911 	mov	dpl,#0x00
   09F3 22            [24] 2912 	ret
   09F4                    2913 00109$:
                           2914 ;	../src/interrupt/src/interrupt_configure_ifp.c:82: TCON = (TCON & ~INTERRUPT_IFP_CONFIG_TCON_MASK) | (ifp_int_config_options & INTERRUPT_IFP_CONFIG_TCON_MASK);
   09F4 AE 88         [24] 2915 	mov	r6,_TCON
   09F6 53 06 FE      [24] 2916 	anl	ar6,#0xFE
   09F9 53 07 01      [24] 2917 	anl	ar7,#0x01
   09FC EF            [12] 2918 	mov	a,r7
   09FD 4E            [12] 2919 	orl	a,r6
   09FE F5 88         [12] 2920 	mov	_TCON,a
   0A00 80 1F         [24] 2921 	sjmp	00117$
   0A02                    2922 00116$:
                           2923 ;	../src/interrupt/src/interrupt_configure_ifp.c:87: if((interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT0) || (interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT1) || (interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT2))
   0A02 90r00r54      [24] 2924 	mov	dptr,#_interrupt_configure_ifp_interrupt_ifp_input_1_162
   0A05 E0            [24] 2925 	movx	a,@dptr
   0A06 FF            [12] 2926 	mov	r7,a
   0A07 BF 08 02      [24] 2927 	cjne	r7,#0x08,00145$
   0A0A 80 08         [24] 2928 	sjmp	00110$
   0A0C                    2929 00145$:
   0A0C BF 10 02      [24] 2930 	cjne	r7,#0x10,00146$
   0A0F 80 03         [24] 2931 	sjmp	00110$
   0A11                    2932 00146$:
   0A11 BF 20 09      [24] 2933 	cjne	r7,#0x20,00111$
   0A14                    2934 00110$:
                           2935 ;	../src/interrupt/src/interrupt_configure_ifp.c:89: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK);
   0A14 AF A6         [24] 2936 	mov	r7,_INTEXP
   0A16 74 C7         [12] 2937 	mov	a,#0xC7
   0A18 5F            [12] 2938 	anl	a,r7
   0A19 F5 A6         [12] 2939 	mov	_INTEXP,a
   0A1B 80 04         [24] 2940 	sjmp	00117$
   0A1D                    2941 00111$:
                           2942 ;	../src/interrupt/src/interrupt_configure_ifp.c:94: return false;
   0A1D 75 82 00      [24] 2943 	mov	dpl,#0x00
   0A20 22            [24] 2944 	ret
   0A21                    2945 00117$:
                           2946 ;	../src/interrupt/src/interrupt_configure_ifp.c:98: return true;
   0A21 75 82 01      [24] 2947 	mov	dpl,#0x01
   0A24 22            [24] 2948 	ret
                           2949 ;------------------------------------------------------------
                           2950 ;Allocation info for local variables in function 'adc_configure'
                           2951 ;------------------------------------------------------------
                           2952 ;adc_config_options        Allocated with name '_adc_configure_adc_config_options_1_176'
                           2953 ;------------------------------------------------------------
                           2954 ;	../src/adc/src/adc_configure.c:54: void adc_configure(unsigned int adc_config_options)
                           2955 ;	-----------------------------------------
                           2956 ;	 function adc_configure
                           2957 ;	-----------------------------------------
   0A25                    2958 _adc_configure:
   0A25 AF 83         [24] 2959 	mov	r7,dph
   0A27 E5 82         [12] 2960 	mov	a,dpl
   0A29 90r00r55      [24] 2961 	mov	dptr,#_adc_configure_adc_config_options_1_176
   0A2C F0            [24] 2962 	movx	@dptr,a
   0A2D EF            [12] 2963 	mov	a,r7
   0A2E A3            [24] 2964 	inc	dptr
   0A2F F0            [24] 2965 	movx	@dptr,a
                           2966 ;	../src/adc/src/adc_configure.c:57: ADCCON1 = (adc_config_options >> 8) & ADC_CONFIG_OPTION_ADCCON1_WRITE_MASK;
   0A30 90r00r55      [24] 2967 	mov	dptr,#_adc_configure_adc_config_options_1_176
   0A33 E0            [24] 2968 	movx	a,@dptr
   0A34 FE            [12] 2969 	mov	r6,a
   0A35 A3            [24] 2970 	inc	dptr
   0A36 E0            [24] 2971 	movx	a,@dptr
   0A37 FD            [12] 2972 	mov	r5,a
   0A38 74 03         [12] 2973 	mov	a,#0x03
   0A3A 5D            [12] 2974 	anl	a,r5
   0A3B F5 D3         [12] 2975 	mov	_ADCCON1,a
                           2976 ;	../src/adc/src/adc_configure.c:58: ADCCON2 = (adc_config_options)      & ADC_CONFIG_OPTION_ADCCON2_WRITE_MASK;
   0A3D 8E D2         [24] 2977 	mov	_ADCCON2,r6
                           2978 ;	../src/adc/src/adc_configure.c:59: ADCCON3 = (adc_config_options >> 8) & ADC_CONFIG_OPTION_ADCCON3_WRITE_MASK;
   0A3F 74 E0         [12] 2979 	mov	a,#0xE0
   0A41 5D            [12] 2980 	anl	a,r5
   0A42 F5 D1         [12] 2981 	mov	_ADCCON3,a
   0A44 22            [24] 2982 	ret
                           2983 ;------------------------------------------------------------
                           2984 ;Allocation info for local variables in function 'adc_set_input_channel'
                           2985 ;------------------------------------------------------------
                           2986 ;adc_channel               Allocated with name '_adc_set_input_channel_adc_channel_1_178'
                           2987 ;------------------------------------------------------------
                           2988 ;	../src/adc/src/adc_set_input_channel.c:46: void adc_set_input_channel(adc_channel_t adc_channel)
                           2989 ;	-----------------------------------------
                           2990 ;	 function adc_set_input_channel
                           2991 ;	-----------------------------------------
   0A45                    2992 _adc_set_input_channel:
   0A45 E5 82         [12] 2993 	mov	a,dpl
                           2994 ;	../src/adc/src/adc_set_input_channel.c:49: adc_channel &= (ADCCON1_CHAN_SEL_MASK >> ADCCON1_CHAN_SEL_SHIFT);
   0A47 90r00r57      [24] 2995 	mov	dptr,#_adc_set_input_channel_adc_channel_1_178
   0A4A F0            [24] 2996 	movx	@dptr,a
   0A4B FF            [12] 2997 	mov	r7,a
   0A4C 90r00r57      [24] 2998 	mov	dptr,#_adc_set_input_channel_adc_channel_1_178
   0A4F 74 0F         [12] 2999 	mov	a,#0x0F
   0A51 5F            [12] 3000 	anl	a,r7
   0A52 F0            [24] 3001 	movx	@dptr,a
                           3002 ;	../src/adc/src/adc_set_input_channel.c:52: ADCCON1 = (ADCCON1 & ~ADCCON1_CHAN_SEL_MASK) | (adc_channel << ADCCON1_CHAN_SEL_SHIFT);
   0A53 AF D3         [24] 3003 	mov	r7,_ADCCON1
   0A55 53 07 C3      [24] 3004 	anl	ar7,#0xC3
   0A58 90r00r57      [24] 3005 	mov	dptr,#_adc_set_input_channel_adc_channel_1_178
   0A5B E0            [24] 3006 	movx	a,@dptr
   0A5C 25 E0         [12] 3007 	add	a,acc
   0A5E 25 E0         [12] 3008 	add	a,acc
   0A60 4F            [12] 3009 	orl	a,r7
   0A61 F5 D3         [12] 3010 	mov	_ADCCON1,a
   0A63 22            [24] 3011 	ret
                           3012 ;------------------------------------------------------------
                           3013 ;Allocation info for local variables in function 'adc_start_single_conversion'
                           3014 ;------------------------------------------------------------
                           3015 ;adc_channel               Allocated with name '_adc_start_single_conversion_adc_channel_1_180'
                           3016 ;------------------------------------------------------------
                           3017 ;	../src/adc/src/adc_start_single_conversion.c:47: void adc_start_single_conversion(adc_channel_t adc_channel)
                           3018 ;	-----------------------------------------
                           3019 ;	 function adc_start_single_conversion
                           3020 ;	-----------------------------------------
   0A64                    3021 _adc_start_single_conversion:
   0A64 E5 82         [12] 3022 	mov	a,dpl
                           3023 ;	../src/adc/src/adc_start_single_conversion.c:49: adc_set_input_channel(adc_channel);
   0A66 90r00r58      [24] 3024 	mov	dptr,#_adc_start_single_conversion_adc_channel_1_180
   0A69 F0            [24] 3025 	movx	@dptr,a
   0A6A F5 82         [12] 3026 	mov	dpl,a
   0A6C 12r0Ar45      [24] 3027 	lcall	_adc_set_input_channel
                           3028 ;	../src/adc/src/adc_start_single_conversion.c:52: adc_power_up();
   0A6F 43 D3 80      [24] 3029 	orl	_ADCCON1,#0x80
                           3030 ;	../src/adc/src/adc_start_single_conversion.c:53: nop(); nop(); nop(); nop(); //4 clock cycles must elapse before busy flag is set (datasheet v1.3, p. 165)
   0A72 00            [12] 3031 	nop 
   0A73 00            [12] 3032 	nop 
   0A74 00            [12] 3033 	nop 
   0A75 00            [12] 3034 	nop 
   0A76 22            [24] 3035 	ret
                           3036 ;------------------------------------------------------------
                           3037 ;Allocation info for local variables in function 'adc_start_single_conversion_get_value'
                           3038 ;------------------------------------------------------------
                           3039 ;adc_channel               Allocated with name '_adc_start_single_conversion_get_value_adc_channel_1_182'
                           3040 ;------------------------------------------------------------
                           3041 ;	../src/adc/src/adc_start_single_conversion_get_value.c:48: uint16_t adc_start_single_conversion_get_value(adc_channel_t adc_channel)
                           3042 ;	-----------------------------------------
                           3043 ;	 function adc_start_single_conversion_get_value
                           3044 ;	-----------------------------------------
   0A77                    3045 _adc_start_single_conversion_get_value:
   0A77 E5 82         [12] 3046 	mov	a,dpl
                           3047 ;	../src/adc/src/adc_start_single_conversion_get_value.c:50: adc_start_single_conversion(adc_channel);
   0A79 90r00r59      [24] 3048 	mov	dptr,#_adc_start_single_conversion_get_value_adc_channel_1_182
   0A7C F0            [24] 3049 	movx	@dptr,a
   0A7D F5 82         [12] 3050 	mov	dpl,a
   0A7F 12r0Ar64      [24] 3051 	lcall	_adc_start_single_conversion
                           3052 ;	../src/adc/src/adc_start_single_conversion_get_value.c:52: while(adc_is_conversion_in_progress());
   0A82                    3053 00101$:
   0A82 74 40         [12] 3054 	mov	a,#0x40
   0A84 55 D3         [12] 3055 	anl	a,_ADCCON1
   0A86 FF            [12] 3056 	mov	r7,a
   0A87 BF 40 02      [24] 3057 	cjne	r7,#0x40,00112$
   0A8A 80 F6         [24] 3058 	sjmp	00101$
   0A8C                    3059 00112$:
                           3060 ;	../src/adc/src/adc_start_single_conversion_get_value.c:54: return adc_get_result();
   0A8C 85 D5 82      [24] 3061 	mov	dpl,((_ADCDAT >> 0) & 0xFF)
   0A8F 85 D4 83      [24] 3062 	mov	dph,((_ADCDAT >> 8) & 0xFF)
   0A92 22            [24] 3063 	ret
                           3064 ;------------------------------------------------------------
                           3065 ;Allocation info for local variables in function 'timer0_configure'
                           3066 ;------------------------------------------------------------
                           3067 ;t0_val                    Allocated with name '_timer0_configure_PARM_2'
                           3068 ;timer0_config_options     Allocated with name '_timer0_configure_timer0_config_options_1_185'
                           3069 ;------------------------------------------------------------
                           3070 ;	../src/timer0/src/timer0_configure.c:53: void timer0_configure(uint8_t timer0_config_options, uint16_t t0_val)
                           3071 ;	-----------------------------------------
                           3072 ;	 function timer0_configure
                           3073 ;	-----------------------------------------
   0A93                    3074 _timer0_configure:
   0A93 E5 82         [12] 3075 	mov	a,dpl
                           3076 ;	../src/timer0/src/timer0_configure.c:56: if((timer0_config_options & TMOD_MODE0_MASK) == TIMER0_CONFIG_OPTION_MODE_2_8_BIT_AUTO_RLD_TMR)
   0A95 90r00r5C      [24] 3077 	mov	dptr,#_timer0_configure_timer0_config_options_1_185
   0A98 F0            [24] 3078 	movx	@dptr,a
   0A99 FF            [12] 3079 	mov	r7,a
   0A9A 74 03         [12] 3080 	mov	a,#0x03
   0A9C 5F            [12] 3081 	anl	a,r7
   0A9D FE            [12] 3082 	mov	r6,a
   0A9E BE 02 0E      [24] 3083 	cjne	r6,#0x02,00102$
                           3084 ;	../src/timer0/src/timer0_configure.c:58: TH0 = (uint8_t)t0_val;
   0AA1 90r00r5A      [24] 3085 	mov	dptr,#_timer0_configure_PARM_2
   0AA4 E0            [24] 3086 	movx	a,@dptr
   0AA5 FD            [12] 3087 	mov	r5,a
   0AA6 A3            [24] 3088 	inc	dptr
   0AA7 E0            [24] 3089 	movx	a,@dptr
   0AA8 FE            [12] 3090 	mov	r6,a
   0AA9 8D 8C         [24] 3091 	mov	_TH0,r5
                           3092 ;	../src/timer0/src/timer0_configure.c:59: TL0 = (uint8_t)t0_val;
   0AAB 8D 8A         [24] 3093 	mov	_TL0,r5
   0AAD 80 0A         [24] 3094 	sjmp	00103$
   0AAF                    3095 00102$:
                           3096 ;	../src/timer0/src/timer0_configure.c:63: timer0_set_t0_val(t0_val);
   0AAF 90r00r5A      [24] 3097 	mov	dptr,#_timer0_configure_PARM_2
   0AB2 E0            [24] 3098 	movx	a,@dptr
   0AB3 F5 8A         [12] 3099 	mov	((_T0 >> 0) & 0xFF),a
   0AB5 A3            [24] 3100 	inc	dptr
   0AB6 E0            [24] 3101 	movx	a,@dptr
   0AB7 F5 8C         [12] 3102 	mov	((_T0 >> 8) & 0xFF),a
   0AB9                    3103 00103$:
                           3104 ;	../src/timer0/src/timer0_configure.c:67: TMOD = (TMOD & ~TIMER0_CONFIG_OPTION_TMOD_MASK) | (timer0_config_options & TIMER0_CONFIG_OPTION_TMOD_MASK);
   0AB9 AE 89         [24] 3105 	mov	r6,_TMOD
   0ABB 53 06 F0      [24] 3106 	anl	ar6,#0xF0
   0ABE 53 07 0F      [24] 3107 	anl	ar7,#0x0F
   0AC1 EF            [12] 3108 	mov	a,r7
   0AC2 4E            [12] 3109 	orl	a,r6
   0AC3 F5 89         [12] 3110 	mov	_TMOD,a
   0AC5 22            [24] 3111 	ret
                           3112 ;------------------------------------------------------------
                           3113 ;Allocation info for local variables in function 'timer1_configure'
                           3114 ;------------------------------------------------------------
                           3115 ;t1_val                    Allocated with name '_timer1_configure_PARM_2'
                           3116 ;timer1_config_options     Allocated with name '_timer1_configure_timer1_config_options_1_190'
                           3117 ;------------------------------------------------------------
                           3118 ;	../src/timer1/src/timer1_configure.c:53: void timer1_configure(uint8_t timer1_config_options, uint16_t t1_val)
                           3119 ;	-----------------------------------------
                           3120 ;	 function timer1_configure
                           3121 ;	-----------------------------------------
   0AC6                    3122 _timer1_configure:
   0AC6 E5 82         [12] 3123 	mov	a,dpl
                           3124 ;	../src/timer1/src/timer1_configure.c:56: if((timer1_config_options & TMOD_MODE1_MASK) == TIMER1_CONFIG_OPTION_MODE_2_8_BIT_AUTO_RLD_TMR)
   0AC8 90r00r5F      [24] 3125 	mov	dptr,#_timer1_configure_timer1_config_options_1_190
   0ACB F0            [24] 3126 	movx	@dptr,a
   0ACC FF            [12] 3127 	mov	r7,a
   0ACD 74 30         [12] 3128 	mov	a,#0x30
   0ACF 5F            [12] 3129 	anl	a,r7
   0AD0 FE            [12] 3130 	mov	r6,a
   0AD1 BE 20 0E      [24] 3131 	cjne	r6,#0x20,00102$
                           3132 ;	../src/timer1/src/timer1_configure.c:58: TH1 = (uint8_t)t1_val;
   0AD4 90r00r5D      [24] 3133 	mov	dptr,#_timer1_configure_PARM_2
   0AD7 E0            [24] 3134 	movx	a,@dptr
   0AD8 FD            [12] 3135 	mov	r5,a
   0AD9 A3            [24] 3136 	inc	dptr
   0ADA E0            [24] 3137 	movx	a,@dptr
   0ADB FE            [12] 3138 	mov	r6,a
   0ADC 8D 8D         [24] 3139 	mov	_TH1,r5
                           3140 ;	../src/timer1/src/timer1_configure.c:59: TL1 = (uint8_t)t1_val;
   0ADE 8D 8B         [24] 3141 	mov	_TL1,r5
   0AE0 80 0A         [24] 3142 	sjmp	00103$
   0AE2                    3143 00102$:
                           3144 ;	../src/timer1/src/timer1_configure.c:63: timer1_set_t1_val(t1_val);
   0AE2 90r00r5D      [24] 3145 	mov	dptr,#_timer1_configure_PARM_2
   0AE5 E0            [24] 3146 	movx	a,@dptr
   0AE6 F5 8B         [12] 3147 	mov	((_T1 >> 0) & 0xFF),a
   0AE8 A3            [24] 3148 	inc	dptr
   0AE9 E0            [24] 3149 	movx	a,@dptr
   0AEA F5 8D         [12] 3150 	mov	((_T1 >> 8) & 0xFF),a
   0AEC                    3151 00103$:
                           3152 ;	../src/timer1/src/timer1_configure.c:67: TMOD = (TMOD & ~TIMER1_CONFIG_OPTION_TMOD_MASK) | (timer1_config_options & TIMER1_CONFIG_OPTION_TMOD_MASK);
   0AEC AE 89         [24] 3153 	mov	r6,_TMOD
   0AEE 53 06 0F      [24] 3154 	anl	ar6,#0x0F
   0AF1 53 07 F0      [24] 3155 	anl	ar7,#0xF0
   0AF4 EF            [12] 3156 	mov	a,r7
   0AF5 4E            [12] 3157 	orl	a,r6
   0AF6 F5 89         [12] 3158 	mov	_TMOD,a
   0AF8 22            [24] 3159 	ret
                           3160 ;------------------------------------------------------------
                           3161 ;Allocation info for local variables in function 'main'
                           3162 ;------------------------------------------------------------
                           3163 ;datavar                   Allocated with name '_main_datavar_1_195'
                           3164 ;count                     Allocated with name '_main_count_1_195'
                           3165 ;------------------------------------------------------------
                           3166 ;	main.c:18: void main()
                           3167 ;	-----------------------------------------
                           3168 ;	 function main
                           3169 ;	-----------------------------------------
   0AF9                    3170 _main:
                           3171 ;	main.c:23: initialize(); //initialize IO, UART, set up nRF24L01 as TX
   0AF9 12r0BrDF      [24] 3172 	lcall	_initialize
                           3173 ;	main.c:26: while(1)
   0AFC                    3174 00112$:
                           3175 ;	main.c:28: datavar = getchar();
   0AFC 12r0Cr32      [24] 3176 	lcall	_getchar
   0AFF E5 82         [12] 3177 	mov	a,dpl
   0B01 90r00r60      [24] 3178 	mov	dptr,#_main_datavar_1_195
   0B04 F0            [24] 3179 	movx	@dptr,a
                           3180 ;	main.c:30: rf_write_tx_payload(&datavar, 1, true); //transmit received char over RF
   0B05 90r00r0E      [24] 3181 	mov	dptr,#_rf_write_tx_payload_PARM_2
   0B08 74 01         [12] 3182 	mov	a,#0x01
   0B0A F0            [24] 3183 	movx	@dptr,a
   0B0B E4            [12] 3184 	clr	a
   0B0C A3            [24] 3185 	inc	dptr
   0B0D F0            [24] 3186 	movx	@dptr,a
   0B0E 90r00r10      [24] 3187 	mov	dptr,#_rf_write_tx_payload_PARM_3
   0B11 74 01         [12] 3188 	mov	a,#0x01
   0B13 F0            [24] 3189 	movx	@dptr,a
   0B14 90r00r60      [24] 3190 	mov	dptr,#_main_datavar_1_195
   0B17 75 F0 00      [24] 3191 	mov	b,#0x00
   0B1A 12r01r00      [24] 3192 	lcall	_rf_write_tx_payload
                           3193 ;	main.c:33: while(!(rf_irq_pin_active() && rf_irq_tx_ds_active()));
   0B1D                    3194 00102$:
   0B1D 30 C1 FD      [24] 3195 	jnb	_IRCON_SB_RFIRQ,00102$
   0B20 90r00r18      [24] 3196 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0B23 E4            [12] 3197 	clr	a
   0B24 F0            [24] 3198 	movx	@dptr,a
   0B25 E4            [12] 3199 	clr	a
   0B26 A3            [24] 3200 	inc	dptr
   0B27 F0            [24] 3201 	movx	@dptr,a
   0B28 E4            [12] 3202 	clr	a
   0B29 A3            [24] 3203 	inc	dptr
   0B2A F0            [24] 3204 	movx	@dptr,a
   0B2B 90r00r1B      [24] 3205 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0B2E E4            [12] 3206 	clr	a
   0B2F F0            [24] 3207 	movx	@dptr,a
   0B30 E4            [12] 3208 	clr	a
   0B31 A3            [24] 3209 	inc	dptr
   0B32 F0            [24] 3210 	movx	@dptr,a
   0B33 90r00r1D      [24] 3211 	mov	dptr,#_rf_spi_execute_command_PARM_4
   0B36 74 01         [12] 3212 	mov	a,#0x01
   0B38 F0            [24] 3213 	movx	@dptr,a
   0B39 75 82 FF      [24] 3214 	mov	dpl,#0xFF
   0B3C 12r02r35      [24] 3215 	lcall	_rf_spi_execute_command
   0B3F E5 82         [12] 3216 	mov	a,dpl
   0B41 30 E5 D9      [24] 3217 	jnb	acc.5,00102$
                           3218 ;	main.c:35: rf_irq_clear_all(); //clear all interrupts in the 24L01
   0B44 12r01rC6      [24] 3219 	lcall	_rf_irq_clear_all
                           3220 ;	main.c:36: rf_set_as_rx(true); //change the device to an RX to get the character back from the other 24L01
   0B47 75 82 01      [24] 3221 	mov	dpl,#0x01
   0B4A 12r01r66      [24] 3222 	lcall	_rf_set_as_rx
                           3223 ;	main.c:40: for(count = 0; count < 25000; count++)
   0B4D 7E 00         [12] 3224 	mov	r6,#0x00
   0B4F 7F 00         [12] 3225 	mov	r7,#0x00
   0B51                    3226 00114$:
                           3227 ;	main.c:45: if((rf_irq_pin_active() && rf_irq_rx_dr_active()))
   0B51 30 C1 40      [24] 3228 	jnb	_IRCON_SB_RFIRQ,00106$
   0B54 90r00r18      [24] 3229 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0B57 E4            [12] 3230 	clr	a
   0B58 F0            [24] 3231 	movx	@dptr,a
   0B59 E4            [12] 3232 	clr	a
   0B5A A3            [24] 3233 	inc	dptr
   0B5B F0            [24] 3234 	movx	@dptr,a
   0B5C E4            [12] 3235 	clr	a
   0B5D A3            [24] 3236 	inc	dptr
   0B5E F0            [24] 3237 	movx	@dptr,a
   0B5F 90r00r1B      [24] 3238 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0B62 E4            [12] 3239 	clr	a
   0B63 F0            [24] 3240 	movx	@dptr,a
   0B64 E4            [12] 3241 	clr	a
   0B65 A3            [24] 3242 	inc	dptr
   0B66 F0            [24] 3243 	movx	@dptr,a
   0B67 90r00r1D      [24] 3244 	mov	dptr,#_rf_spi_execute_command_PARM_4
   0B6A 74 01         [12] 3245 	mov	a,#0x01
   0B6C F0            [24] 3246 	movx	@dptr,a
   0B6D 75 82 FF      [24] 3247 	mov	dpl,#0xFF
   0B70 C0 07         [24] 3248 	push	ar7
   0B72 C0 06         [24] 3249 	push	ar6
   0B74 12r02r35      [24] 3250 	lcall	_rf_spi_execute_command
   0B77 E5 82         [12] 3251 	mov	a,dpl
   0B79 D0 06         [24] 3252 	pop	ar6
   0B7B D0 07         [24] 3253 	pop	ar7
   0B7D 30 E6 14      [24] 3254 	jnb	acc.6,00106$
                           3255 ;	main.c:47: rf_read_rx_payload(&datavar, 1); //get the payload into data
   0B80 90r00r00      [24] 3256 	mov	dptr,#_rf_read_rx_payload_PARM_2
   0B83 74 01         [12] 3257 	mov	a,#0x01
   0B85 F0            [24] 3258 	movx	@dptr,a
   0B86 E4            [12] 3259 	clr	a
   0B87 A3            [24] 3260 	inc	dptr
   0B88 F0            [24] 3261 	movx	@dptr,a
   0B89 90r00r60      [24] 3262 	mov	dptr,#_main_datavar_1_195
   0B8C 75 F0 00      [24] 3263 	mov	b,#0x00
   0B8F 12r00r00      [24] 3264 	lcall	_rf_read_rx_payload
                           3265 ;	main.c:48: break;
   0B92 80 1A         [24] 3266 	sjmp	00110$
   0B94                    3267 00106$:
                           3268 ;	main.c:52: if(count == 24999)
   0B94 BE A7 09      [24] 3269 	cjne	r6,#0xA7,00115$
   0B97 BF 61 06      [24] 3270 	cjne	r7,#0x61,00115$
                           3271 ;	main.c:53: datavar = '?';
   0B9A 90r00r60      [24] 3272 	mov	dptr,#_main_datavar_1_195
   0B9D 74 3F         [12] 3273 	mov	a,#0x3F
   0B9F F0            [24] 3274 	movx	@dptr,a
   0BA0                    3275 00115$:
                           3276 ;	main.c:40: for(count = 0; count < 25000; count++)
   0BA0 0E            [12] 3277 	inc	r6
   0BA1 BE 00 01      [24] 3278 	cjne	r6,#0x00,00148$
   0BA4 0F            [12] 3279 	inc	r7
   0BA5                    3280 00148$:
   0BA5 C3            [12] 3281 	clr	c
   0BA6 EE            [12] 3282 	mov	a,r6
   0BA7 94 A8         [12] 3283 	subb	a,#0xA8
   0BA9 EF            [12] 3284 	mov	a,r7
   0BAA 94 61         [12] 3285 	subb	a,#0x61
   0BAC 40 A3         [24] 3286 	jc	00114$
   0BAE                    3287 00110$:
                           3288 ;	main.c:56: rf_irq_clear_all(); //clear interrupts again
   0BAE 12r01rC6      [24] 3289 	lcall	_rf_irq_clear_all
                           3290 ;	main.c:57: printf("%c", datavar); //print the received data (or ? if none) to the screen
   0BB1 90r00r60      [24] 3291 	mov	dptr,#_main_datavar_1_195
   0BB4 E0            [24] 3292 	movx	a,@dptr
   0BB5 FF            [12] 3293 	mov	r7,a
   0BB6 7E 00         [12] 3294 	mov	r6,#0x00
   0BB8 C0 07         [24] 3295 	push	ar7
   0BBA C0 06         [24] 3296 	push	ar6
   0BBC 74r00         [12] 3297 	mov	a,#__str_0
   0BBE C0 E0         [24] 3298 	push	acc
   0BC0 74s00         [12] 3299 	mov	a,#(__str_0 >> 8)
   0BC2 C0 E0         [24] 3300 	push	acc
   0BC4 74 80         [12] 3301 	mov	a,#0x80
   0BC6 C0 E0         [24] 3302 	push	acc
   0BC8 12r00r00      [24] 3303 	lcall	_printf
   0BCB E5 81         [12] 3304 	mov	a,sp
   0BCD 24 FB         [12] 3305 	add	a,#0xfb
   0BCF F5 81         [12] 3306 	mov	sp,a
                           3307 ;	main.c:59: rf_set_as_tx(); //resume normal operation as a TX
   0BD1 12r01rEB      [24] 3308 	lcall	_rf_set_as_tx
                           3309 ;	main.c:60: delay_us(130); //wait for remote unit to come from standby to RX
   0BD4 90 00 82      [24] 3310 	mov	dptr,#0x0082
   0BD7 12r07r87      [24] 3311 	lcall	_delay_us
                           3312 ;	main.c:62: led_toggle(); //toggle the on-board LED as visual indication that the loop has completed
   0BDA B2 80         [12] 3313 	cpl _P0_SB_D0 
   0BDC 02r0ArFC      [24] 3314 	ljmp	00112$
                           3315 ;------------------------------------------------------------
                           3316 ;Allocation info for local variables in function 'initialize'
                           3317 ;------------------------------------------------------------
                           3318 ;	main.c:66: void initialize()
                           3319 ;	-----------------------------------------
                           3320 ;	 function initialize
                           3321 ;	-----------------------------------------
   0BDF                    3322 _initialize:
                           3323 ;	main.c:72: GPIO_PIN_CONFIG_OPTION_PIN_MODE_OUTPUT_BUFFER_NORMAL_DRIVE_STRENGTH);
   0BDF 90r00r35      [24] 3324 	mov	dptr,#_gpio_pin_configure_PARM_2
   0BE2 74 01         [12] 3325 	mov	a,#0x01
   0BE4 F0            [24] 3326 	movx	@dptr,a
   0BE5 75 82 00      [24] 3327 	mov	dpl,#0x00
   0BE8 12r04r07      [24] 3328 	lcall	_gpio_pin_configure
                           3329 ;	main.c:77: GPIO_PIN_CONFIG_OPTION_PIN_MODE_INPUT_BUFFER_ON_NO_RESISTORS);
   0BEB 90r00r35      [24] 3330 	mov	dptr,#_gpio_pin_configure_PARM_2
   0BEE E4            [12] 3331 	clr	a
   0BEF F0            [24] 3332 	movx	@dptr,a
   0BF0 75 82 06      [24] 3333 	mov	dpl,#0x06
   0BF3 12r04r07      [24] 3334 	lcall	_gpio_pin_configure
                           3335 ;	main.c:82: GPIO_PIN_CONFIG_OPTION_PIN_MODE_OUTPUT_BUFFER_NORMAL_DRIVE_STRENGTH);
   0BF6 90r00r35      [24] 3336 	mov	dptr,#_gpio_pin_configure_PARM_2
   0BF9 74 03         [12] 3337 	mov	a,#0x03
   0BFB F0            [24] 3338 	movx	@dptr,a
   0BFC 75 82 05      [24] 3339 	mov	dpl,#0x05
   0BFF 12r04r07      [24] 3340 	lcall	_gpio_pin_configure
                           3341 ;	main.c:89: 1011);
   0C02 90r00r00      [24] 3342 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   0C05 74 F3         [12] 3343 	mov	a,#0xF3
   0C07 F0            [24] 3344 	movx	@dptr,a
   0C08 74 03         [12] 3345 	mov	a,#0x03
   0C0A A3            [24] 3346 	inc	dptr
   0C0B F0            [24] 3347 	movx	@dptr,a
   0C0C 75 82 56      [24] 3348 	mov	dpl,#0x56
   0C0F 12r00r00      [24] 3349 	lcall	_uart_configure_manual_baud_calc
                           3350 ;	main.c:92: rf_configure_debug_lite(false, 1); //initialize the rf to the debug configuration as TX, 1 data bytes, and auto-ack disabled
   0C12 90r00r05      [24] 3351 	mov	dptr,#_rf_configure_debug_lite_PARM_2
   0C15 74 01         [12] 3352 	mov	a,#0x01
   0C17 F0            [24] 3353 	movx	@dptr,a
   0C18 75 82 00      [24] 3354 	mov	dpl,#0x00
   0C1B 12r00r55      [24] 3355 	lcall	_rf_configure_debug_lite
                           3356 ;	main.c:93: delay_us(130); //wait for remote unit to come from standby to RX
   0C1E 90 00 82      [24] 3357 	mov	dptr,#0x0082
   0C21 02r07r87      [24] 3358 	ljmp	_delay_us
                           3359 ;------------------------------------------------------------
                           3360 ;Allocation info for local variables in function 'putchar'
                           3361 ;------------------------------------------------------------
                           3362 ;c                         Allocated with name '_putchar_c_1_200'
                           3363 ;------------------------------------------------------------
                           3364 ;	main.c:96: void putchar(char c)
                           3365 ;	-----------------------------------------
                           3366 ;	 function putchar
                           3367 ;	-----------------------------------------
   0C24                    3368 _putchar:
   0C24 E5 82         [12] 3369 	mov	a,dpl
                           3370 ;	main.c:98: uart_send_wait_for_complete(c);
   0C26 90r00r61      [24] 3371 	mov	dptr,#_putchar_c_1_200
   0C29 F0            [24] 3372 	movx	@dptr,a
   0C2A F5 99         [12] 3373 	mov	_S0BUF,a
   0C2C                    3374 00101$:
   0C2C 10 99 02      [24] 3375 	jbc	_S0CON_SB_TI0,00112$
   0C2F 80 FB         [24] 3376 	sjmp	00101$
   0C31                    3377 00112$:
   0C31 22            [24] 3378 	ret
                           3379 ;------------------------------------------------------------
                           3380 ;Allocation info for local variables in function 'getchar'
                           3381 ;------------------------------------------------------------
                           3382 ;retchar                   Allocated with name '_getchar_retchar_1_202'
                           3383 ;------------------------------------------------------------
                           3384 ;	main.c:101: char getchar()
                           3385 ;	-----------------------------------------
                           3386 ;	 function getchar
                           3387 ;	-----------------------------------------
   0C32                    3388 _getchar:
                           3389 ;	main.c:105: uart_wait_for_rx_and_get(&retchar);
   0C32                    3390 00101$:
   0C32 10 98 02      [24] 3391 	jbc	_S0CON_SB_RI0,00112$
   0C35 80 FB         [24] 3392 	sjmp	00101$
   0C37                    3393 00112$:
                           3394 ;	main.c:107: return retchar;
   0C37 90r00r62      [24] 3395 	mov	dptr,#_getchar_retchar_1_202
   0C3A E5 99         [12] 3396 	mov	a,_S0BUF
   0C3C F0            [24] 3397 	movx	@dptr,a
   0C3D E0            [24] 3398 	movx	a,@dptr
   0C3E F5 82         [12] 3399 	mov	dpl,a
   0C40 22            [24] 3400 	ret
                           3401 	.area CSEG    (CODE)
                           3402 	.area CONST   (CODE)
   0000                    3403 __str_0:
   0000 25 63              3404 	.ascii "%c"
   0002 00                 3405 	.db 0x00
                           3406 	.area XINIT   (CODE)
                           3407 	.area CABS    (ABS,CODE)
