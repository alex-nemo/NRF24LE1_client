                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Sat Jun 14 18:53:27 2014
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _isr_rtc2
                             14 	.globl _dimmon
                             15 	.globl _isr_t1
                             16 	.globl _isr_ifp
                             17 	.globl _setdimmer
                             18 	.globl _openAllPipe
                             19 	.globl _setPALevel
                             20 	.globl _setCRCLength
                             21 	.globl _setAutoAck
                             22 	.globl _setDataRate
                             23 	.globl _setChannel
                             24 	.globl _radiobegin
                             25 	.globl _watchdog_start_and_set_timeout_in_ms
                             26 	.globl _watchdog_set_wdsv_count
                             27 	.globl _gpio_pin_val_write
                             28 	.globl _gpio_pin_val_set
                             29 	.globl _gpio_pin_val_clear
                             30 	.globl _gpio_pin_val_read
                             31 	.globl _FSR_SB_ENDBG
                             32 	.globl _FSR_SB_STP
                             33 	.globl _FSR_SB_WEN
                             34 	.globl _FSR_SB_RDYN
                             35 	.globl _FSR_SB_INFEN
                             36 	.globl _FSR_SB_RDISMB
                             37 	.globl _RFCON_SB_RFCKEN
                             38 	.globl _RFCON_SB_RFCSN
                             39 	.globl _RFCON_SB_RFCE
                             40 	.globl _ADCON_SB_BD
                             41 	.globl _PSW_SB_P
                             42 	.globl _PSW_SB_F1
                             43 	.globl _PSW_SB_OV
                             44 	.globl _PSW_SB_RS0
                             45 	.globl _PSW_SB_RS1
                             46 	.globl _PSW_SB_F0
                             47 	.globl _PSW_SB_AC
                             48 	.globl _PSW_SB_CY
                             49 	.globl _T2CON_SB_T2PS
                             50 	.globl _T2CON_SB_I3FR
                             51 	.globl _T2CON_SB_I2FR
                             52 	.globl _T2CON_SB_T2R1
                             53 	.globl _T2CON_SB_T2R0
                             54 	.globl _T2CON_SB_T2CM
                             55 	.globl _T2CON_SB_T2I1
                             56 	.globl _T2CON_SB_T2I0
                             57 	.globl _IRCON_SB_EXF2
                             58 	.globl _IRCON_SB_TF2
                             59 	.globl _IRCON_SB_TICK
                             60 	.globl _IRCON_SB_MISCIRQ
                             61 	.globl _IRCON_SB_WUOPIRQ
                             62 	.globl _IRCON_SB_SPI_2WIRE
                             63 	.globl _IRCON_SB_RFIRQ
                             64 	.globl _IRCON_SB_RFRDY
                             65 	.globl _IEN1_SB_T2EXTRLD
                             66 	.globl _IEN1_SB_TICK
                             67 	.globl _IEN1_SB_MISCIRQ
                             68 	.globl _IEN1_SB_WUOPIRQ
                             69 	.globl _IEN1_SB_SPI_2WIRE
                             70 	.globl _IEN1_SB_RFIRQ
                             71 	.globl _IEN1_SB_RFRDY
                             72 	.globl _P3_SB_D7
                             73 	.globl _P3_SB_D6
                             74 	.globl _P3_SB_D5
                             75 	.globl _P3_SB_D4
                             76 	.globl _P3_SB_D3
                             77 	.globl _P3_SB_D2
                             78 	.globl _P3_SB_D1
                             79 	.globl _P3_SB_D0
                             80 	.globl _IEN0_SB_GLOBAL
                             81 	.globl _IEN0_SB_T2
                             82 	.globl _IEN0_SB_UART
                             83 	.globl _IEN0_SB_T1
                             84 	.globl _IEN0_SB_POFIRQ
                             85 	.globl _IEN0_SB_T0
                             86 	.globl _IEN0_SB_IFP
                             87 	.globl _P2_SB_D7
                             88 	.globl _P2_SB_D6
                             89 	.globl _P2_SB_D5
                             90 	.globl _P2_SB_D4
                             91 	.globl _P2_SB_D3
                             92 	.globl _P2_SB_D2
                             93 	.globl _P2_SB_D1
                             94 	.globl _P2_SB_D0
                             95 	.globl _S0CON_SB_SM0
                             96 	.globl _S0CON_SB_SM1
                             97 	.globl _S0CON_SB_SM20
                             98 	.globl _S0CON_SB_REN0
                             99 	.globl _S0CON_SB_TB80
                            100 	.globl _S0CON_SB_RB80
                            101 	.globl _S0CON_SB_TI0
                            102 	.globl _S0CON_SB_RI0
                            103 	.globl _P1_SB_D7
                            104 	.globl _P1_SB_D6
                            105 	.globl _P1_SB_D5
                            106 	.globl _P1_SB_D4
                            107 	.globl _P1_SB_D3
                            108 	.globl _P1_SB_D2
                            109 	.globl _P1_SB_D1
                            110 	.globl _P1_SB_D0
                            111 	.globl _TCON_SB_TF1
                            112 	.globl _TCON_SB_TR1
                            113 	.globl _TCON_SB_TF0
                            114 	.globl _TCON_SB_TR0
                            115 	.globl _TCON_SB_IE1
                            116 	.globl _TCON_SB_IT1
                            117 	.globl _TCON_SB_IE0
                            118 	.globl _TCON_SB_IT0
                            119 	.globl _P0_SB_D7
                            120 	.globl _P0_SB_D6
                            121 	.globl _P0_SB_D5
                            122 	.globl _P0_SB_D4
                            123 	.globl _P0_SB_D3
                            124 	.globl _P0_SB_D2
                            125 	.globl _P0_SB_D1
                            126 	.globl _P0_SB_D0
                            127 	.globl _ADCDAT
                            128 	.globl _S0REL
                            129 	.globl _T2
                            130 	.globl _T1
                            131 	.globl _T0
                            132 	.globl _CRC
                            133 	.globl _CC3
                            134 	.globl _CC2
                            135 	.globl _CC1
                            136 	.globl _SPIMDAT
                            137 	.globl _SPIMSTAT
                            138 	.globl _SPIMCON1
                            139 	.globl _SPIMCON0
                            140 	.globl _FCR
                            141 	.globl _FPCR
                            142 	.globl _FSR
                            143 	.globl _B
                            144 	.globl _ARCON
                            145 	.globl _MD5
                            146 	.globl _MD4
                            147 	.globl _MD3
                            148 	.globl _MD2
                            149 	.globl _MD1
                            150 	.globl _MD0
                            151 	.globl _RFCON
                            152 	.globl _SPIRDAT
                            153 	.globl _SPIRSTAT
                            154 	.globl _SPIRCON1
                            155 	.globl _SPIRCON0
                            156 	.globl _W2CON0
                            157 	.globl _W2CON1
                            158 	.globl _ACC
                            159 	.globl _CCPDATO
                            160 	.globl _CCPDATIB
                            161 	.globl _CCPDATIA
                            162 	.globl _POFCON
                            163 	.globl _COMPCON
                            164 	.globl _W2DAT
                            165 	.globl _W2SADR
                            166 	.globl _ADCON
                            167 	.globl _RNGDAT
                            168 	.globl _RNGCTL
                            169 	.globl _ADCDATL
                            170 	.globl _ADCDATH
                            171 	.globl _ADCCON1
                            172 	.globl _ADCCON2
                            173 	.globl _ADCCON3
                            174 	.globl _PSW
                            175 	.globl _WUOPC0
                            176 	.globl _WUOPC1
                            177 	.globl _TH2
                            178 	.globl _TL2
                            179 	.globl _CRCH
                            180 	.globl _CRCL
                            181 	.globl __XPAGE
                            182 	.globl _MPAGE
                            183 	.globl _T2CON
                            184 	.globl _CCH3
                            185 	.globl _CCL3
                            186 	.globl _CCH2
                            187 	.globl _CCL2
                            188 	.globl _CCH1
                            189 	.globl _CCL1
                            190 	.globl _CCEN
                            191 	.globl _IRCON
                            192 	.globl _SPISDAT
                            193 	.globl _SPISSTAT
                            194 	.globl _SPISCON1
                            195 	.globl _SPISCON0
                            196 	.globl _S0RELH
                            197 	.globl _IP1
                            198 	.globl _IEN1
                            199 	.globl _SPISRDSZ
                            200 	.globl _RTC2CPT00
                            201 	.globl _RTC2CMP1
                            202 	.globl _RTC2CMP0
                            203 	.globl _RTC2CON
                            204 	.globl _PWMCON
                            205 	.globl _RSTREAS
                            206 	.globl _P3
                            207 	.globl _WDSV
                            208 	.globl _OPMCON
                            209 	.globl _CLKLFCTRL
                            210 	.globl _RTC2CPT10
                            211 	.globl _RTC2CPT01
                            212 	.globl _S0RELL
                            213 	.globl _IP0
                            214 	.globl _IEN0
                            215 	.globl _MEMCON
                            216 	.globl _INTEXP
                            217 	.globl _WUCON
                            218 	.globl _PWRDWN
                            219 	.globl _CLKCTRL
                            220 	.globl _PWMDC1
                            221 	.globl _PWMDC0
                            222 	.globl _P2
                            223 	.globl _P1CON
                            224 	.globl _P0CON
                            225 	.globl _S0BUF
                            226 	.globl _S0CON
                            227 	.globl _P2CON
                            228 	.globl _P3DIR
                            229 	.globl _P2DIR
                            230 	.globl _P1DIR
                            231 	.globl _P0DIR
                            232 	.globl _DPS
                            233 	.globl _P1
                            234 	.globl _P3CON
                            235 	.globl _TH1
                            236 	.globl _TH0
                            237 	.globl _TL1
                            238 	.globl _TL0
                            239 	.globl _TMOD
                            240 	.globl _TCON
                            241 	.globl _PCON
                            242 	.globl _DPH1
                            243 	.globl _DPL1
                            244 	.globl _DPH
                            245 	.globl _DPL
                            246 	.globl _SP
                            247 	.globl _P0
                            248 	.globl _countrtc
                            249 	.globl _valuepwm
                            250 	.globl _servernf
                            251 	.globl _stdimm
                            252 	.globl _clientnf
                            253 	.globl _rtc2_configure_PARM_2
                            254 	.globl _uart_configure_auto_baud_calc_PARM_2
                            255 	.globl _uart_calc_th1_value_PARM_2
                            256 	.globl _uart_calc_s0rel_value_PARM_2
                            257 	.globl _uart_calc_actual_baud_rate_from_th1_PARM_2
                            258 	.globl _uart_calc_actual_baud_rate_from_s0rel_PARM_2
                            259 	.globl _uart_configure_manual_baud_calc_PARM_2
                            260 	.globl _timer1_configure_PARM_2
                            261 	.globl _timer0_configure_PARM_2
                            262 	.globl _interrupt_configure_ifp_PARM_2
                            263 	.globl _pwr_clk_mgmt_wakeup_configure_PARM_2
                            264 	.globl _pwm_start_PARM_2
                            265 	.globl _gpio_pin_val_write_PARM_2
                            266 	.globl _gpio_pin_configure_PARM_2
                            267 	.globl _rf_set_rx_addr_PARM_3
                            268 	.globl _rf_set_rx_addr_PARM_2
                            269 	.globl _rf_read_register_PARM_3
                            270 	.globl _rf_read_register_PARM_2
                            271 	.globl _rf_power_up_param_PARM_2
                            272 	.globl _rf_spi_send_read_PARM_3
                            273 	.globl _rf_spi_send_read_PARM_2
                            274 	.globl _rf_spi_execute_command_PARM_4
                            275 	.globl _rf_spi_execute_command_PARM_3
                            276 	.globl _rf_spi_execute_command_PARM_2
                            277 	.globl _rf_write_tx_payload_PARM_3
                            278 	.globl _rf_write_tx_payload_PARM_2
                            279 	.globl _rf_write_register_PARM_3
                            280 	.globl _rf_write_register_PARM_2
                            281 	.globl _rf_configure_debug_lite_PARM_2
                            282 	.globl _rf_read_rx_payload_PARM_2
                            283 	.globl _rf_read_rx_payload
                            284 	.globl _rf_configure_debug_lite
                            285 	.globl _rf_write_register
                            286 	.globl _rf_spi_configure_enable
                            287 	.globl _rf_write_tx_payload
                            288 	.globl _rf_transmit
                            289 	.globl _rf_set_as_rx
                            290 	.globl _rf_irq_clear_all
                            291 	.globl _rf_set_as_tx
                            292 	.globl _rf_spi_execute_command
                            293 	.globl _rf_spi_send_read
                            294 	.globl _rf_power_up_param
                            295 	.globl _rf_read_register
                            296 	.globl _rf_spi_send_read_byte
                            297 	.globl _rf_set_rx_addr
                            298 	.globl _rf_power_down
                            299 	.globl _rf_power_up
                            300 	.globl _gpio_pin_configure
                            301 	.globl _delay_us
                            302 	.globl _delay_s
                            303 	.globl _delay_ms
                            304 	.globl _pwm_configure
                            305 	.globl _pwm_start
                            306 	.globl _pwr_clk_mgmt_clklf_configure
                            307 	.globl _pwr_clk_mgmt_get_cclk_freq_in_hz
                            308 	.globl _pwr_clk_mgmt_wakeup_configure
                            309 	.globl _interrupt_configure_ifp
                            310 	.globl _adc_configure
                            311 	.globl _adc_set_input_channel
                            312 	.globl _adc_start_single_conversion
                            313 	.globl _adc_start_single_conversion_get_value
                            314 	.globl _timer0_configure
                            315 	.globl _timer1_configure
                            316 	.globl _uart_configure_manual_baud_calc
                            317 	.globl _uart_calc_actual_baud_rate_from_s0rel
                            318 	.globl _uart_calc_actual_baud_rate_from_th1
                            319 	.globl _uart_calc_s0rel_value
                            320 	.globl _uart_calc_th1_value
                            321 	.globl _uart_configure_auto_baud_calc
                            322 	.globl _rtc2_configure
                            323 ;--------------------------------------------------------
                            324 ; special function registers
                            325 ;--------------------------------------------------------
                            326 	.area RSEG    (ABS,DATA)
   0000                     327 	.org 0x0000
                     0080   328 _P0	=	0x0080
                     0081   329 _SP	=	0x0081
                     0082   330 _DPL	=	0x0082
                     0083   331 _DPH	=	0x0083
                     0084   332 _DPL1	=	0x0084
                     0085   333 _DPH1	=	0x0085
                     0087   334 _PCON	=	0x0087
                     0088   335 _TCON	=	0x0088
                     0089   336 _TMOD	=	0x0089
                     008A   337 _TL0	=	0x008a
                     008B   338 _TL1	=	0x008b
                     008C   339 _TH0	=	0x008c
                     008D   340 _TH1	=	0x008d
                     008F   341 _P3CON	=	0x008f
                     0090   342 _P1	=	0x0090
                     0092   343 _DPS	=	0x0092
                     0093   344 _P0DIR	=	0x0093
                     0094   345 _P1DIR	=	0x0094
                     0095   346 _P2DIR	=	0x0095
                     0096   347 _P3DIR	=	0x0096
                     0097   348 _P2CON	=	0x0097
                     0098   349 _S0CON	=	0x0098
                     0099   350 _S0BUF	=	0x0099
                     009E   351 _P0CON	=	0x009e
                     009F   352 _P1CON	=	0x009f
                     00A0   353 _P2	=	0x00a0
                     00A1   354 _PWMDC0	=	0x00a1
                     00A2   355 _PWMDC1	=	0x00a2
                     00A3   356 _CLKCTRL	=	0x00a3
                     00A4   357 _PWRDWN	=	0x00a4
                     00A5   358 _WUCON	=	0x00a5
                     00A6   359 _INTEXP	=	0x00a6
                     00A7   360 _MEMCON	=	0x00a7
                     00A8   361 _IEN0	=	0x00a8
                     00A9   362 _IP0	=	0x00a9
                     00AA   363 _S0RELL	=	0x00aa
                     00AB   364 _RTC2CPT01	=	0x00ab
                     00AC   365 _RTC2CPT10	=	0x00ac
                     00AD   366 _CLKLFCTRL	=	0x00ad
                     00AE   367 _OPMCON	=	0x00ae
                     00AF   368 _WDSV	=	0x00af
                     00B0   369 _P3	=	0x00b0
                     00B1   370 _RSTREAS	=	0x00b1
                     00B2   371 _PWMCON	=	0x00b2
                     00B3   372 _RTC2CON	=	0x00b3
                     00B4   373 _RTC2CMP0	=	0x00b4
                     00B5   374 _RTC2CMP1	=	0x00b5
                     00B6   375 _RTC2CPT00	=	0x00b6
                     00B7   376 _SPISRDSZ	=	0x00b7
                     00B8   377 _IEN1	=	0x00b8
                     00B9   378 _IP1	=	0x00b9
                     00BA   379 _S0RELH	=	0x00ba
                     00BC   380 _SPISCON0	=	0x00bc
                     00BD   381 _SPISCON1	=	0x00bd
                     00BE   382 _SPISSTAT	=	0x00be
                     00BF   383 _SPISDAT	=	0x00bf
                     00C0   384 _IRCON	=	0x00c0
                     00C1   385 _CCEN	=	0x00c1
                     00C2   386 _CCL1	=	0x00c2
                     00C3   387 _CCH1	=	0x00c3
                     00C4   388 _CCL2	=	0x00c4
                     00C5   389 _CCH2	=	0x00c5
                     00C6   390 _CCL3	=	0x00c6
                     00C7   391 _CCH3	=	0x00c7
                     00C8   392 _T2CON	=	0x00c8
                     00C9   393 _MPAGE	=	0x00c9
                     00C9   394 __XPAGE	=	0x00c9
                     00CA   395 _CRCL	=	0x00ca
                     00CB   396 _CRCH	=	0x00cb
                     00CC   397 _TL2	=	0x00cc
                     00CD   398 _TH2	=	0x00cd
                     00CE   399 _WUOPC1	=	0x00ce
                     00CF   400 _WUOPC0	=	0x00cf
                     00D0   401 _PSW	=	0x00d0
                     00D1   402 _ADCCON3	=	0x00d1
                     00D2   403 _ADCCON2	=	0x00d2
                     00D3   404 _ADCCON1	=	0x00d3
                     00D4   405 _ADCDATH	=	0x00d4
                     00D5   406 _ADCDATL	=	0x00d5
                     00D6   407 _RNGCTL	=	0x00d6
                     00D7   408 _RNGDAT	=	0x00d7
                     00D8   409 _ADCON	=	0x00d8
                     00D9   410 _W2SADR	=	0x00d9
                     00DA   411 _W2DAT	=	0x00da
                     00DB   412 _COMPCON	=	0x00db
                     00DC   413 _POFCON	=	0x00dc
                     00DD   414 _CCPDATIA	=	0x00dd
                     00DE   415 _CCPDATIB	=	0x00de
                     00DF   416 _CCPDATO	=	0x00df
                     00E0   417 _ACC	=	0x00e0
                     00E1   418 _W2CON1	=	0x00e1
                     00E2   419 _W2CON0	=	0x00e2
                     00E4   420 _SPIRCON0	=	0x00e4
                     00E5   421 _SPIRCON1	=	0x00e5
                     00E6   422 _SPIRSTAT	=	0x00e6
                     00E7   423 _SPIRDAT	=	0x00e7
                     00E8   424 _RFCON	=	0x00e8
                     00E9   425 _MD0	=	0x00e9
                     00EA   426 _MD1	=	0x00ea
                     00EB   427 _MD2	=	0x00eb
                     00EC   428 _MD3	=	0x00ec
                     00ED   429 _MD4	=	0x00ed
                     00EE   430 _MD5	=	0x00ee
                     00EF   431 _ARCON	=	0x00ef
                     00F0   432 _B	=	0x00f0
                     00F8   433 _FSR	=	0x00f8
                     00F9   434 _FPCR	=	0x00f9
                     00FA   435 _FCR	=	0x00fa
                     00FC   436 _SPIMCON0	=	0x00fc
                     00FD   437 _SPIMCON1	=	0x00fd
                     00FE   438 _SPIMSTAT	=	0x00fe
                     00FF   439 _SPIMDAT	=	0x00ff
                     C3C2   440 _CC1	=	0xc3c2
                     C5C4   441 _CC2	=	0xc5c4
                     C7C6   442 _CC3	=	0xc7c6
                     CBCA   443 _CRC	=	0xcbca
                     8C8A   444 _T0	=	0x8c8a
                     8D8B   445 _T1	=	0x8d8b
                     CDCC   446 _T2	=	0xcdcc
                     BAAA   447 _S0REL	=	0xbaaa
                     D4D5   448 _ADCDAT	=	0xd4d5
                            449 ;--------------------------------------------------------
                            450 ; special function bits
                            451 ;--------------------------------------------------------
                            452 	.area RSEG    (ABS,DATA)
   0000                     453 	.org 0x0000
                     0080   454 _P0_SB_D0	=	0x0080
                     0081   455 _P0_SB_D1	=	0x0081
                     0082   456 _P0_SB_D2	=	0x0082
                     0083   457 _P0_SB_D3	=	0x0083
                     0084   458 _P0_SB_D4	=	0x0084
                     0085   459 _P0_SB_D5	=	0x0085
                     0086   460 _P0_SB_D6	=	0x0086
                     0087   461 _P0_SB_D7	=	0x0087
                     0088   462 _TCON_SB_IT0	=	0x0088
                     0089   463 _TCON_SB_IE0	=	0x0089
                     008A   464 _TCON_SB_IT1	=	0x008a
                     008B   465 _TCON_SB_IE1	=	0x008b
                     008C   466 _TCON_SB_TR0	=	0x008c
                     008D   467 _TCON_SB_TF0	=	0x008d
                     008E   468 _TCON_SB_TR1	=	0x008e
                     008F   469 _TCON_SB_TF1	=	0x008f
                     0090   470 _P1_SB_D0	=	0x0090
                     0091   471 _P1_SB_D1	=	0x0091
                     0092   472 _P1_SB_D2	=	0x0092
                     0093   473 _P1_SB_D3	=	0x0093
                     0094   474 _P1_SB_D4	=	0x0094
                     0095   475 _P1_SB_D5	=	0x0095
                     0096   476 _P1_SB_D6	=	0x0096
                     0097   477 _P1_SB_D7	=	0x0097
                     0098   478 _S0CON_SB_RI0	=	0x0098
                     0099   479 _S0CON_SB_TI0	=	0x0099
                     009A   480 _S0CON_SB_RB80	=	0x009a
                     009B   481 _S0CON_SB_TB80	=	0x009b
                     009C   482 _S0CON_SB_REN0	=	0x009c
                     009D   483 _S0CON_SB_SM20	=	0x009d
                     009E   484 _S0CON_SB_SM1	=	0x009e
                     009F   485 _S0CON_SB_SM0	=	0x009f
                     00A0   486 _P2_SB_D0	=	0x00a0
                     00A1   487 _P2_SB_D1	=	0x00a1
                     00A2   488 _P2_SB_D2	=	0x00a2
                     00A3   489 _P2_SB_D3	=	0x00a3
                     00A4   490 _P2_SB_D4	=	0x00a4
                     00A5   491 _P2_SB_D5	=	0x00a5
                     00A6   492 _P2_SB_D6	=	0x00a6
                     00A7   493 _P2_SB_D7	=	0x00a7
                     00A8   494 _IEN0_SB_IFP	=	0x00a8
                     00A9   495 _IEN0_SB_T0	=	0x00a9
                     00AA   496 _IEN0_SB_POFIRQ	=	0x00aa
                     00AB   497 _IEN0_SB_T1	=	0x00ab
                     00AC   498 _IEN0_SB_UART	=	0x00ac
                     00AD   499 _IEN0_SB_T2	=	0x00ad
                     00AF   500 _IEN0_SB_GLOBAL	=	0x00af
                     00B0   501 _P3_SB_D0	=	0x00b0
                     00B1   502 _P3_SB_D1	=	0x00b1
                     00B2   503 _P3_SB_D2	=	0x00b2
                     00B3   504 _P3_SB_D3	=	0x00b3
                     00B4   505 _P3_SB_D4	=	0x00b4
                     00B5   506 _P3_SB_D5	=	0x00b5
                     00B6   507 _P3_SB_D6	=	0x00b6
                     00B7   508 _P3_SB_D7	=	0x00b7
                     00B8   509 _IEN1_SB_RFRDY	=	0x00b8
                     00B9   510 _IEN1_SB_RFIRQ	=	0x00b9
                     00BA   511 _IEN1_SB_SPI_2WIRE	=	0x00ba
                     00BB   512 _IEN1_SB_WUOPIRQ	=	0x00bb
                     00BC   513 _IEN1_SB_MISCIRQ	=	0x00bc
                     00BD   514 _IEN1_SB_TICK	=	0x00bd
                     00BF   515 _IEN1_SB_T2EXTRLD	=	0x00bf
                     00C0   516 _IRCON_SB_RFRDY	=	0x00c0
                     00C1   517 _IRCON_SB_RFIRQ	=	0x00c1
                     00C2   518 _IRCON_SB_SPI_2WIRE	=	0x00c2
                     00C3   519 _IRCON_SB_WUOPIRQ	=	0x00c3
                     00C4   520 _IRCON_SB_MISCIRQ	=	0x00c4
                     00C5   521 _IRCON_SB_TICK	=	0x00c5
                     00C6   522 _IRCON_SB_TF2	=	0x00c6
                     00C7   523 _IRCON_SB_EXF2	=	0x00c7
                     00C8   524 _T2CON_SB_T2I0	=	0x00c8
                     00C9   525 _T2CON_SB_T2I1	=	0x00c9
                     00CA   526 _T2CON_SB_T2CM	=	0x00ca
                     00CB   527 _T2CON_SB_T2R0	=	0x00cb
                     00CC   528 _T2CON_SB_T2R1	=	0x00cc
                     00CD   529 _T2CON_SB_I2FR	=	0x00cd
                     00CE   530 _T2CON_SB_I3FR	=	0x00ce
                     00CF   531 _T2CON_SB_T2PS	=	0x00cf
                     00D7   532 _PSW_SB_CY	=	0x00d7
                     00D6   533 _PSW_SB_AC	=	0x00d6
                     00D5   534 _PSW_SB_F0	=	0x00d5
                     00D4   535 _PSW_SB_RS1	=	0x00d4
                     00D3   536 _PSW_SB_RS0	=	0x00d3
                     00D2   537 _PSW_SB_OV	=	0x00d2
                     00D1   538 _PSW_SB_F1	=	0x00d1
                     00D0   539 _PSW_SB_P	=	0x00d0
                     00DF   540 _ADCON_SB_BD	=	0x00df
                     00E8   541 _RFCON_SB_RFCE	=	0x00e8
                     00E9   542 _RFCON_SB_RFCSN	=	0x00e9
                     00EA   543 _RFCON_SB_RFCKEN	=	0x00ea
                     00FA   544 _FSR_SB_RDISMB	=	0x00fa
                     00FB   545 _FSR_SB_INFEN	=	0x00fb
                     00FC   546 _FSR_SB_RDYN	=	0x00fc
                     00FD   547 _FSR_SB_WEN	=	0x00fd
                     00FE   548 _FSR_SB_STP	=	0x00fe
                     00FF   549 _FSR_SB_ENDBG	=	0x00ff
                            550 ;--------------------------------------------------------
                            551 ; overlayable register banks
                            552 ;--------------------------------------------------------
                            553 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     554 	.ds 8
                            555 ;--------------------------------------------------------
                            556 ; overlayable bit register bank
                            557 ;--------------------------------------------------------
                            558 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     559 bits:
   0000                     560 	.ds 1
                     8000   561 	b0 = bits[0]
                     8100   562 	b1 = bits[1]
                     8200   563 	b2 = bits[2]
                     8300   564 	b3 = bits[3]
                     8400   565 	b4 = bits[4]
                     8500   566 	b5 = bits[5]
                     8600   567 	b6 = bits[6]
                     8700   568 	b7 = bits[7]
                            569 ;--------------------------------------------------------
                            570 ; internal ram data
                            571 ;--------------------------------------------------------
                            572 	.area DSEG    (DATA)
   0000                     573 _rf_spi_send_read_sloc0_1_0:
   0000                     574 	.ds 3
   0003                     575 _rf_spi_send_read_sloc1_1_0:
   0003                     576 	.ds 1
   0004                     577 _uart_configure_auto_baud_calc_sloc0_1_0:
   0004                     578 	.ds 2
   0006                     579 _uart_configure_auto_baud_calc_sloc1_1_0:
   0006                     580 	.ds 4
   000A                     581 _uart_configure_auto_baud_calc_sloc2_1_0:
   000A                     582 	.ds 4
   000E                     583 _uart_configure_auto_baud_calc_sloc3_1_0:
   000E                     584 	.ds 4
                            585 ;--------------------------------------------------------
                            586 ; overlayable items in internal ram 
                            587 ;--------------------------------------------------------
                            588 ;--------------------------------------------------------
                            589 ; Stack segment in internal ram 
                            590 ;--------------------------------------------------------
                            591 	.area	SSEG	(DATA)
   0000                     592 __start__stack:
   0000                     593 	.ds	1
                            594 
                            595 ;--------------------------------------------------------
                            596 ; indirectly addressable internal ram data
                            597 ;--------------------------------------------------------
                            598 	.area ISEG    (DATA)
                            599 ;--------------------------------------------------------
                            600 ; absolute internal ram data
                            601 ;--------------------------------------------------------
                            602 	.area IABS    (ABS,DATA)
                            603 	.area IABS    (ABS,DATA)
                            604 ;--------------------------------------------------------
                            605 ; bit data
                            606 ;--------------------------------------------------------
                            607 	.area BSEG    (BIT)
                            608 ;--------------------------------------------------------
                            609 ; paged external ram data
                            610 ;--------------------------------------------------------
                            611 	.area PSEG    (PAG,XDATA)
                            612 ;--------------------------------------------------------
                            613 ; external ram data
                            614 ;--------------------------------------------------------
                            615 	.area XSEG    (XDATA)
   0000                     616 _rf_read_rx_payload_PARM_2:
   0000                     617 	.ds 2
   0002                     618 _rf_read_rx_payload_dataptr_1_37:
   0002                     619 	.ds 3
   0005                     620 _rf_configure_debug_lite_PARM_2:
   0005                     621 	.ds 1
   0006                     622 _rf_configure_debug_lite_rx_1_39:
   0006                     623 	.ds 1
   0007                     624 _rf_configure_debug_lite_config_1_40:
   0007                     625 	.ds 1
   0008                     626 _rf_write_register_PARM_2:
   0008                     627 	.ds 3
   000B                     628 _rf_write_register_PARM_3:
   000B                     629 	.ds 2
   000D                     630 _rf_write_register_regnumber_1_42:
   000D                     631 	.ds 1
   000E                     632 _rf_write_tx_payload_PARM_2:
   000E                     633 	.ds 2
   0010                     634 _rf_write_tx_payload_PARM_3:
   0010                     635 	.ds 1
   0011                     636 _rf_write_tx_payload_dataptr_1_45:
   0011                     637 	.ds 3
   0014                     638 _rf_set_as_rx_rx_active_mode_1_49:
   0014                     639 	.ds 1
   0015                     640 _rf_set_as_rx_config_1_50:
   0015                     641 	.ds 1
   0016                     642 _rf_irq_clear_all_dataptr_1_54:
   0016                     643 	.ds 1
   0017                     644 _rf_set_as_tx_config_1_55:
   0017                     645 	.ds 1
   0018                     646 _rf_spi_execute_command_PARM_2:
   0018                     647 	.ds 3
   001B                     648 _rf_spi_execute_command_PARM_3:
   001B                     649 	.ds 2
   001D                     650 _rf_spi_execute_command_PARM_4:
   001D                     651 	.ds 1
   001E                     652 _rf_spi_execute_command_instruction_1_57:
   001E                     653 	.ds 1
   001F                     654 _rf_spi_execute_command_status_1_58:
   001F                     655 	.ds 1
   0020                     656 _rf_spi_send_read_PARM_2:
   0020                     657 	.ds 2
   0022                     658 _rf_spi_send_read_PARM_3:
   0022                     659 	.ds 1
   0023                     660 _rf_spi_send_read_dataptr_1_59:
   0023                     661 	.ds 3
   0026                     662 _rf_power_up_param_PARM_2:
   0026                     663 	.ds 1
   0027                     664 _rf_power_up_param_rx_active_mode_1_63:
   0027                     665 	.ds 1
   0028                     666 _rf_read_register_PARM_2:
   0028                     667 	.ds 3
   002B                     668 _rf_read_register_PARM_3:
   002B                     669 	.ds 2
   002D                     670 _rf_read_register_regnumber_1_69:
   002D                     671 	.ds 1
   002E                     672 _rf_spi_send_read_byte_byte_1_71:
   002E                     673 	.ds 1
   002F                     674 _rf_set_rx_addr_PARM_2:
   002F                     675 	.ds 2
   0031                     676 _rf_set_rx_addr_PARM_3:
   0031                     677 	.ds 1
   0032                     678 _rf_set_rx_addr_address_1_73:
   0032                     679 	.ds 3
   0035                     680 _rf_power_down_config_1_76:
   0035                     681 	.ds 1
   0036                     682 _rf_power_up_rx_active_mode_1_78:
   0036                     683 	.ds 1
   0037                     684 _rf_power_up_config_1_79:
   0037                     685 	.ds 1
   0038                     686 _gpio_pin_configure_PARM_2:
   0038                     687 	.ds 1
   0039                     688 _gpio_pin_configure_gpio_pin_id_1_86:
   0039                     689 	.ds 1
   003A                     690 _gpio_pin_val_read_gpio_pin_id_1_108:
   003A                     691 	.ds 1
   003B                     692 _gpio_pin_val_read_value_1_109:
   003B                     693 	.ds 1
   003C                     694 _gpio_pin_val_clear_gpio_pin_id_1_116:
   003C                     695 	.ds 1
   003D                     696 _gpio_pin_val_set_gpio_pin_id_1_122:
   003D                     697 	.ds 1
   003E                     698 _gpio_pin_val_write_PARM_2:
   003E                     699 	.ds 1
   003F                     700 _gpio_pin_val_write_gpio_pin_id_1_128:
   003F                     701 	.ds 1
   0040                     702 _delay_us_microseconds_1_132:
   0040                     703 	.ds 2
   0042                     704 _delay_s_seconds_1_135:
   0042                     705 	.ds 2
   0044                     706 _delay_ms_milliseconds_1_138:
   0044                     707 	.ds 2
   0046                     708 _pwm_configure_pwm_config_options_1_143:
   0046                     709 	.ds 1
   0047                     710 _pwm_start_PARM_2:
   0047                     711 	.ds 1
   0048                     712 _pwm_start_pwm_channel_1_145:
   0048                     713 	.ds 1
   0049                     714 _pwr_clk_mgmt_clklf_configure_clklf_config_options_1_154:
   0049                     715 	.ds 1
   004A                     716 _pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156:
   004A                     717 	.ds 4
   004E                     718 _pwr_clk_mgmt_wakeup_configure_PARM_2:
   004E                     719 	.ds 2
   0050                     720 _pwr_clk_mgmt_wakeup_configure_wakeup_sources_config_options_1_158:
   0050                     721 	.ds 1
   0051                     722 _watchdog_set_wdsv_count_wdsv_value_1_161:
   0051                     723 	.ds 2
   0053                     724 _watchdog_start_and_set_timeout_in_ms_milliseconds_1_163:
   0053                     725 	.ds 4
   0057                     726 _watchdog_start_and_set_timeout_in_ms_wd_value_1_164:
   0057                     727 	.ds 2
   0059                     728 _interrupt_configure_ifp_PARM_2:
   0059                     729 	.ds 1
   005A                     730 _interrupt_configure_ifp_interrupt_ifp_input_1_167:
   005A                     731 	.ds 1
   005B                     732 _adc_configure_adc_config_options_1_181:
   005B                     733 	.ds 2
   005D                     734 _adc_set_input_channel_adc_channel_1_183:
   005D                     735 	.ds 1
   005E                     736 _adc_start_single_conversion_adc_channel_1_185:
   005E                     737 	.ds 1
   005F                     738 _adc_start_single_conversion_get_value_adc_channel_1_187:
   005F                     739 	.ds 1
   0060                     740 _timer0_configure_PARM_2:
   0060                     741 	.ds 2
   0062                     742 _timer0_configure_timer0_config_options_1_190:
   0062                     743 	.ds 1
   0063                     744 _timer1_configure_PARM_2:
   0063                     745 	.ds 2
   0065                     746 _timer1_configure_timer1_config_options_1_195:
   0065                     747 	.ds 1
   0066                     748 _uart_configure_manual_baud_calc_PARM_2:
   0066                     749 	.ds 2
   0068                     750 _uart_configure_manual_baud_calc_uart_config_options_1_205:
   0068                     751 	.ds 1
   0069                     752 _uart_calc_actual_baud_rate_from_s0rel_PARM_2:
   0069                     753 	.ds 1
   006A                     754 _uart_calc_actual_baud_rate_from_s0rel_s0rel_reg_value_1_212:
   006A                     755 	.ds 2
   006C                     756 _uart_calc_actual_baud_rate_from_th1_PARM_2:
   006C                     757 	.ds 1
   006D                     758 _uart_calc_actual_baud_rate_from_th1_th1_reg_value_1_214:
   006D                     759 	.ds 1
   006E                     760 _uart_calc_s0rel_value_PARM_2:
   006E                     761 	.ds 1
   006F                     762 _uart_calc_s0rel_value_desired_baud_rate_1_216:
   006F                     763 	.ds 4
   0073                     764 _uart_calc_th1_value_PARM_2:
   0073                     765 	.ds 1
   0074                     766 _uart_calc_th1_value_desired_baud_rate_1_218:
   0074                     767 	.ds 4
   0078                     768 _uart_configure_auto_baud_calc_PARM_2:
   0078                     769 	.ds 4
   007C                     770 _uart_configure_auto_baud_calc_uart_config_options_1_220:
   007C                     771 	.ds 1
   007D                     772 _rtc2_configure_PARM_2:
   007D                     773 	.ds 2
   007F                     774 _rtc2_configure_rtc2_config_options_1_230:
   007F                     775 	.ds 1
   0080                     776 _radiobegin_setup_1_233:
   0080                     777 	.ds 1
   0081                     778 _setChannel_channel_1_234:
   0081                     779 	.ds 1
   0082                     780 _setDataRate_speed_1_236:
   0082                     781 	.ds 1
   0083                     782 _setDataRate_buffer_1_237:
   0083                     783 	.ds 1
   0084                     784 _setAutoAck_enable_1_238:
   0084                     785 	.ds 1
   0085                     786 _setAutoAck_buffer_1_239:
   0085                     787 	.ds 1
   0086                     788 _setCRCLength_length_1_240:
   0086                     789 	.ds 1
   0087                     790 _setCRCLength_buffer_1_241:
   0087                     791 	.ds 1
   0088                     792 _setPALevel_setup_1_243:
   0088                     793 	.ds 1
   0089                     794 _openAllPipe_buffer_1_244:
   0089                     795 	.ds 5
   008E                     796 _openAllPipe_setup_1_244:
   008E                     797 	.ds 1
   008F                     798 _clientnf::
   008F                     799 	.ds 18
   00A1                     800 _setdimmer_value_1_245:
   00A1                     801 	.ds 1
   00A2                     802 _stdimm::
   00A2                     803 	.ds 1
   00A3                     804 _dimmon_mode_1_252:
   00A3                     805 	.ds 1
   00A4                     806 _servernf::
   00A4                     807 	.ds 32
   00C4                     808 _main_st_1_256:
   00C4                     809 	.ds 1
   00C5                     810 _main_countpause_1_256:
   00C5                     811 	.ds 1
   00C6                     812 _main_rewers_1_256:
   00C6                     813 	.ds 1
   00C7                     814 _main_statesend_1_256:
   00C7                     815 	.ds 4
   00CB                     816 _main_radiosend_1_256:
   00CB                     817 	.ds 4
                            818 ;--------------------------------------------------------
                            819 ; absolute external ram data
                            820 ;--------------------------------------------------------
                            821 	.area XABS    (ABS,XDATA)
                            822 ;--------------------------------------------------------
                            823 ; external initialized ram data
                            824 ;--------------------------------------------------------
                            825 	.area XISEG   (XDATA)
   0000                     826 _valuepwm::
   0000                     827 	.ds 2
   0002                     828 _countrtc::
   0002                     829 	.ds 4
                            830 	.area HOME    (CODE)
                            831 	.area GSINIT0 (CODE)
                            832 	.area GSINIT1 (CODE)
                            833 	.area GSINIT2 (CODE)
                            834 	.area GSINIT3 (CODE)
                            835 	.area GSINIT4 (CODE)
                            836 	.area GSINIT5 (CODE)
                            837 	.area GSINIT  (CODE)
                            838 	.area GSFINAL (CODE)
                            839 	.area CSEG    (CODE)
                            840 ;--------------------------------------------------------
                            841 ; interrupt vector 
                            842 ;--------------------------------------------------------
                            843 	.area HOME    (CODE)
   0000                     844 __interrupt_vect:
   0000 02r00r00      [24]  845 	ljmp	__sdcc_gsinit_startup
   0003 02r14rF6      [24]  846 	ljmp	_isr_ifp
   0006                     847 	.ds	5
   000B 32            [24]  848 	reti
   000C                     849 	.ds	7
   0013 32            [24]  850 	reti
   0014                     851 	.ds	7
   001B 02r15r59      [24]  852 	ljmp	_isr_t1
   001E                     853 	.ds	5
   0023 32            [24]  854 	reti
   0024                     855 	.ds	7
   002B 32            [24]  856 	reti
   002C                     857 	.ds	7
   0033 32            [24]  858 	reti
   0034                     859 	.ds	7
   003B 32            [24]  860 	reti
   003C                     861 	.ds	7
   0043 32            [24]  862 	reti
   0044                     863 	.ds	7
   004B 32            [24]  864 	reti
   004C                     865 	.ds	7
   0053 32            [24]  866 	reti
   0054                     867 	.ds	7
   005B 32            [24]  868 	reti
   005C                     869 	.ds	7
   0063 32            [24]  870 	reti
   0064                     871 	.ds	7
   006B 02r15rD6      [24]  872 	ljmp	_isr_rtc2
                            873 ;--------------------------------------------------------
                            874 ; global & static initialisations
                            875 ;--------------------------------------------------------
                            876 	.area HOME    (CODE)
                            877 	.area GSINIT  (CODE)
                            878 	.area GSFINAL (CODE)
                            879 	.area GSINIT  (CODE)
                            880 	.globl __sdcc_gsinit_startup
                            881 	.globl __sdcc_program_startup
                            882 	.globl __start__stack
                            883 	.globl __mcs51_genXINIT
                            884 	.globl __mcs51_genXRAMCLEAR
                            885 	.globl __mcs51_genRAMCLEAR
                            886 	.area GSFINAL (CODE)
   0000 02r00r6E      [24]  887 	ljmp	__sdcc_program_startup
                            888 ;--------------------------------------------------------
                            889 ; Home
                            890 ;--------------------------------------------------------
                            891 	.area HOME    (CODE)
                            892 	.area HOME    (CODE)
   006E                     893 __sdcc_program_startup:
   006E 02r15rFD      [24]  894 	ljmp	_main
                            895 ;	return from main will return to caller
                            896 ;--------------------------------------------------------
                            897 ; code
                            898 ;--------------------------------------------------------
                            899 	.area CSEG    (CODE)
                            900 ;------------------------------------------------------------
                            901 ;Allocation info for local variables in function 'rf_read_rx_payload'
                            902 ;------------------------------------------------------------
                            903 ;len                       Allocated with name '_rf_read_rx_payload_PARM_2'
                            904 ;dataptr                   Allocated with name '_rf_read_rx_payload_dataptr_1_37'
                            905 ;status                    Allocated with name '_rf_read_rx_payload_status_1_38'
                            906 ;------------------------------------------------------------
                            907 ;	../src/rf/src/rf_read_rx_payload.c:48: unsigned char rf_read_rx_payload(unsigned char * dataptr, unsigned int len)
                            908 ;	-----------------------------------------
                            909 ;	 function rf_read_rx_payload
                            910 ;	-----------------------------------------
   0000                     911 _rf_read_rx_payload:
                     0007   912 	ar7 = 0x07
                     0006   913 	ar6 = 0x06
                     0005   914 	ar5 = 0x05
                     0004   915 	ar4 = 0x04
                     0003   916 	ar3 = 0x03
                     0002   917 	ar2 = 0x02
                     0001   918 	ar1 = 0x01
                     0000   919 	ar0 = 0x00
   0000 AF F0         [24]  920 	mov	r7,b
   0002 AE 83         [24]  921 	mov	r6,dph
   0004 E5 82         [12]  922 	mov	a,dpl
   0006 90r00r02      [24]  923 	mov	dptr,#_rf_read_rx_payload_dataptr_1_37
   0009 F0            [24]  924 	movx	@dptr,a
   000A EE            [12]  925 	mov	a,r6
   000B A3            [24]  926 	inc	dptr
   000C F0            [24]  927 	movx	@dptr,a
   000D EF            [12]  928 	mov	a,r7
   000E A3            [24]  929 	inc	dptr
   000F F0            [24]  930 	movx	@dptr,a
                            931 ;	../src/rf/src/rf_read_rx_payload.c:53: rf_clear_ce();
   0010 C2 E8         [12]  932 	clr _RFCON_SB_RFCE 
                            933 ;	../src/rf/src/rf_read_rx_payload.c:54: status = rf_spi_execute_command(RF_R_RX_PAYLOAD, dataptr, len, true);
   0012 90r00r02      [24]  934 	mov	dptr,#_rf_read_rx_payload_dataptr_1_37
   0015 E0            [24]  935 	movx	a,@dptr
   0016 FD            [12]  936 	mov	r5,a
   0017 A3            [24]  937 	inc	dptr
   0018 E0            [24]  938 	movx	a,@dptr
   0019 FE            [12]  939 	mov	r6,a
   001A A3            [24]  940 	inc	dptr
   001B E0            [24]  941 	movx	a,@dptr
   001C FF            [12]  942 	mov	r7,a
   001D 90r00r00      [24]  943 	mov	dptr,#_rf_read_rx_payload_PARM_2
   0020 E0            [24]  944 	movx	a,@dptr
   0021 FB            [12]  945 	mov	r3,a
   0022 A3            [24]  946 	inc	dptr
   0023 E0            [24]  947 	movx	a,@dptr
   0024 FC            [12]  948 	mov	r4,a
   0025 90r00r18      [24]  949 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0028 ED            [12]  950 	mov	a,r5
   0029 F0            [24]  951 	movx	@dptr,a
   002A EE            [12]  952 	mov	a,r6
   002B A3            [24]  953 	inc	dptr
   002C F0            [24]  954 	movx	@dptr,a
   002D EF            [12]  955 	mov	a,r7
   002E A3            [24]  956 	inc	dptr
   002F F0            [24]  957 	movx	@dptr,a
   0030 90r00r1B      [24]  958 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0033 EB            [12]  959 	mov	a,r3
   0034 F0            [24]  960 	movx	@dptr,a
   0035 EC            [12]  961 	mov	a,r4
   0036 A3            [24]  962 	inc	dptr
   0037 F0            [24]  963 	movx	@dptr,a
   0038 90r00r1D      [24]  964 	mov	dptr,#_rf_spi_execute_command_PARM_4
   003B 74 01         [12]  965 	mov	a,#0x01
   003D F0            [24]  966 	movx	@dptr,a
   003E 75 82 61      [24]  967 	mov	dpl,#0x61
   0041 12r02r35      [24]  968 	lcall	_rf_spi_execute_command
   0044 AF 82         [24]  969 	mov	r7,dpl
                            970 ;	../src/rf/src/rf_read_rx_payload.c:55: rf_set_ce();
   0046 D2 E8         [12]  971 	setb _RFCON_SB_RFCE 
   0048 90 00 04      [24]  972 	mov	dptr,#0x0004
   004B C0 07         [24]  973 	push	ar7
   004D 12r08r42      [24]  974 	lcall	_delay_us
   0050 D0 07         [24]  975 	pop	ar7
                            976 ;	../src/rf/src/rf_read_rx_payload.c:57: return status; //Return the STATUS register value
   0052 8F 82         [24]  977 	mov	dpl,r7
   0054 22            [24]  978 	ret
                            979 ;------------------------------------------------------------
                            980 ;Allocation info for local variables in function 'rf_configure_debug_lite'
                            981 ;------------------------------------------------------------
                            982 ;p0_payload_width          Allocated with name '_rf_configure_debug_lite_PARM_2'
                            983 ;rx                        Allocated with name '_rf_configure_debug_lite_rx_1_39'
                            984 ;config                    Allocated with name '_rf_configure_debug_lite_config_1_40'
                            985 ;------------------------------------------------------------
                            986 ;	../src/rf/src/rf_configure_debug_lite.c:48: void rf_configure_debug_lite(bool rx, unsigned char p0_payload_width)
                            987 ;	-----------------------------------------
                            988 ;	 function rf_configure_debug_lite
                            989 ;	-----------------------------------------
   0055                     990 _rf_configure_debug_lite:
   0055 E5 82         [12]  991 	mov	a,dpl
   0057 90r00r06      [24]  992 	mov	dptr,#_rf_configure_debug_lite_rx_1_39
   005A F0            [24]  993 	movx	@dptr,a
                            994 ;	../src/rf/src/rf_configure_debug_lite.c:52: rf_spi_configure_enable(); //Enable RF SPI
   005B 12r00rF9      [24]  995 	lcall	_rf_spi_configure_enable
                            996 ;	../src/rf/src/rf_configure_debug_lite.c:55: config = 0;
   005E 90r00r07      [24]  997 	mov	dptr,#_rf_configure_debug_lite_config_1_40
   0061 E4            [12]  998 	clr	a
   0062 F0            [24]  999 	movx	@dptr,a
                           1000 ;	../src/rf/src/rf_configure_debug_lite.c:56: rf_write_register(RF_EN_AA, &config, 1); //Turn auto-acknowledge off
   0063 90r00r08      [24] 1001 	mov	dptr,#_rf_write_register_PARM_2
   0066 74r07         [12] 1002 	mov	a,#_rf_configure_debug_lite_config_1_40
   0068 F0            [24] 1003 	movx	@dptr,a
   0069 74s00         [12] 1004 	mov	a,#(_rf_configure_debug_lite_config_1_40 >> 8)
   006B A3            [24] 1005 	inc	dptr
   006C F0            [24] 1006 	movx	@dptr,a
   006D E4            [12] 1007 	clr	a
   006E A3            [24] 1008 	inc	dptr
   006F F0            [24] 1009 	movx	@dptr,a
   0070 90r00r0B      [24] 1010 	mov	dptr,#_rf_write_register_PARM_3
   0073 74 01         [12] 1011 	mov	a,#0x01
   0075 F0            [24] 1012 	movx	@dptr,a
   0076 E4            [12] 1013 	clr	a
   0077 A3            [24] 1014 	inc	dptr
   0078 F0            [24] 1015 	movx	@dptr,a
   0079 75 82 01      [24] 1016 	mov	dpl,#0x01
   007C 12r00rBC      [24] 1017 	lcall	_rf_write_register
                           1018 ;	../src/rf/src/rf_configure_debug_lite.c:59: config = RF_CONFIG_DEFAULT_VAL; //Set config to the default value of the CONFIG register
   007F 90r00r07      [24] 1019 	mov	dptr,#_rf_configure_debug_lite_config_1_40
   0082 74 08         [12] 1020 	mov	a,#0x08
   0084 F0            [24] 1021 	movx	@dptr,a
                           1022 ;	../src/rf/src/rf_configure_debug_lite.c:62: rf_write_register(RF_RX_PW_P0, &p0_payload_width, 1);
   0085 90r00r08      [24] 1023 	mov	dptr,#_rf_write_register_PARM_2
   0088 74r05         [12] 1024 	mov	a,#_rf_configure_debug_lite_PARM_2
   008A F0            [24] 1025 	movx	@dptr,a
   008B 74s00         [12] 1026 	mov	a,#(_rf_configure_debug_lite_PARM_2 >> 8)
   008D A3            [24] 1027 	inc	dptr
   008E F0            [24] 1028 	movx	@dptr,a
   008F E4            [12] 1029 	clr	a
   0090 A3            [24] 1030 	inc	dptr
   0091 F0            [24] 1031 	movx	@dptr,a
   0092 90r00r0B      [24] 1032 	mov	dptr,#_rf_write_register_PARM_3
   0095 74 01         [12] 1033 	mov	a,#0x01
   0097 F0            [24] 1034 	movx	@dptr,a
   0098 E4            [12] 1035 	clr	a
   0099 A3            [24] 1036 	inc	dptr
   009A F0            [24] 1037 	movx	@dptr,a
   009B 75 82 11      [24] 1038 	mov	dpl,#0x11
   009E 12r00rBC      [24] 1039 	lcall	_rf_write_register
                           1040 ;	../src/rf/src/rf_configure_debug_lite.c:65: if(rx != false)
   00A1 90r00r06      [24] 1041 	mov	dptr,#_rf_configure_debug_lite_rx_1_39
   00A4 E0            [24] 1042 	movx	a,@dptr
   00A5 FF            [12] 1043 	mov	r7,a
   00A6 60 06         [24] 1044 	jz	00102$
                           1045 ;	../src/rf/src/rf_configure_debug_lite.c:67: config |= RF_CONFIG_PRIM_RX;
   00A8 90r00r07      [24] 1046 	mov	dptr,#_rf_configure_debug_lite_config_1_40
   00AB 74 09         [12] 1047 	mov	a,#0x09
   00AD F0            [24] 1048 	movx	@dptr,a
   00AE                    1049 00102$:
                           1050 ;	../src/rf/src/rf_configure_debug_lite.c:70: rf_power_up_param(true, config);
   00AE 90r00r07      [24] 1051 	mov	dptr,#_rf_configure_debug_lite_config_1_40
   00B1 E0            [24] 1052 	movx	a,@dptr
   00B2 90r00r26      [24] 1053 	mov	dptr,#_rf_power_up_param_PARM_2
   00B5 F0            [24] 1054 	movx	@dptr,a
   00B6 75 82 01      [24] 1055 	mov	dpl,#0x01
   00B9 02r03r24      [24] 1056 	ljmp	_rf_power_up_param
                           1057 ;------------------------------------------------------------
                           1058 ;Allocation info for local variables in function 'rf_write_register'
                           1059 ;------------------------------------------------------------
                           1060 ;dataptr                   Allocated with name '_rf_write_register_PARM_2'
                           1061 ;len                       Allocated with name '_rf_write_register_PARM_3'
                           1062 ;regnumber                 Allocated with name '_rf_write_register_regnumber_1_42'
                           1063 ;------------------------------------------------------------
                           1064 ;	../src/rf/src/rf_write_register.c:49: unsigned char rf_write_register(unsigned char regnumber, unsigned char * dataptr, unsigned int len)
                           1065 ;	-----------------------------------------
                           1066 ;	 function rf_write_register
                           1067 ;	-----------------------------------------
   00BC                    1068 _rf_write_register:
   00BC E5 82         [12] 1069 	mov	a,dpl
                           1070 ;	../src/rf/src/rf_write_register.c:52: return rf_spi_execute_command(RF_W_REGISTER | (regnumber & RF_W_REGISTER_DATA), dataptr, len, false);
   00BE 90r00r0D      [24] 1071 	mov	dptr,#_rf_write_register_regnumber_1_42
   00C1 F0            [24] 1072 	movx	@dptr,a
   00C2 FF            [12] 1073 	mov	r7,a
   00C3 74 1F         [12] 1074 	mov	a,#0x1F
   00C5 5F            [12] 1075 	anl	a,r7
   00C6 44 20         [12] 1076 	orl	a,#0x20
   00C8 FF            [12] 1077 	mov	r7,a
   00C9 90r00r08      [24] 1078 	mov	dptr,#_rf_write_register_PARM_2
   00CC E0            [24] 1079 	movx	a,@dptr
   00CD FC            [12] 1080 	mov	r4,a
   00CE A3            [24] 1081 	inc	dptr
   00CF E0            [24] 1082 	movx	a,@dptr
   00D0 FD            [12] 1083 	mov	r5,a
   00D1 A3            [24] 1084 	inc	dptr
   00D2 E0            [24] 1085 	movx	a,@dptr
   00D3 FE            [12] 1086 	mov	r6,a
   00D4 90r00r0B      [24] 1087 	mov	dptr,#_rf_write_register_PARM_3
   00D7 E0            [24] 1088 	movx	a,@dptr
   00D8 FA            [12] 1089 	mov	r2,a
   00D9 A3            [24] 1090 	inc	dptr
   00DA E0            [24] 1091 	movx	a,@dptr
   00DB FB            [12] 1092 	mov	r3,a
   00DC 90r00r18      [24] 1093 	mov	dptr,#_rf_spi_execute_command_PARM_2
   00DF EC            [12] 1094 	mov	a,r4
   00E0 F0            [24] 1095 	movx	@dptr,a
   00E1 ED            [12] 1096 	mov	a,r5
   00E2 A3            [24] 1097 	inc	dptr
   00E3 F0            [24] 1098 	movx	@dptr,a
   00E4 EE            [12] 1099 	mov	a,r6
   00E5 A3            [24] 1100 	inc	dptr
   00E6 F0            [24] 1101 	movx	@dptr,a
   00E7 90r00r1B      [24] 1102 	mov	dptr,#_rf_spi_execute_command_PARM_3
   00EA EA            [12] 1103 	mov	a,r2
   00EB F0            [24] 1104 	movx	@dptr,a
   00EC EB            [12] 1105 	mov	a,r3
   00ED A3            [24] 1106 	inc	dptr
   00EE F0            [24] 1107 	movx	@dptr,a
   00EF 90r00r1D      [24] 1108 	mov	dptr,#_rf_spi_execute_command_PARM_4
   00F2 E4            [12] 1109 	clr	a
   00F3 F0            [24] 1110 	movx	@dptr,a
   00F4 8F 82         [24] 1111 	mov	dpl,r7
   00F6 02r02r35      [24] 1112 	ljmp	_rf_spi_execute_command
                           1113 ;------------------------------------------------------------
                           1114 ;Allocation info for local variables in function 'rf_spi_configure_enable'
                           1115 ;------------------------------------------------------------
                           1116 ;	../src/rf/src/rf_spi_configure_enable.c:47: void rf_spi_configure_enable()
                           1117 ;	-----------------------------------------
                           1118 ;	 function rf_spi_configure_enable
                           1119 ;	-----------------------------------------
   00F9                    1120 _rf_spi_configure_enable:
                           1121 ;	../src/rf/src/rf_spi_configure_enable.c:50: RFCON = 0x02;
   00F9 75 E8 02      [24] 1122 	mov	_RFCON,#0x02
                           1123 ;	../src/rf/src/rf_spi_configure_enable.c:51: RFCON = RFCON_RFCKEN;
   00FC 75 E8 04      [24] 1124 	mov	_RFCON,#0x04
   00FF 22            [24] 1125 	ret
                           1126 ;------------------------------------------------------------
                           1127 ;Allocation info for local variables in function 'rf_write_tx_payload'
                           1128 ;------------------------------------------------------------
                           1129 ;len                       Allocated with name '_rf_write_tx_payload_PARM_2'
                           1130 ;transmit                  Allocated with name '_rf_write_tx_payload_PARM_3'
                           1131 ;dataptr                   Allocated with name '_rf_write_tx_payload_dataptr_1_45'
                           1132 ;status                    Allocated with name '_rf_write_tx_payload_status_1_46'
                           1133 ;------------------------------------------------------------
                           1134 ;	../src/rf/src/rf_write_tx_payload.c:49: unsigned char rf_write_tx_payload(unsigned char * dataptr, unsigned int len, bool transmit)
                           1135 ;	-----------------------------------------
                           1136 ;	 function rf_write_tx_payload
                           1137 ;	-----------------------------------------
   0100                    1138 _rf_write_tx_payload:
   0100 AF F0         [24] 1139 	mov	r7,b
   0102 AE 83         [24] 1140 	mov	r6,dph
   0104 E5 82         [12] 1141 	mov	a,dpl
   0106 90r00r11      [24] 1142 	mov	dptr,#_rf_write_tx_payload_dataptr_1_45
   0109 F0            [24] 1143 	movx	@dptr,a
   010A EE            [12] 1144 	mov	a,r6
   010B A3            [24] 1145 	inc	dptr
   010C F0            [24] 1146 	movx	@dptr,a
   010D EF            [12] 1147 	mov	a,r7
   010E A3            [24] 1148 	inc	dptr
   010F F0            [24] 1149 	movx	@dptr,a
                           1150 ;	../src/rf/src/rf_write_tx_payload.c:53: status = rf_spi_execute_command(RF_W_TX_PAYLOAD, dataptr, len, false); //Write the payload
   0110 90r00r11      [24] 1151 	mov	dptr,#_rf_write_tx_payload_dataptr_1_45
   0113 E0            [24] 1152 	movx	a,@dptr
   0114 FD            [12] 1153 	mov	r5,a
   0115 A3            [24] 1154 	inc	dptr
   0116 E0            [24] 1155 	movx	a,@dptr
   0117 FE            [12] 1156 	mov	r6,a
   0118 A3            [24] 1157 	inc	dptr
   0119 E0            [24] 1158 	movx	a,@dptr
   011A FF            [12] 1159 	mov	r7,a
   011B 90r00r0E      [24] 1160 	mov	dptr,#_rf_write_tx_payload_PARM_2
   011E E0            [24] 1161 	movx	a,@dptr
   011F FB            [12] 1162 	mov	r3,a
   0120 A3            [24] 1163 	inc	dptr
   0121 E0            [24] 1164 	movx	a,@dptr
   0122 FC            [12] 1165 	mov	r4,a
   0123 90r00r18      [24] 1166 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0126 ED            [12] 1167 	mov	a,r5
   0127 F0            [24] 1168 	movx	@dptr,a
   0128 EE            [12] 1169 	mov	a,r6
   0129 A3            [24] 1170 	inc	dptr
   012A F0            [24] 1171 	movx	@dptr,a
   012B EF            [12] 1172 	mov	a,r7
   012C A3            [24] 1173 	inc	dptr
   012D F0            [24] 1174 	movx	@dptr,a
   012E 90r00r1B      [24] 1175 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0131 EB            [12] 1176 	mov	a,r3
   0132 F0            [24] 1177 	movx	@dptr,a
   0133 EC            [12] 1178 	mov	a,r4
   0134 A3            [24] 1179 	inc	dptr
   0135 F0            [24] 1180 	movx	@dptr,a
   0136 90r00r1D      [24] 1181 	mov	dptr,#_rf_spi_execute_command_PARM_4
   0139 E4            [12] 1182 	clr	a
   013A F0            [24] 1183 	movx	@dptr,a
   013B 75 82 A0      [24] 1184 	mov	dpl,#0xA0
   013E 12r02r35      [24] 1185 	lcall	_rf_spi_execute_command
   0141 AF 82         [24] 1186 	mov	r7,dpl
                           1187 ;	../src/rf/src/rf_write_tx_payload.c:56: if(transmit == true)
   0143 90r00r10      [24] 1188 	mov	dptr,#_rf_write_tx_payload_PARM_3
   0146 E0            [24] 1189 	movx	a,@dptr
   0147 FE            [12] 1190 	mov	r6,a
   0148 BE 01 07      [24] 1191 	cjne	r6,#0x01,00102$
                           1192 ;	../src/rf/src/rf_write_tx_payload.c:58: rf_transmit();
   014B C0 07         [24] 1193 	push	ar7
   014D 12r01r55      [24] 1194 	lcall	_rf_transmit
   0150 D0 07         [24] 1195 	pop	ar7
   0152                    1196 00102$:
                           1197 ;	../src/rf/src/rf_write_tx_payload.c:61: return status; //Return the value of STATUS
   0152 8F 82         [24] 1198 	mov	dpl,r7
   0154 22            [24] 1199 	ret
                           1200 ;------------------------------------------------------------
                           1201 ;Allocation info for local variables in function 'rf_transmit'
                           1202 ;------------------------------------------------------------
                           1203 ;	../src/rf/src/rf_transmit.c:47: void rf_transmit()
                           1204 ;	-----------------------------------------
                           1205 ;	 function rf_transmit
                           1206 ;	-----------------------------------------
   0155                    1207 _rf_transmit:
                           1208 ;	../src/rf/src/rf_transmit.c:50: rf_set_ce();
   0155 D2 E8         [12] 1209 	setb _RFCON_SB_RFCE 
   0157 90 00 04      [24] 1210 	mov	dptr,#0x0004
   015A 12r08r42      [24] 1211 	lcall	_delay_us
                           1212 ;	../src/rf/src/rf_transmit.c:51: delay_us(10);
   015D 90 00 0A      [24] 1213 	mov	dptr,#0x000A
   0160 12r08r42      [24] 1214 	lcall	_delay_us
                           1215 ;	../src/rf/src/rf_transmit.c:52: rf_clear_ce();
   0163 C2 E8         [12] 1216 	clr _RFCON_SB_RFCE 
   0165 22            [24] 1217 	ret
                           1218 ;------------------------------------------------------------
                           1219 ;Allocation info for local variables in function 'rf_set_as_rx'
                           1220 ;------------------------------------------------------------
                           1221 ;rx_active_mode            Allocated with name '_rf_set_as_rx_rx_active_mode_1_49'
                           1222 ;config                    Allocated with name '_rf_set_as_rx_config_1_50'
                           1223 ;------------------------------------------------------------
                           1224 ;	../src/rf/src/rf_set_as_rx.c:47: void rf_set_as_rx(bool rx_active_mode)
                           1225 ;	-----------------------------------------
                           1226 ;	 function rf_set_as_rx
                           1227 ;	-----------------------------------------
   0166                    1228 _rf_set_as_rx:
   0166 E5 82         [12] 1229 	mov	a,dpl
   0168 90r00r14      [24] 1230 	mov	dptr,#_rf_set_as_rx_rx_active_mode_1_49
   016B F0            [24] 1231 	movx	@dptr,a
                           1232 ;	../src/rf/src/rf_set_as_rx.c:51: rf_read_register(RF_CONFIG, &config, 1); //Read the current CONFIG value
   016C 90r00r28      [24] 1233 	mov	dptr,#_rf_read_register_PARM_2
   016F 74r15         [12] 1234 	mov	a,#_rf_set_as_rx_config_1_50
   0171 F0            [24] 1235 	movx	@dptr,a
   0172 74s00         [12] 1236 	mov	a,#(_rf_set_as_rx_config_1_50 >> 8)
   0174 A3            [24] 1237 	inc	dptr
   0175 F0            [24] 1238 	movx	@dptr,a
   0176 E4            [12] 1239 	clr	a
   0177 A3            [24] 1240 	inc	dptr
   0178 F0            [24] 1241 	movx	@dptr,a
   0179 90r00r2B      [24] 1242 	mov	dptr,#_rf_read_register_PARM_3
   017C 74 01         [12] 1243 	mov	a,#0x01
   017E F0            [24] 1244 	movx	@dptr,a
   017F E4            [12] 1245 	clr	a
   0180 A3            [24] 1246 	inc	dptr
   0181 F0            [24] 1247 	movx	@dptr,a
   0182 75 82 00      [24] 1248 	mov	dpl,#0x00
   0185 12r03r70      [24] 1249 	lcall	_rf_read_register
                           1250 ;	../src/rf/src/rf_set_as_rx.c:54: if((config & RF_CONFIG_PRIM_RX) != 0)
   0188 90r00r15      [24] 1251 	mov	dptr,#_rf_set_as_rx_config_1_50
   018B E0            [24] 1252 	movx	a,@dptr
   018C FF            [12] 1253 	mov	r7,a
   018D 30 E0 01      [24] 1254 	jnb	acc.0,00102$
                           1255 ;	../src/rf/src/rf_set_as_rx.c:56: return;
   0190 22            [24] 1256 	ret
   0191                    1257 00102$:
                           1258 ;	../src/rf/src/rf_set_as_rx.c:60: config |= RF_CONFIG_PRIM_RX;
   0191 90r00r15      [24] 1259 	mov	dptr,#_rf_set_as_rx_config_1_50
   0194 74 01         [12] 1260 	mov	a,#0x01
   0196 4F            [12] 1261 	orl	a,r7
   0197 F0            [24] 1262 	movx	@dptr,a
                           1263 ;	../src/rf/src/rf_set_as_rx.c:61: rf_write_register(RF_CONFIG, &config, 1);
   0198 90r00r08      [24] 1264 	mov	dptr,#_rf_write_register_PARM_2
   019B 74r15         [12] 1265 	mov	a,#_rf_set_as_rx_config_1_50
   019D F0            [24] 1266 	movx	@dptr,a
   019E 74s00         [12] 1267 	mov	a,#(_rf_set_as_rx_config_1_50 >> 8)
   01A0 A3            [24] 1268 	inc	dptr
   01A1 F0            [24] 1269 	movx	@dptr,a
   01A2 E4            [12] 1270 	clr	a
   01A3 A3            [24] 1271 	inc	dptr
   01A4 F0            [24] 1272 	movx	@dptr,a
   01A5 90r00r0B      [24] 1273 	mov	dptr,#_rf_write_register_PARM_3
   01A8 74 01         [12] 1274 	mov	a,#0x01
   01AA F0            [24] 1275 	movx	@dptr,a
   01AB E4            [12] 1276 	clr	a
   01AC A3            [24] 1277 	inc	dptr
   01AD F0            [24] 1278 	movx	@dptr,a
   01AE 75 82 00      [24] 1279 	mov	dpl,#0x00
   01B1 12r00rBC      [24] 1280 	lcall	_rf_write_register
                           1281 ;	../src/rf/src/rf_set_as_rx.c:64: if(rx_active_mode != false)
   01B4 90r00r14      [24] 1282 	mov	dptr,#_rf_set_as_rx_rx_active_mode_1_49
   01B7 E0            [24] 1283 	movx	a,@dptr
   01B8 FF            [12] 1284 	mov	r7,a
   01B9 60 08         [24] 1285 	jz	00104$
                           1286 ;	../src/rf/src/rf_set_as_rx.c:66: rf_set_ce();
   01BB D2 E8         [12] 1287 	setb _RFCON_SB_RFCE 
   01BD 90 00 04      [24] 1288 	mov	dptr,#0x0004
   01C0 02r08r42      [24] 1289 	ljmp	_delay_us
   01C3                    1290 00104$:
                           1291 ;	../src/rf/src/rf_set_as_rx.c:70: rf_clear_ce();
   01C3 C2 E8         [12] 1292 	clr _RFCON_SB_RFCE 
   01C5 22            [24] 1293 	ret
                           1294 ;------------------------------------------------------------
                           1295 ;Allocation info for local variables in function 'rf_irq_clear_all'
                           1296 ;------------------------------------------------------------
                           1297 ;dataptr                   Allocated with name '_rf_irq_clear_all_dataptr_1_54'
                           1298 ;------------------------------------------------------------
                           1299 ;	../src/rf/src/rf_irq_clear_all.c:47: void rf_irq_clear_all()
                           1300 ;	-----------------------------------------
                           1301 ;	 function rf_irq_clear_all
                           1302 ;	-----------------------------------------
   01C6                    1303 _rf_irq_clear_all:
                           1304 ;	../src/rf/src/rf_irq_clear_all.c:50: unsigned char dataptr = RF_STATUS_RX_DR | RF_STATUS_TX_DS | RF_STATUS_MAX_RT;
   01C6 90r00r16      [24] 1305 	mov	dptr,#_rf_irq_clear_all_dataptr_1_54
   01C9 74 70         [12] 1306 	mov	a,#0x70
   01CB F0            [24] 1307 	movx	@dptr,a
                           1308 ;	../src/rf/src/rf_irq_clear_all.c:52: rf_write_register(RF_STATUS, &dataptr, 1);
   01CC 90r00r08      [24] 1309 	mov	dptr,#_rf_write_register_PARM_2
   01CF 74r16         [12] 1310 	mov	a,#_rf_irq_clear_all_dataptr_1_54
   01D1 F0            [24] 1311 	movx	@dptr,a
   01D2 74s00         [12] 1312 	mov	a,#(_rf_irq_clear_all_dataptr_1_54 >> 8)
   01D4 A3            [24] 1313 	inc	dptr
   01D5 F0            [24] 1314 	movx	@dptr,a
   01D6 E4            [12] 1315 	clr	a
   01D7 A3            [24] 1316 	inc	dptr
   01D8 F0            [24] 1317 	movx	@dptr,a
   01D9 90r00r0B      [24] 1318 	mov	dptr,#_rf_write_register_PARM_3
   01DC 74 01         [12] 1319 	mov	a,#0x01
   01DE F0            [24] 1320 	movx	@dptr,a
   01DF E4            [12] 1321 	clr	a
   01E0 A3            [24] 1322 	inc	dptr
   01E1 F0            [24] 1323 	movx	@dptr,a
   01E2 75 82 07      [24] 1324 	mov	dpl,#0x07
   01E5 12r00rBC      [24] 1325 	lcall	_rf_write_register
                           1326 ;	../src/rf/src/rf_irq_clear_all.c:54: sbit_clear(IRCON_SB_RFIRQ); //Clear the master interrupt
   01E8 C2 C1         [12] 1327 	clr _IRCON_SB_RFIRQ 
   01EA 22            [24] 1328 	ret
                           1329 ;------------------------------------------------------------
                           1330 ;Allocation info for local variables in function 'rf_set_as_tx'
                           1331 ;------------------------------------------------------------
                           1332 ;config                    Allocated with name '_rf_set_as_tx_config_1_55'
                           1333 ;------------------------------------------------------------
                           1334 ;	../src/rf/src/rf_set_as_tx.c:47: void rf_set_as_tx()
                           1335 ;	-----------------------------------------
                           1336 ;	 function rf_set_as_tx
                           1337 ;	-----------------------------------------
   01EB                    1338 _rf_set_as_tx:
                           1339 ;	../src/rf/src/rf_set_as_tx.c:51: rf_read_register(RF_CONFIG, &config, 1); //Read the current CONFIG value
   01EB 90r00r28      [24] 1340 	mov	dptr,#_rf_read_register_PARM_2
   01EE 74r17         [12] 1341 	mov	a,#_rf_set_as_tx_config_1_55
   01F0 F0            [24] 1342 	movx	@dptr,a
   01F1 74s00         [12] 1343 	mov	a,#(_rf_set_as_tx_config_1_55 >> 8)
   01F3 A3            [24] 1344 	inc	dptr
   01F4 F0            [24] 1345 	movx	@dptr,a
   01F5 E4            [12] 1346 	clr	a
   01F6 A3            [24] 1347 	inc	dptr
   01F7 F0            [24] 1348 	movx	@dptr,a
   01F8 90r00r2B      [24] 1349 	mov	dptr,#_rf_read_register_PARM_3
   01FB 74 01         [12] 1350 	mov	a,#0x01
   01FD F0            [24] 1351 	movx	@dptr,a
   01FE E4            [12] 1352 	clr	a
   01FF A3            [24] 1353 	inc	dptr
   0200 F0            [24] 1354 	movx	@dptr,a
   0201 75 82 00      [24] 1355 	mov	dpl,#0x00
   0204 12r03r70      [24] 1356 	lcall	_rf_read_register
                           1357 ;	../src/rf/src/rf_set_as_tx.c:54: if((config & RF_CONFIG_PRIM_RX) == 0)
   0207 90r00r17      [24] 1358 	mov	dptr,#_rf_set_as_tx_config_1_55
   020A E0            [24] 1359 	movx	a,@dptr
   020B FF            [12] 1360 	mov	r7,a
   020C 20 E0 01      [24] 1361 	jb	acc.0,00102$
                           1362 ;	../src/rf/src/rf_set_as_tx.c:56: return;
   020F 22            [24] 1363 	ret
   0210                    1364 00102$:
                           1365 ;	../src/rf/src/rf_set_as_tx.c:59: rf_clear_ce(); //Clear the CE pin
   0210 C2 E8         [12] 1366 	clr _RFCON_SB_RFCE 
                           1367 ;	../src/rf/src/rf_set_as_tx.c:62: config &= (~RF_CONFIG_PRIM_RX);
   0212 90r00r17      [24] 1368 	mov	dptr,#_rf_set_as_tx_config_1_55
   0215 74 FE         [12] 1369 	mov	a,#0xFE
   0217 5F            [12] 1370 	anl	a,r7
   0218 F0            [24] 1371 	movx	@dptr,a
                           1372 ;	../src/rf/src/rf_set_as_tx.c:63: rf_write_register(RF_CONFIG, &config, 1);
   0219 90r00r08      [24] 1373 	mov	dptr,#_rf_write_register_PARM_2
   021C 74r17         [12] 1374 	mov	a,#_rf_set_as_tx_config_1_55
   021E F0            [24] 1375 	movx	@dptr,a
   021F 74s00         [12] 1376 	mov	a,#(_rf_set_as_tx_config_1_55 >> 8)
   0221 A3            [24] 1377 	inc	dptr
   0222 F0            [24] 1378 	movx	@dptr,a
   0223 E4            [12] 1379 	clr	a
   0224 A3            [24] 1380 	inc	dptr
   0225 F0            [24] 1381 	movx	@dptr,a
   0226 90r00r0B      [24] 1382 	mov	dptr,#_rf_write_register_PARM_3
   0229 74 01         [12] 1383 	mov	a,#0x01
   022B F0            [24] 1384 	movx	@dptr,a
   022C E4            [12] 1385 	clr	a
   022D A3            [24] 1386 	inc	dptr
   022E F0            [24] 1387 	movx	@dptr,a
   022F 75 82 00      [24] 1388 	mov	dpl,#0x00
   0232 02r00rBC      [24] 1389 	ljmp	_rf_write_register
                           1390 ;------------------------------------------------------------
                           1391 ;Allocation info for local variables in function 'rf_spi_execute_command'
                           1392 ;------------------------------------------------------------
                           1393 ;dataptr                   Allocated with name '_rf_spi_execute_command_PARM_2'
                           1394 ;len                       Allocated with name '_rf_spi_execute_command_PARM_3'
                           1395 ;copydata                  Allocated with name '_rf_spi_execute_command_PARM_4'
                           1396 ;instruction               Allocated with name '_rf_spi_execute_command_instruction_1_57'
                           1397 ;status                    Allocated with name '_rf_spi_execute_command_status_1_58'
                           1398 ;------------------------------------------------------------
                           1399 ;	../src/rf/src/rf_spi_execute_command.c:50: unsigned char rf_spi_execute_command(unsigned char instruction, unsigned char * dataptr, unsigned int len, bool copydata)
                           1400 ;	-----------------------------------------
                           1401 ;	 function rf_spi_execute_command
                           1402 ;	-----------------------------------------
   0235                    1403 _rf_spi_execute_command:
   0235 E5 82         [12] 1404 	mov	a,dpl
                           1405 ;	../src/rf/src/rf_spi_execute_command.c:52: unsigned char status = instruction; //status writes the instruction, then reads the current STATUS value
   0237 90r00r1E      [24] 1406 	mov	dptr,#_rf_spi_execute_command_instruction_1_57
   023A F0            [24] 1407 	movx	@dptr,a
   023B FF            [12] 1408 	mov	r7,a
   023C 90r00r1F      [24] 1409 	mov	dptr,#_rf_spi_execute_command_status_1_58
   023F F0            [24] 1410 	movx	@dptr,a
                           1411 ;	../src/rf/src/rf_spi_execute_command.c:54: rf_clear_csn(); //Clear CSN to start the transaction
   0240 C2 E9         [12] 1412 	clr _RFCON_SB_RFCSN 
                           1413 ;	../src/rf/src/rf_spi_execute_command.c:57: rf_spi_send_read(&status, 1, true);
   0242 90r00r20      [24] 1414 	mov	dptr,#_rf_spi_send_read_PARM_2
   0245 74 01         [12] 1415 	mov	a,#0x01
   0247 F0            [24] 1416 	movx	@dptr,a
   0248 E4            [12] 1417 	clr	a
   0249 A3            [24] 1418 	inc	dptr
   024A F0            [24] 1419 	movx	@dptr,a
   024B 90r00r22      [24] 1420 	mov	dptr,#_rf_spi_send_read_PARM_3
   024E 74 01         [12] 1421 	mov	a,#0x01
   0250 F0            [24] 1422 	movx	@dptr,a
   0251 90r00r1F      [24] 1423 	mov	dptr,#_rf_spi_execute_command_status_1_58
   0254 75 F0 00      [24] 1424 	mov	b,#0x00
   0257 12r02r91      [24] 1425 	lcall	_rf_spi_send_read
                           1426 ;	../src/rf/src/rf_spi_execute_command.c:58: rf_spi_send_read(dataptr, len, copydata);
   025A 90r00r18      [24] 1427 	mov	dptr,#_rf_spi_execute_command_PARM_2
   025D E0            [24] 1428 	movx	a,@dptr
   025E FD            [12] 1429 	mov	r5,a
   025F A3            [24] 1430 	inc	dptr
   0260 E0            [24] 1431 	movx	a,@dptr
   0261 FE            [12] 1432 	mov	r6,a
   0262 A3            [24] 1433 	inc	dptr
   0263 E0            [24] 1434 	movx	a,@dptr
   0264 FF            [12] 1435 	mov	r7,a
   0265 90r00r1B      [24] 1436 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0268 E0            [24] 1437 	movx	a,@dptr
   0269 FB            [12] 1438 	mov	r3,a
   026A A3            [24] 1439 	inc	dptr
   026B E0            [24] 1440 	movx	a,@dptr
   026C FC            [12] 1441 	mov	r4,a
   026D 90r00r1D      [24] 1442 	mov	dptr,#_rf_spi_execute_command_PARM_4
   0270 E0            [24] 1443 	movx	a,@dptr
   0271 FA            [12] 1444 	mov	r2,a
   0272 90r00r20      [24] 1445 	mov	dptr,#_rf_spi_send_read_PARM_2
   0275 EB            [12] 1446 	mov	a,r3
   0276 F0            [24] 1447 	movx	@dptr,a
   0277 EC            [12] 1448 	mov	a,r4
   0278 A3            [24] 1449 	inc	dptr
   0279 F0            [24] 1450 	movx	@dptr,a
   027A 90r00r22      [24] 1451 	mov	dptr,#_rf_spi_send_read_PARM_3
   027D EA            [12] 1452 	mov	a,r2
   027E F0            [24] 1453 	movx	@dptr,a
   027F 8D 82         [24] 1454 	mov	dpl,r5
   0281 8E 83         [24] 1455 	mov	dph,r6
   0283 8F F0         [24] 1456 	mov	b,r7
   0285 12r02r91      [24] 1457 	lcall	_rf_spi_send_read
                           1458 ;	../src/rf/src/rf_spi_execute_command.c:60: rf_set_csn(); //Set CSN to end the transaction
   0288 D2 E9         [12] 1459 	setb _RFCON_SB_RFCSN 
                           1460 ;	../src/rf/src/rf_spi_execute_command.c:62: return status; //Return the value of STATUS
   028A 90r00r1F      [24] 1461 	mov	dptr,#_rf_spi_execute_command_status_1_58
   028D E0            [24] 1462 	movx	a,@dptr
   028E F5 82         [12] 1463 	mov	dpl,a
   0290 22            [24] 1464 	ret
                           1465 ;------------------------------------------------------------
                           1466 ;Allocation info for local variables in function 'rf_spi_send_read'
                           1467 ;------------------------------------------------------------
                           1468 ;sloc0                     Allocated with name '_rf_spi_send_read_sloc0_1_0'
                           1469 ;sloc1                     Allocated with name '_rf_spi_send_read_sloc1_1_0'
                           1470 ;len                       Allocated with name '_rf_spi_send_read_PARM_2'
                           1471 ;copydata                  Allocated with name '_rf_spi_send_read_PARM_3'
                           1472 ;dataptr                   Allocated with name '_rf_spi_send_read_dataptr_1_59'
                           1473 ;i                         Allocated with name '_rf_spi_send_read_i_1_60'
                           1474 ;tempbyte                  Allocated with name '_rf_spi_send_read_tempbyte_1_60'
                           1475 ;------------------------------------------------------------
                           1476 ;	../src/rf/src/rf_spi_send_read.c:49: void rf_spi_send_read(unsigned char * dataptr, unsigned int len, bool copydata)
                           1477 ;	-----------------------------------------
                           1478 ;	 function rf_spi_send_read
                           1479 ;	-----------------------------------------
   0291                    1480 _rf_spi_send_read:
   0291 AF F0         [24] 1481 	mov	r7,b
   0293 AE 83         [24] 1482 	mov	r6,dph
   0295 E5 82         [12] 1483 	mov	a,dpl
   0297 90r00r23      [24] 1484 	mov	dptr,#_rf_spi_send_read_dataptr_1_59
   029A F0            [24] 1485 	movx	@dptr,a
   029B EE            [12] 1486 	mov	a,r6
   029C A3            [24] 1487 	inc	dptr
   029D F0            [24] 1488 	movx	@dptr,a
   029E EF            [12] 1489 	mov	a,r7
   029F A3            [24] 1490 	inc	dptr
   02A0 F0            [24] 1491 	movx	@dptr,a
                           1492 ;	../src/rf/src/rf_spi_send_read.c:55: for(i = 0; i < len; i++)
   02A1 90r00r23      [24] 1493 	mov	dptr,#_rf_spi_send_read_dataptr_1_59
   02A4 E0            [24] 1494 	movx	a,@dptr
   02A5 FD            [12] 1495 	mov	r5,a
   02A6 A3            [24] 1496 	inc	dptr
   02A7 E0            [24] 1497 	movx	a,@dptr
   02A8 FE            [12] 1498 	mov	r6,a
   02A9 A3            [24] 1499 	inc	dptr
   02AA E0            [24] 1500 	movx	a,@dptr
   02AB FF            [12] 1501 	mov	r7,a
   02AC 90r00r22      [24] 1502 	mov	dptr,#_rf_spi_send_read_PARM_3
   02AF E0            [24] 1503 	movx	a,@dptr
   02B0 FC            [12] 1504 	mov	r4,a
   02B1 90r00r20      [24] 1505 	mov	dptr,#_rf_spi_send_read_PARM_2
   02B4 E0            [24] 1506 	movx	a,@dptr
   02B5 FA            [12] 1507 	mov	r2,a
   02B6 A3            [24] 1508 	inc	dptr
   02B7 E0            [24] 1509 	movx	a,@dptr
   02B8 FB            [12] 1510 	mov	r3,a
   02B9 78 00         [12] 1511 	mov	r0,#0x00
   02BB 79 00         [12] 1512 	mov	r1,#0x00
   02BD                    1513 00105$:
   02BD C3            [12] 1514 	clr	c
   02BE E8            [12] 1515 	mov	a,r0
   02BF 9A            [12] 1516 	subb	a,r2
   02C0 E9            [12] 1517 	mov	a,r1
   02C1 9B            [12] 1518 	subb	a,r3
   02C2 50 5F         [24] 1519 	jnc	00107$
                           1520 ;	../src/rf/src/rf_spi_send_read.c:57: tempbyte = rf_spi_send_read_byte(dataptr[i]); //Send the value, and then save the received value
   02C4 C0 02         [24] 1521 	push	ar2
   02C6 C0 03         [24] 1522 	push	ar3
   02C8 E8            [12] 1523 	mov	a,r0
   02C9 2D            [12] 1524 	add	a,r5
   02CA F5*00         [12] 1525 	mov	_rf_spi_send_read_sloc0_1_0,a
   02CC E9            [12] 1526 	mov	a,r1
   02CD 3E            [12] 1527 	addc	a,r6
   02CE F5*01         [12] 1528 	mov	(_rf_spi_send_read_sloc0_1_0 + 1),a
   02D0 8F*02         [24] 1529 	mov	(_rf_spi_send_read_sloc0_1_0 + 2),r7
   02D2 85*00 82      [24] 1530 	mov	dpl,_rf_spi_send_read_sloc0_1_0
   02D5 85*01 83      [24] 1531 	mov	dph,(_rf_spi_send_read_sloc0_1_0 + 1)
   02D8 85*02 F0      [24] 1532 	mov	b,(_rf_spi_send_read_sloc0_1_0 + 2)
   02DB 12r00r00      [24] 1533 	lcall	__gptrget
   02DE FB            [12] 1534 	mov	r3,a
   02DF F5 82         [12] 1535 	mov	dpl,a
   02E1 C0 07         [24] 1536 	push	ar7
   02E3 C0 06         [24] 1537 	push	ar6
   02E5 C0 05         [24] 1538 	push	ar5
   02E7 C0 04         [24] 1539 	push	ar4
   02E9 C0 03         [24] 1540 	push	ar3
   02EB C0 02         [24] 1541 	push	ar2
   02ED C0 01         [24] 1542 	push	ar1
   02EF C0 00         [24] 1543 	push	ar0
   02F1 12r03rAB      [24] 1544 	lcall	_rf_spi_send_read_byte
   02F4 85 82*03      [24] 1545 	mov	_rf_spi_send_read_sloc1_1_0,dpl
   02F7 D0 00         [24] 1546 	pop	ar0
   02F9 D0 01         [24] 1547 	pop	ar1
   02FB D0 02         [24] 1548 	pop	ar2
   02FD D0 03         [24] 1549 	pop	ar3
   02FF D0 04         [24] 1550 	pop	ar4
   0301 D0 05         [24] 1551 	pop	ar5
   0303 D0 06         [24] 1552 	pop	ar6
   0305 D0 07         [24] 1553 	pop	ar7
                           1554 ;	../src/rf/src/rf_spi_send_read.c:60: if(copydata != false)
   0307 D0 03         [24] 1555 	pop	ar3
   0309 D0 02         [24] 1556 	pop	ar2
   030B EC            [12] 1557 	mov	a,r4
   030C 60 0E         [24] 1558 	jz	00106$
                           1559 ;	../src/rf/src/rf_spi_send_read.c:62: dataptr[i] = tempbyte;
   030E 85*00 82      [24] 1560 	mov	dpl,_rf_spi_send_read_sloc0_1_0
   0311 85*01 83      [24] 1561 	mov	dph,(_rf_spi_send_read_sloc0_1_0 + 1)
   0314 85*02 F0      [24] 1562 	mov	b,(_rf_spi_send_read_sloc0_1_0 + 2)
   0317 E5*03         [12] 1563 	mov	a,_rf_spi_send_read_sloc1_1_0
   0319 12r00r00      [24] 1564 	lcall	__gptrput
   031C                    1565 00106$:
                           1566 ;	../src/rf/src/rf_spi_send_read.c:55: for(i = 0; i < len; i++)
   031C 08            [12] 1567 	inc	r0
   031D B8 00 9D      [24] 1568 	cjne	r0,#0x00,00105$
   0320 09            [12] 1569 	inc	r1
   0321 80 9A         [24] 1570 	sjmp	00105$
   0323                    1571 00107$:
   0323 22            [24] 1572 	ret
                           1573 ;------------------------------------------------------------
                           1574 ;Allocation info for local variables in function 'rf_power_up_param'
                           1575 ;------------------------------------------------------------
                           1576 ;config                    Allocated with name '_rf_power_up_param_PARM_2'
                           1577 ;rx_active_mode            Allocated with name '_rf_power_up_param_rx_active_mode_1_63'
                           1578 ;------------------------------------------------------------
                           1579 ;	../src/rf/src/rf_power_up_param.c:49: void rf_power_up_param(bool rx_active_mode, unsigned char config)
                           1580 ;	-----------------------------------------
                           1581 ;	 function rf_power_up_param
                           1582 ;	-----------------------------------------
   0324                    1583 _rf_power_up_param:
   0324 E5 82         [12] 1584 	mov	a,dpl
   0326 90r00r27      [24] 1585 	mov	dptr,#_rf_power_up_param_rx_active_mode_1_63
   0329 F0            [24] 1586 	movx	@dptr,a
                           1587 ;	../src/rf/src/rf_power_up_param.c:52: config |= RF_CONFIG_PWR_UP;
   032A 90r00r26      [24] 1588 	mov	dptr,#_rf_power_up_param_PARM_2
   032D E0            [24] 1589 	movx	a,@dptr
   032E 44 02         [12] 1590 	orl	a,#0x02
   0330 F0            [24] 1591 	movx	@dptr,a
                           1592 ;	../src/rf/src/rf_power_up_param.c:53: rf_write_register(RF_CONFIG, &config, 1);
   0331 90r00r08      [24] 1593 	mov	dptr,#_rf_write_register_PARM_2
   0334 74r26         [12] 1594 	mov	a,#_rf_power_up_param_PARM_2
   0336 F0            [24] 1595 	movx	@dptr,a
   0337 74s00         [12] 1596 	mov	a,#(_rf_power_up_param_PARM_2 >> 8)
   0339 A3            [24] 1597 	inc	dptr
   033A F0            [24] 1598 	movx	@dptr,a
   033B E4            [12] 1599 	clr	a
   033C A3            [24] 1600 	inc	dptr
   033D F0            [24] 1601 	movx	@dptr,a
   033E 90r00r0B      [24] 1602 	mov	dptr,#_rf_write_register_PARM_3
   0341 74 01         [12] 1603 	mov	a,#0x01
   0343 F0            [24] 1604 	movx	@dptr,a
   0344 E4            [12] 1605 	clr	a
   0345 A3            [24] 1606 	inc	dptr
   0346 F0            [24] 1607 	movx	@dptr,a
   0347 75 82 00      [24] 1608 	mov	dpl,#0x00
   034A 12r00rBC      [24] 1609 	lcall	_rf_write_register
                           1610 ;	../src/rf/src/rf_power_up_param.c:55: delay_us(1); //Delay for power up
   034D 90 00 01      [24] 1611 	mov	dptr,#0x0001
   0350 12r08r42      [24] 1612 	lcall	_delay_us
                           1613 ;	../src/rf/src/rf_power_up_param.c:58: if((config & RF_CONFIG_PRIM_RX) == 0)
   0353 90r00r26      [24] 1614 	mov	dptr,#_rf_power_up_param_PARM_2
   0356 E0            [24] 1615 	movx	a,@dptr
   0357 FF            [12] 1616 	mov	r7,a
   0358 20 E0 03      [24] 1617 	jb	acc.0,00105$
                           1618 ;	../src/rf/src/rf_power_up_param.c:60: rf_clear_ce(); //Clear CE for TX mode
   035B C2 E8         [12] 1619 	clr _RFCON_SB_RFCE 
   035D 22            [24] 1620 	ret
   035E                    1621 00105$:
                           1622 ;	../src/rf/src/rf_power_up_param.c:65: if(rx_active_mode != false)
   035E 90r00r27      [24] 1623 	mov	dptr,#_rf_power_up_param_rx_active_mode_1_63
   0361 E0            [24] 1624 	movx	a,@dptr
   0362 FF            [12] 1625 	mov	r7,a
   0363 60 08         [24] 1626 	jz	00102$
                           1627 ;	../src/rf/src/rf_power_up_param.c:67: rf_set_ce();
   0365 D2 E8         [12] 1628 	setb _RFCON_SB_RFCE 
   0367 90 00 04      [24] 1629 	mov	dptr,#0x0004
   036A 02r08r42      [24] 1630 	ljmp	_delay_us
   036D                    1631 00102$:
                           1632 ;	../src/rf/src/rf_power_up_param.c:71: rf_clear_ce();
   036D C2 E8         [12] 1633 	clr _RFCON_SB_RFCE 
   036F 22            [24] 1634 	ret
                           1635 ;------------------------------------------------------------
                           1636 ;Allocation info for local variables in function 'rf_read_register'
                           1637 ;------------------------------------------------------------
                           1638 ;dataptr                   Allocated with name '_rf_read_register_PARM_2'
                           1639 ;len                       Allocated with name '_rf_read_register_PARM_3'
                           1640 ;regnumber                 Allocated with name '_rf_read_register_regnumber_1_69'
                           1641 ;------------------------------------------------------------
                           1642 ;	../src/rf/src/rf_read_register.c:49: unsigned char rf_read_register(unsigned char regnumber, unsigned char * dataptr, unsigned int len)
                           1643 ;	-----------------------------------------
                           1644 ;	 function rf_read_register
                           1645 ;	-----------------------------------------
   0370                    1646 _rf_read_register:
   0370 E5 82         [12] 1647 	mov	a,dpl
                           1648 ;	../src/rf/src/rf_read_register.c:52: return rf_spi_execute_command(regnumber & RF_R_REGISTER_DATA, dataptr, len, true);
   0372 90r00r2D      [24] 1649 	mov	dptr,#_rf_read_register_regnumber_1_69
   0375 F0            [24] 1650 	movx	@dptr,a
   0376 FF            [12] 1651 	mov	r7,a
   0377 53 07 1F      [24] 1652 	anl	ar7,#0x1F
   037A 90r00r28      [24] 1653 	mov	dptr,#_rf_read_register_PARM_2
   037D E0            [24] 1654 	movx	a,@dptr
   037E FC            [12] 1655 	mov	r4,a
   037F A3            [24] 1656 	inc	dptr
   0380 E0            [24] 1657 	movx	a,@dptr
   0381 FD            [12] 1658 	mov	r5,a
   0382 A3            [24] 1659 	inc	dptr
   0383 E0            [24] 1660 	movx	a,@dptr
   0384 FE            [12] 1661 	mov	r6,a
   0385 90r00r2B      [24] 1662 	mov	dptr,#_rf_read_register_PARM_3
   0388 E0            [24] 1663 	movx	a,@dptr
   0389 FA            [12] 1664 	mov	r2,a
   038A A3            [24] 1665 	inc	dptr
   038B E0            [24] 1666 	movx	a,@dptr
   038C FB            [12] 1667 	mov	r3,a
   038D 90r00r18      [24] 1668 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0390 EC            [12] 1669 	mov	a,r4
   0391 F0            [24] 1670 	movx	@dptr,a
   0392 ED            [12] 1671 	mov	a,r5
   0393 A3            [24] 1672 	inc	dptr
   0394 F0            [24] 1673 	movx	@dptr,a
   0395 EE            [12] 1674 	mov	a,r6
   0396 A3            [24] 1675 	inc	dptr
   0397 F0            [24] 1676 	movx	@dptr,a
   0398 90r00r1B      [24] 1677 	mov	dptr,#_rf_spi_execute_command_PARM_3
   039B EA            [12] 1678 	mov	a,r2
   039C F0            [24] 1679 	movx	@dptr,a
   039D EB            [12] 1680 	mov	a,r3
   039E A3            [24] 1681 	inc	dptr
   039F F0            [24] 1682 	movx	@dptr,a
   03A0 90r00r1D      [24] 1683 	mov	dptr,#_rf_spi_execute_command_PARM_4
   03A3 74 01         [12] 1684 	mov	a,#0x01
   03A5 F0            [24] 1685 	movx	@dptr,a
   03A6 8F 82         [24] 1686 	mov	dpl,r7
   03A8 02r02r35      [24] 1687 	ljmp	_rf_spi_execute_command
                           1688 ;------------------------------------------------------------
                           1689 ;Allocation info for local variables in function 'rf_spi_send_read_byte'
                           1690 ;------------------------------------------------------------
                           1691 ;byte                      Allocated with name '_rf_spi_send_read_byte_byte_1_71'
                           1692 ;------------------------------------------------------------
                           1693 ;	../src/rf/src/rf_spi_send_read_byte.c:47: unsigned char rf_spi_send_read_byte(unsigned char byte)
                           1694 ;	-----------------------------------------
                           1695 ;	 function rf_spi_send_read_byte
                           1696 ;	-----------------------------------------
   03AB                    1697 _rf_spi_send_read_byte:
   03AB E5 82         [12] 1698 	mov	a,dpl
                           1699 ;	../src/rf/src/rf_spi_send_read_byte.c:49: SPIRDAT = byte; //Send byte over SPI
   03AD 90r00r2E      [24] 1700 	mov	dptr,#_rf_spi_send_read_byte_byte_1_71
   03B0 F0            [24] 1701 	movx	@dptr,a
   03B1 F5 E7         [12] 1702 	mov	_SPIRDAT,a
                           1703 ;	../src/rf/src/rf_spi_send_read_byte.c:51: while(!(SPIRSTAT & SPIRSTAT_IRQ_RX_FIFO_READY)); //Wait for the transaction to finish
   03B3                    1704 00101$:
   03B3 E5 E6         [12] 1705 	mov	a,_SPIRSTAT
   03B5 30 E2 FB      [24] 1706 	jnb	acc.2,00101$
                           1707 ;	../src/rf/src/rf_spi_send_read_byte.c:53: IRCON_SB_RFRDY = BIT_FALSE; //Clear the IRQ bit
   03B8 C2 C0         [12] 1708 	clr	_IRCON_SB_RFRDY
                           1709 ;	../src/rf/src/rf_spi_send_read_byte.c:55: return SPIRDAT; //Return the received value
   03BA 85 E7 82      [24] 1710 	mov	dpl,_SPIRDAT
   03BD 22            [24] 1711 	ret
                           1712 ;------------------------------------------------------------
                           1713 ;Allocation info for local variables in function 'rf_set_rx_addr'
                           1714 ;------------------------------------------------------------
                           1715 ;len                       Allocated with name '_rf_set_rx_addr_PARM_2'
                           1716 ;rxpipenum                 Allocated with name '_rf_set_rx_addr_PARM_3'
                           1717 ;address                   Allocated with name '_rf_set_rx_addr_address_1_73'
                           1718 ;------------------------------------------------------------
                           1719 ;	../src/rf/src/rf_set_rx_addr.c:49: void rf_set_rx_addr(unsigned char * address, unsigned int len, unsigned char rxpipenum)
                           1720 ;	-----------------------------------------
                           1721 ;	 function rf_set_rx_addr
                           1722 ;	-----------------------------------------
   03BE                    1723 _rf_set_rx_addr:
   03BE AF F0         [24] 1724 	mov	r7,b
   03C0 AE 83         [24] 1725 	mov	r6,dph
   03C2 E5 82         [12] 1726 	mov	a,dpl
   03C4 90r00r32      [24] 1727 	mov	dptr,#_rf_set_rx_addr_address_1_73
   03C7 F0            [24] 1728 	movx	@dptr,a
   03C8 EE            [12] 1729 	mov	a,r6
   03C9 A3            [24] 1730 	inc	dptr
   03CA F0            [24] 1731 	movx	@dptr,a
   03CB EF            [12] 1732 	mov	a,r7
   03CC A3            [24] 1733 	inc	dptr
   03CD F0            [24] 1734 	movx	@dptr,a
                           1735 ;	../src/rf/src/rf_set_rx_addr.c:52: if(rxpipenum > 5)
   03CE 90r00r31      [24] 1736 	mov	dptr,#_rf_set_rx_addr_PARM_3
   03D1 E0            [24] 1737 	movx	a,@dptr
   03D2 FF            [12] 1738 	mov  r7,a
   03D3 24 FA         [12] 1739 	add	a,#0xff - 0x05
   03D5 50 01         [24] 1740 	jnc	00102$
                           1741 ;	../src/rf/src/rf_set_rx_addr.c:54: return;
   03D7 22            [24] 1742 	ret
   03D8                    1743 00102$:
                           1744 ;	../src/rf/src/rf_set_rx_addr.c:57: rf_write_register(RF_RX_ADDR_P0 + rxpipenum, address, len); //Write the requested address to the requested RX pipe
   03D8 74 0A         [12] 1745 	mov	a,#0x0A
   03DA 2F            [12] 1746 	add	a,r7
   03DB FF            [12] 1747 	mov	r7,a
   03DC 90r00r32      [24] 1748 	mov	dptr,#_rf_set_rx_addr_address_1_73
   03DF E0            [24] 1749 	movx	a,@dptr
   03E0 FC            [12] 1750 	mov	r4,a
   03E1 A3            [24] 1751 	inc	dptr
   03E2 E0            [24] 1752 	movx	a,@dptr
   03E3 FD            [12] 1753 	mov	r5,a
   03E4 A3            [24] 1754 	inc	dptr
   03E5 E0            [24] 1755 	movx	a,@dptr
   03E6 FE            [12] 1756 	mov	r6,a
   03E7 90r00r2F      [24] 1757 	mov	dptr,#_rf_set_rx_addr_PARM_2
   03EA E0            [24] 1758 	movx	a,@dptr
   03EB FA            [12] 1759 	mov	r2,a
   03EC A3            [24] 1760 	inc	dptr
   03ED E0            [24] 1761 	movx	a,@dptr
   03EE FB            [12] 1762 	mov	r3,a
   03EF 90r00r08      [24] 1763 	mov	dptr,#_rf_write_register_PARM_2
   03F2 EC            [12] 1764 	mov	a,r4
   03F3 F0            [24] 1765 	movx	@dptr,a
   03F4 ED            [12] 1766 	mov	a,r5
   03F5 A3            [24] 1767 	inc	dptr
   03F6 F0            [24] 1768 	movx	@dptr,a
   03F7 EE            [12] 1769 	mov	a,r6
   03F8 A3            [24] 1770 	inc	dptr
   03F9 F0            [24] 1771 	movx	@dptr,a
   03FA 90r00r0B      [24] 1772 	mov	dptr,#_rf_write_register_PARM_3
   03FD EA            [12] 1773 	mov	a,r2
   03FE F0            [24] 1774 	movx	@dptr,a
   03FF EB            [12] 1775 	mov	a,r3
   0400 A3            [24] 1776 	inc	dptr
   0401 F0            [24] 1777 	movx	@dptr,a
   0402 8F 82         [24] 1778 	mov	dpl,r7
   0404 02r00rBC      [24] 1779 	ljmp	_rf_write_register
                           1780 ;------------------------------------------------------------
                           1781 ;Allocation info for local variables in function 'rf_power_down'
                           1782 ;------------------------------------------------------------
                           1783 ;config                    Allocated with name '_rf_power_down_config_1_76'
                           1784 ;------------------------------------------------------------
                           1785 ;	../src/rf/src/rf_power_down.c:47: void rf_power_down()
                           1786 ;	-----------------------------------------
                           1787 ;	 function rf_power_down
                           1788 ;	-----------------------------------------
   0407                    1789 _rf_power_down:
                           1790 ;	../src/rf/src/rf_power_down.c:51: rf_clear_ce(); //Clear the CE pin
   0407 C2 E8         [12] 1791 	clr _RFCON_SB_RFCE 
                           1792 ;	../src/rf/src/rf_power_down.c:53: rf_read_register(RF_CONFIG, &config, 1); //Read the current value of the CONFIG register
   0409 90r00r28      [24] 1793 	mov	dptr,#_rf_read_register_PARM_2
   040C 74r35         [12] 1794 	mov	a,#_rf_power_down_config_1_76
   040E F0            [24] 1795 	movx	@dptr,a
   040F 74s00         [12] 1796 	mov	a,#(_rf_power_down_config_1_76 >> 8)
   0411 A3            [24] 1797 	inc	dptr
   0412 F0            [24] 1798 	movx	@dptr,a
   0413 E4            [12] 1799 	clr	a
   0414 A3            [24] 1800 	inc	dptr
   0415 F0            [24] 1801 	movx	@dptr,a
   0416 90r00r2B      [24] 1802 	mov	dptr,#_rf_read_register_PARM_3
   0419 74 01         [12] 1803 	mov	a,#0x01
   041B F0            [24] 1804 	movx	@dptr,a
   041C E4            [12] 1805 	clr	a
   041D A3            [24] 1806 	inc	dptr
   041E F0            [24] 1807 	movx	@dptr,a
   041F 75 82 00      [24] 1808 	mov	dpl,#0x00
   0422 12r03r70      [24] 1809 	lcall	_rf_read_register
                           1810 ;	../src/rf/src/rf_power_down.c:56: if((config & RF_CONFIG_PWR_UP) == 0)
   0425 90r00r35      [24] 1811 	mov	dptr,#_rf_power_down_config_1_76
   0428 E0            [24] 1812 	movx	a,@dptr
   0429 FF            [12] 1813 	mov	r7,a
   042A 20 E1 01      [24] 1814 	jb	acc.1,00102$
                           1815 ;	../src/rf/src/rf_power_down.c:58: return;
   042D 22            [24] 1816 	ret
   042E                    1817 00102$:
                           1818 ;	../src/rf/src/rf_power_down.c:62: config &= (~RF_CONFIG_PWR_UP);
   042E 90r00r35      [24] 1819 	mov	dptr,#_rf_power_down_config_1_76
   0431 74 FD         [12] 1820 	mov	a,#0xFD
   0433 5F            [12] 1821 	anl	a,r7
   0434 F0            [24] 1822 	movx	@dptr,a
                           1823 ;	../src/rf/src/rf_power_down.c:63: rf_write_register(RF_CONFIG, &config, 1);
   0435 90r00r08      [24] 1824 	mov	dptr,#_rf_write_register_PARM_2
   0438 74r35         [12] 1825 	mov	a,#_rf_power_down_config_1_76
   043A F0            [24] 1826 	movx	@dptr,a
   043B 74s00         [12] 1827 	mov	a,#(_rf_power_down_config_1_76 >> 8)
   043D A3            [24] 1828 	inc	dptr
   043E F0            [24] 1829 	movx	@dptr,a
   043F E4            [12] 1830 	clr	a
   0440 A3            [24] 1831 	inc	dptr
   0441 F0            [24] 1832 	movx	@dptr,a
   0442 90r00r0B      [24] 1833 	mov	dptr,#_rf_write_register_PARM_3
   0445 74 01         [12] 1834 	mov	a,#0x01
   0447 F0            [24] 1835 	movx	@dptr,a
   0448 E4            [12] 1836 	clr	a
   0449 A3            [24] 1837 	inc	dptr
   044A F0            [24] 1838 	movx	@dptr,a
   044B 75 82 00      [24] 1839 	mov	dpl,#0x00
   044E 02r00rBC      [24] 1840 	ljmp	_rf_write_register
                           1841 ;------------------------------------------------------------
                           1842 ;Allocation info for local variables in function 'rf_power_up'
                           1843 ;------------------------------------------------------------
                           1844 ;rx_active_mode            Allocated with name '_rf_power_up_rx_active_mode_1_78'
                           1845 ;config                    Allocated with name '_rf_power_up_config_1_79'
                           1846 ;------------------------------------------------------------
                           1847 ;	../src/rf/src/rf_power_up.c:47: void rf_power_up(bool rx_active_mode)
                           1848 ;	-----------------------------------------
                           1849 ;	 function rf_power_up
                           1850 ;	-----------------------------------------
   0451                    1851 _rf_power_up:
   0451 E5 82         [12] 1852 	mov	a,dpl
   0453 90r00r36      [24] 1853 	mov	dptr,#_rf_power_up_rx_active_mode_1_78
   0456 F0            [24] 1854 	movx	@dptr,a
                           1855 ;	../src/rf/src/rf_power_up.c:51: rf_read_register(RF_CONFIG, &config, 1); //Get the current value of the CONFIG register
   0457 90r00r28      [24] 1856 	mov	dptr,#_rf_read_register_PARM_2
   045A 74r37         [12] 1857 	mov	a,#_rf_power_up_config_1_79
   045C F0            [24] 1858 	movx	@dptr,a
   045D 74s00         [12] 1859 	mov	a,#(_rf_power_up_config_1_79 >> 8)
   045F A3            [24] 1860 	inc	dptr
   0460 F0            [24] 1861 	movx	@dptr,a
   0461 E4            [12] 1862 	clr	a
   0462 A3            [24] 1863 	inc	dptr
   0463 F0            [24] 1864 	movx	@dptr,a
   0464 90r00r2B      [24] 1865 	mov	dptr,#_rf_read_register_PARM_3
   0467 74 01         [12] 1866 	mov	a,#0x01
   0469 F0            [24] 1867 	movx	@dptr,a
   046A E4            [12] 1868 	clr	a
   046B A3            [24] 1869 	inc	dptr
   046C F0            [24] 1870 	movx	@dptr,a
   046D 75 82 00      [24] 1871 	mov	dpl,#0x00
   0470 12r03r70      [24] 1872 	lcall	_rf_read_register
                           1873 ;	../src/rf/src/rf_power_up.c:54: if((config & RF_CONFIG_PWR_UP) != 0)
   0473 90r00r37      [24] 1874 	mov	dptr,#_rf_power_up_config_1_79
   0476 E0            [24] 1875 	movx	a,@dptr
   0477 FF            [12] 1876 	mov	r7,a
   0478 30 E1 01      [24] 1877 	jnb	acc.1,00102$
                           1878 ;	../src/rf/src/rf_power_up.c:56: return;
   047B 22            [24] 1879 	ret
   047C                    1880 00102$:
                           1881 ;	../src/rf/src/rf_power_up.c:60: config |= RF_CONFIG_PWR_UP;
   047C 90r00r37      [24] 1882 	mov	dptr,#_rf_power_up_config_1_79
   047F 74 02         [12] 1883 	mov	a,#0x02
   0481 4F            [12] 1884 	orl	a,r7
   0482 F0            [24] 1885 	movx	@dptr,a
                           1886 ;	../src/rf/src/rf_power_up.c:61: rf_write_register(RF_CONFIG, &config, 1);
   0483 90r00r08      [24] 1887 	mov	dptr,#_rf_write_register_PARM_2
   0486 74r37         [12] 1888 	mov	a,#_rf_power_up_config_1_79
   0488 F0            [24] 1889 	movx	@dptr,a
   0489 74s00         [12] 1890 	mov	a,#(_rf_power_up_config_1_79 >> 8)
   048B A3            [24] 1891 	inc	dptr
   048C F0            [24] 1892 	movx	@dptr,a
   048D E4            [12] 1893 	clr	a
   048E A3            [24] 1894 	inc	dptr
   048F F0            [24] 1895 	movx	@dptr,a
   0490 90r00r0B      [24] 1896 	mov	dptr,#_rf_write_register_PARM_3
   0493 74 01         [12] 1897 	mov	a,#0x01
   0495 F0            [24] 1898 	movx	@dptr,a
   0496 E4            [12] 1899 	clr	a
   0497 A3            [24] 1900 	inc	dptr
   0498 F0            [24] 1901 	movx	@dptr,a
   0499 75 82 00      [24] 1902 	mov	dpl,#0x00
   049C 12r00rBC      [24] 1903 	lcall	_rf_write_register
                           1904 ;	../src/rf/src/rf_power_up.c:63: delay_us(1); //Delay for power up
   049F 90 00 01      [24] 1905 	mov	dptr,#0x0001
   04A2 12r08r42      [24] 1906 	lcall	_delay_us
                           1907 ;	../src/rf/src/rf_power_up.c:66: if((config & RF_CONFIG_PRIM_RX) == 0)
   04A5 90r00r37      [24] 1908 	mov	dptr,#_rf_power_up_config_1_79
   04A8 E0            [24] 1909 	movx	a,@dptr
   04A9 FF            [12] 1910 	mov	r7,a
   04AA 20 E0 03      [24] 1911 	jb	acc.0,00107$
                           1912 ;	../src/rf/src/rf_power_up.c:68: rf_clear_ce(); //Clear CE for TX mode
   04AD C2 E8         [12] 1913 	clr _RFCON_SB_RFCE 
   04AF 22            [24] 1914 	ret
   04B0                    1915 00107$:
                           1916 ;	../src/rf/src/rf_power_up.c:73: if(rx_active_mode != false)
   04B0 90r00r36      [24] 1917 	mov	dptr,#_rf_power_up_rx_active_mode_1_78
   04B3 E0            [24] 1918 	movx	a,@dptr
   04B4 FF            [12] 1919 	mov	r7,a
   04B5 60 08         [24] 1920 	jz	00104$
                           1921 ;	../src/rf/src/rf_power_up.c:75: rf_set_ce();
   04B7 D2 E8         [12] 1922 	setb _RFCON_SB_RFCE 
   04B9 90 00 04      [24] 1923 	mov	dptr,#0x0004
   04BC 02r08r42      [24] 1924 	ljmp	_delay_us
   04BF                    1925 00104$:
                           1926 ;	../src/rf/src/rf_power_up.c:79: rf_clear_ce();
   04BF C2 E8         [12] 1927 	clr _RFCON_SB_RFCE 
   04C1 22            [24] 1928 	ret
                           1929 ;------------------------------------------------------------
                           1930 ;Allocation info for local variables in function 'gpio_pin_configure'
                           1931 ;------------------------------------------------------------
                           1932 ;gpio_pin_config_options   Allocated with name '_gpio_pin_configure_PARM_2'
                           1933 ;gpio_pin_id               Allocated with name '_gpio_pin_configure_gpio_pin_id_1_86'
                           1934 ;------------------------------------------------------------
                           1935 ;	../src/gpio/src/gpio_pin_configure.c:47: void gpio_pin_configure(gpio_pin_id_t gpio_pin_id, uint8_t gpio_pin_config_options)
                           1936 ;	-----------------------------------------
                           1937 ;	 function gpio_pin_configure
                           1938 ;	-----------------------------------------
   04C2                    1939 _gpio_pin_configure:
   04C2 E5 82         [12] 1940 	mov	a,dpl
                           1941 ;	../src/gpio/src/gpio_pin_configure.c:50: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   04C4 90r00r39      [24] 1942 	mov	dptr,#_gpio_pin_configure_gpio_pin_id_1_86
   04C7 F0            [24] 1943 	movx	@dptr,a
   04C8 FF            [12] 1944 	mov  r7,a
   04C9 24 F8         [12] 1945 	add	a,#0xff - 0x07
   04CB 50 03         [24] 1946 	jnc	00174$
   04CD 02r05r46      [24] 1947 	ljmp	00134$
   04D0                    1948 00174$:
                           1949 ;	../src/gpio/src/gpio_pin_configure.c:53: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   04D0 90r00r38      [24] 1950 	mov	dptr,#_gpio_pin_configure_PARM_2
   04D3 E0            [24] 1951 	movx	a,@dptr
   04D4 FE            [12] 1952 	mov	r6,a
   04D5 FD            [12] 1953 	mov	r5,a
   04D6 ED            [12] 1954 	mov	a,r5
   04D7 30 E0 4C      [24] 1955 	jnb	acc.0,00105$
                           1956 ;	../src/gpio/src/gpio_pin_configure.c:56: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   04DA EE            [12] 1957 	mov	a,r6
   04DB 30 E1 15      [24] 1958 	jnb	acc.1,00102$
                           1959 ;	../src/gpio/src/gpio_pin_configure.c:58: gpio_pins_val_set(P0, (1 << (gpio_pin_id % 8)));
   04DE 74 07         [12] 1960 	mov	a,#0x07
   04E0 5F            [12] 1961 	anl	a,r7
   04E1 F5 F0         [12] 1962 	mov	b,a
   04E3 05 F0         [12] 1963 	inc	b
   04E5 74 01         [12] 1964 	mov	a,#0x01
   04E7 80 02         [24] 1965 	sjmp	00179$
   04E9                    1966 00177$:
   04E9 25 E0         [12] 1967 	add	a,acc
   04EB                    1968 00179$:
   04EB D5 F0 FB      [24] 1969 	djnz	b,00177$
   04EE FD            [12] 1970 	mov	r5,a
   04EF 42 80         [12] 1971 	orl	_P0,a
   04F1 80 14         [24] 1972 	sjmp	00103$
   04F3                    1973 00102$:
                           1974 ;	../src/gpio/src/gpio_pin_configure.c:62: gpio_pins_val_clear(P0, (1 << (gpio_pin_id % 8)));
   04F3 74 07         [12] 1975 	mov	a,#0x07
   04F5 5F            [12] 1976 	anl	a,r7
   04F6 F5 F0         [12] 1977 	mov	b,a
   04F8 05 F0         [12] 1978 	inc	b
   04FA 74 01         [12] 1979 	mov	a,#0x01
   04FC 80 02         [24] 1980 	sjmp	00182$
   04FE                    1981 00180$:
   04FE 25 E0         [12] 1982 	add	a,acc
   0500                    1983 00182$:
   0500 D5 F0 FB      [24] 1984 	djnz	b,00180$
   0503 F4            [12] 1985 	cpl	a
   0504 FD            [12] 1986 	mov	r5,a
   0505 52 80         [12] 1987 	anl	_P0,a
   0507                    1988 00103$:
                           1989 ;	../src/gpio/src/gpio_pin_configure.c:66: P0CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0507 74 07         [12] 1990 	mov	a,#0x07
   0509 5F            [12] 1991 	anl	a,r7
   050A FD            [12] 1992 	mov	r5,a
   050B 74 07         [12] 1993 	mov	a,#0x07
   050D 5D            [12] 1994 	anl	a,r5
   050E FC            [12] 1995 	mov	r4,a
                           1996 ;	../src/gpio/src/gpio_pin_configure.c:67: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   050F 74 E0         [12] 1997 	mov	a,#0xE0
   0511 5E            [12] 1998 	anl	a,r6
   0512 4C            [12] 1999 	orl	a,r4
   0513 F5 9E         [12] 2000 	mov	_P0CON,a
                           2001 ;	../src/gpio/src/gpio_pin_configure.c:70: gpio_pins_dir_output(P0DIR, (1 << (gpio_pin_id % 8)));
   0515 8D F0         [24] 2002 	mov	b,r5
   0517 05 F0         [12] 2003 	inc	b
   0519 74 01         [12] 2004 	mov	a,#0x01
   051B 80 02         [24] 2005 	sjmp	00185$
   051D                    2006 00183$:
   051D 25 E0         [12] 2007 	add	a,acc
   051F                    2008 00185$:
   051F D5 F0 FB      [24] 2009 	djnz	b,00183$
   0522 F4            [12] 2010 	cpl	a
   0523 52 93         [12] 2011 	anl	_P0DIR,a
   0525 22            [24] 2012 	ret
   0526                    2013 00105$:
                           2014 ;	../src/gpio/src/gpio_pin_configure.c:75: P0CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0526 74 07         [12] 2015 	mov	a,#0x07
   0528 5F            [12] 2016 	anl	a,r7
   0529 FD            [12] 2017 	mov	r5,a
   052A 74 07         [12] 2018 	mov	a,#0x07
   052C 5D            [12] 2019 	anl	a,r5
   052D 44 10         [12] 2020 	orl	a,#0x10
   052F FC            [12] 2021 	mov	r4,a
                           2022 ;	../src/gpio/src/gpio_pin_configure.c:77: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   0530 74 E0         [12] 2023 	mov	a,#0xE0
   0532 5E            [12] 2024 	anl	a,r6
   0533 4C            [12] 2025 	orl	a,r4
   0534 F5 9E         [12] 2026 	mov	_P0CON,a
                           2027 ;	../src/gpio/src/gpio_pin_configure.c:80: gpio_pins_dir_input(P0DIR, (1 << (gpio_pin_id % 8)));
   0536 8D F0         [24] 2028 	mov	b,r5
   0538 05 F0         [12] 2029 	inc	b
   053A 74 01         [12] 2030 	mov	a,#0x01
   053C 80 02         [24] 2031 	sjmp	00188$
   053E                    2032 00186$:
   053E 25 E0         [12] 2033 	add	a,acc
   0540                    2034 00188$:
   0540 D5 F0 FB      [24] 2035 	djnz	b,00186$
   0543 42 93         [12] 2036 	orl	_P0DIR,a
   0545 22            [24] 2037 	ret
   0546                    2038 00134$:
                           2039 ;	../src/gpio/src/gpio_pin_configure.c:83: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   0546 EF            [12] 2040 	mov	a,r7
   0547 24 F0         [12] 2041 	add	a,#0xff - 0x0F
   0549 50 03         [24] 2042 	jnc	00189$
   054B 02r05rC4      [24] 2043 	ljmp	00131$
   054E                    2044 00189$:
                           2045 ;	../src/gpio/src/gpio_pin_configure.c:86: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   054E 90r00r38      [24] 2046 	mov	dptr,#_gpio_pin_configure_PARM_2
   0551 E0            [24] 2047 	movx	a,@dptr
   0552 FE            [12] 2048 	mov	r6,a
   0553 FD            [12] 2049 	mov	r5,a
   0554 ED            [12] 2050 	mov	a,r5
   0555 30 E0 4C      [24] 2051 	jnb	acc.0,00111$
                           2052 ;	../src/gpio/src/gpio_pin_configure.c:89: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   0558 EE            [12] 2053 	mov	a,r6
   0559 30 E1 15      [24] 2054 	jnb	acc.1,00108$
                           2055 ;	../src/gpio/src/gpio_pin_configure.c:91: gpio_pins_val_set(P1, (1 << (gpio_pin_id % 8)));
   055C 74 07         [12] 2056 	mov	a,#0x07
   055E 5F            [12] 2057 	anl	a,r7
   055F F5 F0         [12] 2058 	mov	b,a
   0561 05 F0         [12] 2059 	inc	b
   0563 74 01         [12] 2060 	mov	a,#0x01
   0565 80 02         [24] 2061 	sjmp	00194$
   0567                    2062 00192$:
   0567 25 E0         [12] 2063 	add	a,acc
   0569                    2064 00194$:
   0569 D5 F0 FB      [24] 2065 	djnz	b,00192$
   056C FD            [12] 2066 	mov	r5,a
   056D 42 90         [12] 2067 	orl	_P1,a
   056F 80 14         [24] 2068 	sjmp	00109$
   0571                    2069 00108$:
                           2070 ;	../src/gpio/src/gpio_pin_configure.c:95: gpio_pins_val_clear(P1, (1 << (gpio_pin_id % 8)));
   0571 74 07         [12] 2071 	mov	a,#0x07
   0573 5F            [12] 2072 	anl	a,r7
   0574 F5 F0         [12] 2073 	mov	b,a
   0576 05 F0         [12] 2074 	inc	b
   0578 74 01         [12] 2075 	mov	a,#0x01
   057A 80 02         [24] 2076 	sjmp	00197$
   057C                    2077 00195$:
   057C 25 E0         [12] 2078 	add	a,acc
   057E                    2079 00197$:
   057E D5 F0 FB      [24] 2080 	djnz	b,00195$
   0581 F4            [12] 2081 	cpl	a
   0582 FD            [12] 2082 	mov	r5,a
   0583 52 90         [12] 2083 	anl	_P1,a
   0585                    2084 00109$:
                           2085 ;	../src/gpio/src/gpio_pin_configure.c:99: P1CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0585 74 07         [12] 2086 	mov	a,#0x07
   0587 5F            [12] 2087 	anl	a,r7
   0588 FD            [12] 2088 	mov	r5,a
   0589 74 07         [12] 2089 	mov	a,#0x07
   058B 5D            [12] 2090 	anl	a,r5
   058C FC            [12] 2091 	mov	r4,a
                           2092 ;	../src/gpio/src/gpio_pin_configure.c:100: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   058D 74 E0         [12] 2093 	mov	a,#0xE0
   058F 5E            [12] 2094 	anl	a,r6
   0590 4C            [12] 2095 	orl	a,r4
   0591 F5 9F         [12] 2096 	mov	_P1CON,a
                           2097 ;	../src/gpio/src/gpio_pin_configure.c:103: gpio_pins_dir_output(P1DIR, (1 << (gpio_pin_id % 8)));
   0593 8D F0         [24] 2098 	mov	b,r5
   0595 05 F0         [12] 2099 	inc	b
   0597 74 01         [12] 2100 	mov	a,#0x01
   0599 80 02         [24] 2101 	sjmp	00200$
   059B                    2102 00198$:
   059B 25 E0         [12] 2103 	add	a,acc
   059D                    2104 00200$:
   059D D5 F0 FB      [24] 2105 	djnz	b,00198$
   05A0 F4            [12] 2106 	cpl	a
   05A1 52 94         [12] 2107 	anl	_P1DIR,a
   05A3 22            [24] 2108 	ret
   05A4                    2109 00111$:
                           2110 ;	../src/gpio/src/gpio_pin_configure.c:108: P1CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   05A4 74 07         [12] 2111 	mov	a,#0x07
   05A6 5F            [12] 2112 	anl	a,r7
   05A7 FD            [12] 2113 	mov	r5,a
   05A8 74 07         [12] 2114 	mov	a,#0x07
   05AA 5D            [12] 2115 	anl	a,r5
   05AB 44 10         [12] 2116 	orl	a,#0x10
   05AD FC            [12] 2117 	mov	r4,a
                           2118 ;	../src/gpio/src/gpio_pin_configure.c:110: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   05AE 74 E0         [12] 2119 	mov	a,#0xE0
   05B0 5E            [12] 2120 	anl	a,r6
   05B1 4C            [12] 2121 	orl	a,r4
   05B2 F5 9F         [12] 2122 	mov	_P1CON,a
                           2123 ;	../src/gpio/src/gpio_pin_configure.c:113: gpio_pins_dir_input(P1DIR, (1 << (gpio_pin_id % 8)));
   05B4 8D F0         [24] 2124 	mov	b,r5
   05B6 05 F0         [12] 2125 	inc	b
   05B8 74 01         [12] 2126 	mov	a,#0x01
   05BA 80 02         [24] 2127 	sjmp	00203$
   05BC                    2128 00201$:
   05BC 25 E0         [12] 2129 	add	a,acc
   05BE                    2130 00203$:
   05BE D5 F0 FB      [24] 2131 	djnz	b,00201$
   05C1 42 94         [12] 2132 	orl	_P1DIR,a
   05C3 22            [24] 2133 	ret
   05C4                    2134 00131$:
                           2135 ;	../src/gpio/src/gpio_pin_configure.c:116: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   05C4 EF            [12] 2136 	mov	a,r7
   05C5 24 E8         [12] 2137 	add	a,#0xff - 0x17
   05C7 50 03         [24] 2138 	jnc	00204$
   05C9 02r06r42      [24] 2139 	ljmp	00128$
   05CC                    2140 00204$:
                           2141 ;	../src/gpio/src/gpio_pin_configure.c:119: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   05CC 90r00r38      [24] 2142 	mov	dptr,#_gpio_pin_configure_PARM_2
   05CF E0            [24] 2143 	movx	a,@dptr
   05D0 FE            [12] 2144 	mov	r6,a
   05D1 FD            [12] 2145 	mov	r5,a
   05D2 ED            [12] 2146 	mov	a,r5
   05D3 30 E0 4C      [24] 2147 	jnb	acc.0,00117$
                           2148 ;	../src/gpio/src/gpio_pin_configure.c:122: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   05D6 EE            [12] 2149 	mov	a,r6
   05D7 30 E1 15      [24] 2150 	jnb	acc.1,00114$
                           2151 ;	../src/gpio/src/gpio_pin_configure.c:124: gpio_pins_val_set(P2, (1 << (gpio_pin_id % 8)));
   05DA 74 07         [12] 2152 	mov	a,#0x07
   05DC 5F            [12] 2153 	anl	a,r7
   05DD F5 F0         [12] 2154 	mov	b,a
   05DF 05 F0         [12] 2155 	inc	b
   05E1 74 01         [12] 2156 	mov	a,#0x01
   05E3 80 02         [24] 2157 	sjmp	00209$
   05E5                    2158 00207$:
   05E5 25 E0         [12] 2159 	add	a,acc
   05E7                    2160 00209$:
   05E7 D5 F0 FB      [24] 2161 	djnz	b,00207$
   05EA FD            [12] 2162 	mov	r5,a
   05EB 42 A0         [12] 2163 	orl	_P2,a
   05ED 80 14         [24] 2164 	sjmp	00115$
   05EF                    2165 00114$:
                           2166 ;	../src/gpio/src/gpio_pin_configure.c:128: gpio_pins_val_clear(P2, (1 << (gpio_pin_id % 8)));
   05EF 74 07         [12] 2167 	mov	a,#0x07
   05F1 5F            [12] 2168 	anl	a,r7
   05F2 F5 F0         [12] 2169 	mov	b,a
   05F4 05 F0         [12] 2170 	inc	b
   05F6 74 01         [12] 2171 	mov	a,#0x01
   05F8 80 02         [24] 2172 	sjmp	00212$
   05FA                    2173 00210$:
   05FA 25 E0         [12] 2174 	add	a,acc
   05FC                    2175 00212$:
   05FC D5 F0 FB      [24] 2176 	djnz	b,00210$
   05FF F4            [12] 2177 	cpl	a
   0600 FD            [12] 2178 	mov	r5,a
   0601 52 A0         [12] 2179 	anl	_P2,a
   0603                    2180 00115$:
                           2181 ;	../src/gpio/src/gpio_pin_configure.c:132: P2CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0603 74 07         [12] 2182 	mov	a,#0x07
   0605 5F            [12] 2183 	anl	a,r7
   0606 FD            [12] 2184 	mov	r5,a
   0607 74 07         [12] 2185 	mov	a,#0x07
   0609 5D            [12] 2186 	anl	a,r5
   060A FC            [12] 2187 	mov	r4,a
                           2188 ;	../src/gpio/src/gpio_pin_configure.c:133: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   060B 74 E0         [12] 2189 	mov	a,#0xE0
   060D 5E            [12] 2190 	anl	a,r6
   060E 4C            [12] 2191 	orl	a,r4
   060F F5 97         [12] 2192 	mov	_P2CON,a
                           2193 ;	../src/gpio/src/gpio_pin_configure.c:136: gpio_pins_dir_output(P2DIR, (1 << (gpio_pin_id % 8)));
   0611 8D F0         [24] 2194 	mov	b,r5
   0613 05 F0         [12] 2195 	inc	b
   0615 74 01         [12] 2196 	mov	a,#0x01
   0617 80 02         [24] 2197 	sjmp	00215$
   0619                    2198 00213$:
   0619 25 E0         [12] 2199 	add	a,acc
   061B                    2200 00215$:
   061B D5 F0 FB      [24] 2201 	djnz	b,00213$
   061E F4            [12] 2202 	cpl	a
   061F 52 95         [12] 2203 	anl	_P2DIR,a
   0621 22            [24] 2204 	ret
   0622                    2205 00117$:
                           2206 ;	../src/gpio/src/gpio_pin_configure.c:141: P2CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0622 74 07         [12] 2207 	mov	a,#0x07
   0624 5F            [12] 2208 	anl	a,r7
   0625 FD            [12] 2209 	mov	r5,a
   0626 74 07         [12] 2210 	mov	a,#0x07
   0628 5D            [12] 2211 	anl	a,r5
   0629 44 10         [12] 2212 	orl	a,#0x10
   062B FC            [12] 2213 	mov	r4,a
                           2214 ;	../src/gpio/src/gpio_pin_configure.c:143: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   062C 74 E0         [12] 2215 	mov	a,#0xE0
   062E 5E            [12] 2216 	anl	a,r6
   062F 4C            [12] 2217 	orl	a,r4
   0630 F5 97         [12] 2218 	mov	_P2CON,a
                           2219 ;	../src/gpio/src/gpio_pin_configure.c:146: gpio_pins_dir_input(P2DIR, (1 << (gpio_pin_id % 8)));
   0632 8D F0         [24] 2220 	mov	b,r5
   0634 05 F0         [12] 2221 	inc	b
   0636 74 01         [12] 2222 	mov	a,#0x01
   0638 80 02         [24] 2223 	sjmp	00218$
   063A                    2224 00216$:
   063A 25 E0         [12] 2225 	add	a,acc
   063C                    2226 00218$:
   063C D5 F0 FB      [24] 2227 	djnz	b,00216$
   063F 42 95         [12] 2228 	orl	_P2DIR,a
   0641 22            [24] 2229 	ret
   0642                    2230 00128$:
                           2231 ;	../src/gpio/src/gpio_pin_configure.c:149: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   0642 EF            [12] 2232 	mov	a,r7
   0643 24 E1         [12] 2233 	add	a,#0xff - 0x1E
   0645 40 75         [24] 2234 	jc	00136$
                           2235 ;	../src/gpio/src/gpio_pin_configure.c:152: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   0647 90r00r38      [24] 2236 	mov	dptr,#_gpio_pin_configure_PARM_2
   064A E0            [24] 2237 	movx	a,@dptr
   064B FE            [12] 2238 	mov	r6,a
   064C FD            [12] 2239 	mov	r5,a
   064D ED            [12] 2240 	mov	a,r5
   064E 30 E0 4C      [24] 2241 	jnb	acc.0,00123$
                           2242 ;	../src/gpio/src/gpio_pin_configure.c:155: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   0651 EE            [12] 2243 	mov	a,r6
   0652 30 E1 15      [24] 2244 	jnb	acc.1,00120$
                           2245 ;	../src/gpio/src/gpio_pin_configure.c:157: gpio_pins_val_set(P3, (1 << (gpio_pin_id % 8)));
   0655 74 07         [12] 2246 	mov	a,#0x07
   0657 5F            [12] 2247 	anl	a,r7
   0658 F5 F0         [12] 2248 	mov	b,a
   065A 05 F0         [12] 2249 	inc	b
   065C 74 01         [12] 2250 	mov	a,#0x01
   065E 80 02         [24] 2251 	sjmp	00224$
   0660                    2252 00222$:
   0660 25 E0         [12] 2253 	add	a,acc
   0662                    2254 00224$:
   0662 D5 F0 FB      [24] 2255 	djnz	b,00222$
   0665 FD            [12] 2256 	mov	r5,a
   0666 42 B0         [12] 2257 	orl	_P3,a
   0668 80 14         [24] 2258 	sjmp	00121$
   066A                    2259 00120$:
                           2260 ;	../src/gpio/src/gpio_pin_configure.c:161: gpio_pins_val_clear(P3, (1 << (gpio_pin_id % 8)));
   066A 74 07         [12] 2261 	mov	a,#0x07
   066C 5F            [12] 2262 	anl	a,r7
   066D F5 F0         [12] 2263 	mov	b,a
   066F 05 F0         [12] 2264 	inc	b
   0671 74 01         [12] 2265 	mov	a,#0x01
   0673 80 02         [24] 2266 	sjmp	00227$
   0675                    2267 00225$:
   0675 25 E0         [12] 2268 	add	a,acc
   0677                    2269 00227$:
   0677 D5 F0 FB      [24] 2270 	djnz	b,00225$
   067A F4            [12] 2271 	cpl	a
   067B FD            [12] 2272 	mov	r5,a
   067C 52 B0         [12] 2273 	anl	_P3,a
   067E                    2274 00121$:
                           2275 ;	../src/gpio/src/gpio_pin_configure.c:165: P3CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   067E 74 07         [12] 2276 	mov	a,#0x07
   0680 5F            [12] 2277 	anl	a,r7
   0681 FD            [12] 2278 	mov	r5,a
   0682 74 07         [12] 2279 	mov	a,#0x07
   0684 5D            [12] 2280 	anl	a,r5
   0685 FC            [12] 2281 	mov	r4,a
                           2282 ;	../src/gpio/src/gpio_pin_configure.c:166: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   0686 74 E0         [12] 2283 	mov	a,#0xE0
   0688 5E            [12] 2284 	anl	a,r6
   0689 4C            [12] 2285 	orl	a,r4
   068A F5 8F         [12] 2286 	mov	_P3CON,a
                           2287 ;	../src/gpio/src/gpio_pin_configure.c:169: gpio_pins_dir_output(P3DIR, (1 << (gpio_pin_id % 8)));
   068C 8D F0         [24] 2288 	mov	b,r5
   068E 05 F0         [12] 2289 	inc	b
   0690 74 01         [12] 2290 	mov	a,#0x01
   0692 80 02         [24] 2291 	sjmp	00230$
   0694                    2292 00228$:
   0694 25 E0         [12] 2293 	add	a,acc
   0696                    2294 00230$:
   0696 D5 F0 FB      [24] 2295 	djnz	b,00228$
   0699 F4            [12] 2296 	cpl	a
   069A 52 96         [12] 2297 	anl	_P3DIR,a
   069C 22            [24] 2298 	ret
   069D                    2299 00123$:
                           2300 ;	../src/gpio/src/gpio_pin_configure.c:174: P3CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   069D 53 07 07      [24] 2301 	anl	ar7,#0x07
   06A0 74 07         [12] 2302 	mov	a,#0x07
   06A2 5F            [12] 2303 	anl	a,r7
   06A3 44 10         [12] 2304 	orl	a,#0x10
   06A5 FD            [12] 2305 	mov	r5,a
                           2306 ;	../src/gpio/src/gpio_pin_configure.c:176: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   06A6 74 E0         [12] 2307 	mov	a,#0xE0
   06A8 5E            [12] 2308 	anl	a,r6
   06A9 4D            [12] 2309 	orl	a,r5
   06AA F5 8F         [12] 2310 	mov	_P3CON,a
                           2311 ;	../src/gpio/src/gpio_pin_configure.c:179: gpio_pins_dir_input(P3DIR, (1 << (gpio_pin_id % 8)));
   06AC 8F F0         [24] 2312 	mov	b,r7
   06AE 05 F0         [12] 2313 	inc	b
   06B0 74 01         [12] 2314 	mov	a,#0x01
   06B2 80 02         [24] 2315 	sjmp	00233$
   06B4                    2316 00231$:
   06B4 25 E0         [12] 2317 	add	a,acc
   06B6                    2318 00233$:
   06B6 D5 F0 FB      [24] 2319 	djnz	b,00231$
   06B9 FF            [12] 2320 	mov	r7,a
   06BA 42 96         [12] 2321 	orl	_P3DIR,a
   06BC                    2322 00136$:
   06BC 22            [24] 2323 	ret
                           2324 ;------------------------------------------------------------
                           2325 ;Allocation info for local variables in function 'gpio_pin_val_read'
                           2326 ;------------------------------------------------------------
                           2327 ;gpio_pin_id               Allocated with name '_gpio_pin_val_read_gpio_pin_id_1_108'
                           2328 ;value                     Allocated with name '_gpio_pin_val_read_value_1_109'
                           2329 ;------------------------------------------------------------
                           2330 ;	../src/gpio/src/gpio_pin_val_read.c:46: bool gpio_pin_val_read(gpio_pin_id_t gpio_pin_id)
                           2331 ;	-----------------------------------------
                           2332 ;	 function gpio_pin_val_read
                           2333 ;	-----------------------------------------
   06BD                    2334 _gpio_pin_val_read:
   06BD E5 82         [12] 2335 	mov	a,dpl
   06BF 90r00r3A      [24] 2336 	mov	dptr,#_gpio_pin_val_read_gpio_pin_id_1_108
   06C2 F0            [24] 2337 	movx	@dptr,a
                           2338 ;	../src/gpio/src/gpio_pin_val_read.c:48: bool value = false;
   06C3 90r00r3B      [24] 2339 	mov	dptr,#_gpio_pin_val_read_value_1_109
   06C6 E4            [12] 2340 	clr	a
   06C7 F0            [24] 2341 	movx	@dptr,a
                           2342 ;	../src/gpio/src/gpio_pin_val_read.c:51: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   06C8 90r00r3A      [24] 2343 	mov	dptr,#_gpio_pin_val_read_gpio_pin_id_1_108
   06CB E0            [24] 2344 	movx	a,@dptr
   06CC FF            [12] 2345 	mov  r7,a
   06CD 24 F8         [12] 2346 	add	a,#0xff - 0x07
   06CF 40 19         [24] 2347 	jc	00110$
                           2348 ;	../src/gpio/src/gpio_pin_val_read.c:53: value = P0 & (1 << (gpio_pin_id % 8));
   06D1 74 07         [12] 2349 	mov	a,#0x07
   06D3 5F            [12] 2350 	anl	a,r7
   06D4 F5 F0         [12] 2351 	mov	b,a
   06D6 05 F0         [12] 2352 	inc	b
   06D8 74 01         [12] 2353 	mov	a,#0x01
   06DA 80 02         [24] 2354 	sjmp	00135$
   06DC                    2355 00133$:
   06DC 25 E0         [12] 2356 	add	a,acc
   06DE                    2357 00135$:
   06DE D5 F0 FB      [24] 2358 	djnz	b,00133$
   06E1 FE            [12] 2359 	mov	r6,a
   06E2 90r00r3B      [24] 2360 	mov	dptr,#_gpio_pin_val_read_value_1_109
   06E5 55 80         [12] 2361 	anl	a,_P0
   06E7 F0            [24] 2362 	movx	@dptr,a
   06E8 80 58         [24] 2363 	sjmp	00111$
   06EA                    2364 00110$:
                           2365 ;	../src/gpio/src/gpio_pin_val_read.c:55: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   06EA EF            [12] 2366 	mov	a,r7
   06EB 24 F0         [12] 2367 	add	a,#0xff - 0x0F
   06ED 40 19         [24] 2368 	jc	00107$
                           2369 ;	../src/gpio/src/gpio_pin_val_read.c:57: value = P1 & (1 << (gpio_pin_id % 8));
   06EF 74 07         [12] 2370 	mov	a,#0x07
   06F1 5F            [12] 2371 	anl	a,r7
   06F2 F5 F0         [12] 2372 	mov	b,a
   06F4 05 F0         [12] 2373 	inc	b
   06F6 74 01         [12] 2374 	mov	a,#0x01
   06F8 80 02         [24] 2375 	sjmp	00139$
   06FA                    2376 00137$:
   06FA 25 E0         [12] 2377 	add	a,acc
   06FC                    2378 00139$:
   06FC D5 F0 FB      [24] 2379 	djnz	b,00137$
   06FF FE            [12] 2380 	mov	r6,a
   0700 90r00r3B      [24] 2381 	mov	dptr,#_gpio_pin_val_read_value_1_109
   0703 55 90         [12] 2382 	anl	a,_P1
   0705 F0            [24] 2383 	movx	@dptr,a
   0706 80 3A         [24] 2384 	sjmp	00111$
   0708                    2385 00107$:
                           2386 ;	../src/gpio/src/gpio_pin_val_read.c:59: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   0708 EF            [12] 2387 	mov	a,r7
   0709 24 E8         [12] 2388 	add	a,#0xff - 0x17
   070B 40 19         [24] 2389 	jc	00104$
                           2390 ;	../src/gpio/src/gpio_pin_val_read.c:61: value = P2 & (1 << (gpio_pin_id % 8));
   070D 74 07         [12] 2391 	mov	a,#0x07
   070F 5F            [12] 2392 	anl	a,r7
   0710 F5 F0         [12] 2393 	mov	b,a
   0712 05 F0         [12] 2394 	inc	b
   0714 74 01         [12] 2395 	mov	a,#0x01
   0716 80 02         [24] 2396 	sjmp	00143$
   0718                    2397 00141$:
   0718 25 E0         [12] 2398 	add	a,acc
   071A                    2399 00143$:
   071A D5 F0 FB      [24] 2400 	djnz	b,00141$
   071D FE            [12] 2401 	mov	r6,a
   071E 90r00r3B      [24] 2402 	mov	dptr,#_gpio_pin_val_read_value_1_109
   0721 55 A0         [12] 2403 	anl	a,_P2
   0723 F0            [24] 2404 	movx	@dptr,a
   0724 80 1C         [24] 2405 	sjmp	00111$
   0726                    2406 00104$:
                           2407 ;	../src/gpio/src/gpio_pin_val_read.c:63: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   0726 EF            [12] 2408 	mov	a,r7
   0727 24 E1         [12] 2409 	add	a,#0xff - 0x1E
   0729 40 17         [24] 2410 	jc	00111$
                           2411 ;	../src/gpio/src/gpio_pin_val_read.c:65: value = P3 & (1 << (gpio_pin_id % 8));
   072B 74 07         [12] 2412 	mov	a,#0x07
   072D 5F            [12] 2413 	anl	a,r7
   072E F5 F0         [12] 2414 	mov	b,a
   0730 05 F0         [12] 2415 	inc	b
   0732 74 01         [12] 2416 	mov	a,#0x01
   0734 80 02         [24] 2417 	sjmp	00147$
   0736                    2418 00145$:
   0736 25 E0         [12] 2419 	add	a,acc
   0738                    2420 00147$:
   0738 D5 F0 FB      [24] 2421 	djnz	b,00145$
   073B FF            [12] 2422 	mov	r7,a
   073C 90r00r3B      [24] 2423 	mov	dptr,#_gpio_pin_val_read_value_1_109
   073F 55 B0         [12] 2424 	anl	a,_P3
   0741 F0            [24] 2425 	movx	@dptr,a
   0742                    2426 00111$:
                           2427 ;	../src/gpio/src/gpio_pin_val_read.c:68: if(value)
   0742 90r00r3B      [24] 2428 	mov	dptr,#_gpio_pin_val_read_value_1_109
   0745 E0            [24] 2429 	movx	a,@dptr
   0746 FF            [12] 2430 	mov	r7,a
   0747 60 04         [24] 2431 	jz	00113$
                           2432 ;	../src/gpio/src/gpio_pin_val_read.c:70: return true;
   0749 75 82 01      [24] 2433 	mov	dpl,#0x01
   074C 22            [24] 2434 	ret
   074D                    2435 00113$:
                           2436 ;	../src/gpio/src/gpio_pin_val_read.c:74: return false;
   074D 75 82 00      [24] 2437 	mov	dpl,#0x00
   0750 22            [24] 2438 	ret
                           2439 ;------------------------------------------------------------
                           2440 ;Allocation info for local variables in function 'gpio_pin_val_clear'
                           2441 ;------------------------------------------------------------
                           2442 ;gpio_pin_id               Allocated with name '_gpio_pin_val_clear_gpio_pin_id_1_116'
                           2443 ;------------------------------------------------------------
                           2444 ;	../src/gpio/src/gpio_pin_val_clear.c:46: void gpio_pin_val_clear(gpio_pin_id_t gpio_pin_id)
                           2445 ;	-----------------------------------------
                           2446 ;	 function gpio_pin_val_clear
                           2447 ;	-----------------------------------------
   0751                    2448 _gpio_pin_val_clear:
   0751 E5 82         [12] 2449 	mov	a,dpl
                           2450 ;	../src/gpio/src/gpio_pin_val_clear.c:49: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   0753 90r00r3C      [24] 2451 	mov	dptr,#_gpio_pin_val_clear_gpio_pin_id_1_116
   0756 F0            [24] 2452 	movx	@dptr,a
   0757 FF            [12] 2453 	mov  r7,a
   0758 24 F8         [12] 2454 	add	a,#0xff - 0x07
   075A 40 14         [24] 2455 	jc	00110$
                           2456 ;	../src/gpio/src/gpio_pin_val_clear.c:51: gpio_pins_val_clear(P0, (1 << (gpio_pin_id % 8)));
   075C 74 07         [12] 2457 	mov	a,#0x07
   075E 5F            [12] 2458 	anl	a,r7
   075F F5 F0         [12] 2459 	mov	b,a
   0761 05 F0         [12] 2460 	inc	b
   0763 74 01         [12] 2461 	mov	a,#0x01
   0765 80 02         [24] 2462 	sjmp	00129$
   0767                    2463 00127$:
   0767 25 E0         [12] 2464 	add	a,acc
   0769                    2465 00129$:
   0769 D5 F0 FB      [24] 2466 	djnz	b,00127$
   076C F4            [12] 2467 	cpl	a
   076D 52 80         [12] 2468 	anl	_P0,a
   076F 22            [24] 2469 	ret
   0770                    2470 00110$:
                           2471 ;	../src/gpio/src/gpio_pin_val_clear.c:53: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   0770 EF            [12] 2472 	mov	a,r7
   0771 24 F0         [12] 2473 	add	a,#0xff - 0x0F
   0773 40 14         [24] 2474 	jc	00107$
                           2475 ;	../src/gpio/src/gpio_pin_val_clear.c:55: gpio_pins_val_clear(P1, (1 << (gpio_pin_id % 8)));
   0775 74 07         [12] 2476 	mov	a,#0x07
   0777 5F            [12] 2477 	anl	a,r7
   0778 F5 F0         [12] 2478 	mov	b,a
   077A 05 F0         [12] 2479 	inc	b
   077C 74 01         [12] 2480 	mov	a,#0x01
   077E 80 02         [24] 2481 	sjmp	00133$
   0780                    2482 00131$:
   0780 25 E0         [12] 2483 	add	a,acc
   0782                    2484 00133$:
   0782 D5 F0 FB      [24] 2485 	djnz	b,00131$
   0785 F4            [12] 2486 	cpl	a
   0786 52 90         [12] 2487 	anl	_P1,a
   0788 22            [24] 2488 	ret
   0789                    2489 00107$:
                           2490 ;	../src/gpio/src/gpio_pin_val_clear.c:57: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   0789 EF            [12] 2491 	mov	a,r7
   078A 24 E8         [12] 2492 	add	a,#0xff - 0x17
   078C 40 14         [24] 2493 	jc	00104$
                           2494 ;	../src/gpio/src/gpio_pin_val_clear.c:59: gpio_pins_val_clear(P2, (1 << (gpio_pin_id % 8)));
   078E 74 07         [12] 2495 	mov	a,#0x07
   0790 5F            [12] 2496 	anl	a,r7
   0791 F5 F0         [12] 2497 	mov	b,a
   0793 05 F0         [12] 2498 	inc	b
   0795 74 01         [12] 2499 	mov	a,#0x01
   0797 80 02         [24] 2500 	sjmp	00137$
   0799                    2501 00135$:
   0799 25 E0         [12] 2502 	add	a,acc
   079B                    2503 00137$:
   079B D5 F0 FB      [24] 2504 	djnz	b,00135$
   079E F4            [12] 2505 	cpl	a
   079F 52 A0         [12] 2506 	anl	_P2,a
   07A1 22            [24] 2507 	ret
   07A2                    2508 00104$:
                           2509 ;	../src/gpio/src/gpio_pin_val_clear.c:61: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   07A2 EF            [12] 2510 	mov	a,r7
   07A3 24 E1         [12] 2511 	add	a,#0xff - 0x1E
   07A5 40 14         [24] 2512 	jc	00112$
                           2513 ;	../src/gpio/src/gpio_pin_val_clear.c:63: gpio_pins_val_clear(P3, (1 << (gpio_pin_id % 8)));
   07A7 74 07         [12] 2514 	mov	a,#0x07
   07A9 5F            [12] 2515 	anl	a,r7
   07AA F5 F0         [12] 2516 	mov	b,a
   07AC 05 F0         [12] 2517 	inc	b
   07AE 74 01         [12] 2518 	mov	a,#0x01
   07B0 80 02         [24] 2519 	sjmp	00141$
   07B2                    2520 00139$:
   07B2 25 E0         [12] 2521 	add	a,acc
   07B4                    2522 00141$:
   07B4 D5 F0 FB      [24] 2523 	djnz	b,00139$
   07B7 F4            [12] 2524 	cpl	a
   07B8 FF            [12] 2525 	mov	r7,a
   07B9 52 B0         [12] 2526 	anl	_P3,a
   07BB                    2527 00112$:
   07BB 22            [24] 2528 	ret
                           2529 ;------------------------------------------------------------
                           2530 ;Allocation info for local variables in function 'gpio_pin_val_set'
                           2531 ;------------------------------------------------------------
                           2532 ;gpio_pin_id               Allocated with name '_gpio_pin_val_set_gpio_pin_id_1_122'
                           2533 ;------------------------------------------------------------
                           2534 ;	../src/gpio/src/gpio_pin_val_set.c:46: void gpio_pin_val_set(gpio_pin_id_t gpio_pin_id)
                           2535 ;	-----------------------------------------
                           2536 ;	 function gpio_pin_val_set
                           2537 ;	-----------------------------------------
   07BC                    2538 _gpio_pin_val_set:
   07BC E5 82         [12] 2539 	mov	a,dpl
                           2540 ;	../src/gpio/src/gpio_pin_val_set.c:49: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   07BE 90r00r3D      [24] 2541 	mov	dptr,#_gpio_pin_val_set_gpio_pin_id_1_122
   07C1 F0            [24] 2542 	movx	@dptr,a
   07C2 FF            [12] 2543 	mov  r7,a
   07C3 24 F8         [12] 2544 	add	a,#0xff - 0x07
   07C5 40 13         [24] 2545 	jc	00110$
                           2546 ;	../src/gpio/src/gpio_pin_val_set.c:51: gpio_pins_val_set(P0, (1 << (gpio_pin_id % 8)));
   07C7 74 07         [12] 2547 	mov	a,#0x07
   07C9 5F            [12] 2548 	anl	a,r7
   07CA F5 F0         [12] 2549 	mov	b,a
   07CC 05 F0         [12] 2550 	inc	b
   07CE 74 01         [12] 2551 	mov	a,#0x01
   07D0 80 02         [24] 2552 	sjmp	00129$
   07D2                    2553 00127$:
   07D2 25 E0         [12] 2554 	add	a,acc
   07D4                    2555 00129$:
   07D4 D5 F0 FB      [24] 2556 	djnz	b,00127$
   07D7 42 80         [12] 2557 	orl	_P0,a
   07D9 22            [24] 2558 	ret
   07DA                    2559 00110$:
                           2560 ;	../src/gpio/src/gpio_pin_val_set.c:53: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   07DA EF            [12] 2561 	mov	a,r7
   07DB 24 F0         [12] 2562 	add	a,#0xff - 0x0F
   07DD 40 13         [24] 2563 	jc	00107$
                           2564 ;	../src/gpio/src/gpio_pin_val_set.c:55: gpio_pins_val_set(P1, (1 << (gpio_pin_id % 8)));
   07DF 74 07         [12] 2565 	mov	a,#0x07
   07E1 5F            [12] 2566 	anl	a,r7
   07E2 F5 F0         [12] 2567 	mov	b,a
   07E4 05 F0         [12] 2568 	inc	b
   07E6 74 01         [12] 2569 	mov	a,#0x01
   07E8 80 02         [24] 2570 	sjmp	00133$
   07EA                    2571 00131$:
   07EA 25 E0         [12] 2572 	add	a,acc
   07EC                    2573 00133$:
   07EC D5 F0 FB      [24] 2574 	djnz	b,00131$
   07EF 42 90         [12] 2575 	orl	_P1,a
   07F1 22            [24] 2576 	ret
   07F2                    2577 00107$:
                           2578 ;	../src/gpio/src/gpio_pin_val_set.c:57: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   07F2 EF            [12] 2579 	mov	a,r7
   07F3 24 E8         [12] 2580 	add	a,#0xff - 0x17
   07F5 40 13         [24] 2581 	jc	00104$
                           2582 ;	../src/gpio/src/gpio_pin_val_set.c:59: gpio_pins_val_set(P2, (1 << (gpio_pin_id % 8)));
   07F7 74 07         [12] 2583 	mov	a,#0x07
   07F9 5F            [12] 2584 	anl	a,r7
   07FA F5 F0         [12] 2585 	mov	b,a
   07FC 05 F0         [12] 2586 	inc	b
   07FE 74 01         [12] 2587 	mov	a,#0x01
   0800 80 02         [24] 2588 	sjmp	00137$
   0802                    2589 00135$:
   0802 25 E0         [12] 2590 	add	a,acc
   0804                    2591 00137$:
   0804 D5 F0 FB      [24] 2592 	djnz	b,00135$
   0807 42 A0         [12] 2593 	orl	_P2,a
   0809 22            [24] 2594 	ret
   080A                    2595 00104$:
                           2596 ;	../src/gpio/src/gpio_pin_val_set.c:61: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   080A EF            [12] 2597 	mov	a,r7
   080B 24 E1         [12] 2598 	add	a,#0xff - 0x1E
   080D 40 13         [24] 2599 	jc	00112$
                           2600 ;	../src/gpio/src/gpio_pin_val_set.c:63: gpio_pins_val_set(P3, (1 << (gpio_pin_id % 8)));
   080F 74 07         [12] 2601 	mov	a,#0x07
   0811 5F            [12] 2602 	anl	a,r7
   0812 F5 F0         [12] 2603 	mov	b,a
   0814 05 F0         [12] 2604 	inc	b
   0816 74 01         [12] 2605 	mov	a,#0x01
   0818 80 02         [24] 2606 	sjmp	00141$
   081A                    2607 00139$:
   081A 25 E0         [12] 2608 	add	a,acc
   081C                    2609 00141$:
   081C D5 F0 FB      [24] 2610 	djnz	b,00139$
   081F FF            [12] 2611 	mov	r7,a
   0820 42 B0         [12] 2612 	orl	_P3,a
   0822                    2613 00112$:
   0822 22            [24] 2614 	ret
                           2615 ;------------------------------------------------------------
                           2616 ;Allocation info for local variables in function 'gpio_pin_val_write'
                           2617 ;------------------------------------------------------------
                           2618 ;value                     Allocated with name '_gpio_pin_val_write_PARM_2'
                           2619 ;gpio_pin_id               Allocated with name '_gpio_pin_val_write_gpio_pin_id_1_128'
                           2620 ;------------------------------------------------------------
                           2621 ;	../src/gpio/src/gpio_pin_val_write.c:47: void gpio_pin_val_write(gpio_pin_id_t gpio_pin_id, bool value)
                           2622 ;	-----------------------------------------
                           2623 ;	 function gpio_pin_val_write
                           2624 ;	-----------------------------------------
   0823                    2625 _gpio_pin_val_write:
   0823 E5 82         [12] 2626 	mov	a,dpl
   0825 90r00r3F      [24] 2627 	mov	dptr,#_gpio_pin_val_write_gpio_pin_id_1_128
   0828 F0            [24] 2628 	movx	@dptr,a
                           2629 ;	../src/gpio/src/gpio_pin_val_write.c:50: if(value)
   0829 90r00r3E      [24] 2630 	mov	dptr,#_gpio_pin_val_write_PARM_2
   082C E0            [24] 2631 	movx	a,@dptr
   082D FF            [12] 2632 	mov	r7,a
   082E 60 09         [24] 2633 	jz	00102$
                           2634 ;	../src/gpio/src/gpio_pin_val_write.c:52: gpio_pin_val_set(gpio_pin_id);
   0830 90r00r3F      [24] 2635 	mov	dptr,#_gpio_pin_val_write_gpio_pin_id_1_128
   0833 E0            [24] 2636 	movx	a,@dptr
   0834 F5 82         [12] 2637 	mov	dpl,a
   0836 02r07rBC      [24] 2638 	ljmp	_gpio_pin_val_set
   0839                    2639 00102$:
                           2640 ;	../src/gpio/src/gpio_pin_val_write.c:56: gpio_pin_val_clear(gpio_pin_id);
   0839 90r00r3F      [24] 2641 	mov	dptr,#_gpio_pin_val_write_gpio_pin_id_1_128
   083C E0            [24] 2642 	movx	a,@dptr
   083D F5 82         [12] 2643 	mov	dpl,a
   083F 02r07r51      [24] 2644 	ljmp	_gpio_pin_val_clear
                           2645 ;------------------------------------------------------------
                           2646 ;Allocation info for local variables in function 'delay_us'
                           2647 ;------------------------------------------------------------
                           2648 ;microseconds              Allocated with name '_delay_us_microseconds_1_132'
                           2649 ;count                     Allocated with name '_delay_us_count_1_133'
                           2650 ;------------------------------------------------------------
                           2651 ;	../src/delay/src/delay_us.c:46: void delay_us(uint16_t microseconds)
                           2652 ;	-----------------------------------------
                           2653 ;	 function delay_us
                           2654 ;	-----------------------------------------
   0842                    2655 _delay_us:
   0842 AF 83         [24] 2656 	mov	r7,dph
   0844 E5 82         [12] 2657 	mov	a,dpl
   0846 90r00r40      [24] 2658 	mov	dptr,#_delay_us_microseconds_1_132
   0849 F0            [24] 2659 	movx	@dptr,a
   084A EF            [12] 2660 	mov	a,r7
   084B A3            [24] 2661 	inc	dptr
   084C F0            [24] 2662 	movx	@dptr,a
                           2663 ;	../src/delay/src/delay_us.c:51: if(microseconds == 0)
   084D 90r00r40      [24] 2664 	mov	dptr,#_delay_us_microseconds_1_132
   0850 E0            [24] 2665 	movx	a,@dptr
   0851 FE            [12] 2666 	mov	r6,a
   0852 A3            [24] 2667 	inc	dptr
   0853 E0            [24] 2668 	movx	a,@dptr
   0854 FF            [12] 2669 	mov	r7,a
   0855 4E            [12] 2670 	orl	a,r6
   0856 70 01         [24] 2671 	jnz	00102$
                           2672 ;	../src/delay/src/delay_us.c:52: return;
   0858 22            [24] 2673 	ret
   0859                    2674 00102$:
                           2675 ;	../src/delay/src/delay_us.c:54: microseconds -= 1;
   0859 1E            [12] 2676 	dec	r6
   085A BE FF 01      [24] 2677 	cjne	r6,#0xFF,00121$
   085D 1F            [12] 2678 	dec	r7
   085E                    2679 00121$:
   085E 90r00r40      [24] 2680 	mov	dptr,#_delay_us_microseconds_1_132
   0861 EE            [12] 2681 	mov	a,r6
   0862 F0            [24] 2682 	movx	@dptr,a
   0863 EF            [12] 2683 	mov	a,r7
   0864 A3            [24] 2684 	inc	dptr
   0865 F0            [24] 2685 	movx	@dptr,a
                           2686 ;	../src/delay/src/delay_us.c:56: for(count = 0; count < microseconds; count++)
   0866 90r00r40      [24] 2687 	mov	dptr,#_delay_us_microseconds_1_132
   0869 E0            [24] 2688 	movx	a,@dptr
   086A FE            [12] 2689 	mov	r6,a
   086B A3            [24] 2690 	inc	dptr
   086C E0            [24] 2691 	movx	a,@dptr
   086D FF            [12] 2692 	mov	r7,a
   086E 7C 00         [12] 2693 	mov	r4,#0x00
   0870 7D 00         [12] 2694 	mov	r5,#0x00
   0872                    2695 00106$:
   0872 C3            [12] 2696 	clr	c
   0873 EC            [12] 2697 	mov	a,r4
   0874 9E            [12] 2698 	subb	a,r6
   0875 ED            [12] 2699 	mov	a,r5
   0876 9F            [12] 2700 	subb	a,r7
   0877 50 09         [24] 2701 	jnc	00108$
                           2702 ;	../src/delay/src/delay_us.c:58: nop();
   0879 00            [12] 2703 	nop 
                           2704 ;	../src/delay/src/delay_us.c:59: nop();
   087A 00            [12] 2705 	nop 
                           2706 ;	../src/delay/src/delay_us.c:56: for(count = 0; count < microseconds; count++)
   087B 0C            [12] 2707 	inc	r4
   087C BC 00 F3      [24] 2708 	cjne	r4,#0x00,00106$
   087F 0D            [12] 2709 	inc	r5
   0880 80 F0         [24] 2710 	sjmp	00106$
   0882                    2711 00108$:
   0882 22            [24] 2712 	ret
                           2713 ;------------------------------------------------------------
                           2714 ;Allocation info for local variables in function 'delay_s'
                           2715 ;------------------------------------------------------------
                           2716 ;seconds                   Allocated with name '_delay_s_seconds_1_135'
                           2717 ;count                     Allocated with name '_delay_s_count_1_136'
                           2718 ;------------------------------------------------------------
                           2719 ;	../src/delay/src/delay_s.c:46: void delay_s(uint16_t seconds)
                           2720 ;	-----------------------------------------
                           2721 ;	 function delay_s
                           2722 ;	-----------------------------------------
   0883                    2723 _delay_s:
   0883 AF 83         [24] 2724 	mov	r7,dph
   0885 E5 82         [12] 2725 	mov	a,dpl
   0887 90r00r42      [24] 2726 	mov	dptr,#_delay_s_seconds_1_135
   088A F0            [24] 2727 	movx	@dptr,a
   088B EF            [12] 2728 	mov	a,r7
   088C A3            [24] 2729 	inc	dptr
   088D F0            [24] 2730 	movx	@dptr,a
                           2731 ;	../src/delay/src/delay_s.c:51: for(count = 0; count < seconds; count++)
   088E 90r00r42      [24] 2732 	mov	dptr,#_delay_s_seconds_1_135
   0891 E0            [24] 2733 	movx	a,@dptr
   0892 FE            [12] 2734 	mov	r6,a
   0893 A3            [24] 2735 	inc	dptr
   0894 E0            [24] 2736 	movx	a,@dptr
   0895 FF            [12] 2737 	mov	r7,a
   0896 7C 00         [12] 2738 	mov	r4,#0x00
   0898 7D 00         [12] 2739 	mov	r5,#0x00
   089A                    2740 00103$:
   089A C3            [12] 2741 	clr	c
   089B EC            [12] 2742 	mov	a,r4
   089C 9E            [12] 2743 	subb	a,r6
   089D ED            [12] 2744 	mov	a,r5
   089E 9F            [12] 2745 	subb	a,r7
   089F 50 1D         [24] 2746 	jnc	00105$
                           2747 ;	../src/delay/src/delay_s.c:53: delay_ms(1000);
   08A1 90 03 E8      [24] 2748 	mov	dptr,#0x03E8
   08A4 C0 07         [24] 2749 	push	ar7
   08A6 C0 06         [24] 2750 	push	ar6
   08A8 C0 05         [24] 2751 	push	ar5
   08AA C0 04         [24] 2752 	push	ar4
   08AC 12r08rBF      [24] 2753 	lcall	_delay_ms
   08AF D0 04         [24] 2754 	pop	ar4
   08B1 D0 05         [24] 2755 	pop	ar5
   08B3 D0 06         [24] 2756 	pop	ar6
   08B5 D0 07         [24] 2757 	pop	ar7
                           2758 ;	../src/delay/src/delay_s.c:51: for(count = 0; count < seconds; count++)
   08B7 0C            [12] 2759 	inc	r4
   08B8 BC 00 DF      [24] 2760 	cjne	r4,#0x00,00103$
   08BB 0D            [12] 2761 	inc	r5
   08BC 80 DC         [24] 2762 	sjmp	00103$
   08BE                    2763 00105$:
   08BE 22            [24] 2764 	ret
                           2765 ;------------------------------------------------------------
                           2766 ;Allocation info for local variables in function 'delay_ms'
                           2767 ;------------------------------------------------------------
                           2768 ;milliseconds              Allocated with name '_delay_ms_milliseconds_1_138'
                           2769 ;count                     Allocated with name '_delay_ms_count_1_139'
                           2770 ;------------------------------------------------------------
                           2771 ;	../src/delay/src/delay_ms.c:46: void delay_ms(uint16_t milliseconds)
                           2772 ;	-----------------------------------------
                           2773 ;	 function delay_ms
                           2774 ;	-----------------------------------------
   08BF                    2775 _delay_ms:
   08BF AF 83         [24] 2776 	mov	r7,dph
   08C1 E5 82         [12] 2777 	mov	a,dpl
   08C3 90r00r44      [24] 2778 	mov	dptr,#_delay_ms_milliseconds_1_138
   08C6 F0            [24] 2779 	movx	@dptr,a
   08C7 EF            [12] 2780 	mov	a,r7
   08C8 A3            [24] 2781 	inc	dptr
   08C9 F0            [24] 2782 	movx	@dptr,a
                           2783 ;	../src/delay/src/delay_ms.c:51: for(count = 0; count < milliseconds; count++)
   08CA 90r00r44      [24] 2784 	mov	dptr,#_delay_ms_milliseconds_1_138
   08CD E0            [24] 2785 	movx	a,@dptr
   08CE FE            [12] 2786 	mov	r6,a
   08CF A3            [24] 2787 	inc	dptr
   08D0 E0            [24] 2788 	movx	a,@dptr
   08D1 FF            [12] 2789 	mov	r7,a
   08D2 7C 00         [12] 2790 	mov	r4,#0x00
   08D4 7D 00         [12] 2791 	mov	r5,#0x00
   08D6                    2792 00103$:
   08D6 C3            [12] 2793 	clr	c
   08D7 EC            [12] 2794 	mov	a,r4
   08D8 9E            [12] 2795 	subb	a,r6
   08D9 ED            [12] 2796 	mov	a,r5
   08DA 9F            [12] 2797 	subb	a,r7
   08DB 50 1D         [24] 2798 	jnc	00105$
                           2799 ;	../src/delay/src/delay_ms.c:53: delay_us(1000);
   08DD 90 03 E8      [24] 2800 	mov	dptr,#0x03E8
   08E0 C0 07         [24] 2801 	push	ar7
   08E2 C0 06         [24] 2802 	push	ar6
   08E4 C0 05         [24] 2803 	push	ar5
   08E6 C0 04         [24] 2804 	push	ar4
   08E8 12r08r42      [24] 2805 	lcall	_delay_us
   08EB D0 04         [24] 2806 	pop	ar4
   08ED D0 05         [24] 2807 	pop	ar5
   08EF D0 06         [24] 2808 	pop	ar6
   08F1 D0 07         [24] 2809 	pop	ar7
                           2810 ;	../src/delay/src/delay_ms.c:51: for(count = 0; count < milliseconds; count++)
   08F3 0C            [12] 2811 	inc	r4
   08F4 BC 00 DF      [24] 2812 	cjne	r4,#0x00,00103$
   08F7 0D            [12] 2813 	inc	r5
   08F8 80 DC         [24] 2814 	sjmp	00103$
   08FA                    2815 00105$:
   08FA 22            [24] 2816 	ret
                           2817 ;------------------------------------------------------------
                           2818 ;Allocation info for local variables in function 'pwm_configure'
                           2819 ;------------------------------------------------------------
                           2820 ;pwm_config_options        Allocated with name '_pwm_configure_pwm_config_options_1_143'
                           2821 ;------------------------------------------------------------
                           2822 ;	../src/pwm/src/pwm_configure.c:52: void pwm_configure(uint8_t pwm_config_options)
                           2823 ;	-----------------------------------------
                           2824 ;	 function pwm_configure
                           2825 ;	-----------------------------------------
   08FB                    2826 _pwm_configure:
   08FB E5 82         [12] 2827 	mov	a,dpl
   08FD 90r00r46      [24] 2828 	mov	dptr,#_pwm_configure_pwm_config_options_1_143
   0900 F0            [24] 2829 	movx	@dptr,a
                           2830 ;	../src/pwm/src/pwm_configure.c:55: PWMCON = (PWMCON & ~PWM_CONFIG_OPTION_PWMCON_MASK) | (pwm_config_options & PWM_CONFIG_OPTION_PWMCON_MASK);
   0901 AF B2         [24] 2831 	mov	r7,_PWMCON
   0903 53 07 03      [24] 2832 	anl	ar7,#0x03
   0906 90r00r46      [24] 2833 	mov	dptr,#_pwm_configure_pwm_config_options_1_143
   0909 E0            [24] 2834 	movx	a,@dptr
   090A 54 FC         [12] 2835 	anl	a,#0xFC
   090C 4F            [12] 2836 	orl	a,r7
   090D F5 B2         [12] 2837 	mov	_PWMCON,a
   090F 22            [24] 2838 	ret
                           2839 ;------------------------------------------------------------
                           2840 ;Allocation info for local variables in function 'pwm_start'
                           2841 ;------------------------------------------------------------
                           2842 ;pwm_duty_cycle            Allocated with name '_pwm_start_PARM_2'
                           2843 ;pwm_channel               Allocated with name '_pwm_start_pwm_channel_1_145'
                           2844 ;------------------------------------------------------------
                           2845 ;	../src/pwm/src/pwm_start.c:47: void pwm_start(pwm_channel_t pwm_channel, uint8_t pwm_duty_cycle)
                           2846 ;	-----------------------------------------
                           2847 ;	 function pwm_start
                           2848 ;	-----------------------------------------
   0910                    2849 _pwm_start:
   0910 E5 82         [12] 2850 	mov	a,dpl
                           2851 ;	../src/pwm/src/pwm_start.c:50: if(pwm_channel == PWM_CHANNEL_0)
   0912 90r00r48      [24] 2852 	mov	dptr,#_pwm_start_pwm_channel_1_145
   0915 F0            [24] 2853 	movx	@dptr,a
   0916 FF            [12] 2854 	mov	r7,a
   0917 70 0A         [24] 2855 	jnz	00102$
                           2856 ;	../src/pwm/src/pwm_start.c:52: PWMDC0 = pwm_duty_cycle;
   0919 90r00r47      [24] 2857 	mov	dptr,#_pwm_start_PARM_2
   091C E0            [24] 2858 	movx	a,@dptr
   091D F5 A1         [12] 2859 	mov	_PWMDC0,a
                           2860 ;	../src/pwm/src/pwm_start.c:53: reg_bits_set(PWMCON, PWMCON_PWM0_ENABLE);
   091F 43 B2 01      [24] 2861 	orl	_PWMCON,#0x01
   0922 22            [24] 2862 	ret
   0923                    2863 00102$:
                           2864 ;	../src/pwm/src/pwm_start.c:57: PWMDC1 = pwm_duty_cycle;
   0923 90r00r47      [24] 2865 	mov	dptr,#_pwm_start_PARM_2
   0926 E0            [24] 2866 	movx	a,@dptr
   0927 F5 A2         [12] 2867 	mov	_PWMDC1,a
                           2868 ;	../src/pwm/src/pwm_start.c:58: reg_bits_set(PWMCON, PWMCON_PWM1_ENABLE);
   0929 43 B2 02      [24] 2869 	orl	_PWMCON,#0x02
   092C 22            [24] 2870 	ret
                           2871 ;------------------------------------------------------------
                           2872 ;Allocation info for local variables in function 'pwr_clk_mgmt_clklf_configure'
                           2873 ;------------------------------------------------------------
                           2874 ;clklf_config_options      Allocated with name '_pwr_clk_mgmt_clklf_configure_clklf_config_options_1_154'
                           2875 ;------------------------------------------------------------
                           2876 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_clklf_configure.c:52: void pwr_clk_mgmt_clklf_configure(uint8_t clklf_config_options)
                           2877 ;	-----------------------------------------
                           2878 ;	 function pwr_clk_mgmt_clklf_configure
                           2879 ;	-----------------------------------------
   092D                    2880 _pwr_clk_mgmt_clklf_configure:
   092D E5 82         [12] 2881 	mov	a,dpl
   092F 90r00r49      [24] 2882 	mov	dptr,#_pwr_clk_mgmt_clklf_configure_clklf_config_options_1_154
   0932 F0            [24] 2883 	movx	@dptr,a
                           2884 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_clklf_configure.c:55: CLKLFCTRL = (CLKLFCTRL & ~PWR_CLK_MGMT_CLKLF_CONFIG_OPTION_CLKLFCTRL_MASK) | (clklf_config_options & PWR_CLK_MGMT_CLKLF_CONFIG_OPTION_CLKLFCTRL_MASK);
   0933 AF AD         [24] 2885 	mov	r7,_CLKLFCTRL
   0935 53 07 F8      [24] 2886 	anl	ar7,#0xF8
   0938 90r00r49      [24] 2887 	mov	dptr,#_pwr_clk_mgmt_clklf_configure_clklf_config_options_1_154
   093B E0            [24] 2888 	movx	a,@dptr
   093C 54 07         [12] 2889 	anl	a,#0x07
   093E 4F            [12] 2890 	orl	a,r7
   093F F5 AD         [12] 2891 	mov	_CLKLFCTRL,a
   0941 22            [24] 2892 	ret
                           2893 ;------------------------------------------------------------
                           2894 ;Allocation info for local variables in function 'pwr_clk_mgmt_get_cclk_freq_in_hz'
                           2895 ;------------------------------------------------------------
                           2896 ;divider                   Allocated with name '_pwr_clk_mgmt_get_cclk_freq_in_hz_divider_1_156'
                           2897 ;i                         Allocated with name '_pwr_clk_mgmt_get_cclk_freq_in_hz_i_1_156'
                           2898 ;cclk_freq_hz              Allocated with name '_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156'
                           2899 ;------------------------------------------------------------
                           2900 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:46: uint32_t pwr_clk_mgmt_get_cclk_freq_in_hz()
                           2901 ;	-----------------------------------------
                           2902 ;	 function pwr_clk_mgmt_get_cclk_freq_in_hz
                           2903 ;	-----------------------------------------
   0942                    2904 _pwr_clk_mgmt_get_cclk_freq_in_hz:
                           2905 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:48: uint8_t divider = (CLKCTRL & CLKCTRL_CLK_FREQ_MASK) >> CLKCTRL_CLK_FREQ_SHIFT;
   0942 74 07         [12] 2906 	mov	a,#0x07
   0944 55 A3         [12] 2907 	anl	a,_CLKCTRL
   0946 FF            [12] 2908 	mov	r7,a
                           2909 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:50: uint32_t cclk_freq_hz = CCLK_MAX_FREQ_HZ;
   0947 90r00r4A      [24] 2910 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156
   094A E4            [12] 2911 	clr	a
   094B F0            [24] 2912 	movx	@dptr,a
   094C 74 24         [12] 2913 	mov	a,#0x24
   094E A3            [24] 2914 	inc	dptr
   094F F0            [24] 2915 	movx	@dptr,a
   0950 74 F4         [12] 2916 	mov	a,#0xF4
   0952 A3            [24] 2917 	inc	dptr
   0953 F0            [24] 2918 	movx	@dptr,a
   0954 E4            [12] 2919 	clr	a
   0955 A3            [24] 2920 	inc	dptr
   0956 F0            [24] 2921 	movx	@dptr,a
                           2922 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:52: for(i = 0; i < divider; i++)
   0957 7E 00         [12] 2923 	mov	r6,#0x00
   0959                    2924 00103$:
   0959 C3            [12] 2925 	clr	c
   095A EE            [12] 2926 	mov	a,r6
   095B 9F            [12] 2927 	subb	a,r7
   095C 50 29         [24] 2928 	jnc	00101$
                           2929 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:54: cclk_freq_hz /= 2;
   095E 90r00r4A      [24] 2930 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156
   0961 E0            [24] 2931 	movx	a,@dptr
   0962 FA            [12] 2932 	mov	r2,a
   0963 A3            [24] 2933 	inc	dptr
   0964 E0            [24] 2934 	movx	a,@dptr
   0965 FB            [12] 2935 	mov	r3,a
   0966 A3            [24] 2936 	inc	dptr
   0967 E0            [24] 2937 	movx	a,@dptr
   0968 FC            [12] 2938 	mov	r4,a
   0969 A3            [24] 2939 	inc	dptr
   096A E0            [24] 2940 	movx	a,@dptr
   096B C3            [12] 2941 	clr	c
   096C 13            [12] 2942 	rrc	a
   096D FD            [12] 2943 	mov	r5,a
   096E EC            [12] 2944 	mov	a,r4
   096F 13            [12] 2945 	rrc	a
   0970 FC            [12] 2946 	mov	r4,a
   0971 EB            [12] 2947 	mov	a,r3
   0972 13            [12] 2948 	rrc	a
   0973 FB            [12] 2949 	mov	r3,a
   0974 EA            [12] 2950 	mov	a,r2
   0975 13            [12] 2951 	rrc	a
   0976 FA            [12] 2952 	mov	r2,a
   0977 90r00r4A      [24] 2953 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156
   097A F0            [24] 2954 	movx	@dptr,a
   097B EB            [12] 2955 	mov	a,r3
   097C A3            [24] 2956 	inc	dptr
   097D F0            [24] 2957 	movx	@dptr,a
   097E EC            [12] 2958 	mov	a,r4
   097F A3            [24] 2959 	inc	dptr
   0980 F0            [24] 2960 	movx	@dptr,a
   0981 ED            [12] 2961 	mov	a,r5
   0982 A3            [24] 2962 	inc	dptr
   0983 F0            [24] 2963 	movx	@dptr,a
                           2964 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:52: for(i = 0; i < divider; i++)
   0984 0E            [12] 2965 	inc	r6
   0985 80 D2         [24] 2966 	sjmp	00103$
   0987                    2967 00101$:
                           2968 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:57: return cclk_freq_hz;
   0987 90r00r4A      [24] 2969 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156
   098A E0            [24] 2970 	movx	a,@dptr
   098B FC            [12] 2971 	mov	r4,a
   098C A3            [24] 2972 	inc	dptr
   098D E0            [24] 2973 	movx	a,@dptr
   098E FD            [12] 2974 	mov	r5,a
   098F A3            [24] 2975 	inc	dptr
   0990 E0            [24] 2976 	movx	a,@dptr
   0991 FE            [12] 2977 	mov	r6,a
   0992 A3            [24] 2978 	inc	dptr
   0993 E0            [24] 2979 	movx	a,@dptr
   0994 8C 82         [24] 2980 	mov	dpl,r4
   0996 8D 83         [24] 2981 	mov	dph,r5
   0998 8E F0         [24] 2982 	mov	b,r6
   099A 22            [24] 2983 	ret
                           2984 ;------------------------------------------------------------
                           2985 ;Allocation info for local variables in function 'pwr_clk_mgmt_wakeup_configure'
                           2986 ;------------------------------------------------------------
                           2987 ;wakeup_on_pin_config_options Allocated with name '_pwr_clk_mgmt_wakeup_configure_PARM_2'
                           2988 ;wakeup_sources_config_options Allocated with name '_pwr_clk_mgmt_wakeup_configure_wakeup_sources_config_options_1_158'
                           2989 ;------------------------------------------------------------
                           2990 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_wakeup_configure.c:47: void pwr_clk_mgmt_wakeup_configure(unsigned char wakeup_sources_config_options, unsigned int wakeup_on_pin_config_options)
                           2991 ;	-----------------------------------------
                           2992 ;	 function pwr_clk_mgmt_wakeup_configure
                           2993 ;	-----------------------------------------
   099B                    2994 _pwr_clk_mgmt_wakeup_configure:
   099B E5 82         [12] 2995 	mov	a,dpl
                           2996 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_wakeup_configure.c:50: WUCON = wakeup_sources_config_options;
   099D 90r00r50      [24] 2997 	mov	dptr,#_pwr_clk_mgmt_wakeup_configure_wakeup_sources_config_options_1_158
   09A0 F0            [24] 2998 	movx	@dptr,a
   09A1 F5 A5         [12] 2999 	mov	_WUCON,a
                           3000 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_wakeup_configure.c:53: WUOPC0 = wakeup_on_pin_config_options & 0xFF;
   09A3 90r00r4E      [24] 3001 	mov	dptr,#_pwr_clk_mgmt_wakeup_configure_PARM_2
   09A6 E0            [24] 3002 	movx	a,@dptr
   09A7 FE            [12] 3003 	mov	r6,a
   09A8 A3            [24] 3004 	inc	dptr
   09A9 E0            [24] 3005 	movx	a,@dptr
   09AA FF            [12] 3006 	mov	r7,a
   09AB 8E 04         [24] 3007 	mov	ar4,r6
   09AD 8C CF         [24] 3008 	mov	_WUOPC0,r4
                           3009 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_wakeup_configure.c:54: WUOPC1 = (wakeup_on_pin_config_options >> 8) & 0xFF;
   09AF 8F 06         [24] 3010 	mov	ar6,r7
   09B1 8E CE         [24] 3011 	mov	_WUOPC1,r6
   09B3 22            [24] 3012 	ret
                           3013 ;------------------------------------------------------------
                           3014 ;Allocation info for local variables in function 'watchdog_set_wdsv_count'
                           3015 ;------------------------------------------------------------
                           3016 ;wdsv_value                Allocated with name '_watchdog_set_wdsv_count_wdsv_value_1_161'
                           3017 ;------------------------------------------------------------
                           3018 ;	../src/watchdog/src/watchdog_set_wdsv_count.c:46: void watchdog_set_wdsv_count(uint16_t wdsv_value)
                           3019 ;	-----------------------------------------
                           3020 ;	 function watchdog_set_wdsv_count
                           3021 ;	-----------------------------------------
   09B4                    3022 _watchdog_set_wdsv_count:
   09B4 AF 83         [24] 3023 	mov	r7,dph
   09B6 E5 82         [12] 3024 	mov	a,dpl
   09B8 90r00r51      [24] 3025 	mov	dptr,#_watchdog_set_wdsv_count_wdsv_value_1_161
   09BB F0            [24] 3026 	movx	@dptr,a
   09BC EF            [12] 3027 	mov	a,r7
   09BD A3            [24] 3028 	inc	dptr
   09BE F0            [24] 3029 	movx	@dptr,a
                           3030 ;	../src/watchdog/src/watchdog_set_wdsv_count.c:49: WDSV = (uint8_t)wdsv_value;
   09BF 90r00r51      [24] 3031 	mov	dptr,#_watchdog_set_wdsv_count_wdsv_value_1_161
   09C2 E0            [24] 3032 	movx	a,@dptr
   09C3 FE            [12] 3033 	mov	r6,a
   09C4 A3            [24] 3034 	inc	dptr
   09C5 E0            [24] 3035 	movx	a,@dptr
   09C6 FF            [12] 3036 	mov	r7,a
   09C7 8E AF         [24] 3037 	mov	_WDSV,r6
                           3038 ;	../src/watchdog/src/watchdog_set_wdsv_count.c:50: WDSV = (uint8_t)(wdsv_value >> 8);
   09C9 8F AF         [24] 3039 	mov	_WDSV,r7
   09CB 22            [24] 3040 	ret
                           3041 ;------------------------------------------------------------
                           3042 ;Allocation info for local variables in function 'watchdog_start_and_set_timeout_in_ms'
                           3043 ;------------------------------------------------------------
                           3044 ;milliseconds              Allocated with name '_watchdog_start_and_set_timeout_in_ms_milliseconds_1_163'
                           3045 ;wd_value                  Allocated with name '_watchdog_start_and_set_timeout_in_ms_wd_value_1_164'
                           3046 ;------------------------------------------------------------
                           3047 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:50: uint16_t watchdog_start_and_set_timeout_in_ms(uint32_t milliseconds)
                           3048 ;	-----------------------------------------
                           3049 ;	 function watchdog_start_and_set_timeout_in_ms
                           3050 ;	-----------------------------------------
   09CC                    3051 _watchdog_start_and_set_timeout_in_ms:
   09CC AF 82         [24] 3052 	mov	r7,dpl
   09CE AE 83         [24] 3053 	mov	r6,dph
   09D0 AD F0         [24] 3054 	mov	r5,b
   09D2 FC            [12] 3055 	mov	r4,a
   09D3 90r00r53      [24] 3056 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_milliseconds_1_163
   09D6 EF            [12] 3057 	mov	a,r7
   09D7 F0            [24] 3058 	movx	@dptr,a
   09D8 EE            [12] 3059 	mov	a,r6
   09D9 A3            [24] 3060 	inc	dptr
   09DA F0            [24] 3061 	movx	@dptr,a
   09DB ED            [12] 3062 	mov	a,r5
   09DC A3            [24] 3063 	inc	dptr
   09DD F0            [24] 3064 	movx	@dptr,a
   09DE EC            [12] 3065 	mov	a,r4
   09DF A3            [24] 3066 	inc	dptr
   09E0 F0            [24] 3067 	movx	@dptr,a
                           3068 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:52: uint16_t wd_value = 0;
   09E1 90r00r57      [24] 3069 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_wd_value_1_164
   09E4 E4            [12] 3070 	clr	a
   09E5 F0            [24] 3071 	movx	@dptr,a
   09E6 E4            [12] 3072 	clr	a
   09E7 A3            [24] 3073 	inc	dptr
   09E8 F0            [24] 3074 	movx	@dptr,a
                           3075 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:55: if(!pwr_clk_mgmt_is_clklf_enabled())
   09E9 74 07         [12] 3076 	mov	a,#0x07
   09EB 55 AD         [12] 3077 	anl	a,_CLKLFCTRL
   09ED FF            [12] 3078 	mov	r7,a
   09EE BF 07 0B      [24] 3079 	cjne	r7,#0x07,00105$
                           3080 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:58: pwr_clk_mgmt_clklf_configure(PWR_CLK_MGMT_CLKLF_CONFIG_OPTION_CLK_SRC_XOSC16M);
   09F1 75 82 02      [24] 3081 	mov	dpl,#0x02
   09F4 12r09r2D      [24] 3082 	lcall	_pwr_clk_mgmt_clklf_configure
                           3083 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:59: pwr_clk_mgmt_wait_until_clklf_is_ready();
   09F7                    3084 00101$:
   09F7 E5 AD         [12] 3085 	mov	a,_CLKLFCTRL
   09F9 30 E6 FB      [24] 3086 	jnb	acc.6,00101$
   09FC                    3087 00105$:
                           3088 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:63: if(milliseconds < 511992)
   09FC 90r00r53      [24] 3089 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_milliseconds_1_163
   09FF E0            [24] 3090 	movx	a,@dptr
   0A00 FC            [12] 3091 	mov	r4,a
   0A01 A3            [24] 3092 	inc	dptr
   0A02 E0            [24] 3093 	movx	a,@dptr
   0A03 FD            [12] 3094 	mov	r5,a
   0A04 A3            [24] 3095 	inc	dptr
   0A05 E0            [24] 3096 	movx	a,@dptr
   0A06 FE            [12] 3097 	mov	r6,a
   0A07 A3            [24] 3098 	inc	dptr
   0A08 E0            [24] 3099 	movx	a,@dptr
   0A09 FF            [12] 3100 	mov	r7,a
   0A0A C3            [12] 3101 	clr	c
   0A0B EC            [12] 3102 	mov	a,r4
   0A0C 94 F8         [12] 3103 	subb	a,#0xF8
   0A0E ED            [12] 3104 	mov	a,r5
   0A0F 94 CF         [12] 3105 	subb	a,#0xCF
   0A11 EE            [12] 3106 	mov	a,r6
   0A12 94 07         [12] 3107 	subb	a,#0x07
   0A14 EF            [12] 3108 	mov	a,r7
   0A15 94 00         [12] 3109 	subb	a,#0x00
   0A17 50 52         [24] 3110 	jnc	00107$
                           3111 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:90: wd_value = (uint16_t)(((uint32_t)(milliseconds * ((uint32_t)128)) + (uint32_t)500) / ((uint32_t)1000));
   0A19 EF            [12] 3112 	mov	a,r7
   0A1A 54 01         [12] 3113 	anl	a,#0x01
   0A1C A2 E0         [12] 3114 	mov	c,acc.0
   0A1E CE            [12] 3115 	xch	a,r6
   0A1F 13            [12] 3116 	rrc	a
   0A20 CE            [12] 3117 	xch	a,r6
   0A21 13            [12] 3118 	rrc	a
   0A22 CE            [12] 3119 	xch	a,r6
   0A23 FF            [12] 3120 	mov	r7,a
   0A24 ED            [12] 3121 	mov	a,r5
   0A25 C3            [12] 3122 	clr	c
   0A26 13            [12] 3123 	rrc	a
   0A27 4E            [12] 3124 	orl	a,r6
   0A28 FE            [12] 3125 	mov	r6,a
   0A29 ED            [12] 3126 	mov	a,r5
   0A2A 54 01         [12] 3127 	anl	a,#0x01
   0A2C A2 E0         [12] 3128 	mov	c,acc.0
   0A2E CC            [12] 3129 	xch	a,r4
   0A2F 13            [12] 3130 	rrc	a
   0A30 CC            [12] 3131 	xch	a,r4
   0A31 13            [12] 3132 	rrc	a
   0A32 CC            [12] 3133 	xch	a,r4
   0A33 FD            [12] 3134 	mov	r5,a
   0A34 74 F4         [12] 3135 	mov	a,#0xF4
   0A36 2C            [12] 3136 	add	a,r4
   0A37 FC            [12] 3137 	mov	r4,a
   0A38 74 01         [12] 3138 	mov	a,#0x01
   0A3A 3D            [12] 3139 	addc	a,r5
   0A3B FD            [12] 3140 	mov	r5,a
   0A3C E4            [12] 3141 	clr	a
   0A3D 3E            [12] 3142 	addc	a,r6
   0A3E FE            [12] 3143 	mov	r6,a
   0A3F E4            [12] 3144 	clr	a
   0A40 3F            [12] 3145 	addc	a,r7
   0A41 FF            [12] 3146 	mov	r7,a
   0A42 90r00r00      [24] 3147 	mov	dptr,#__divulong_PARM_2
   0A45 74 E8         [12] 3148 	mov	a,#0xE8
   0A47 F0            [24] 3149 	movx	@dptr,a
   0A48 74 03         [12] 3150 	mov	a,#0x03
   0A4A A3            [24] 3151 	inc	dptr
   0A4B F0            [24] 3152 	movx	@dptr,a
   0A4C E4            [12] 3153 	clr	a
   0A4D A3            [24] 3154 	inc	dptr
   0A4E F0            [24] 3155 	movx	@dptr,a
   0A4F E4            [12] 3156 	clr	a
   0A50 A3            [24] 3157 	inc	dptr
   0A51 F0            [24] 3158 	movx	@dptr,a
   0A52 8C 82         [24] 3159 	mov	dpl,r4
   0A54 8D 83         [24] 3160 	mov	dph,r5
   0A56 8E F0         [24] 3161 	mov	b,r6
   0A58 EF            [12] 3162 	mov	a,r7
   0A59 12r00r00      [24] 3163 	lcall	__divulong
   0A5C AC 82         [24] 3164 	mov	r4,dpl
   0A5E AD 83         [24] 3165 	mov	r5,dph
   0A60 AE F0         [24] 3166 	mov	r6,b
   0A62 FF            [12] 3167 	mov	r7,a
   0A63 90r00r57      [24] 3168 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_wd_value_1_164
   0A66 EC            [12] 3169 	mov	a,r4
   0A67 F0            [24] 3170 	movx	@dptr,a
   0A68 ED            [12] 3171 	mov	a,r5
   0A69 A3            [24] 3172 	inc	dptr
   0A6A F0            [24] 3173 	movx	@dptr,a
   0A6B                    3174 00107$:
                           3175 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:93: watchdog_set_wdsv_count(wd_value);
   0A6B 90r00r57      [24] 3176 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_wd_value_1_164
   0A6E E0            [24] 3177 	movx	a,@dptr
   0A6F FE            [12] 3178 	mov	r6,a
   0A70 A3            [24] 3179 	inc	dptr
   0A71 E0            [24] 3180 	movx	a,@dptr
   0A72 FF            [12] 3181 	mov	r7,a
   0A73 8E 82         [24] 3182 	mov	dpl,r6
   0A75 8F 83         [24] 3183 	mov	dph,r7
   0A77 C0 07         [24] 3184 	push	ar7
   0A79 C0 06         [24] 3185 	push	ar6
   0A7B 12r09rB4      [24] 3186 	lcall	_watchdog_set_wdsv_count
   0A7E D0 06         [24] 3187 	pop	ar6
   0A80 D0 07         [24] 3188 	pop	ar7
                           3189 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:95: return wd_value;
   0A82 8E 82         [24] 3190 	mov	dpl,r6
   0A84 8F 83         [24] 3191 	mov	dph,r7
   0A86 22            [24] 3192 	ret
                           3193 ;------------------------------------------------------------
                           3194 ;Allocation info for local variables in function 'interrupt_configure_ifp'
                           3195 ;------------------------------------------------------------
                           3196 ;ifp_int_config_options    Allocated with name '_interrupt_configure_ifp_PARM_2'
                           3197 ;interrupt_ifp_input       Allocated with name '_interrupt_configure_ifp_interrupt_ifp_input_1_167'
                           3198 ;------------------------------------------------------------
                           3199 ;	../src/interrupt/src/interrupt_configure_ifp.c:57: bool interrupt_configure_ifp(interrupt_ifp_input_t interrupt_ifp_input, uint8_t ifp_int_config_options)
                           3200 ;	-----------------------------------------
                           3201 ;	 function interrupt_configure_ifp
                           3202 ;	-----------------------------------------
   0A87                    3203 _interrupt_configure_ifp:
   0A87 E5 82         [12] 3204 	mov	a,dpl
   0A89 90r00r5A      [24] 3205 	mov	dptr,#_interrupt_configure_ifp_interrupt_ifp_input_1_167
   0A8C F0            [24] 3206 	movx	@dptr,a
                           3207 ;	../src/interrupt/src/interrupt_configure_ifp.c:60: if(ifp_int_config_options & INTERRUPT_IFP_CONFIG_OPTION_ENABLE)
   0A8D 90r00r59      [24] 3208 	mov	dptr,#_interrupt_configure_ifp_PARM_2
   0A90 E0            [24] 3209 	movx	a,@dptr
   0A91 FF            [12] 3210 	mov	r7,a
   0A92 30 E7 41      [24] 3211 	jnb	acc.7,00116$
                           3212 ;	../src/interrupt/src/interrupt_configure_ifp.c:63: if(interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT0)
   0A95 90r00r5A      [24] 3213 	mov	dptr,#_interrupt_configure_ifp_interrupt_ifp_input_1_167
   0A98 E0            [24] 3214 	movx	a,@dptr
   0A99 FE            [12] 3215 	mov	r6,a
   0A9A BE 08 0B      [24] 3216 	cjne	r6,#0x08,00108$
                           3217 ;	../src/interrupt/src/interrupt_configure_ifp.c:65: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK) | INTERRUPT_IFP_INPUT_GPINT0;
   0A9D AD A6         [24] 3218 	mov	r5,_INTEXP
   0A9F 74 C7         [12] 3219 	mov	a,#0xC7
   0AA1 5D            [12] 3220 	anl	a,r5
   0AA2 44 08         [12] 3221 	orl	a,#0x08
   0AA4 F5 A6         [12] 3222 	mov	_INTEXP,a
   0AA6 80 20         [24] 3223 	sjmp	00109$
   0AA8                    3224 00108$:
                           3225 ;	../src/interrupt/src/interrupt_configure_ifp.c:67: else if(interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT1)
   0AA8 BE 10 0B      [24] 3226 	cjne	r6,#0x10,00105$
                           3227 ;	../src/interrupt/src/interrupt_configure_ifp.c:69: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK) | INTERRUPT_IFP_INPUT_GPINT1;
   0AAB AD A6         [24] 3228 	mov	r5,_INTEXP
   0AAD 74 C7         [12] 3229 	mov	a,#0xC7
   0AAF 5D            [12] 3230 	anl	a,r5
   0AB0 44 10         [12] 3231 	orl	a,#0x10
   0AB2 F5 A6         [12] 3232 	mov	_INTEXP,a
   0AB4 80 12         [24] 3233 	sjmp	00109$
   0AB6                    3234 00105$:
                           3235 ;	../src/interrupt/src/interrupt_configure_ifp.c:71: else if(interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT2)
   0AB6 BE 20 0B      [24] 3236 	cjne	r6,#0x20,00102$
                           3237 ;	../src/interrupt/src/interrupt_configure_ifp.c:73: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK) | INTERRUPT_IFP_INPUT_GPINT2;
   0AB9 AE A6         [24] 3238 	mov	r6,_INTEXP
   0ABB 74 C7         [12] 3239 	mov	a,#0xC7
   0ABD 5E            [12] 3240 	anl	a,r6
   0ABE 44 20         [12] 3241 	orl	a,#0x20
   0AC0 F5 A6         [12] 3242 	mov	_INTEXP,a
   0AC2 80 04         [24] 3243 	sjmp	00109$
   0AC4                    3244 00102$:
                           3245 ;	../src/interrupt/src/interrupt_configure_ifp.c:78: return false;
   0AC4 75 82 00      [24] 3246 	mov	dpl,#0x00
   0AC7 22            [24] 3247 	ret
   0AC8                    3248 00109$:
                           3249 ;	../src/interrupt/src/interrupt_configure_ifp.c:82: TCON = (TCON & ~INTERRUPT_IFP_CONFIG_TCON_MASK) | (ifp_int_config_options & INTERRUPT_IFP_CONFIG_TCON_MASK);
   0AC8 AE 88         [24] 3250 	mov	r6,_TCON
   0ACA 53 06 FE      [24] 3251 	anl	ar6,#0xFE
   0ACD 53 07 01      [24] 3252 	anl	ar7,#0x01
   0AD0 EF            [12] 3253 	mov	a,r7
   0AD1 4E            [12] 3254 	orl	a,r6
   0AD2 F5 88         [12] 3255 	mov	_TCON,a
   0AD4 80 1F         [24] 3256 	sjmp	00117$
   0AD6                    3257 00116$:
                           3258 ;	../src/interrupt/src/interrupt_configure_ifp.c:87: if((interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT0) || (interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT1) || (interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT2))
   0AD6 90r00r5A      [24] 3259 	mov	dptr,#_interrupt_configure_ifp_interrupt_ifp_input_1_167
   0AD9 E0            [24] 3260 	movx	a,@dptr
   0ADA FF            [12] 3261 	mov	r7,a
   0ADB BF 08 02      [24] 3262 	cjne	r7,#0x08,00145$
   0ADE 80 08         [24] 3263 	sjmp	00110$
   0AE0                    3264 00145$:
   0AE0 BF 10 02      [24] 3265 	cjne	r7,#0x10,00146$
   0AE3 80 03         [24] 3266 	sjmp	00110$
   0AE5                    3267 00146$:
   0AE5 BF 20 09      [24] 3268 	cjne	r7,#0x20,00111$
   0AE8                    3269 00110$:
                           3270 ;	../src/interrupt/src/interrupt_configure_ifp.c:89: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK);
   0AE8 AF A6         [24] 3271 	mov	r7,_INTEXP
   0AEA 74 C7         [12] 3272 	mov	a,#0xC7
   0AEC 5F            [12] 3273 	anl	a,r7
   0AED F5 A6         [12] 3274 	mov	_INTEXP,a
   0AEF 80 04         [24] 3275 	sjmp	00117$
   0AF1                    3276 00111$:
                           3277 ;	../src/interrupt/src/interrupt_configure_ifp.c:94: return false;
   0AF1 75 82 00      [24] 3278 	mov	dpl,#0x00
   0AF4 22            [24] 3279 	ret
   0AF5                    3280 00117$:
                           3281 ;	../src/interrupt/src/interrupt_configure_ifp.c:98: return true;
   0AF5 75 82 01      [24] 3282 	mov	dpl,#0x01
   0AF8 22            [24] 3283 	ret
                           3284 ;------------------------------------------------------------
                           3285 ;Allocation info for local variables in function 'adc_configure'
                           3286 ;------------------------------------------------------------
                           3287 ;adc_config_options        Allocated with name '_adc_configure_adc_config_options_1_181'
                           3288 ;------------------------------------------------------------
                           3289 ;	../src/adc/src/adc_configure.c:54: void adc_configure(unsigned int adc_config_options)
                           3290 ;	-----------------------------------------
                           3291 ;	 function adc_configure
                           3292 ;	-----------------------------------------
   0AF9                    3293 _adc_configure:
   0AF9 AF 83         [24] 3294 	mov	r7,dph
   0AFB E5 82         [12] 3295 	mov	a,dpl
   0AFD 90r00r5B      [24] 3296 	mov	dptr,#_adc_configure_adc_config_options_1_181
   0B00 F0            [24] 3297 	movx	@dptr,a
   0B01 EF            [12] 3298 	mov	a,r7
   0B02 A3            [24] 3299 	inc	dptr
   0B03 F0            [24] 3300 	movx	@dptr,a
                           3301 ;	../src/adc/src/adc_configure.c:57: ADCCON1 = (adc_config_options >> 8) & ADC_CONFIG_OPTION_ADCCON1_WRITE_MASK;
   0B04 90r00r5B      [24] 3302 	mov	dptr,#_adc_configure_adc_config_options_1_181
   0B07 E0            [24] 3303 	movx	a,@dptr
   0B08 FE            [12] 3304 	mov	r6,a
   0B09 A3            [24] 3305 	inc	dptr
   0B0A E0            [24] 3306 	movx	a,@dptr
   0B0B FD            [12] 3307 	mov	r5,a
   0B0C 74 03         [12] 3308 	mov	a,#0x03
   0B0E 5D            [12] 3309 	anl	a,r5
   0B0F F5 D3         [12] 3310 	mov	_ADCCON1,a
                           3311 ;	../src/adc/src/adc_configure.c:58: ADCCON2 = (adc_config_options)      & ADC_CONFIG_OPTION_ADCCON2_WRITE_MASK;
   0B11 8E D2         [24] 3312 	mov	_ADCCON2,r6
                           3313 ;	../src/adc/src/adc_configure.c:59: ADCCON3 = (adc_config_options >> 8) & ADC_CONFIG_OPTION_ADCCON3_WRITE_MASK;
   0B13 74 E0         [12] 3314 	mov	a,#0xE0
   0B15 5D            [12] 3315 	anl	a,r5
   0B16 F5 D1         [12] 3316 	mov	_ADCCON3,a
   0B18 22            [24] 3317 	ret
                           3318 ;------------------------------------------------------------
                           3319 ;Allocation info for local variables in function 'adc_set_input_channel'
                           3320 ;------------------------------------------------------------
                           3321 ;adc_channel               Allocated with name '_adc_set_input_channel_adc_channel_1_183'
                           3322 ;------------------------------------------------------------
                           3323 ;	../src/adc/src/adc_set_input_channel.c:46: void adc_set_input_channel(adc_channel_t adc_channel)
                           3324 ;	-----------------------------------------
                           3325 ;	 function adc_set_input_channel
                           3326 ;	-----------------------------------------
   0B19                    3327 _adc_set_input_channel:
   0B19 E5 82         [12] 3328 	mov	a,dpl
                           3329 ;	../src/adc/src/adc_set_input_channel.c:49: adc_channel &= (ADCCON1_CHAN_SEL_MASK >> ADCCON1_CHAN_SEL_SHIFT);
   0B1B 90r00r5D      [24] 3330 	mov	dptr,#_adc_set_input_channel_adc_channel_1_183
   0B1E F0            [24] 3331 	movx	@dptr,a
   0B1F FF            [12] 3332 	mov	r7,a
   0B20 90r00r5D      [24] 3333 	mov	dptr,#_adc_set_input_channel_adc_channel_1_183
   0B23 74 0F         [12] 3334 	mov	a,#0x0F
   0B25 5F            [12] 3335 	anl	a,r7
   0B26 F0            [24] 3336 	movx	@dptr,a
                           3337 ;	../src/adc/src/adc_set_input_channel.c:52: ADCCON1 = (ADCCON1 & ~ADCCON1_CHAN_SEL_MASK) | (adc_channel << ADCCON1_CHAN_SEL_SHIFT);
   0B27 AF D3         [24] 3338 	mov	r7,_ADCCON1
   0B29 53 07 C3      [24] 3339 	anl	ar7,#0xC3
   0B2C 90r00r5D      [24] 3340 	mov	dptr,#_adc_set_input_channel_adc_channel_1_183
   0B2F E0            [24] 3341 	movx	a,@dptr
   0B30 25 E0         [12] 3342 	add	a,acc
   0B32 25 E0         [12] 3343 	add	a,acc
   0B34 4F            [12] 3344 	orl	a,r7
   0B35 F5 D3         [12] 3345 	mov	_ADCCON1,a
   0B37 22            [24] 3346 	ret
                           3347 ;------------------------------------------------------------
                           3348 ;Allocation info for local variables in function 'adc_start_single_conversion'
                           3349 ;------------------------------------------------------------
                           3350 ;adc_channel               Allocated with name '_adc_start_single_conversion_adc_channel_1_185'
                           3351 ;------------------------------------------------------------
                           3352 ;	../src/adc/src/adc_start_single_conversion.c:47: void adc_start_single_conversion(adc_channel_t adc_channel)
                           3353 ;	-----------------------------------------
                           3354 ;	 function adc_start_single_conversion
                           3355 ;	-----------------------------------------
   0B38                    3356 _adc_start_single_conversion:
   0B38 E5 82         [12] 3357 	mov	a,dpl
                           3358 ;	../src/adc/src/adc_start_single_conversion.c:49: adc_set_input_channel(adc_channel);
   0B3A 90r00r5E      [24] 3359 	mov	dptr,#_adc_start_single_conversion_adc_channel_1_185
   0B3D F0            [24] 3360 	movx	@dptr,a
   0B3E F5 82         [12] 3361 	mov	dpl,a
   0B40 12r0Br19      [24] 3362 	lcall	_adc_set_input_channel
                           3363 ;	../src/adc/src/adc_start_single_conversion.c:52: adc_power_up();
   0B43 43 D3 80      [24] 3364 	orl	_ADCCON1,#0x80
                           3365 ;	../src/adc/src/adc_start_single_conversion.c:53: nop(); nop(); nop(); nop(); //4 clock cycles must elapse before busy flag is set (datasheet v1.3, p. 165)
   0B46 00            [12] 3366 	nop 
   0B47 00            [12] 3367 	nop 
   0B48 00            [12] 3368 	nop 
   0B49 00            [12] 3369 	nop 
   0B4A 22            [24] 3370 	ret
                           3371 ;------------------------------------------------------------
                           3372 ;Allocation info for local variables in function 'adc_start_single_conversion_get_value'
                           3373 ;------------------------------------------------------------
                           3374 ;adc_channel               Allocated with name '_adc_start_single_conversion_get_value_adc_channel_1_187'
                           3375 ;------------------------------------------------------------
                           3376 ;	../src/adc/src/adc_start_single_conversion_get_value.c:48: uint16_t adc_start_single_conversion_get_value(adc_channel_t adc_channel)
                           3377 ;	-----------------------------------------
                           3378 ;	 function adc_start_single_conversion_get_value
                           3379 ;	-----------------------------------------
   0B4B                    3380 _adc_start_single_conversion_get_value:
   0B4B E5 82         [12] 3381 	mov	a,dpl
                           3382 ;	../src/adc/src/adc_start_single_conversion_get_value.c:50: adc_start_single_conversion(adc_channel);
   0B4D 90r00r5F      [24] 3383 	mov	dptr,#_adc_start_single_conversion_get_value_adc_channel_1_187
   0B50 F0            [24] 3384 	movx	@dptr,a
   0B51 F5 82         [12] 3385 	mov	dpl,a
   0B53 12r0Br38      [24] 3386 	lcall	_adc_start_single_conversion
                           3387 ;	../src/adc/src/adc_start_single_conversion_get_value.c:52: while(adc_is_conversion_in_progress());
   0B56                    3388 00101$:
   0B56 74 40         [12] 3389 	mov	a,#0x40
   0B58 55 D3         [12] 3390 	anl	a,_ADCCON1
   0B5A FF            [12] 3391 	mov	r7,a
   0B5B BF 40 02      [24] 3392 	cjne	r7,#0x40,00112$
   0B5E 80 F6         [24] 3393 	sjmp	00101$
   0B60                    3394 00112$:
                           3395 ;	../src/adc/src/adc_start_single_conversion_get_value.c:54: return adc_get_result();
   0B60 85 D5 82      [24] 3396 	mov	dpl,((_ADCDAT >> 0) & 0xFF)
   0B63 85 D4 83      [24] 3397 	mov	dph,((_ADCDAT >> 8) & 0xFF)
   0B66 22            [24] 3398 	ret
                           3399 ;------------------------------------------------------------
                           3400 ;Allocation info for local variables in function 'timer0_configure'
                           3401 ;------------------------------------------------------------
                           3402 ;t0_val                    Allocated with name '_timer0_configure_PARM_2'
                           3403 ;timer0_config_options     Allocated with name '_timer0_configure_timer0_config_options_1_190'
                           3404 ;------------------------------------------------------------
                           3405 ;	../src/timer0/src/timer0_configure.c:53: void timer0_configure(uint8_t timer0_config_options, uint16_t t0_val)
                           3406 ;	-----------------------------------------
                           3407 ;	 function timer0_configure
                           3408 ;	-----------------------------------------
   0B67                    3409 _timer0_configure:
   0B67 E5 82         [12] 3410 	mov	a,dpl
                           3411 ;	../src/timer0/src/timer0_configure.c:56: if((timer0_config_options & TMOD_MODE0_MASK) == TIMER0_CONFIG_OPTION_MODE_2_8_BIT_AUTO_RLD_TMR)
   0B69 90r00r62      [24] 3412 	mov	dptr,#_timer0_configure_timer0_config_options_1_190
   0B6C F0            [24] 3413 	movx	@dptr,a
   0B6D FF            [12] 3414 	mov	r7,a
   0B6E 74 03         [12] 3415 	mov	a,#0x03
   0B70 5F            [12] 3416 	anl	a,r7
   0B71 FE            [12] 3417 	mov	r6,a
   0B72 BE 02 0E      [24] 3418 	cjne	r6,#0x02,00102$
                           3419 ;	../src/timer0/src/timer0_configure.c:58: TH0 = (uint8_t)t0_val;
   0B75 90r00r60      [24] 3420 	mov	dptr,#_timer0_configure_PARM_2
   0B78 E0            [24] 3421 	movx	a,@dptr
   0B79 FD            [12] 3422 	mov	r5,a
   0B7A A3            [24] 3423 	inc	dptr
   0B7B E0            [24] 3424 	movx	a,@dptr
   0B7C FE            [12] 3425 	mov	r6,a
   0B7D 8D 8C         [24] 3426 	mov	_TH0,r5
                           3427 ;	../src/timer0/src/timer0_configure.c:59: TL0 = (uint8_t)t0_val;
   0B7F 8D 8A         [24] 3428 	mov	_TL0,r5
   0B81 80 0A         [24] 3429 	sjmp	00103$
   0B83                    3430 00102$:
                           3431 ;	../src/timer0/src/timer0_configure.c:63: timer0_set_t0_val(t0_val);
   0B83 90r00r60      [24] 3432 	mov	dptr,#_timer0_configure_PARM_2
   0B86 E0            [24] 3433 	movx	a,@dptr
   0B87 F5 8A         [12] 3434 	mov	((_T0 >> 0) & 0xFF),a
   0B89 A3            [24] 3435 	inc	dptr
   0B8A E0            [24] 3436 	movx	a,@dptr
   0B8B F5 8C         [12] 3437 	mov	((_T0 >> 8) & 0xFF),a
   0B8D                    3438 00103$:
                           3439 ;	../src/timer0/src/timer0_configure.c:67: TMOD = (TMOD & ~TIMER0_CONFIG_OPTION_TMOD_MASK) | (timer0_config_options & TIMER0_CONFIG_OPTION_TMOD_MASK);
   0B8D AE 89         [24] 3440 	mov	r6,_TMOD
   0B8F 53 06 F0      [24] 3441 	anl	ar6,#0xF0
   0B92 53 07 0F      [24] 3442 	anl	ar7,#0x0F
   0B95 EF            [12] 3443 	mov	a,r7
   0B96 4E            [12] 3444 	orl	a,r6
   0B97 F5 89         [12] 3445 	mov	_TMOD,a
   0B99 22            [24] 3446 	ret
                           3447 ;------------------------------------------------------------
                           3448 ;Allocation info for local variables in function 'timer1_configure'
                           3449 ;------------------------------------------------------------
                           3450 ;t1_val                    Allocated with name '_timer1_configure_PARM_2'
                           3451 ;timer1_config_options     Allocated with name '_timer1_configure_timer1_config_options_1_195'
                           3452 ;------------------------------------------------------------
                           3453 ;	../src/timer1/src/timer1_configure.c:53: void timer1_configure(uint8_t timer1_config_options, uint16_t t1_val)
                           3454 ;	-----------------------------------------
                           3455 ;	 function timer1_configure
                           3456 ;	-----------------------------------------
   0B9A                    3457 _timer1_configure:
   0B9A E5 82         [12] 3458 	mov	a,dpl
                           3459 ;	../src/timer1/src/timer1_configure.c:56: if((timer1_config_options & TMOD_MODE1_MASK) == TIMER1_CONFIG_OPTION_MODE_2_8_BIT_AUTO_RLD_TMR)
   0B9C 90r00r65      [24] 3460 	mov	dptr,#_timer1_configure_timer1_config_options_1_195
   0B9F F0            [24] 3461 	movx	@dptr,a
   0BA0 FF            [12] 3462 	mov	r7,a
   0BA1 74 30         [12] 3463 	mov	a,#0x30
   0BA3 5F            [12] 3464 	anl	a,r7
   0BA4 FE            [12] 3465 	mov	r6,a
   0BA5 BE 20 0E      [24] 3466 	cjne	r6,#0x20,00102$
                           3467 ;	../src/timer1/src/timer1_configure.c:58: TH1 = (uint8_t)t1_val;
   0BA8 90r00r63      [24] 3468 	mov	dptr,#_timer1_configure_PARM_2
   0BAB E0            [24] 3469 	movx	a,@dptr
   0BAC FD            [12] 3470 	mov	r5,a
   0BAD A3            [24] 3471 	inc	dptr
   0BAE E0            [24] 3472 	movx	a,@dptr
   0BAF FE            [12] 3473 	mov	r6,a
   0BB0 8D 8D         [24] 3474 	mov	_TH1,r5
                           3475 ;	../src/timer1/src/timer1_configure.c:59: TL1 = (uint8_t)t1_val;
   0BB2 8D 8B         [24] 3476 	mov	_TL1,r5
   0BB4 80 0A         [24] 3477 	sjmp	00103$
   0BB6                    3478 00102$:
                           3479 ;	../src/timer1/src/timer1_configure.c:63: timer1_set_t1_val(t1_val);
   0BB6 90r00r63      [24] 3480 	mov	dptr,#_timer1_configure_PARM_2
   0BB9 E0            [24] 3481 	movx	a,@dptr
   0BBA F5 8B         [12] 3482 	mov	((_T1 >> 0) & 0xFF),a
   0BBC A3            [24] 3483 	inc	dptr
   0BBD E0            [24] 3484 	movx	a,@dptr
   0BBE F5 8D         [12] 3485 	mov	((_T1 >> 8) & 0xFF),a
   0BC0                    3486 00103$:
                           3487 ;	../src/timer1/src/timer1_configure.c:67: TMOD = (TMOD & ~TIMER1_CONFIG_OPTION_TMOD_MASK) | (timer1_config_options & TIMER1_CONFIG_OPTION_TMOD_MASK);
   0BC0 AE 89         [24] 3488 	mov	r6,_TMOD
   0BC2 53 06 0F      [24] 3489 	anl	ar6,#0x0F
   0BC5 53 07 F0      [24] 3490 	anl	ar7,#0xF0
   0BC8 EF            [12] 3491 	mov	a,r7
   0BC9 4E            [12] 3492 	orl	a,r6
   0BCA F5 89         [12] 3493 	mov	_TMOD,a
   0BCC 22            [24] 3494 	ret
                           3495 ;------------------------------------------------------------
                           3496 ;Allocation info for local variables in function 'uart_configure_manual_baud_calc'
                           3497 ;------------------------------------------------------------
                           3498 ;s0rel_val_if_br_gen_or_th1_val_if_tmr1 Allocated with name '_uart_configure_manual_baud_calc_PARM_2'
                           3499 ;uart_config_options       Allocated with name '_uart_configure_manual_baud_calc_uart_config_options_1_205'
                           3500 ;------------------------------------------------------------
                           3501 ;	../src/uart/src/uart_configure_manual_baud_calc.c:55: void uart_configure_manual_baud_calc(uint8_t uart_config_options, uint16_t s0rel_val_if_br_gen_or_th1_val_if_tmr1)
                           3502 ;	-----------------------------------------
                           3503 ;	 function uart_configure_manual_baud_calc
                           3504 ;	-----------------------------------------
   0BCD                    3505 _uart_configure_manual_baud_calc:
   0BCD E5 82         [12] 3506 	mov	a,dpl
                           3507 ;	../src/uart/src/uart_configure_manual_baud_calc.c:58: if(uart_config_options & UART_CONFIG_OPTION_BIT_SMOD_SET)
   0BCF 90r00r68      [24] 3508 	mov	dptr,#_uart_configure_manual_baud_calc_uart_config_options_1_205
   0BD2 F0            [24] 3509 	movx	@dptr,a
   0BD3 FF            [12] 3510 	mov	r7,a
   0BD4 30 E2 05      [24] 3511 	jnb	acc.2,00102$
                           3512 ;	../src/uart/src/uart_configure_manual_baud_calc.c:60: reg_bits_set(PCON, PCON_SMOD);
   0BD7 43 87 80      [24] 3513 	orl	_PCON,#0x80
   0BDA 80 07         [24] 3514 	sjmp	00103$
   0BDC                    3515 00102$:
                           3516 ;	../src/uart/src/uart_configure_manual_baud_calc.c:64: reg_bits_clear(PCON, PCON_SMOD);
   0BDC AE 87         [24] 3517 	mov	r6,_PCON
   0BDE 74 7F         [12] 3518 	mov	a,#0x7F
   0BE0 5E            [12] 3519 	anl	a,r6
   0BE1 F5 87         [12] 3520 	mov	_PCON,a
   0BE3                    3521 00103$:
                           3522 ;	../src/uart/src/uart_configure_manual_baud_calc.c:68: if(((uart_config_options & UART_CONFIG_OPTION_MODE_MASK) == UART_CONFIG_OPTION_MODE_1_UART_8_BIT) ||
   0BE3 74 C0         [12] 3523 	mov	a,#0xC0
   0BE5 5F            [12] 3524 	anl	a,r7
   0BE6 FE            [12] 3525 	mov	r6,a
   0BE7 BE 40 02      [24] 3526 	cjne	r6,#0x40,00122$
   0BEA 80 07         [24] 3527 	sjmp	00107$
   0BEC                    3528 00122$:
                           3529 ;	../src/uart/src/uart_configure_manual_baud_calc.c:69: ((uart_config_options & UART_CONFIG_OPTION_MODE_MASK) == UART_CONFIG_OPTION_MODE_3_UART_9_BIT))
   0BEC 74 C0         [12] 3530 	mov	a,#0xC0
   0BEE 5F            [12] 3531 	anl	a,r7
   0BEF FE            [12] 3532 	mov	r6,a
   0BF0 BE C0 32      [24] 3533 	cjne	r6,#0xC0,00108$
   0BF3                    3534 00107$:
                           3535 ;	../src/uart/src/uart_configure_manual_baud_calc.c:72: if((uart_config_options & UART_CONFIG_OPTION_CLOCK_MASK) == UART_CONFIG_OPTION_CLOCK_FOR_MODES_1_3_USE_BR_GEN)
   0BF3 74 02         [12] 3536 	mov	a,#0x02
   0BF5 5F            [12] 3537 	anl	a,r7
   0BF6 FE            [12] 3538 	mov	r6,a
   0BF7 BE 02 0E      [24] 3539 	cjne	r6,#0x02,00105$
                           3540 ;	../src/uart/src/uart_configure_manual_baud_calc.c:74: S0REL = s0rel_val_if_br_gen_or_th1_val_if_tmr1; //set S0REL to the value requested
   0BFA 90r00r66      [24] 3541 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   0BFD E0            [24] 3542 	movx	a,@dptr
   0BFE F5 AA         [12] 3543 	mov	((_S0REL >> 0) & 0xFF),a
   0C00 A3            [24] 3544 	inc	dptr
   0C01 E0            [24] 3545 	movx	a,@dptr
   0C02 F5 BA         [12] 3546 	mov	((_S0REL >> 8) & 0xFF),a
                           3547 ;	../src/uart/src/uart_configure_manual_baud_calc.c:75: sbit_set(ADCON_SB_BD); //enable BR generator
   0C04 D2 DF         [12] 3548 	setb _ADCON_SB_BD 
   0C06 80 1D         [24] 3549 	sjmp	00108$
   0C08                    3550 00105$:
                           3551 ;	../src/uart/src/uart_configure_manual_baud_calc.c:79: sbit_clear(ADCON_SB_BD); //disable BR generator and use TMR1 overflow
   0C08 C2 DF         [12] 3552 	clr _ADCON_SB_BD 
                           3553 ;	../src/uart/src/uart_configure_manual_baud_calc.c:85: (uint8_t)s0rel_val_if_br_gen_or_th1_val_if_tmr1);
   0C0A 90r00r66      [24] 3554 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   0C0D E0            [24] 3555 	movx	a,@dptr
   0C0E FD            [12] 3556 	mov	r5,a
   0C0F A3            [24] 3557 	inc	dptr
   0C10 E0            [24] 3558 	movx	a,@dptr
   0C11 90r00r63      [24] 3559 	mov	dptr,#_timer1_configure_PARM_2
   0C14 ED            [12] 3560 	mov	a,r5
   0C15 F0            [24] 3561 	movx	@dptr,a
   0C16 E4            [12] 3562 	clr	a
   0C17 A3            [24] 3563 	inc	dptr
   0C18 F0            [24] 3564 	movx	@dptr,a
   0C19 75 82 20      [24] 3565 	mov	dpl,#0x20
   0C1C C0 07         [24] 3566 	push	ar7
   0C1E 12r0Br9A      [24] 3567 	lcall	_timer1_configure
   0C21 D0 07         [24] 3568 	pop	ar7
                           3569 ;	../src/uart/src/uart_configure_manual_baud_calc.c:87: timer1_run(); //enable the timer
   0C23 D2 8E         [12] 3570 	setb _TCON_SB_TR1 
   0C25                    3571 00108$:
                           3572 ;	../src/uart/src/uart_configure_manual_baud_calc.c:92: S0CON = uart_config_options & UART_CONFIG_OPTION_S0CON_MASK;
   0C25 74 F0         [12] 3573 	mov	a,#0xF0
   0C27 5F            [12] 3574 	anl	a,r7
   0C28 F5 98         [12] 3575 	mov	_S0CON,a
   0C2A 22            [24] 3576 	ret
                           3577 ;------------------------------------------------------------
                           3578 ;Allocation info for local variables in function 'uart_calc_actual_baud_rate_from_s0rel'
                           3579 ;------------------------------------------------------------
                           3580 ;smod_bit_value            Allocated with name '_uart_calc_actual_baud_rate_from_s0rel_PARM_2'
                           3581 ;s0rel_reg_value           Allocated with name '_uart_calc_actual_baud_rate_from_s0rel_s0rel_reg_value_1_212'
                           3582 ;------------------------------------------------------------
                           3583 ;	../src/uart/src/uart_calc_actual_baud_rate_from_s0rel.c:48: uint32_t uart_calc_actual_baud_rate_from_s0rel(uint16_t s0rel_reg_value, bool smod_bit_value)
                           3584 ;	-----------------------------------------
                           3585 ;	 function uart_calc_actual_baud_rate_from_s0rel
                           3586 ;	-----------------------------------------
   0C2B                    3587 _uart_calc_actual_baud_rate_from_s0rel:
   0C2B AF 83         [24] 3588 	mov	r7,dph
   0C2D E5 82         [12] 3589 	mov	a,dpl
   0C2F 90r00r6A      [24] 3590 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_s0rel_reg_value_1_212
   0C32 F0            [24] 3591 	movx	@dptr,a
   0C33 EF            [12] 3592 	mov	a,r7
   0C34 A3            [24] 3593 	inc	dptr
   0C35 F0            [24] 3594 	movx	@dptr,a
                           3595 ;	../src/uart/src/uart_calc_actual_baud_rate_from_s0rel.c:57: return (uint32_t)(((((uint32_t)(2 * ((smod_bit_value != 0) ? 2 : 1) * pwr_clk_mgmt_get_cclk_freq_in_hz())) / ((uint32_t)(64 * (1024 - s0rel_reg_value)))) + 1) / 2);
   0C36 90r00r69      [24] 3596 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_PARM_2
   0C39 E0            [24] 3597 	movx	a,@dptr
   0C3A FF            [12] 3598 	mov	r7,a
   0C3B 60 04         [24] 3599 	jz	00103$
   0C3D 7F 02         [12] 3600 	mov	r7,#0x02
   0C3F 80 02         [24] 3601 	sjmp	00104$
   0C41                    3602 00103$:
   0C41 7F 01         [12] 3603 	mov	r7,#0x01
   0C43                    3604 00104$:
   0C43 EF            [12] 3605 	mov	a,r7
   0C44 75 F0 02      [24] 3606 	mov	b,#0x02
   0C47 A4            [48] 3607 	mul	ab
   0C48 FF            [12] 3608 	mov	r7,a
   0C49 AE F0         [24] 3609 	mov	r6,b
   0C4B C0 07         [24] 3610 	push	ar7
   0C4D C0 06         [24] 3611 	push	ar6
   0C4F 12r09r42      [24] 3612 	lcall	_pwr_clk_mgmt_get_cclk_freq_in_hz
   0C52 AA 82         [24] 3613 	mov	r2,dpl
   0C54 AB 83         [24] 3614 	mov	r3,dph
   0C56 AC F0         [24] 3615 	mov	r4,b
   0C58 FD            [12] 3616 	mov	r5,a
   0C59 D0 06         [24] 3617 	pop	ar6
   0C5B D0 07         [24] 3618 	pop	ar7
   0C5D 8F 00         [24] 3619 	mov	ar0,r7
   0C5F EE            [12] 3620 	mov	a,r6
   0C60 F9            [12] 3621 	mov	r1,a
   0C61 33            [12] 3622 	rlc	a
   0C62 95 E0         [12] 3623 	subb	a,acc
   0C64 FE            [12] 3624 	mov	r6,a
   0C65 FF            [12] 3625 	mov	r7,a
   0C66 90r00r00      [24] 3626 	mov	dptr,#__mullong_PARM_2
   0C69 EA            [12] 3627 	mov	a,r2
   0C6A F0            [24] 3628 	movx	@dptr,a
   0C6B EB            [12] 3629 	mov	a,r3
   0C6C A3            [24] 3630 	inc	dptr
   0C6D F0            [24] 3631 	movx	@dptr,a
   0C6E EC            [12] 3632 	mov	a,r4
   0C6F A3            [24] 3633 	inc	dptr
   0C70 F0            [24] 3634 	movx	@dptr,a
   0C71 ED            [12] 3635 	mov	a,r5
   0C72 A3            [24] 3636 	inc	dptr
   0C73 F0            [24] 3637 	movx	@dptr,a
   0C74 88 82         [24] 3638 	mov	dpl,r0
   0C76 89 83         [24] 3639 	mov	dph,r1
   0C78 8E F0         [24] 3640 	mov	b,r6
   0C7A EF            [12] 3641 	mov	a,r7
   0C7B 12r00r00      [24] 3642 	lcall	__mullong
   0C7E AC 82         [24] 3643 	mov	r4,dpl
   0C80 AD 83         [24] 3644 	mov	r5,dph
   0C82 AE F0         [24] 3645 	mov	r6,b
   0C84 FF            [12] 3646 	mov	r7,a
   0C85 90r00r6A      [24] 3647 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_s0rel_reg_value_1_212
   0C88 E0            [24] 3648 	movx	a,@dptr
   0C89 FA            [12] 3649 	mov	r2,a
   0C8A A3            [24] 3650 	inc	dptr
   0C8B E0            [24] 3651 	movx	a,@dptr
   0C8C FB            [12] 3652 	mov	r3,a
   0C8D E4            [12] 3653 	clr	a
   0C8E C3            [12] 3654 	clr	c
   0C8F 9A            [12] 3655 	subb	a,r2
   0C90 FA            [12] 3656 	mov	r2,a
   0C91 74 04         [12] 3657 	mov	a,#0x04
   0C93 9B            [12] 3658 	subb	a,r3
   0C94 54 03         [12] 3659 	anl	a,#0x03
   0C96 A2 E0         [12] 3660 	mov	c,acc.0
   0C98 CA            [12] 3661 	xch	a,r2
   0C99 13            [12] 3662 	rrc	a
   0C9A CA            [12] 3663 	xch	a,r2
   0C9B 13            [12] 3664 	rrc	a
   0C9C A2 E0         [12] 3665 	mov	c,acc.0
   0C9E CA            [12] 3666 	xch	a,r2
   0C9F 13            [12] 3667 	rrc	a
   0CA0 CA            [12] 3668 	xch	a,r2
   0CA1 13            [12] 3669 	rrc	a
   0CA2 CA            [12] 3670 	xch	a,r2
   0CA3 FB            [12] 3671 	mov	r3,a
   0CA4 90r00r00      [24] 3672 	mov	dptr,#__divulong_PARM_2
   0CA7 EA            [12] 3673 	mov	a,r2
   0CA8 F0            [24] 3674 	movx	@dptr,a
   0CA9 EB            [12] 3675 	mov	a,r3
   0CAA A3            [24] 3676 	inc	dptr
   0CAB F0            [24] 3677 	movx	@dptr,a
   0CAC E4            [12] 3678 	clr	a
   0CAD A3            [24] 3679 	inc	dptr
   0CAE F0            [24] 3680 	movx	@dptr,a
   0CAF E4            [12] 3681 	clr	a
   0CB0 A3            [24] 3682 	inc	dptr
   0CB1 F0            [24] 3683 	movx	@dptr,a
   0CB2 8C 82         [24] 3684 	mov	dpl,r4
   0CB4 8D 83         [24] 3685 	mov	dph,r5
   0CB6 8E F0         [24] 3686 	mov	b,r6
   0CB8 EF            [12] 3687 	mov	a,r7
   0CB9 12r00r00      [24] 3688 	lcall	__divulong
   0CBC AC 82         [24] 3689 	mov	r4,dpl
   0CBE AD 83         [24] 3690 	mov	r5,dph
   0CC0 AE F0         [24] 3691 	mov	r6,b
   0CC2 FF            [12] 3692 	mov	r7,a
   0CC3 0C            [12] 3693 	inc	r4
   0CC4 BC 00 09      [24] 3694 	cjne	r4,#0x00,00109$
   0CC7 0D            [12] 3695 	inc	r5
   0CC8 BD 00 05      [24] 3696 	cjne	r5,#0x00,00109$
   0CCB 0E            [12] 3697 	inc	r6
   0CCC BE 00 01      [24] 3698 	cjne	r6,#0x00,00109$
   0CCF 0F            [12] 3699 	inc	r7
   0CD0                    3700 00109$:
   0CD0 EF            [12] 3701 	mov	a,r7
   0CD1 C3            [12] 3702 	clr	c
   0CD2 13            [12] 3703 	rrc	a
   0CD3 FF            [12] 3704 	mov	r7,a
   0CD4 EE            [12] 3705 	mov	a,r6
   0CD5 13            [12] 3706 	rrc	a
   0CD6 FE            [12] 3707 	mov	r6,a
   0CD7 ED            [12] 3708 	mov	a,r5
   0CD8 13            [12] 3709 	rrc	a
   0CD9 FD            [12] 3710 	mov	r5,a
   0CDA EC            [12] 3711 	mov	a,r4
   0CDB 13            [12] 3712 	rrc	a
   0CDC F5 82         [12] 3713 	mov	dpl,a
   0CDE 8D 83         [24] 3714 	mov	dph,r5
   0CE0 8E F0         [24] 3715 	mov	b,r6
   0CE2 EF            [12] 3716 	mov	a,r7
   0CE3 22            [24] 3717 	ret
                           3718 ;------------------------------------------------------------
                           3719 ;Allocation info for local variables in function 'uart_calc_actual_baud_rate_from_th1'
                           3720 ;------------------------------------------------------------
                           3721 ;smod_bit_value            Allocated with name '_uart_calc_actual_baud_rate_from_th1_PARM_2'
                           3722 ;th1_reg_value             Allocated with name '_uart_calc_actual_baud_rate_from_th1_th1_reg_value_1_214'
                           3723 ;------------------------------------------------------------
                           3724 ;	../src/uart/src/uart_calc_actual_baud_rate_from_th1.c:48: uint32_t uart_calc_actual_baud_rate_from_th1(uint8_t th1_reg_value, bool smod_bit_value)
                           3725 ;	-----------------------------------------
                           3726 ;	 function uart_calc_actual_baud_rate_from_th1
                           3727 ;	-----------------------------------------
   0CE4                    3728 _uart_calc_actual_baud_rate_from_th1:
   0CE4 E5 82         [12] 3729 	mov	a,dpl
   0CE6 90r00r6D      [24] 3730 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_th1_reg_value_1_214
   0CE9 F0            [24] 3731 	movx	@dptr,a
                           3732 ;	../src/uart/src/uart_calc_actual_baud_rate_from_th1.c:57: return (uint32_t)(((((uint32_t)(2 * ((smod_bit_value != 0) ? 2 : 1) * pwr_clk_mgmt_get_cclk_freq_in_hz())) / ((uint32_t)(384 * (256 - th1_reg_value)))) + 1) / 2);
   0CEA 90r00r6C      [24] 3733 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_PARM_2
   0CED E0            [24] 3734 	movx	a,@dptr
   0CEE FF            [12] 3735 	mov	r7,a
   0CEF 60 04         [24] 3736 	jz	00103$
   0CF1 7F 02         [12] 3737 	mov	r7,#0x02
   0CF3 80 02         [24] 3738 	sjmp	00104$
   0CF5                    3739 00103$:
   0CF5 7F 01         [12] 3740 	mov	r7,#0x01
   0CF7                    3741 00104$:
   0CF7 EF            [12] 3742 	mov	a,r7
   0CF8 75 F0 02      [24] 3743 	mov	b,#0x02
   0CFB A4            [48] 3744 	mul	ab
   0CFC FF            [12] 3745 	mov	r7,a
   0CFD AE F0         [24] 3746 	mov	r6,b
   0CFF C0 07         [24] 3747 	push	ar7
   0D01 C0 06         [24] 3748 	push	ar6
   0D03 12r09r42      [24] 3749 	lcall	_pwr_clk_mgmt_get_cclk_freq_in_hz
   0D06 AA 82         [24] 3750 	mov	r2,dpl
   0D08 AB 83         [24] 3751 	mov	r3,dph
   0D0A AC F0         [24] 3752 	mov	r4,b
   0D0C FD            [12] 3753 	mov	r5,a
   0D0D D0 06         [24] 3754 	pop	ar6
   0D0F D0 07         [24] 3755 	pop	ar7
   0D11 8F 00         [24] 3756 	mov	ar0,r7
   0D13 EE            [12] 3757 	mov	a,r6
   0D14 F9            [12] 3758 	mov	r1,a
   0D15 33            [12] 3759 	rlc	a
   0D16 95 E0         [12] 3760 	subb	a,acc
   0D18 FE            [12] 3761 	mov	r6,a
   0D19 FF            [12] 3762 	mov	r7,a
   0D1A 90r00r00      [24] 3763 	mov	dptr,#__mullong_PARM_2
   0D1D EA            [12] 3764 	mov	a,r2
   0D1E F0            [24] 3765 	movx	@dptr,a
   0D1F EB            [12] 3766 	mov	a,r3
   0D20 A3            [24] 3767 	inc	dptr
   0D21 F0            [24] 3768 	movx	@dptr,a
   0D22 EC            [12] 3769 	mov	a,r4
   0D23 A3            [24] 3770 	inc	dptr
   0D24 F0            [24] 3771 	movx	@dptr,a
   0D25 ED            [12] 3772 	mov	a,r5
   0D26 A3            [24] 3773 	inc	dptr
   0D27 F0            [24] 3774 	movx	@dptr,a
   0D28 88 82         [24] 3775 	mov	dpl,r0
   0D2A 89 83         [24] 3776 	mov	dph,r1
   0D2C 8E F0         [24] 3777 	mov	b,r6
   0D2E EF            [12] 3778 	mov	a,r7
   0D2F 12r00r00      [24] 3779 	lcall	__mullong
   0D32 AC 82         [24] 3780 	mov	r4,dpl
   0D34 AD 83         [24] 3781 	mov	r5,dph
   0D36 AE F0         [24] 3782 	mov	r6,b
   0D38 FF            [12] 3783 	mov	r7,a
   0D39 90r00r6D      [24] 3784 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_th1_reg_value_1_214
   0D3C E0            [24] 3785 	movx	a,@dptr
   0D3D FB            [12] 3786 	mov	r3,a
   0D3E 7A 00         [12] 3787 	mov	r2,#0x00
   0D40 90r00r00      [24] 3788 	mov	dptr,#__mulint_PARM_2
   0D43 E4            [12] 3789 	clr	a
   0D44 C3            [12] 3790 	clr	c
   0D45 9B            [12] 3791 	subb	a,r3
   0D46 F0            [24] 3792 	movx	@dptr,a
   0D47 74 01         [12] 3793 	mov	a,#0x01
   0D49 9A            [12] 3794 	subb	a,r2
   0D4A A3            [24] 3795 	inc	dptr
   0D4B F0            [24] 3796 	movx	@dptr,a
   0D4C 90 01 80      [24] 3797 	mov	dptr,#0x0180
   0D4F C0 07         [24] 3798 	push	ar7
   0D51 C0 06         [24] 3799 	push	ar6
   0D53 C0 05         [24] 3800 	push	ar5
   0D55 C0 04         [24] 3801 	push	ar4
   0D57 12r00r00      [24] 3802 	lcall	__mulint
   0D5A AA 82         [24] 3803 	mov	r2,dpl
   0D5C AB 83         [24] 3804 	mov	r3,dph
   0D5E D0 04         [24] 3805 	pop	ar4
   0D60 D0 05         [24] 3806 	pop	ar5
   0D62 D0 06         [24] 3807 	pop	ar6
   0D64 D0 07         [24] 3808 	pop	ar7
   0D66 90r00r00      [24] 3809 	mov	dptr,#__divulong_PARM_2
   0D69 EA            [12] 3810 	mov	a,r2
   0D6A F0            [24] 3811 	movx	@dptr,a
   0D6B EB            [12] 3812 	mov	a,r3
   0D6C A3            [24] 3813 	inc	dptr
   0D6D F0            [24] 3814 	movx	@dptr,a
   0D6E EB            [12] 3815 	mov	a,r3
   0D6F 33            [12] 3816 	rlc	a
   0D70 95 E0         [12] 3817 	subb	a,acc
   0D72 A3            [24] 3818 	inc	dptr
   0D73 F0            [24] 3819 	movx	@dptr,a
   0D74 A3            [24] 3820 	inc	dptr
   0D75 F0            [24] 3821 	movx	@dptr,a
   0D76 8C 82         [24] 3822 	mov	dpl,r4
   0D78 8D 83         [24] 3823 	mov	dph,r5
   0D7A 8E F0         [24] 3824 	mov	b,r6
   0D7C EF            [12] 3825 	mov	a,r7
   0D7D 12r00r00      [24] 3826 	lcall	__divulong
   0D80 AC 82         [24] 3827 	mov	r4,dpl
   0D82 AD 83         [24] 3828 	mov	r5,dph
   0D84 AE F0         [24] 3829 	mov	r6,b
   0D86 FF            [12] 3830 	mov	r7,a
   0D87 0C            [12] 3831 	inc	r4
   0D88 BC 00 09      [24] 3832 	cjne	r4,#0x00,00109$
   0D8B 0D            [12] 3833 	inc	r5
   0D8C BD 00 05      [24] 3834 	cjne	r5,#0x00,00109$
   0D8F 0E            [12] 3835 	inc	r6
   0D90 BE 00 01      [24] 3836 	cjne	r6,#0x00,00109$
   0D93 0F            [12] 3837 	inc	r7
   0D94                    3838 00109$:
   0D94 EF            [12] 3839 	mov	a,r7
   0D95 C3            [12] 3840 	clr	c
   0D96 13            [12] 3841 	rrc	a
   0D97 FF            [12] 3842 	mov	r7,a
   0D98 EE            [12] 3843 	mov	a,r6
   0D99 13            [12] 3844 	rrc	a
   0D9A FE            [12] 3845 	mov	r6,a
   0D9B ED            [12] 3846 	mov	a,r5
   0D9C 13            [12] 3847 	rrc	a
   0D9D FD            [12] 3848 	mov	r5,a
   0D9E EC            [12] 3849 	mov	a,r4
   0D9F 13            [12] 3850 	rrc	a
   0DA0 F5 82         [12] 3851 	mov	dpl,a
   0DA2 8D 83         [24] 3852 	mov	dph,r5
   0DA4 8E F0         [24] 3853 	mov	b,r6
   0DA6 EF            [12] 3854 	mov	a,r7
   0DA7 22            [24] 3855 	ret
                           3856 ;------------------------------------------------------------
                           3857 ;Allocation info for local variables in function 'uart_calc_s0rel_value'
                           3858 ;------------------------------------------------------------
                           3859 ;smod_bit_value            Allocated with name '_uart_calc_s0rel_value_PARM_2'
                           3860 ;desired_baud_rate         Allocated with name '_uart_calc_s0rel_value_desired_baud_rate_1_216'
                           3861 ;------------------------------------------------------------
                           3862 ;	../src/uart/src/uart_calc_s0rel_value.c:48: uint16_t uart_calc_s0rel_value(uint32_t desired_baud_rate, bool smod_bit_value)
                           3863 ;	-----------------------------------------
                           3864 ;	 function uart_calc_s0rel_value
                           3865 ;	-----------------------------------------
   0DA8                    3866 _uart_calc_s0rel_value:
   0DA8 AF 82         [24] 3867 	mov	r7,dpl
   0DAA AE 83         [24] 3868 	mov	r6,dph
   0DAC AD F0         [24] 3869 	mov	r5,b
   0DAE FC            [12] 3870 	mov	r4,a
   0DAF 90r00r6F      [24] 3871 	mov	dptr,#_uart_calc_s0rel_value_desired_baud_rate_1_216
   0DB2 EF            [12] 3872 	mov	a,r7
   0DB3 F0            [24] 3873 	movx	@dptr,a
   0DB4 EE            [12] 3874 	mov	a,r6
   0DB5 A3            [24] 3875 	inc	dptr
   0DB6 F0            [24] 3876 	movx	@dptr,a
   0DB7 ED            [12] 3877 	mov	a,r5
   0DB8 A3            [24] 3878 	inc	dptr
   0DB9 F0            [24] 3879 	movx	@dptr,a
   0DBA EC            [12] 3880 	mov	a,r4
   0DBB A3            [24] 3881 	inc	dptr
   0DBC F0            [24] 3882 	movx	@dptr,a
                           3883 ;	../src/uart/src/uart_calc_s0rel_value.c:57: return (uint16_t)(1024 - (((((uint32_t)(2 * ((smod_bit_value != 0) ? 2 : 1) * pwr_clk_mgmt_get_cclk_freq_in_hz())) / ((uint32_t)(64 * desired_baud_rate))) + 1) / 2));
   0DBD 90r00r6E      [24] 3884 	mov	dptr,#_uart_calc_s0rel_value_PARM_2
   0DC0 E0            [24] 3885 	movx	a,@dptr
   0DC1 FF            [12] 3886 	mov	r7,a
   0DC2 60 04         [24] 3887 	jz	00103$
   0DC4 7F 02         [12] 3888 	mov	r7,#0x02
   0DC6 80 02         [24] 3889 	sjmp	00104$
   0DC8                    3890 00103$:
   0DC8 7F 01         [12] 3891 	mov	r7,#0x01
   0DCA                    3892 00104$:
   0DCA EF            [12] 3893 	mov	a,r7
   0DCB 75 F0 02      [24] 3894 	mov	b,#0x02
   0DCE A4            [48] 3895 	mul	ab
   0DCF FF            [12] 3896 	mov	r7,a
   0DD0 AE F0         [24] 3897 	mov	r6,b
   0DD2 C0 07         [24] 3898 	push	ar7
   0DD4 C0 06         [24] 3899 	push	ar6
   0DD6 12r09r42      [24] 3900 	lcall	_pwr_clk_mgmt_get_cclk_freq_in_hz
   0DD9 AA 82         [24] 3901 	mov	r2,dpl
   0DDB AB 83         [24] 3902 	mov	r3,dph
   0DDD AC F0         [24] 3903 	mov	r4,b
   0DDF FD            [12] 3904 	mov	r5,a
   0DE0 D0 06         [24] 3905 	pop	ar6
   0DE2 D0 07         [24] 3906 	pop	ar7
   0DE4 8F 00         [24] 3907 	mov	ar0,r7
   0DE6 EE            [12] 3908 	mov	a,r6
   0DE7 F9            [12] 3909 	mov	r1,a
   0DE8 33            [12] 3910 	rlc	a
   0DE9 95 E0         [12] 3911 	subb	a,acc
   0DEB FE            [12] 3912 	mov	r6,a
   0DEC FF            [12] 3913 	mov	r7,a
   0DED 90r00r00      [24] 3914 	mov	dptr,#__mullong_PARM_2
   0DF0 EA            [12] 3915 	mov	a,r2
   0DF1 F0            [24] 3916 	movx	@dptr,a
   0DF2 EB            [12] 3917 	mov	a,r3
   0DF3 A3            [24] 3918 	inc	dptr
   0DF4 F0            [24] 3919 	movx	@dptr,a
   0DF5 EC            [12] 3920 	mov	a,r4
   0DF6 A3            [24] 3921 	inc	dptr
   0DF7 F0            [24] 3922 	movx	@dptr,a
   0DF8 ED            [12] 3923 	mov	a,r5
   0DF9 A3            [24] 3924 	inc	dptr
   0DFA F0            [24] 3925 	movx	@dptr,a
   0DFB 88 82         [24] 3926 	mov	dpl,r0
   0DFD 89 83         [24] 3927 	mov	dph,r1
   0DFF 8E F0         [24] 3928 	mov	b,r6
   0E01 EF            [12] 3929 	mov	a,r7
   0E02 12r00r00      [24] 3930 	lcall	__mullong
   0E05 AC 82         [24] 3931 	mov	r4,dpl
   0E07 AD 83         [24] 3932 	mov	r5,dph
   0E09 AE F0         [24] 3933 	mov	r6,b
   0E0B FF            [12] 3934 	mov	r7,a
   0E0C 90r00r6F      [24] 3935 	mov	dptr,#_uart_calc_s0rel_value_desired_baud_rate_1_216
   0E0F E0            [24] 3936 	movx	a,@dptr
   0E10 F8            [12] 3937 	mov	r0,a
   0E11 A3            [24] 3938 	inc	dptr
   0E12 E0            [24] 3939 	movx	a,@dptr
   0E13 F9            [12] 3940 	mov	r1,a
   0E14 A3            [24] 3941 	inc	dptr
   0E15 E0            [24] 3942 	movx	a,@dptr
   0E16 FA            [12] 3943 	mov	r2,a
   0E17 A3            [24] 3944 	inc	dptr
   0E18 E0            [24] 3945 	movx	a,@dptr
   0E19 54 03         [12] 3946 	anl	a,#0x03
   0E1B A2 E0         [12] 3947 	mov	c,acc.0
   0E1D CA            [12] 3948 	xch	a,r2
   0E1E 13            [12] 3949 	rrc	a
   0E1F CA            [12] 3950 	xch	a,r2
   0E20 13            [12] 3951 	rrc	a
   0E21 A2 E0         [12] 3952 	mov	c,acc.0
   0E23 CA            [12] 3953 	xch	a,r2
   0E24 13            [12] 3954 	rrc	a
   0E25 CA            [12] 3955 	xch	a,r2
   0E26 13            [12] 3956 	rrc	a
   0E27 CA            [12] 3957 	xch	a,r2
   0E28 FB            [12] 3958 	mov	r3,a
   0E29 E9            [12] 3959 	mov	a,r1
   0E2A 03            [12] 3960 	rr	a
   0E2B 03            [12] 3961 	rr	a
   0E2C 54 3F         [12] 3962 	anl	a,#0x3F
   0E2E 4A            [12] 3963 	orl	a,r2
   0E2F FA            [12] 3964 	mov	r2,a
   0E30 E9            [12] 3965 	mov	a,r1
   0E31 54 03         [12] 3966 	anl	a,#0x03
   0E33 A2 E0         [12] 3967 	mov	c,acc.0
   0E35 C8            [12] 3968 	xch	a,r0
   0E36 13            [12] 3969 	rrc	a
   0E37 C8            [12] 3970 	xch	a,r0
   0E38 13            [12] 3971 	rrc	a
   0E39 A2 E0         [12] 3972 	mov	c,acc.0
   0E3B C8            [12] 3973 	xch	a,r0
   0E3C 13            [12] 3974 	rrc	a
   0E3D C8            [12] 3975 	xch	a,r0
   0E3E 13            [12] 3976 	rrc	a
   0E3F C8            [12] 3977 	xch	a,r0
   0E40 F9            [12] 3978 	mov	r1,a
   0E41 90r00r00      [24] 3979 	mov	dptr,#__divulong_PARM_2
   0E44 E8            [12] 3980 	mov	a,r0
   0E45 F0            [24] 3981 	movx	@dptr,a
   0E46 E9            [12] 3982 	mov	a,r1
   0E47 A3            [24] 3983 	inc	dptr
   0E48 F0            [24] 3984 	movx	@dptr,a
   0E49 EA            [12] 3985 	mov	a,r2
   0E4A A3            [24] 3986 	inc	dptr
   0E4B F0            [24] 3987 	movx	@dptr,a
   0E4C EB            [12] 3988 	mov	a,r3
   0E4D A3            [24] 3989 	inc	dptr
   0E4E F0            [24] 3990 	movx	@dptr,a
   0E4F 8C 82         [24] 3991 	mov	dpl,r4
   0E51 8D 83         [24] 3992 	mov	dph,r5
   0E53 8E F0         [24] 3993 	mov	b,r6
   0E55 EF            [12] 3994 	mov	a,r7
   0E56 12r00r00      [24] 3995 	lcall	__divulong
   0E59 AC 82         [24] 3996 	mov	r4,dpl
   0E5B AD 83         [24] 3997 	mov	r5,dph
   0E5D AE F0         [24] 3998 	mov	r6,b
   0E5F FF            [12] 3999 	mov	r7,a
   0E60 0C            [12] 4000 	inc	r4
   0E61 BC 00 09      [24] 4001 	cjne	r4,#0x00,00109$
   0E64 0D            [12] 4002 	inc	r5
   0E65 BD 00 05      [24] 4003 	cjne	r5,#0x00,00109$
   0E68 0E            [12] 4004 	inc	r6
   0E69 BE 00 01      [24] 4005 	cjne	r6,#0x00,00109$
   0E6C 0F            [12] 4006 	inc	r7
   0E6D                    4007 00109$:
   0E6D EF            [12] 4008 	mov	a,r7
   0E6E C3            [12] 4009 	clr	c
   0E6F 13            [12] 4010 	rrc	a
   0E70 FF            [12] 4011 	mov	r7,a
   0E71 EE            [12] 4012 	mov	a,r6
   0E72 13            [12] 4013 	rrc	a
   0E73 FE            [12] 4014 	mov	r6,a
   0E74 ED            [12] 4015 	mov	a,r5
   0E75 13            [12] 4016 	rrc	a
   0E76 FD            [12] 4017 	mov	r5,a
   0E77 EC            [12] 4018 	mov	a,r4
   0E78 13            [12] 4019 	rrc	a
   0E79 FC            [12] 4020 	mov	r4,a
   0E7A E4            [12] 4021 	clr	a
   0E7B C3            [12] 4022 	clr	c
   0E7C 9C            [12] 4023 	subb	a,r4
   0E7D FC            [12] 4024 	mov	r4,a
   0E7E 74 04         [12] 4025 	mov	a,#0x04
   0E80 9D            [12] 4026 	subb	a,r5
   0E81 FD            [12] 4027 	mov	r5,a
   0E82 E4            [12] 4028 	clr	a
   0E83 9E            [12] 4029 	subb	a,r6
   0E84 E4            [12] 4030 	clr	a
   0E85 9F            [12] 4031 	subb	a,r7
   0E86 8C 82         [24] 4032 	mov	dpl,r4
   0E88 8D 83         [24] 4033 	mov	dph,r5
   0E8A 22            [24] 4034 	ret
                           4035 ;------------------------------------------------------------
                           4036 ;Allocation info for local variables in function 'uart_calc_th1_value'
                           4037 ;------------------------------------------------------------
                           4038 ;smod_bit_value            Allocated with name '_uart_calc_th1_value_PARM_2'
                           4039 ;desired_baud_rate         Allocated with name '_uart_calc_th1_value_desired_baud_rate_1_218'
                           4040 ;------------------------------------------------------------
                           4041 ;	../src/uart/src/uart_calc_th1_value.c:48: uint8_t uart_calc_th1_value(uint32_t desired_baud_rate, bool smod_bit_value)
                           4042 ;	-----------------------------------------
                           4043 ;	 function uart_calc_th1_value
                           4044 ;	-----------------------------------------
   0E8B                    4045 _uart_calc_th1_value:
   0E8B AF 82         [24] 4046 	mov	r7,dpl
   0E8D AE 83         [24] 4047 	mov	r6,dph
   0E8F AD F0         [24] 4048 	mov	r5,b
   0E91 FC            [12] 4049 	mov	r4,a
   0E92 90r00r74      [24] 4050 	mov	dptr,#_uart_calc_th1_value_desired_baud_rate_1_218
   0E95 EF            [12] 4051 	mov	a,r7
   0E96 F0            [24] 4052 	movx	@dptr,a
   0E97 EE            [12] 4053 	mov	a,r6
   0E98 A3            [24] 4054 	inc	dptr
   0E99 F0            [24] 4055 	movx	@dptr,a
   0E9A ED            [12] 4056 	mov	a,r5
   0E9B A3            [24] 4057 	inc	dptr
   0E9C F0            [24] 4058 	movx	@dptr,a
   0E9D EC            [12] 4059 	mov	a,r4
   0E9E A3            [24] 4060 	inc	dptr
   0E9F F0            [24] 4061 	movx	@dptr,a
                           4062 ;	../src/uart/src/uart_calc_th1_value.c:57: return (uint8_t)(256 - (((((uint32_t)(2 * ((smod_bit_value != 0) ? 2 : 1) * pwr_clk_mgmt_get_cclk_freq_in_hz())) / ((uint32_t)(384 * desired_baud_rate))) + 1) / 2));
   0EA0 90r00r73      [24] 4063 	mov	dptr,#_uart_calc_th1_value_PARM_2
   0EA3 E0            [24] 4064 	movx	a,@dptr
   0EA4 FF            [12] 4065 	mov	r7,a
   0EA5 60 04         [24] 4066 	jz	00103$
   0EA7 7F 02         [12] 4067 	mov	r7,#0x02
   0EA9 80 02         [24] 4068 	sjmp	00104$
   0EAB                    4069 00103$:
   0EAB 7F 01         [12] 4070 	mov	r7,#0x01
   0EAD                    4071 00104$:
   0EAD EF            [12] 4072 	mov	a,r7
   0EAE 75 F0 02      [24] 4073 	mov	b,#0x02
   0EB1 A4            [48] 4074 	mul	ab
   0EB2 FF            [12] 4075 	mov	r7,a
   0EB3 AE F0         [24] 4076 	mov	r6,b
   0EB5 C0 07         [24] 4077 	push	ar7
   0EB7 C0 06         [24] 4078 	push	ar6
   0EB9 12r09r42      [24] 4079 	lcall	_pwr_clk_mgmt_get_cclk_freq_in_hz
   0EBC AA 82         [24] 4080 	mov	r2,dpl
   0EBE AB 83         [24] 4081 	mov	r3,dph
   0EC0 AC F0         [24] 4082 	mov	r4,b
   0EC2 FD            [12] 4083 	mov	r5,a
   0EC3 D0 06         [24] 4084 	pop	ar6
   0EC5 D0 07         [24] 4085 	pop	ar7
   0EC7 8F 00         [24] 4086 	mov	ar0,r7
   0EC9 EE            [12] 4087 	mov	a,r6
   0ECA F9            [12] 4088 	mov	r1,a
   0ECB 33            [12] 4089 	rlc	a
   0ECC 95 E0         [12] 4090 	subb	a,acc
   0ECE FE            [12] 4091 	mov	r6,a
   0ECF FF            [12] 4092 	mov	r7,a
   0ED0 90r00r00      [24] 4093 	mov	dptr,#__mullong_PARM_2
   0ED3 EA            [12] 4094 	mov	a,r2
   0ED4 F0            [24] 4095 	movx	@dptr,a
   0ED5 EB            [12] 4096 	mov	a,r3
   0ED6 A3            [24] 4097 	inc	dptr
   0ED7 F0            [24] 4098 	movx	@dptr,a
   0ED8 EC            [12] 4099 	mov	a,r4
   0ED9 A3            [24] 4100 	inc	dptr
   0EDA F0            [24] 4101 	movx	@dptr,a
   0EDB ED            [12] 4102 	mov	a,r5
   0EDC A3            [24] 4103 	inc	dptr
   0EDD F0            [24] 4104 	movx	@dptr,a
   0EDE 88 82         [24] 4105 	mov	dpl,r0
   0EE0 89 83         [24] 4106 	mov	dph,r1
   0EE2 8E F0         [24] 4107 	mov	b,r6
   0EE4 EF            [12] 4108 	mov	a,r7
   0EE5 12r00r00      [24] 4109 	lcall	__mullong
   0EE8 AC 82         [24] 4110 	mov	r4,dpl
   0EEA AD 83         [24] 4111 	mov	r5,dph
   0EEC AE F0         [24] 4112 	mov	r6,b
   0EEE FF            [12] 4113 	mov	r7,a
   0EEF 90r00r74      [24] 4114 	mov	dptr,#_uart_calc_th1_value_desired_baud_rate_1_218
   0EF2 E0            [24] 4115 	movx	a,@dptr
   0EF3 F8            [12] 4116 	mov	r0,a
   0EF4 A3            [24] 4117 	inc	dptr
   0EF5 E0            [24] 4118 	movx	a,@dptr
   0EF6 F9            [12] 4119 	mov	r1,a
   0EF7 A3            [24] 4120 	inc	dptr
   0EF8 E0            [24] 4121 	movx	a,@dptr
   0EF9 FA            [12] 4122 	mov	r2,a
   0EFA A3            [24] 4123 	inc	dptr
   0EFB E0            [24] 4124 	movx	a,@dptr
   0EFC FB            [12] 4125 	mov	r3,a
   0EFD 90r00r00      [24] 4126 	mov	dptr,#__mullong_PARM_2
   0F00 E8            [12] 4127 	mov	a,r0
   0F01 F0            [24] 4128 	movx	@dptr,a
   0F02 E9            [12] 4129 	mov	a,r1
   0F03 A3            [24] 4130 	inc	dptr
   0F04 F0            [24] 4131 	movx	@dptr,a
   0F05 EA            [12] 4132 	mov	a,r2
   0F06 A3            [24] 4133 	inc	dptr
   0F07 F0            [24] 4134 	movx	@dptr,a
   0F08 EB            [12] 4135 	mov	a,r3
   0F09 A3            [24] 4136 	inc	dptr
   0F0A F0            [24] 4137 	movx	@dptr,a
   0F0B 90 01 80      [24] 4138 	mov	dptr,#0x0180
   0F0E E4            [12] 4139 	clr	a
   0F0F F5 F0         [12] 4140 	mov	b,a
   0F11 C0 07         [24] 4141 	push	ar7
   0F13 C0 06         [24] 4142 	push	ar6
   0F15 C0 05         [24] 4143 	push	ar5
   0F17 C0 04         [24] 4144 	push	ar4
   0F19 12r00r00      [24] 4145 	lcall	__mullong
   0F1C A8 82         [24] 4146 	mov	r0,dpl
   0F1E A9 83         [24] 4147 	mov	r1,dph
   0F20 AA F0         [24] 4148 	mov	r2,b
   0F22 FB            [12] 4149 	mov	r3,a
   0F23 D0 04         [24] 4150 	pop	ar4
   0F25 D0 05         [24] 4151 	pop	ar5
   0F27 D0 06         [24] 4152 	pop	ar6
   0F29 D0 07         [24] 4153 	pop	ar7
   0F2B 90r00r00      [24] 4154 	mov	dptr,#__divulong_PARM_2
   0F2E E8            [12] 4155 	mov	a,r0
   0F2F F0            [24] 4156 	movx	@dptr,a
   0F30 E9            [12] 4157 	mov	a,r1
   0F31 A3            [24] 4158 	inc	dptr
   0F32 F0            [24] 4159 	movx	@dptr,a
   0F33 EA            [12] 4160 	mov	a,r2
   0F34 A3            [24] 4161 	inc	dptr
   0F35 F0            [24] 4162 	movx	@dptr,a
   0F36 EB            [12] 4163 	mov	a,r3
   0F37 A3            [24] 4164 	inc	dptr
   0F38 F0            [24] 4165 	movx	@dptr,a
   0F39 8C 82         [24] 4166 	mov	dpl,r4
   0F3B 8D 83         [24] 4167 	mov	dph,r5
   0F3D 8E F0         [24] 4168 	mov	b,r6
   0F3F EF            [12] 4169 	mov	a,r7
   0F40 12r00r00      [24] 4170 	lcall	__divulong
   0F43 AC 82         [24] 4171 	mov	r4,dpl
   0F45 AD 83         [24] 4172 	mov	r5,dph
   0F47 AE F0         [24] 4173 	mov	r6,b
   0F49 FF            [12] 4174 	mov	r7,a
   0F4A 0C            [12] 4175 	inc	r4
   0F4B BC 00 09      [24] 4176 	cjne	r4,#0x00,00109$
   0F4E 0D            [12] 4177 	inc	r5
   0F4F BD 00 05      [24] 4178 	cjne	r5,#0x00,00109$
   0F52 0E            [12] 4179 	inc	r6
   0F53 BE 00 01      [24] 4180 	cjne	r6,#0x00,00109$
   0F56 0F            [12] 4181 	inc	r7
   0F57                    4182 00109$:
   0F57 EF            [12] 4183 	mov	a,r7
   0F58 C3            [12] 4184 	clr	c
   0F59 13            [12] 4185 	rrc	a
   0F5A EE            [12] 4186 	mov	a,r6
   0F5B 13            [12] 4187 	rrc	a
   0F5C ED            [12] 4188 	mov	a,r5
   0F5D 13            [12] 4189 	rrc	a
   0F5E EC            [12] 4190 	mov	a,r4
   0F5F 13            [12] 4191 	rrc	a
   0F60 FC            [12] 4192 	mov	r4,a
   0F61 C3            [12] 4193 	clr	c
   0F62 E4            [12] 4194 	clr	a
   0F63 9C            [12] 4195 	subb	a,r4
   0F64 F5 82         [12] 4196 	mov	dpl,a
   0F66 22            [24] 4197 	ret
                           4198 ;------------------------------------------------------------
                           4199 ;Allocation info for local variables in function 'uart_configure_auto_baud_calc'
                           4200 ;------------------------------------------------------------
                           4201 ;sloc0                     Allocated with name '_uart_configure_auto_baud_calc_sloc0_1_0'
                           4202 ;sloc1                     Allocated with name '_uart_configure_auto_baud_calc_sloc1_1_0'
                           4203 ;sloc2                     Allocated with name '_uart_configure_auto_baud_calc_sloc2_1_0'
                           4204 ;sloc3                     Allocated with name '_uart_configure_auto_baud_calc_sloc3_1_0'
                           4205 ;baud_rate                 Allocated with name '_uart_configure_auto_baud_calc_PARM_2'
                           4206 ;uart_config_options       Allocated with name '_uart_configure_auto_baud_calc_uart_config_options_1_220'
                           4207 ;calc_br_with_smod_cleared Allocated with name '_uart_configure_auto_baud_calc_calc_br_with_smod_cleared_2_222'
                           4208 ;calc_br_with_smod_set     Allocated with name '_uart_configure_auto_baud_calc_calc_br_with_smod_set_2_222'
                           4209 ;error_calc_br_with_smod_cleared Allocated with name '_uart_configure_auto_baud_calc_error_calc_br_with_smod_cleared_2_222'
                           4210 ;error_calc_br_with_smod_set Allocated with name '_uart_configure_auto_baud_calc_error_calc_br_with_smod_set_2_222'
                           4211 ;s0rel_with_smod_cleared   Allocated with name '_uart_configure_auto_baud_calc_s0rel_with_smod_cleared_3_223'
                           4212 ;s0rel_with_smod_set       Allocated with name '_uart_configure_auto_baud_calc_s0rel_with_smod_set_3_223'
                           4213 ;th1_with_smod_cleared     Allocated with name '_uart_configure_auto_baud_calc_th1_with_smod_cleared_3_226'
                           4214 ;th1_with_smod_set         Allocated with name '_uart_configure_auto_baud_calc_th1_with_smod_set_3_226'
                           4215 ;------------------------------------------------------------
                           4216 ;	../src/uart/src/uart_configure_auto_baud_calc.c:48: void uart_configure_auto_baud_calc(uint8_t uart_config_options, uint32_t baud_rate)
                           4217 ;	-----------------------------------------
                           4218 ;	 function uart_configure_auto_baud_calc
                           4219 ;	-----------------------------------------
   0F67                    4220 _uart_configure_auto_baud_calc:
   0F67 E5 82         [12] 4221 	mov	a,dpl
                           4222 ;	../src/uart/src/uart_configure_auto_baud_calc.c:51: if(((uart_config_options & UART_CONFIG_OPTION_MODE_MASK) == UART_CONFIG_OPTION_MODE_1_UART_8_BIT) ||
   0F69 90r00r7C      [24] 4223 	mov	dptr,#_uart_configure_auto_baud_calc_uart_config_options_1_220
   0F6C F0            [24] 4224 	movx	@dptr,a
   0F6D FF            [12] 4225 	mov	r7,a
   0F6E 74 C0         [12] 4226 	mov	a,#0xC0
   0F70 5F            [12] 4227 	anl	a,r7
   0F71 FE            [12] 4228 	mov	r6,a
   0F72 BE 40 02      [24] 4229 	cjne	r6,#0x40,00147$
   0F75 80 0A         [24] 4230 	sjmp	00110$
   0F77                    4231 00147$:
                           4232 ;	../src/uart/src/uart_configure_auto_baud_calc.c:52: ((uart_config_options & UART_CONFIG_OPTION_MODE_MASK) == UART_CONFIG_OPTION_MODE_3_UART_9_BIT))
   0F77 74 C0         [12] 4233 	mov	a,#0xC0
   0F79 5F            [12] 4234 	anl	a,r7
   0F7A FE            [12] 4235 	mov	r6,a
   0F7B BE C0 02      [24] 4236 	cjne	r6,#0xC0,00148$
   0F7E 80 01         [24] 4237 	sjmp	00149$
   0F80                    4238 00148$:
   0F80 22            [24] 4239 	ret
   0F81                    4240 00149$:
   0F81                    4241 00110$:
                           4242 ;	../src/uart/src/uart_configure_auto_baud_calc.c:58: if((uart_config_options & UART_CONFIG_OPTION_CLOCK_MASK) == UART_CONFIG_OPTION_CLOCK_FOR_MODES_1_3_USE_BR_GEN)
   0F81 74 02         [12] 4243 	mov	a,#0x02
   0F83 5F            [12] 4244 	anl	a,r7
   0F84 FE            [12] 4245 	mov	r6,a
   0F85 BE 02 02      [24] 4246 	cjne	r6,#0x02,00150$
   0F88 80 03         [24] 4247 	sjmp	00151$
   0F8A                    4248 00150$:
   0F8A 02r10rDB      [24] 4249 	ljmp	00108$
   0F8D                    4250 00151$:
                           4251 ;	../src/uart/src/uart_configure_auto_baud_calc.c:63: s0rel_with_smod_cleared = uart_calc_s0rel_value(baud_rate, 0);
   0F8D 90r00r78      [24] 4252 	mov	dptr,#_uart_configure_auto_baud_calc_PARM_2
   0F90 E0            [24] 4253 	movx	a,@dptr
   0F91 FB            [12] 4254 	mov	r3,a
   0F92 A3            [24] 4255 	inc	dptr
   0F93 E0            [24] 4256 	movx	a,@dptr
   0F94 FC            [12] 4257 	mov	r4,a
   0F95 A3            [24] 4258 	inc	dptr
   0F96 E0            [24] 4259 	movx	a,@dptr
   0F97 FD            [12] 4260 	mov	r5,a
   0F98 A3            [24] 4261 	inc	dptr
   0F99 E0            [24] 4262 	movx	a,@dptr
   0F9A FE            [12] 4263 	mov	r6,a
   0F9B 90r00r6E      [24] 4264 	mov	dptr,#_uart_calc_s0rel_value_PARM_2
   0F9E E4            [12] 4265 	clr	a
   0F9F F0            [24] 4266 	movx	@dptr,a
   0FA0 8B 82         [24] 4267 	mov	dpl,r3
   0FA2 8C 83         [24] 4268 	mov	dph,r4
   0FA4 8D F0         [24] 4269 	mov	b,r5
   0FA6 EE            [12] 4270 	mov	a,r6
   0FA7 C0 07         [24] 4271 	push	ar7
   0FA9 C0 06         [24] 4272 	push	ar6
   0FAB C0 05         [24] 4273 	push	ar5
   0FAD C0 04         [24] 4274 	push	ar4
   0FAF C0 03         [24] 4275 	push	ar3
   0FB1 12r0DrA8      [24] 4276 	lcall	_uart_calc_s0rel_value
   0FB4 A9 82         [24] 4277 	mov	r1,dpl
   0FB6 AA 83         [24] 4278 	mov	r2,dph
   0FB8 D0 03         [24] 4279 	pop	ar3
   0FBA D0 04         [24] 4280 	pop	ar4
   0FBC D0 05         [24] 4281 	pop	ar5
   0FBE D0 06         [24] 4282 	pop	ar6
                           4283 ;	../src/uart/src/uart_configure_auto_baud_calc.c:64: s0rel_with_smod_set = uart_calc_s0rel_value(baud_rate, 1);
   0FC0 90r00r6E      [24] 4284 	mov	dptr,#_uart_calc_s0rel_value_PARM_2
   0FC3 74 01         [12] 4285 	mov	a,#0x01
   0FC5 F0            [24] 4286 	movx	@dptr,a
   0FC6 8B 82         [24] 4287 	mov	dpl,r3
   0FC8 8C 83         [24] 4288 	mov	dph,r4
   0FCA 8D F0         [24] 4289 	mov	b,r5
   0FCC EE            [12] 4290 	mov	a,r6
   0FCD C0 06         [24] 4291 	push	ar6
   0FCF C0 05         [24] 4292 	push	ar5
   0FD1 C0 04         [24] 4293 	push	ar4
   0FD3 C0 03         [24] 4294 	push	ar3
   0FD5 C0 02         [24] 4295 	push	ar2
   0FD7 C0 01         [24] 4296 	push	ar1
   0FD9 12r0DrA8      [24] 4297 	lcall	_uart_calc_s0rel_value
   0FDC 85 82*04      [24] 4298 	mov	_uart_configure_auto_baud_calc_sloc0_1_0,dpl
   0FDF 85 83*05      [24] 4299 	mov	(_uart_configure_auto_baud_calc_sloc0_1_0 + 1),dph
   0FE2 D0 01         [24] 4300 	pop	ar1
   0FE4 D0 02         [24] 4301 	pop	ar2
                           4302 ;	../src/uart/src/uart_configure_auto_baud_calc.c:67: calc_br_with_smod_cleared = uart_calc_actual_baud_rate_from_s0rel(s0rel_with_smod_cleared, false);
   0FE6 90r00r69      [24] 4303 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_PARM_2
   0FE9 E4            [12] 4304 	clr	a
   0FEA F0            [24] 4305 	movx	@dptr,a
   0FEB 89 82         [24] 4306 	mov	dpl,r1
   0FED 8A 83         [24] 4307 	mov	dph,r2
   0FEF C0 02         [24] 4308 	push	ar2
   0FF1 C0 01         [24] 4309 	push	ar1
   0FF3 12r0Cr2B      [24] 4310 	lcall	_uart_calc_actual_baud_rate_from_s0rel
   0FF6 85 82*06      [24] 4311 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,dpl
   0FF9 85 83*07      [24] 4312 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),dph
   0FFC 85 F0*08      [24] 4313 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),b
   0FFF F5*09         [12] 4314 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
                           4315 ;	../src/uart/src/uart_configure_auto_baud_calc.c:68: calc_br_with_smod_set = uart_calc_actual_baud_rate_from_s0rel(s0rel_with_smod_set, true);
   1001 90r00r69      [24] 4316 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_PARM_2
   1004 74 01         [12] 4317 	mov	a,#0x01
   1006 F0            [24] 4318 	movx	@dptr,a
   1007 85*04 82      [24] 4319 	mov	dpl,_uart_configure_auto_baud_calc_sloc0_1_0
   100A 85*05 83      [24] 4320 	mov	dph,(_uart_configure_auto_baud_calc_sloc0_1_0 + 1)
   100D 12r0Cr2B      [24] 4321 	lcall	_uart_calc_actual_baud_rate_from_s0rel
   1010 85 82*0A      [24] 4322 	mov	_uart_configure_auto_baud_calc_sloc2_1_0,dpl
   1013 85 83*0B      [24] 4323 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 1),dph
   1016 85 F0*0C      [24] 4324 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 2),b
   1019 F5*0D         [12] 4325 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 3),a
   101B D0 01         [24] 4326 	pop	ar1
   101D D0 02         [24] 4327 	pop	ar2
   101F D0 03         [24] 4328 	pop	ar3
   1021 D0 04         [24] 4329 	pop	ar4
   1023 D0 05         [24] 4330 	pop	ar5
   1025 D0 06         [24] 4331 	pop	ar6
   1027 D0 07         [24] 4332 	pop	ar7
                           4333 ;	../src/uart/src/uart_configure_auto_baud_calc.c:71: error_calc_br_with_smod_cleared = (calc_br_with_smod_cleared > baud_rate) ? (calc_br_with_smod_cleared - baud_rate) : (baud_rate - calc_br_with_smod_cleared);
   1029 C3            [12] 4334 	clr	c
   102A EB            [12] 4335 	mov	a,r3
   102B 95*06         [12] 4336 	subb	a,_uart_configure_auto_baud_calc_sloc1_1_0
   102D EC            [12] 4337 	mov	a,r4
   102E 95*07         [12] 4338 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   1030 ED            [12] 4339 	mov	a,r5
   1031 95*08         [12] 4340 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   1033 EE            [12] 4341 	mov	a,r6
   1034 95*09         [12] 4342 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   1036 50 17         [24] 4343 	jnc	00115$
   1038 E5*06         [12] 4344 	mov	a,_uart_configure_auto_baud_calc_sloc1_1_0
   103A C3            [12] 4345 	clr	c
   103B 9B            [12] 4346 	subb	a,r3
   103C F5*0E         [12] 4347 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,a
   103E E5*07         [12] 4348 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   1040 9C            [12] 4349 	subb	a,r4
   1041 F5*0F         [12] 4350 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),a
   1043 E5*08         [12] 4351 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   1045 9D            [12] 4352 	subb	a,r5
   1046 F5*10         [12] 4353 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),a
   1048 E5*09         [12] 4354 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   104A 9E            [12] 4355 	subb	a,r6
   104B F5*11         [12] 4356 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   104D 80 15         [24] 4357 	sjmp	00116$
   104F                    4358 00115$:
   104F EB            [12] 4359 	mov	a,r3
   1050 C3            [12] 4360 	clr	c
   1051 95*06         [12] 4361 	subb	a,_uart_configure_auto_baud_calc_sloc1_1_0
   1053 F5*0E         [12] 4362 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,a
   1055 EC            [12] 4363 	mov	a,r4
   1056 95*07         [12] 4364 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   1058 F5*0F         [12] 4365 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),a
   105A ED            [12] 4366 	mov	a,r5
   105B 95*08         [12] 4367 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   105D F5*10         [12] 4368 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),a
   105F EE            [12] 4369 	mov	a,r6
   1060 95*09         [12] 4370 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   1062 F5*11         [12] 4371 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   1064                    4372 00116$:
                           4373 ;	../src/uart/src/uart_configure_auto_baud_calc.c:72: error_calc_br_with_smod_set = (calc_br_with_smod_set > baud_rate) ? (calc_br_with_smod_set - baud_rate) : (baud_rate - calc_br_with_smod_set);
   1064 C3            [12] 4374 	clr	c
   1065 EB            [12] 4375 	mov	a,r3
   1066 95*0A         [12] 4376 	subb	a,_uart_configure_auto_baud_calc_sloc2_1_0
   1068 EC            [12] 4377 	mov	a,r4
   1069 95*0B         [12] 4378 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   106B ED            [12] 4379 	mov	a,r5
   106C 95*0C         [12] 4380 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   106E EE            [12] 4381 	mov	a,r6
   106F 95*0D         [12] 4382 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   1071 50 17         [24] 4383 	jnc	00117$
   1073 E5*0A         [12] 4384 	mov	a,_uart_configure_auto_baud_calc_sloc2_1_0
   1075 C3            [12] 4385 	clr	c
   1076 9B            [12] 4386 	subb	a,r3
   1077 F5*06         [12] 4387 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,a
   1079 E5*0B         [12] 4388 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   107B 9C            [12] 4389 	subb	a,r4
   107C F5*07         [12] 4390 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),a
   107E E5*0C         [12] 4391 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   1080 9D            [12] 4392 	subb	a,r5
   1081 F5*08         [12] 4393 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),a
   1083 E5*0D         [12] 4394 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   1085 9E            [12] 4395 	subb	a,r6
   1086 F5*09         [12] 4396 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
   1088 80 15         [24] 4397 	sjmp	00118$
   108A                    4398 00117$:
   108A EB            [12] 4399 	mov	a,r3
   108B C3            [12] 4400 	clr	c
   108C 95*0A         [12] 4401 	subb	a,_uart_configure_auto_baud_calc_sloc2_1_0
   108E F5*06         [12] 4402 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,a
   1090 EC            [12] 4403 	mov	a,r4
   1091 95*0B         [12] 4404 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   1093 F5*07         [12] 4405 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),a
   1095 ED            [12] 4406 	mov	a,r5
   1096 95*0C         [12] 4407 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   1098 F5*08         [12] 4408 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),a
   109A EE            [12] 4409 	mov	a,r6
   109B 95*0D         [12] 4410 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   109D F5*09         [12] 4411 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
   109F                    4412 00118$:
                           4413 ;	../src/uart/src/uart_configure_auto_baud_calc.c:75: if(error_calc_br_with_smod_cleared < error_calc_br_with_smod_set)
   109F C3            [12] 4414 	clr	c
   10A0 E5*0E         [12] 4415 	mov	a,_uart_configure_auto_baud_calc_sloc3_1_0
   10A2 95*06         [12] 4416 	subb	a,_uart_configure_auto_baud_calc_sloc1_1_0
   10A4 E5*0F         [12] 4417 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   10A6 95*07         [12] 4418 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   10A8 E5*10         [12] 4419 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   10AA 95*08         [12] 4420 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   10AC E5*11         [12] 4421 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   10AE 95*09         [12] 4422 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   10B0 50 12         [24] 4423 	jnc	00102$
                           4424 ;	../src/uart/src/uart_configure_auto_baud_calc.c:77: uart_configure_manual_baud_calc(((uart_config_options & ~UART_CONFIG_OPTION_BIT_SMOD_MASK) | UART_CONFIG_OPTION_BIT_SMOD_CLEAR),
   10B2 8F 06         [24] 4425 	mov	ar6,r7
   10B4 53 06 FB      [24] 4426 	anl	ar6,#0xFB
                           4427 ;	../src/uart/src/uart_configure_auto_baud_calc.c:78: s0rel_with_smod_cleared);
   10B7 90r00r66      [24] 4428 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   10BA E9            [12] 4429 	mov	a,r1
   10BB F0            [24] 4430 	movx	@dptr,a
   10BC EA            [12] 4431 	mov	a,r2
   10BD A3            [24] 4432 	inc	dptr
   10BE F0            [24] 4433 	movx	@dptr,a
   10BF 8E 82         [24] 4434 	mov	dpl,r6
   10C1 02r0BrCD      [24] 4435 	ljmp	_uart_configure_manual_baud_calc
   10C4                    4436 00102$:
                           4437 ;	../src/uart/src/uart_configure_auto_baud_calc.c:82: uart_configure_manual_baud_calc(((uart_config_options & ~UART_CONFIG_OPTION_BIT_SMOD_MASK) | UART_CONFIG_OPTION_BIT_SMOD_SET),
   10C4 8F 06         [24] 4438 	mov	ar6,r7
   10C6 74 FB         [12] 4439 	mov	a,#0xFB
   10C8 5E            [12] 4440 	anl	a,r6
   10C9 44 04         [12] 4441 	orl	a,#0x04
   10CB FE            [12] 4442 	mov	r6,a
                           4443 ;	../src/uart/src/uart_configure_auto_baud_calc.c:83: s0rel_with_smod_set);
   10CC 90r00r66      [24] 4444 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   10CF E5*04         [12] 4445 	mov	a,_uart_configure_auto_baud_calc_sloc0_1_0
   10D1 F0            [24] 4446 	movx	@dptr,a
   10D2 E5*05         [12] 4447 	mov	a,(_uart_configure_auto_baud_calc_sloc0_1_0 + 1)
   10D4 A3            [24] 4448 	inc	dptr
   10D5 F0            [24] 4449 	movx	@dptr,a
   10D6 8E 82         [24] 4450 	mov	dpl,r6
   10D8 02r0BrCD      [24] 4451 	ljmp	_uart_configure_manual_baud_calc
   10DB                    4452 00108$:
                           4453 ;	../src/uart/src/uart_configure_auto_baud_calc.c:91: th1_with_smod_cleared = uart_calc_th1_value(baud_rate, 0);
   10DB 90r00r78      [24] 4454 	mov	dptr,#_uart_configure_auto_baud_calc_PARM_2
   10DE E0            [24] 4455 	movx	a,@dptr
   10DF FB            [12] 4456 	mov	r3,a
   10E0 A3            [24] 4457 	inc	dptr
   10E1 E0            [24] 4458 	movx	a,@dptr
   10E2 FC            [12] 4459 	mov	r4,a
   10E3 A3            [24] 4460 	inc	dptr
   10E4 E0            [24] 4461 	movx	a,@dptr
   10E5 FD            [12] 4462 	mov	r5,a
   10E6 A3            [24] 4463 	inc	dptr
   10E7 E0            [24] 4464 	movx	a,@dptr
   10E8 FE            [12] 4465 	mov	r6,a
   10E9 90r00r73      [24] 4466 	mov	dptr,#_uart_calc_th1_value_PARM_2
   10EC E4            [12] 4467 	clr	a
   10ED F0            [24] 4468 	movx	@dptr,a
   10EE 8B 82         [24] 4469 	mov	dpl,r3
   10F0 8C 83         [24] 4470 	mov	dph,r4
   10F2 8D F0         [24] 4471 	mov	b,r5
   10F4 EE            [12] 4472 	mov	a,r6
   10F5 C0 07         [24] 4473 	push	ar7
   10F7 C0 06         [24] 4474 	push	ar6
   10F9 C0 05         [24] 4475 	push	ar5
   10FB C0 04         [24] 4476 	push	ar4
   10FD C0 03         [24] 4477 	push	ar3
   10FF 12r0Er8B      [24] 4478 	lcall	_uart_calc_th1_value
   1102 AA 82         [24] 4479 	mov	r2,dpl
   1104 D0 03         [24] 4480 	pop	ar3
   1106 D0 04         [24] 4481 	pop	ar4
   1108 D0 05         [24] 4482 	pop	ar5
   110A D0 06         [24] 4483 	pop	ar6
                           4484 ;	../src/uart/src/uart_configure_auto_baud_calc.c:92: th1_with_smod_set = uart_calc_th1_value(baud_rate, 1);
   110C 90r00r73      [24] 4485 	mov	dptr,#_uart_calc_th1_value_PARM_2
   110F 74 01         [12] 4486 	mov	a,#0x01
   1111 F0            [24] 4487 	movx	@dptr,a
   1112 8B 82         [24] 4488 	mov	dpl,r3
   1114 8C 83         [24] 4489 	mov	dph,r4
   1116 8D F0         [24] 4490 	mov	b,r5
   1118 EE            [12] 4491 	mov	a,r6
   1119 C0 06         [24] 4492 	push	ar6
   111B C0 05         [24] 4493 	push	ar5
   111D C0 04         [24] 4494 	push	ar4
   111F C0 03         [24] 4495 	push	ar3
   1121 C0 02         [24] 4496 	push	ar2
   1123 12r0Er8B      [24] 4497 	lcall	_uart_calc_th1_value
   1126 A9 82         [24] 4498 	mov	r1,dpl
   1128 D0 02         [24] 4499 	pop	ar2
                           4500 ;	../src/uart/src/uart_configure_auto_baud_calc.c:95: calc_br_with_smod_cleared = uart_calc_actual_baud_rate_from_th1(th1_with_smod_cleared, false);
   112A 90r00r6C      [24] 4501 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_PARM_2
   112D E4            [12] 4502 	clr	a
   112E F0            [24] 4503 	movx	@dptr,a
   112F 8A 82         [24] 4504 	mov	dpl,r2
   1131 C0 02         [24] 4505 	push	ar2
   1133 C0 01         [24] 4506 	push	ar1
   1135 12r0CrE4      [24] 4507 	lcall	_uart_calc_actual_baud_rate_from_th1
   1138 85 82*0E      [24] 4508 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,dpl
   113B 85 83*0F      [24] 4509 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),dph
   113E 85 F0*10      [24] 4510 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),b
   1141 F5*11         [12] 4511 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   1143 D0 01         [24] 4512 	pop	ar1
                           4513 ;	../src/uart/src/uart_configure_auto_baud_calc.c:96: calc_br_with_smod_set = uart_calc_actual_baud_rate_from_th1(th1_with_smod_set, true);
   1145 90r00r6C      [24] 4514 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_PARM_2
   1148 74 01         [12] 4515 	mov	a,#0x01
   114A F0            [24] 4516 	movx	@dptr,a
   114B 89 82         [24] 4517 	mov	dpl,r1
   114D C0 01         [24] 4518 	push	ar1
   114F 12r0CrE4      [24] 4519 	lcall	_uart_calc_actual_baud_rate_from_th1
   1152 85 82*0A      [24] 4520 	mov	_uart_configure_auto_baud_calc_sloc2_1_0,dpl
   1155 85 83*0B      [24] 4521 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 1),dph
   1158 85 F0*0C      [24] 4522 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 2),b
   115B F5*0D         [12] 4523 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 3),a
   115D D0 01         [24] 4524 	pop	ar1
   115F D0 02         [24] 4525 	pop	ar2
   1161 D0 03         [24] 4526 	pop	ar3
   1163 D0 04         [24] 4527 	pop	ar4
   1165 D0 05         [24] 4528 	pop	ar5
   1167 D0 06         [24] 4529 	pop	ar6
   1169 D0 07         [24] 4530 	pop	ar7
                           4531 ;	../src/uart/src/uart_configure_auto_baud_calc.c:99: error_calc_br_with_smod_cleared = (calc_br_with_smod_cleared > baud_rate) ? (calc_br_with_smod_cleared - baud_rate) : (baud_rate - calc_br_with_smod_cleared);
   116B C3            [12] 4532 	clr	c
   116C EB            [12] 4533 	mov	a,r3
   116D 95*0E         [12] 4534 	subb	a,_uart_configure_auto_baud_calc_sloc3_1_0
   116F EC            [12] 4535 	mov	a,r4
   1170 95*0F         [12] 4536 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   1172 ED            [12] 4537 	mov	a,r5
   1173 95*10         [12] 4538 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   1175 EE            [12] 4539 	mov	a,r6
   1176 95*11         [12] 4540 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   1178 50 17         [24] 4541 	jnc	00119$
   117A E5*0E         [12] 4542 	mov	a,_uart_configure_auto_baud_calc_sloc3_1_0
   117C C3            [12] 4543 	clr	c
   117D 9B            [12] 4544 	subb	a,r3
   117E F5*06         [12] 4545 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,a
   1180 E5*0F         [12] 4546 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   1182 9C            [12] 4547 	subb	a,r4
   1183 F5*07         [12] 4548 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),a
   1185 E5*10         [12] 4549 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   1187 9D            [12] 4550 	subb	a,r5
   1188 F5*08         [12] 4551 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),a
   118A E5*11         [12] 4552 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   118C 9E            [12] 4553 	subb	a,r6
   118D F5*09         [12] 4554 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
   118F 80 15         [24] 4555 	sjmp	00120$
   1191                    4556 00119$:
   1191 EB            [12] 4557 	mov	a,r3
   1192 C3            [12] 4558 	clr	c
   1193 95*0E         [12] 4559 	subb	a,_uart_configure_auto_baud_calc_sloc3_1_0
   1195 F5*06         [12] 4560 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,a
   1197 EC            [12] 4561 	mov	a,r4
   1198 95*0F         [12] 4562 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   119A F5*07         [12] 4563 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),a
   119C ED            [12] 4564 	mov	a,r5
   119D 95*10         [12] 4565 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   119F F5*08         [12] 4566 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),a
   11A1 EE            [12] 4567 	mov	a,r6
   11A2 95*11         [12] 4568 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   11A4 F5*09         [12] 4569 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
   11A6                    4570 00120$:
                           4571 ;	../src/uart/src/uart_configure_auto_baud_calc.c:100: error_calc_br_with_smod_set = (calc_br_with_smod_set > baud_rate) ? (calc_br_with_smod_set - baud_rate) : (baud_rate - calc_br_with_smod_set);
   11A6 C3            [12] 4572 	clr	c
   11A7 EB            [12] 4573 	mov	a,r3
   11A8 95*0A         [12] 4574 	subb	a,_uart_configure_auto_baud_calc_sloc2_1_0
   11AA EC            [12] 4575 	mov	a,r4
   11AB 95*0B         [12] 4576 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   11AD ED            [12] 4577 	mov	a,r5
   11AE 95*0C         [12] 4578 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   11B0 EE            [12] 4579 	mov	a,r6
   11B1 95*0D         [12] 4580 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   11B3 50 17         [24] 4581 	jnc	00121$
   11B5 E5*0A         [12] 4582 	mov	a,_uart_configure_auto_baud_calc_sloc2_1_0
   11B7 C3            [12] 4583 	clr	c
   11B8 9B            [12] 4584 	subb	a,r3
   11B9 F5*0E         [12] 4585 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,a
   11BB E5*0B         [12] 4586 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   11BD 9C            [12] 4587 	subb	a,r4
   11BE F5*0F         [12] 4588 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),a
   11C0 E5*0C         [12] 4589 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   11C2 9D            [12] 4590 	subb	a,r5
   11C3 F5*10         [12] 4591 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),a
   11C5 E5*0D         [12] 4592 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   11C7 9E            [12] 4593 	subb	a,r6
   11C8 F5*11         [12] 4594 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   11CA 80 15         [24] 4595 	sjmp	00122$
   11CC                    4596 00121$:
   11CC EB            [12] 4597 	mov	a,r3
   11CD C3            [12] 4598 	clr	c
   11CE 95*0A         [12] 4599 	subb	a,_uart_configure_auto_baud_calc_sloc2_1_0
   11D0 F5*0E         [12] 4600 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,a
   11D2 EC            [12] 4601 	mov	a,r4
   11D3 95*0B         [12] 4602 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   11D5 F5*0F         [12] 4603 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),a
   11D7 ED            [12] 4604 	mov	a,r5
   11D8 95*0C         [12] 4605 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   11DA F5*10         [12] 4606 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),a
   11DC EE            [12] 4607 	mov	a,r6
   11DD 95*0D         [12] 4608 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   11DF F5*11         [12] 4609 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   11E1                    4610 00122$:
                           4611 ;	../src/uart/src/uart_configure_auto_baud_calc.c:103: if(error_calc_br_with_smod_cleared < error_calc_br_with_smod_set)
   11E1 C3            [12] 4612 	clr	c
   11E2 E5*06         [12] 4613 	mov	a,_uart_configure_auto_baud_calc_sloc1_1_0
   11E4 95*0E         [12] 4614 	subb	a,_uart_configure_auto_baud_calc_sloc3_1_0
   11E6 E5*07         [12] 4615 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   11E8 95*0F         [12] 4616 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   11EA E5*08         [12] 4617 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   11EC 95*10         [12] 4618 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   11EE E5*09         [12] 4619 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   11F0 95*11         [12] 4620 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   11F2 50 12         [24] 4621 	jnc	00105$
                           4622 ;	../src/uart/src/uart_configure_auto_baud_calc.c:105: uart_configure_manual_baud_calc(((uart_config_options & ~UART_CONFIG_OPTION_BIT_SMOD_MASK) | UART_CONFIG_OPTION_BIT_SMOD_CLEAR),
   11F4 8F 06         [24] 4623 	mov	ar6,r7
   11F6 53 06 FB      [24] 4624 	anl	ar6,#0xFB
                           4625 ;	../src/uart/src/uart_configure_auto_baud_calc.c:106: (uint16_t)th1_with_smod_cleared);
   11F9 90r00r66      [24] 4626 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   11FC EA            [12] 4627 	mov	a,r2
   11FD F0            [24] 4628 	movx	@dptr,a
   11FE E4            [12] 4629 	clr	a
   11FF A3            [24] 4630 	inc	dptr
   1200 F0            [24] 4631 	movx	@dptr,a
   1201 8E 82         [24] 4632 	mov	dpl,r6
   1203 02r0BrCD      [24] 4633 	ljmp	_uart_configure_manual_baud_calc
   1206                    4634 00105$:
                           4635 ;	../src/uart/src/uart_configure_auto_baud_calc.c:110: uart_configure_manual_baud_calc(((uart_config_options & ~UART_CONFIG_OPTION_BIT_SMOD_MASK) | UART_CONFIG_OPTION_BIT_SMOD_SET),
   1206 74 FB         [12] 4636 	mov	a,#0xFB
   1208 5F            [12] 4637 	anl	a,r7
   1209 44 04         [12] 4638 	orl	a,#0x04
   120B FF            [12] 4639 	mov	r7,a
                           4640 ;	../src/uart/src/uart_configure_auto_baud_calc.c:111: (uint16_t)th1_with_smod_set);
   120C 90r00r66      [24] 4641 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   120F E9            [12] 4642 	mov	a,r1
   1210 F0            [24] 4643 	movx	@dptr,a
   1211 E4            [12] 4644 	clr	a
   1212 A3            [24] 4645 	inc	dptr
   1213 F0            [24] 4646 	movx	@dptr,a
   1214 8F 82         [24] 4647 	mov	dpl,r7
   1216 02r0BrCD      [24] 4648 	ljmp	_uart_configure_manual_baud_calc
                           4649 ;------------------------------------------------------------
                           4650 ;Allocation info for local variables in function 'rtc2_configure'
                           4651 ;------------------------------------------------------------
                           4652 ;compare_value             Allocated with name '_rtc2_configure_PARM_2'
                           4653 ;rtc2_config_options       Allocated with name '_rtc2_configure_rtc2_config_options_1_230'
                           4654 ;------------------------------------------------------------
                           4655 ;	../src/rtc2/src/rtc2_configure.c:53: void rtc2_configure(unsigned char rtc2_config_options, unsigned int compare_value)
                           4656 ;	-----------------------------------------
                           4657 ;	 function rtc2_configure
                           4658 ;	-----------------------------------------
   1219                    4659 _rtc2_configure:
   1219 E5 82         [12] 4660 	mov	a,dpl
                           4661 ;	../src/rtc2/src/rtc2_configure.c:56: if(((rtc2_config_options & RTC2CON_COMPARE_MODE_MASK) == RTC2_CONFIG_OPTION_COMPARE_MODE_0_RESET_AT_IRQ) ||
   121B 90r00r7F      [24] 4662 	mov	dptr,#_rtc2_configure_rtc2_config_options_1_230
   121E F0            [24] 4663 	movx	@dptr,a
   121F FF            [12] 4664 	mov	r7,a
   1220 74 06         [12] 4665 	mov	a,#0x06
   1222 5F            [12] 4666 	anl	a,r7
   1223 FE            [12] 4667 	mov	r6,a
   1224 BE 06 02      [24] 4668 	cjne	r6,#0x06,00109$
   1227 80 07         [24] 4669 	sjmp	00101$
   1229                    4670 00109$:
                           4671 ;	../src/rtc2/src/rtc2_configure.c:57: ((rtc2_config_options & RTC2CON_COMPARE_MODE_MASK) == RTC2_CONFIG_OPTION_COMPARE_MODE_1_WRAP_AT_IRQ))
   1229 74 06         [12] 4672 	mov	a,#0x06
   122B 5F            [12] 4673 	anl	a,r7
   122C FE            [12] 4674 	mov	r6,a
   122D BE 04 0C      [24] 4675 	cjne	r6,#0x04,00102$
   1230                    4676 00101$:
                           4677 ;	../src/rtc2/src/rtc2_configure.c:59: RTC2CMP0 = (unsigned char)compare_value;
   1230 90r00r7D      [24] 4678 	mov	dptr,#_rtc2_configure_PARM_2
   1233 E0            [24] 4679 	movx	a,@dptr
   1234 FD            [12] 4680 	mov	r5,a
   1235 A3            [24] 4681 	inc	dptr
   1236 E0            [24] 4682 	movx	a,@dptr
   1237 FE            [12] 4683 	mov	r6,a
   1238 8D B4         [24] 4684 	mov	_RTC2CMP0,r5
                           4685 ;	../src/rtc2/src/rtc2_configure.c:60: RTC2CMP1 = (unsigned char)(compare_value >> 8);
   123A 8E B5         [24] 4686 	mov	_RTC2CMP1,r6
   123C                    4687 00102$:
                           4688 ;	../src/rtc2/src/rtc2_configure.c:64: RTC2CON = (RTC2CON & ~RTC2_CONFIG_OPTION_RTC2CON_MASK) | (rtc2_config_options & RTC2_CONFIG_OPTION_RTC2CON_MASK);
   123C AE B3         [24] 4689 	mov	r6,_RTC2CON
   123E 53 06 F0      [24] 4690 	anl	ar6,#0xF0
   1241 53 07 0F      [24] 4691 	anl	ar7,#0x0F
   1244 EF            [12] 4692 	mov	a,r7
   1245 4E            [12] 4693 	orl	a,r6
   1246 F5 B3         [12] 4694 	mov	_RTC2CON,a
   1248 22            [24] 4695 	ret
                           4696 ;------------------------------------------------------------
                           4697 ;Allocation info for local variables in function 'radiobegin'
                           4698 ;------------------------------------------------------------
                           4699 ;setup                     Allocated with name '_radiobegin_setup_1_233'
                           4700 ;------------------------------------------------------------
                           4701 ;	../nRFLE.c:22: void radiobegin() {
                           4702 ;	-----------------------------------------
                           4703 ;	 function radiobegin
                           4704 ;	-----------------------------------------
   1249                    4705 _radiobegin:
                           4706 ;	../nRFLE.c:26: rf_spi_configure_enable();
   1249 12r00rF9      [24] 4707 	lcall	_rf_spi_configure_enable
                           4708 ;	../nRFLE.c:28: setup = 255; // setup_retr setRetries 15*16+15
   124C 90r00r80      [24] 4709 	mov	dptr,#_radiobegin_setup_1_233
   124F 74 FF         [12] 4710 	mov	a,#0xFF
   1251 F0            [24] 4711 	movx	@dptr,a
                           4712 ;	../nRFLE.c:29: rf_write_register(RF_SETUP_RETR, &setup, 1);
   1252 90r00r08      [24] 4713 	mov	dptr,#_rf_write_register_PARM_2
   1255 74r80         [12] 4714 	mov	a,#_radiobegin_setup_1_233
   1257 F0            [24] 4715 	movx	@dptr,a
   1258 74s00         [12] 4716 	mov	a,#(_radiobegin_setup_1_233 >> 8)
   125A A3            [24] 4717 	inc	dptr
   125B F0            [24] 4718 	movx	@dptr,a
   125C E4            [12] 4719 	clr	a
   125D A3            [24] 4720 	inc	dptr
   125E F0            [24] 4721 	movx	@dptr,a
   125F 90r00r0B      [24] 4722 	mov	dptr,#_rf_write_register_PARM_3
   1262 74 01         [12] 4723 	mov	a,#0x01
   1264 F0            [24] 4724 	movx	@dptr,a
   1265 E4            [12] 4725 	clr	a
   1266 A3            [24] 4726 	inc	dptr
   1267 F0            [24] 4727 	movx	@dptr,a
   1268 75 82 04      [24] 4728 	mov	dpl,#0x04
   126B 02r00rBC      [24] 4729 	ljmp	_rf_write_register
                           4730 ;------------------------------------------------------------
                           4731 ;Allocation info for local variables in function 'setChannel'
                           4732 ;------------------------------------------------------------
                           4733 ;channel                   Allocated with name '_setChannel_channel_1_234'
                           4734 ;------------------------------------------------------------
                           4735 ;	../nRFLE.c:35: void setChannel(unsigned char channel){
                           4736 ;	-----------------------------------------
                           4737 ;	 function setChannel
                           4738 ;	-----------------------------------------
   126E                    4739 _setChannel:
   126E E5 82         [12] 4740 	mov	a,dpl
   1270 90r00r81      [24] 4741 	mov	dptr,#_setChannel_channel_1_234
   1273 F0            [24] 4742 	movx	@dptr,a
                           4743 ;	../nRFLE.c:36: rf_write_register(RF_RF_CH, &channel, 1);
   1274 90r00r08      [24] 4744 	mov	dptr,#_rf_write_register_PARM_2
   1277 74r81         [12] 4745 	mov	a,#_setChannel_channel_1_234
   1279 F0            [24] 4746 	movx	@dptr,a
   127A 74s00         [12] 4747 	mov	a,#(_setChannel_channel_1_234 >> 8)
   127C A3            [24] 4748 	inc	dptr
   127D F0            [24] 4749 	movx	@dptr,a
   127E E4            [12] 4750 	clr	a
   127F A3            [24] 4751 	inc	dptr
   1280 F0            [24] 4752 	movx	@dptr,a
   1281 90r00r0B      [24] 4753 	mov	dptr,#_rf_write_register_PARM_3
   1284 74 01         [12] 4754 	mov	a,#0x01
   1286 F0            [24] 4755 	movx	@dptr,a
   1287 E4            [12] 4756 	clr	a
   1288 A3            [24] 4757 	inc	dptr
   1289 F0            [24] 4758 	movx	@dptr,a
   128A 75 82 05      [24] 4759 	mov	dpl,#0x05
   128D 02r00rBC      [24] 4760 	ljmp	_rf_write_register
                           4761 ;------------------------------------------------------------
                           4762 ;Allocation info for local variables in function 'setDataRate'
                           4763 ;------------------------------------------------------------
                           4764 ;speed                     Allocated with name '_setDataRate_speed_1_236'
                           4765 ;buffer                    Allocated with name '_setDataRate_buffer_1_237'
                           4766 ;------------------------------------------------------------
                           4767 ;	../nRFLE.c:41: void setDataRate(unsigned char speed){
                           4768 ;	-----------------------------------------
                           4769 ;	 function setDataRate
                           4770 ;	-----------------------------------------
   1290                    4771 _setDataRate:
   1290 E5 82         [12] 4772 	mov	a,dpl
   1292 90r00r82      [24] 4773 	mov	dptr,#_setDataRate_speed_1_236
   1295 F0            [24] 4774 	movx	@dptr,a
                           4775 ;	../nRFLE.c:43: rf_read_register(RF_RF_SETUP,&buffer,1);
   1296 90r00r28      [24] 4776 	mov	dptr,#_rf_read_register_PARM_2
   1299 74r83         [12] 4777 	mov	a,#_setDataRate_buffer_1_237
   129B F0            [24] 4778 	movx	@dptr,a
   129C 74s00         [12] 4779 	mov	a,#(_setDataRate_buffer_1_237 >> 8)
   129E A3            [24] 4780 	inc	dptr
   129F F0            [24] 4781 	movx	@dptr,a
   12A0 E4            [12] 4782 	clr	a
   12A1 A3            [24] 4783 	inc	dptr
   12A2 F0            [24] 4784 	movx	@dptr,a
   12A3 90r00r2B      [24] 4785 	mov	dptr,#_rf_read_register_PARM_3
   12A6 74 01         [12] 4786 	mov	a,#0x01
   12A8 F0            [24] 4787 	movx	@dptr,a
   12A9 E4            [12] 4788 	clr	a
   12AA A3            [24] 4789 	inc	dptr
   12AB F0            [24] 4790 	movx	@dptr,a
   12AC 75 82 06      [24] 4791 	mov	dpl,#0x06
   12AF 12r03r70      [24] 4792 	lcall	_rf_read_register
                           4793 ;	../nRFLE.c:45: buffer &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   12B2 90r00r83      [24] 4794 	mov	dptr,#_setDataRate_buffer_1_237
   12B5 E0            [24] 4795 	movx	a,@dptr
   12B6 54 D7         [12] 4796 	anl	a,#0xD7
   12B8 F0            [24] 4797 	movx	@dptr,a
                           4798 ;	../nRFLE.c:47: if( speed == 1 )	 buffer |= _BV(RF_DR_LOW);
   12B9 90r00r82      [24] 4799 	mov	dptr,#_setDataRate_speed_1_236
   12BC E0            [24] 4800 	movx	a,@dptr
   12BD FF            [12] 4801 	mov	r7,a
   12BE BF 01 0A      [24] 4802 	cjne	r7,#0x01,00104$
   12C1 90r00r83      [24] 4803 	mov	dptr,#_setDataRate_buffer_1_237
   12C4 E0            [24] 4804 	movx	a,@dptr
   12C5 FE            [12] 4805 	mov	r6,a
   12C6 44 20         [12] 4806 	orl	a,#0x20
   12C8 F0            [24] 4807 	movx	@dptr,a
   12C9 80 0B         [24] 4808 	sjmp	00105$
   12CB                    4809 00104$:
                           4810 ;	../nRFLE.c:49: else if ( speed == 3 ) buffer |= _BV(RF_DR_HIGH);
   12CB BF 03 08      [24] 4811 	cjne	r7,#0x03,00105$
   12CE 90r00r83      [24] 4812 	mov	dptr,#_setDataRate_buffer_1_237
   12D1 E0            [24] 4813 	movx	a,@dptr
   12D2 FF            [12] 4814 	mov	r7,a
   12D3 44 08         [12] 4815 	orl	a,#0x08
   12D5 F0            [24] 4816 	movx	@dptr,a
   12D6                    4817 00105$:
                           4818 ;	../nRFLE.c:51: rf_write_register(RF_RF_SETUP,&buffer,1 ) ;
   12D6 90r00r08      [24] 4819 	mov	dptr,#_rf_write_register_PARM_2
   12D9 74r83         [12] 4820 	mov	a,#_setDataRate_buffer_1_237
   12DB F0            [24] 4821 	movx	@dptr,a
   12DC 74s00         [12] 4822 	mov	a,#(_setDataRate_buffer_1_237 >> 8)
   12DE A3            [24] 4823 	inc	dptr
   12DF F0            [24] 4824 	movx	@dptr,a
   12E0 E4            [12] 4825 	clr	a
   12E1 A3            [24] 4826 	inc	dptr
   12E2 F0            [24] 4827 	movx	@dptr,a
   12E3 90r00r0B      [24] 4828 	mov	dptr,#_rf_write_register_PARM_3
   12E6 74 01         [12] 4829 	mov	a,#0x01
   12E8 F0            [24] 4830 	movx	@dptr,a
   12E9 E4            [12] 4831 	clr	a
   12EA A3            [24] 4832 	inc	dptr
   12EB F0            [24] 4833 	movx	@dptr,a
   12EC 75 82 06      [24] 4834 	mov	dpl,#0x06
   12EF 02r00rBC      [24] 4835 	ljmp	_rf_write_register
                           4836 ;------------------------------------------------------------
                           4837 ;Allocation info for local variables in function 'setAutoAck'
                           4838 ;------------------------------------------------------------
                           4839 ;enable                    Allocated with name '_setAutoAck_enable_1_238'
                           4840 ;buffer                    Allocated with name '_setAutoAck_buffer_1_239'
                           4841 ;------------------------------------------------------------
                           4842 ;	../nRFLE.c:56: void setAutoAck(unsigned char enable)
                           4843 ;	-----------------------------------------
                           4844 ;	 function setAutoAck
                           4845 ;	-----------------------------------------
   12F2                    4846 _setAutoAck:
   12F2 E5 82         [12] 4847 	mov	a,dpl
                           4848 ;	../nRFLE.c:60: if (enable==1) buffer=63;
   12F4 90r00r84      [24] 4849 	mov	dptr,#_setAutoAck_enable_1_238
   12F7 F0            [24] 4850 	movx	@dptr,a
   12F8 FF            [12] 4851 	mov	r7,a
   12F9 BF 01 08      [24] 4852 	cjne	r7,#0x01,00102$
   12FC 90r00r85      [24] 4853 	mov	dptr,#_setAutoAck_buffer_1_239
   12FF 74 3F         [12] 4854 	mov	a,#0x3F
   1301 F0            [24] 4855 	movx	@dptr,a
   1302 80 05         [24] 4856 	sjmp	00103$
   1304                    4857 00102$:
                           4858 ;	../nRFLE.c:61: else        buffer=0;
   1304 90r00r85      [24] 4859 	mov	dptr,#_setAutoAck_buffer_1_239
   1307 E4            [12] 4860 	clr	a
   1308 F0            [24] 4861 	movx	@dptr,a
   1309                    4862 00103$:
                           4863 ;	../nRFLE.c:62: rf_write_register(RF_EN_AA, &buffer,1);
   1309 90r00r08      [24] 4864 	mov	dptr,#_rf_write_register_PARM_2
   130C 74r85         [12] 4865 	mov	a,#_setAutoAck_buffer_1_239
   130E F0            [24] 4866 	movx	@dptr,a
   130F 74s00         [12] 4867 	mov	a,#(_setAutoAck_buffer_1_239 >> 8)
   1311 A3            [24] 4868 	inc	dptr
   1312 F0            [24] 4869 	movx	@dptr,a
   1313 E4            [12] 4870 	clr	a
   1314 A3            [24] 4871 	inc	dptr
   1315 F0            [24] 4872 	movx	@dptr,a
   1316 90r00r0B      [24] 4873 	mov	dptr,#_rf_write_register_PARM_3
   1319 74 01         [12] 4874 	mov	a,#0x01
   131B F0            [24] 4875 	movx	@dptr,a
   131C E4            [12] 4876 	clr	a
   131D A3            [24] 4877 	inc	dptr
   131E F0            [24] 4878 	movx	@dptr,a
   131F 75 82 01      [24] 4879 	mov	dpl,#0x01
   1322 02r00rBC      [24] 4880 	ljmp	_rf_write_register
                           4881 ;------------------------------------------------------------
                           4882 ;Allocation info for local variables in function 'setCRCLength'
                           4883 ;------------------------------------------------------------
                           4884 ;length                    Allocated with name '_setCRCLength_length_1_240'
                           4885 ;buffer                    Allocated with name '_setCRCLength_buffer_1_241'
                           4886 ;------------------------------------------------------------
                           4887 ;	../nRFLE.c:67: void setCRCLength(unsigned char length)
                           4888 ;	-----------------------------------------
                           4889 ;	 function setCRCLength
                           4890 ;	-----------------------------------------
   1325                    4891 _setCRCLength:
   1325 E5 82         [12] 4892 	mov	a,dpl
   1327 90r00r86      [24] 4893 	mov	dptr,#_setCRCLength_length_1_240
   132A F0            [24] 4894 	movx	@dptr,a
                           4895 ;	../nRFLE.c:71: rf_read_register(RF_CONFIG,&buffer,1);
   132B 90r00r28      [24] 4896 	mov	dptr,#_rf_read_register_PARM_2
   132E 74r87         [12] 4897 	mov	a,#_setCRCLength_buffer_1_241
   1330 F0            [24] 4898 	movx	@dptr,a
   1331 74s00         [12] 4899 	mov	a,#(_setCRCLength_buffer_1_241 >> 8)
   1333 A3            [24] 4900 	inc	dptr
   1334 F0            [24] 4901 	movx	@dptr,a
   1335 E4            [12] 4902 	clr	a
   1336 A3            [24] 4903 	inc	dptr
   1337 F0            [24] 4904 	movx	@dptr,a
   1338 90r00r2B      [24] 4905 	mov	dptr,#_rf_read_register_PARM_3
   133B 74 01         [12] 4906 	mov	a,#0x01
   133D F0            [24] 4907 	movx	@dptr,a
   133E E4            [12] 4908 	clr	a
   133F A3            [24] 4909 	inc	dptr
   1340 F0            [24] 4910 	movx	@dptr,a
   1341 75 82 00      [24] 4911 	mov	dpl,#0x00
   1344 12r03r70      [24] 4912 	lcall	_rf_read_register
                           4913 ;	../nRFLE.c:73: buffer = buffer & ~( _BV(RF_CRCO) | _BV(RF_EN_CRC)) ;
   1347 90r00r87      [24] 4914 	mov	dptr,#_setCRCLength_buffer_1_241
   134A E0            [24] 4915 	movx	a,@dptr
   134B 54 F3         [12] 4916 	anl	a,#0xF3
   134D F0            [24] 4917 	movx	@dptr,a
                           4918 ;	../nRFLE.c:75: if (length==1) buffer |= _BV(RF_EN_CRC);
   134E 90r00r86      [24] 4919 	mov	dptr,#_setCRCLength_length_1_240
   1351 E0            [24] 4920 	movx	a,@dptr
   1352 FF            [12] 4921 	mov	r7,a
   1353 BF 01 0A      [24] 4922 	cjne	r7,#0x01,00104$
   1356 90r00r87      [24] 4923 	mov	dptr,#_setCRCLength_buffer_1_241
   1359 E0            [24] 4924 	movx	a,@dptr
   135A FE            [12] 4925 	mov	r6,a
   135B 44 08         [12] 4926 	orl	a,#0x08
   135D F0            [24] 4927 	movx	@dptr,a
   135E 80 0B         [24] 4928 	sjmp	00105$
   1360                    4929 00104$:
                           4930 ;	../nRFLE.c:76: else if (length==2) buffer |= _BV(RF_EN_CRC) | _BV( RF_CRCO );
   1360 BF 02 08      [24] 4931 	cjne	r7,#0x02,00105$
   1363 90r00r87      [24] 4932 	mov	dptr,#_setCRCLength_buffer_1_241
   1366 E0            [24] 4933 	movx	a,@dptr
   1367 FF            [12] 4934 	mov	r7,a
   1368 44 0C         [12] 4935 	orl	a,#0x0C
   136A F0            [24] 4936 	movx	@dptr,a
   136B                    4937 00105$:
                           4938 ;	../nRFLE.c:78: buffer |=1<<PWR_UP;
   136B 90r00r87      [24] 4939 	mov	dptr,#_setCRCLength_buffer_1_241
   136E E0            [24] 4940 	movx	a,@dptr
   136F 44 02         [12] 4941 	orl	a,#0x02
   1371 F0            [24] 4942 	movx	@dptr,a
                           4943 ;	../nRFLE.c:80: rf_write_register(RF_CONFIG,&buffer,1 ) ;
   1372 90r00r08      [24] 4944 	mov	dptr,#_rf_write_register_PARM_2
   1375 74r87         [12] 4945 	mov	a,#_setCRCLength_buffer_1_241
   1377 F0            [24] 4946 	movx	@dptr,a
   1378 74s00         [12] 4947 	mov	a,#(_setCRCLength_buffer_1_241 >> 8)
   137A A3            [24] 4948 	inc	dptr
   137B F0            [24] 4949 	movx	@dptr,a
   137C E4            [12] 4950 	clr	a
   137D A3            [24] 4951 	inc	dptr
   137E F0            [24] 4952 	movx	@dptr,a
   137F 90r00r0B      [24] 4953 	mov	dptr,#_rf_write_register_PARM_3
   1382 74 01         [12] 4954 	mov	a,#0x01
   1384 F0            [24] 4955 	movx	@dptr,a
   1385 E4            [12] 4956 	clr	a
   1386 A3            [24] 4957 	inc	dptr
   1387 F0            [24] 4958 	movx	@dptr,a
   1388 75 82 00      [24] 4959 	mov	dpl,#0x00
   138B 02r00rBC      [24] 4960 	ljmp	_rf_write_register
                           4961 ;------------------------------------------------------------
                           4962 ;Allocation info for local variables in function 'setPALevel'
                           4963 ;------------------------------------------------------------
                           4964 ;level                     Allocated with name '_setPALevel_level_1_242'
                           4965 ;setup                     Allocated with name '_setPALevel_setup_1_243'
                           4966 ;------------------------------------------------------------
                           4967 ;	../nRFLE.c:84: void setPALevel(unsigned char level)
                           4968 ;	-----------------------------------------
                           4969 ;	 function setPALevel
                           4970 ;	-----------------------------------------
   138E                    4971 _setPALevel:
                           4972 ;	../nRFLE.c:88: rf_read_register(RF_RF_SETUP,&setup,1) ;
   138E 90r00r28      [24] 4973 	mov	dptr,#_rf_read_register_PARM_2
   1391 74r88         [12] 4974 	mov	a,#_setPALevel_setup_1_243
   1393 F0            [24] 4975 	movx	@dptr,a
   1394 74s00         [12] 4976 	mov	a,#(_setPALevel_setup_1_243 >> 8)
   1396 A3            [24] 4977 	inc	dptr
   1397 F0            [24] 4978 	movx	@dptr,a
   1398 E4            [12] 4979 	clr	a
   1399 A3            [24] 4980 	inc	dptr
   139A F0            [24] 4981 	movx	@dptr,a
   139B 90r00r2B      [24] 4982 	mov	dptr,#_rf_read_register_PARM_3
   139E 74 01         [12] 4983 	mov	a,#0x01
   13A0 F0            [24] 4984 	movx	@dptr,a
   13A1 E4            [12] 4985 	clr	a
   13A2 A3            [24] 4986 	inc	dptr
   13A3 F0            [24] 4987 	movx	@dptr,a
   13A4 75 82 06      [24] 4988 	mov	dpl,#0x06
   13A7 12r03r70      [24] 4989 	lcall	_rf_read_register
                           4990 ;	../nRFLE.c:90: setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
   13AA 90r00r88      [24] 4991 	mov	dptr,#_setPALevel_setup_1_243
   13AD E0            [24] 4992 	movx	a,@dptr
   13AE 54 F9         [12] 4993 	anl	a,#0xF9
   13B0 F0            [24] 4994 	movx	@dptr,a
                           4995 ;	../nRFLE.c:93: rf_write_register(RF_RF_SETUP,&setup,1);
   13B1 90r00r08      [24] 4996 	mov	dptr,#_rf_write_register_PARM_2
   13B4 74r88         [12] 4997 	mov	a,#_setPALevel_setup_1_243
   13B6 F0            [24] 4998 	movx	@dptr,a
   13B7 74s00         [12] 4999 	mov	a,#(_setPALevel_setup_1_243 >> 8)
   13B9 A3            [24] 5000 	inc	dptr
   13BA F0            [24] 5001 	movx	@dptr,a
   13BB E4            [12] 5002 	clr	a
   13BC A3            [24] 5003 	inc	dptr
   13BD F0            [24] 5004 	movx	@dptr,a
   13BE 90r00r0B      [24] 5005 	mov	dptr,#_rf_write_register_PARM_3
   13C1 74 01         [12] 5006 	mov	a,#0x01
   13C3 F0            [24] 5007 	movx	@dptr,a
   13C4 E4            [12] 5008 	clr	a
   13C5 A3            [24] 5009 	inc	dptr
   13C6 F0            [24] 5010 	movx	@dptr,a
   13C7 75 82 06      [24] 5011 	mov	dpl,#0x06
   13CA 02r00rBC      [24] 5012 	ljmp	_rf_write_register
                           5013 ;------------------------------------------------------------
                           5014 ;Allocation info for local variables in function 'openAllPipe'
                           5015 ;------------------------------------------------------------
                           5016 ;buffer                    Allocated with name '_openAllPipe_buffer_1_244'
                           5017 ;setup                     Allocated with name '_openAllPipe_setup_1_244'
                           5018 ;------------------------------------------------------------
                           5019 ;	../nRFLE.c:101: void openAllPipe()
                           5020 ;	-----------------------------------------
                           5021 ;	 function openAllPipe
                           5022 ;	-----------------------------------------
   13CD                    5023 _openAllPipe:
                           5024 ;	../nRFLE.c:106: buffer[1]=adr1;
   13CD 90r00r8A      [24] 5025 	mov	dptr,#(_openAllPipe_buffer_1_244 + 0x0001)
   13D0 74 F0         [12] 5026 	mov	a,#0xF0
   13D2 F0            [24] 5027 	movx	@dptr,a
                           5028 ;	../nRFLE.c:107: buffer[2]=adr2;
   13D3 90r00r8B      [24] 5029 	mov	dptr,#(_openAllPipe_buffer_1_244 + 0x0002)
   13D6 74 F0         [12] 5030 	mov	a,#0xF0
   13D8 F0            [24] 5031 	movx	@dptr,a
                           5032 ;	../nRFLE.c:108: buffer[3]=adr3;
   13D9 90r00r8C      [24] 5033 	mov	dptr,#(_openAllPipe_buffer_1_244 + 0x0003)
   13DC 74 F0         [12] 5034 	mov	a,#0xF0
   13DE F0            [24] 5035 	movx	@dptr,a
                           5036 ;	../nRFLE.c:109: buffer[4]=adr4;
   13DF 90r00r8D      [24] 5037 	mov	dptr,#(_openAllPipe_buffer_1_244 + 0x0004)
   13E2 74 F0         [12] 5038 	mov	a,#0xF0
   13E4 F0            [24] 5039 	movx	@dptr,a
                           5040 ;	../nRFLE.c:111: setup = 2; // en_rxaddr ,биты включения каналов B00000010 на прием
   13E5 90r00r8E      [24] 5041 	mov	dptr,#_openAllPipe_setup_1_244
   13E8 74 02         [12] 5042 	mov	a,#0x02
   13EA F0            [24] 5043 	movx	@dptr,a
                           5044 ;	../nRFLE.c:112: rf_write_register(RF_EN_RXADDR, &setup, 1);
   13EB 90r00r08      [24] 5045 	mov	dptr,#_rf_write_register_PARM_2
   13EE 74r8E         [12] 5046 	mov	a,#_openAllPipe_setup_1_244
   13F0 F0            [24] 5047 	movx	@dptr,a
   13F1 74s00         [12] 5048 	mov	a,#(_openAllPipe_setup_1_244 >> 8)
   13F3 A3            [24] 5049 	inc	dptr
   13F4 F0            [24] 5050 	movx	@dptr,a
   13F5 E4            [12] 5051 	clr	a
   13F6 A3            [24] 5052 	inc	dptr
   13F7 F0            [24] 5053 	movx	@dptr,a
   13F8 90r00r0B      [24] 5054 	mov	dptr,#_rf_write_register_PARM_3
   13FB 74 01         [12] 5055 	mov	a,#0x01
   13FD F0            [24] 5056 	movx	@dptr,a
   13FE E4            [12] 5057 	clr	a
   13FF A3            [24] 5058 	inc	dptr
   1400 F0            [24] 5059 	movx	@dptr,a
   1401 75 82 02      [24] 5060 	mov	dpl,#0x02
   1404 12r00rBC      [24] 5061 	lcall	_rf_write_register
                           5062 ;	../nRFLE.c:115: buffer[0]=0xD2;
   1407 90r00r89      [24] 5063 	mov	dptr,#_openAllPipe_buffer_1_244
   140A 74 D2         [12] 5064 	mov	a,#0xD2
   140C F0            [24] 5065 	movx	@dptr,a
                           5066 ;	../nRFLE.c:117: rf_write_register(RF_RX_ADDR_P0,buffer,5);
   140D 90r00r08      [24] 5067 	mov	dptr,#_rf_write_register_PARM_2
   1410 74r89         [12] 5068 	mov	a,#_openAllPipe_buffer_1_244
   1412 F0            [24] 5069 	movx	@dptr,a
   1413 74s00         [12] 5070 	mov	a,#(_openAllPipe_buffer_1_244 >> 8)
   1415 A3            [24] 5071 	inc	dptr
   1416 F0            [24] 5072 	movx	@dptr,a
   1417 E4            [12] 5073 	clr	a
   1418 A3            [24] 5074 	inc	dptr
   1419 F0            [24] 5075 	movx	@dptr,a
   141A 90r00r0B      [24] 5076 	mov	dptr,#_rf_write_register_PARM_3
   141D 74 05         [12] 5077 	mov	a,#0x05
   141F F0            [24] 5078 	movx	@dptr,a
   1420 E4            [12] 5079 	clr	a
   1421 A3            [24] 5080 	inc	dptr
   1422 F0            [24] 5081 	movx	@dptr,a
   1423 75 82 0A      [24] 5082 	mov	dpl,#0x0A
   1426 12r00rBC      [24] 5083 	lcall	_rf_write_register
                           5084 ;	../nRFLE.c:118: rf_write_register(RF_TX_ADDR,buffer,5);
   1429 90r00r08      [24] 5085 	mov	dptr,#_rf_write_register_PARM_2
   142C 74r89         [12] 5086 	mov	a,#_openAllPipe_buffer_1_244
   142E F0            [24] 5087 	movx	@dptr,a
   142F 74s00         [12] 5088 	mov	a,#(_openAllPipe_buffer_1_244 >> 8)
   1431 A3            [24] 5089 	inc	dptr
   1432 F0            [24] 5090 	movx	@dptr,a
   1433 E4            [12] 5091 	clr	a
   1434 A3            [24] 5092 	inc	dptr
   1435 F0            [24] 5093 	movx	@dptr,a
   1436 90r00r0B      [24] 5094 	mov	dptr,#_rf_write_register_PARM_3
   1439 74 05         [12] 5095 	mov	a,#0x05
   143B F0            [24] 5096 	movx	@dptr,a
   143C E4            [12] 5097 	clr	a
   143D A3            [24] 5098 	inc	dptr
   143E F0            [24] 5099 	movx	@dptr,a
   143F 75 82 10      [24] 5100 	mov	dpl,#0x10
   1442 12r00rBC      [24] 5101 	lcall	_rf_write_register
                           5102 ;	../nRFLE.c:122: buffer[0]=0xE1;
   1445 90r00r89      [24] 5103 	mov	dptr,#_openAllPipe_buffer_1_244
   1448 74 E1         [12] 5104 	mov	a,#0xE1
   144A F0            [24] 5105 	movx	@dptr,a
                           5106 ;	../nRFLE.c:124: rf_write_register(RF_RX_ADDR_P0+1,buffer,5);
   144B 90r00r08      [24] 5107 	mov	dptr,#_rf_write_register_PARM_2
   144E 74r89         [12] 5108 	mov	a,#_openAllPipe_buffer_1_244
   1450 F0            [24] 5109 	movx	@dptr,a
   1451 74s00         [12] 5110 	mov	a,#(_openAllPipe_buffer_1_244 >> 8)
   1453 A3            [24] 5111 	inc	dptr
   1454 F0            [24] 5112 	movx	@dptr,a
   1455 E4            [12] 5113 	clr	a
   1456 A3            [24] 5114 	inc	dptr
   1457 F0            [24] 5115 	movx	@dptr,a
   1458 90r00r0B      [24] 5116 	mov	dptr,#_rf_write_register_PARM_3
   145B 74 05         [12] 5117 	mov	a,#0x05
   145D F0            [24] 5118 	movx	@dptr,a
   145E E4            [12] 5119 	clr	a
   145F A3            [24] 5120 	inc	dptr
   1460 F0            [24] 5121 	movx	@dptr,a
   1461 75 82 0B      [24] 5122 	mov	dpl,#0x0B
   1464 12r00rBC      [24] 5123 	lcall	_rf_write_register
                           5124 ;	../nRFLE.c:126: setup=32; //
   1467 90r00r8E      [24] 5125 	mov	dptr,#_openAllPipe_setup_1_244
   146A 74 20         [12] 5126 	mov	a,#0x20
   146C F0            [24] 5127 	movx	@dptr,a
                           5128 ;	../nRFLE.c:127: rf_write_register(RF_RX_PW_P0+1,&setup,1);
   146D 90r00r08      [24] 5129 	mov	dptr,#_rf_write_register_PARM_2
   1470 74r8E         [12] 5130 	mov	a,#_openAllPipe_setup_1_244
   1472 F0            [24] 5131 	movx	@dptr,a
   1473 74s00         [12] 5132 	mov	a,#(_openAllPipe_setup_1_244 >> 8)
   1475 A3            [24] 5133 	inc	dptr
   1476 F0            [24] 5134 	movx	@dptr,a
   1477 E4            [12] 5135 	clr	a
   1478 A3            [24] 5136 	inc	dptr
   1479 F0            [24] 5137 	movx	@dptr,a
   147A 90r00r0B      [24] 5138 	mov	dptr,#_rf_write_register_PARM_3
   147D 74 01         [12] 5139 	mov	a,#0x01
   147F F0            [24] 5140 	movx	@dptr,a
   1480 E4            [12] 5141 	clr	a
   1481 A3            [24] 5142 	inc	dptr
   1482 F0            [24] 5143 	movx	@dptr,a
   1483 75 82 12      [24] 5144 	mov	dpl,#0x12
   1486 02r00rBC      [24] 5145 	ljmp	_rf_write_register
                           5146 ;------------------------------------------------------------
                           5147 ;Allocation info for local variables in function 'setdimmer'
                           5148 ;------------------------------------------------------------
                           5149 ;value                     Allocated with name '_setdimmer_value_1_245'
                           5150 ;------------------------------------------------------------
                           5151 ;	main.c:39: void setdimmer(uint8_t value){
                           5152 ;	-----------------------------------------
                           5153 ;	 function setdimmer
                           5154 ;	-----------------------------------------
   1489                    5155 _setdimmer:
   1489 E5 82         [12] 5156 	mov	a,dpl
                           5157 ;	main.c:40: valuepwm=65535-DIMSTART*(DIMMERSTEP-value);
   148B 90r00rA1      [24] 5158 	mov	dptr,#_setdimmer_value_1_245
   148E F0            [24] 5159 	movx	@dptr,a
   148F FF            [12] 5160 	mov	r7,a
   1490 FD            [12] 5161 	mov	r5,a
   1491 7E 00         [12] 5162 	mov	r6,#0x00
   1493 74 64         [12] 5163 	mov	a,#0x64
   1495 C3            [12] 5164 	clr	c
   1496 9D            [12] 5165 	subb	a,r5
   1497 FD            [12] 5166 	mov	r5,a
   1498 E4            [12] 5167 	clr	a
   1499 9E            [12] 5168 	subb	a,r6
   149A FE            [12] 5169 	mov	r6,a
   149B 90r00r00      [24] 5170 	mov	dptr,#__mullong_PARM_2
   149E ED            [12] 5171 	mov	a,r5
   149F F0            [24] 5172 	movx	@dptr,a
   14A0 EE            [12] 5173 	mov	a,r6
   14A1 A3            [24] 5174 	inc	dptr
   14A2 F0            [24] 5175 	movx	@dptr,a
   14A3 EE            [12] 5176 	mov	a,r6
   14A4 33            [12] 5177 	rlc	a
   14A5 95 E0         [12] 5178 	subb	a,acc
   14A7 A3            [24] 5179 	inc	dptr
   14A8 F0            [24] 5180 	movx	@dptr,a
   14A9 A3            [24] 5181 	inc	dptr
   14AA F0            [24] 5182 	movx	@dptr,a
   14AB 90 00 85      [24] 5183 	mov	dptr,#(0x85&0x00ff)
   14AE E4            [12] 5184 	clr	a
   14AF F5 F0         [12] 5185 	mov	b,a
   14B1 C0 07         [24] 5186 	push	ar7
   14B3 12r00r00      [24] 5187 	lcall	__mullong
   14B6 AB 82         [24] 5188 	mov	r3,dpl
   14B8 AC 83         [24] 5189 	mov	r4,dph
   14BA AD F0         [24] 5190 	mov	r5,b
   14BC FE            [12] 5191 	mov	r6,a
   14BD D0 07         [24] 5192 	pop	ar7
   14BF 74 FF         [12] 5193 	mov	a,#0xFF
   14C1 C3            [12] 5194 	clr	c
   14C2 9B            [12] 5195 	subb	a,r3
   14C3 FB            [12] 5196 	mov	r3,a
   14C4 74 FF         [12] 5197 	mov	a,#0xFF
   14C6 9C            [12] 5198 	subb	a,r4
   14C7 FC            [12] 5199 	mov	r4,a
   14C8 E4            [12] 5200 	clr	a
   14C9 9D            [12] 5201 	subb	a,r5
   14CA FD            [12] 5202 	mov	r5,a
   14CB E4            [12] 5203 	clr	a
   14CC 9E            [12] 5204 	subb	a,r6
   14CD FE            [12] 5205 	mov	r6,a
   14CE 90r00r00      [24] 5206 	mov	dptr,#_valuepwm
   14D1 EB            [12] 5207 	mov	a,r3
   14D2 F0            [24] 5208 	movx	@dptr,a
   14D3 EC            [12] 5209 	mov	a,r4
   14D4 A3            [24] 5210 	inc	dptr
   14D5 F0            [24] 5211 	movx	@dptr,a
                           5212 ;	main.c:41: if(value ==0 | clientnf.test_data==0) {
   14D6 EF            [12] 5213 	mov	a,r7
   14D7 B4 01 00      [24] 5214 	cjne	a,#0x01,00109$
   14DA                    5215 00109$:
   14DA E4            [12] 5216 	clr	a
   14DB 33            [12] 5217 	rlc	a
   14DC FF            [12] 5218 	mov	r7,a
   14DD 90r00r92      [24] 5219 	mov	dptr,#(_clientnf + 0x0003)
   14E0 E0            [24] 5220 	movx	a,@dptr
   14E1 FE            [12] 5221 	mov	r6,a
   14E2 B4 01 00      [24] 5222 	cjne	a,#0x01,00110$
   14E5                    5223 00110$:
   14E5 E4            [12] 5224 	clr	a
   14E6 33            [12] 5225 	rlc	a
   14E7 FE            [12] 5226 	mov	r6,a
   14E8 4F            [12] 5227 	orl	a,r7
   14E9 60 08         [24] 5228 	jz	00102$
                           5229 ;	main.c:42: interrupt_control_ifp_disable();
   14EB C2 A8         [12] 5230 	clr _IEN0_SB_IFP 
                           5231 ;	main.c:43: gpio_pin_val_clear(DIMMPIN);
   14ED 75 82 02      [24] 5232 	mov	dpl,#0x02
   14F0 02r07r51      [24] 5233 	ljmp	_gpio_pin_val_clear
   14F3                    5234 00102$:
                           5235 ;	main.c:44: } else interrupt_control_ifp_enable();
   14F3 D2 A8         [12] 5236 	setb _IEN0_SB_IFP 
   14F5 22            [24] 5237 	ret
                           5238 ;------------------------------------------------------------
                           5239 ;Allocation info for local variables in function 'isr_ifp'
                           5240 ;------------------------------------------------------------
                           5241 ;	main.c:50: interrupt_isr_ifp()
                           5242 ;	-----------------------------------------
                           5243 ;	 function isr_ifp
                           5244 ;	-----------------------------------------
   14F6                    5245 _isr_ifp:
   14F6 C0*00         [24] 5246 	push	bits
   14F8 C0 E0         [24] 5247 	push	acc
   14FA C0 F0         [24] 5248 	push	b
   14FC C0 82         [24] 5249 	push	dpl
   14FE C0 83         [24] 5250 	push	dph
   1500 C0 07         [24] 5251 	push	(0+7)
   1502 C0 06         [24] 5252 	push	(0+6)
   1504 C0 05         [24] 5253 	push	(0+5)
   1506 C0 04         [24] 5254 	push	(0+4)
   1508 C0 03         [24] 5255 	push	(0+3)
   150A C0 02         [24] 5256 	push	(0+2)
   150C C0 01         [24] 5257 	push	(0+1)
   150E C0 00         [24] 5258 	push	(0+0)
   1510 C0 D0         [24] 5259 	push	psw
   1512 75 D0 00      [24] 5260 	mov	psw,#0x00
                           5261 ;	main.c:52: timer1_stop();
   1515 C2 8E         [12] 5262 	clr _TCON_SB_TR1 
                           5263 ;	main.c:53: if(clientnf.countPWM !=0) {
   1517 90r00r90      [24] 5264 	mov	dptr,#(_clientnf + 0x0001)
   151A E0            [24] 5265 	movx	a,@dptr
   151B FE            [12] 5266 	mov	r6,a
   151C A3            [24] 5267 	inc	dptr
   151D E0            [24] 5268 	movx	a,@dptr
   151E FF            [12] 5269 	mov	r7,a
   151F 4E            [12] 5270 	orl	a,r6
   1520 60 0E         [24] 5271 	jz	00102$
                           5272 ;	main.c:56: timer1_set_t1_val(valuepwm);
   1522 90r00r00      [24] 5273 	mov	dptr,#_valuepwm
   1525 E0            [24] 5274 	movx	a,@dptr
   1526 F5 8B         [12] 5275 	mov	((_T1 >> 0) & 0xFF),a
   1528 A3            [24] 5276 	inc	dptr
   1529 E0            [24] 5277 	movx	a,@dptr
   152A F5 8D         [12] 5278 	mov	((_T1 >> 8) & 0xFF),a
                           5279 ;	main.c:57: timer1_run();
   152C D2 8E         [12] 5280 	setb _TCON_SB_TR1 
   152E 80 06         [24] 5281 	sjmp	00103$
   1530                    5282 00102$:
                           5283 ;	main.c:59: else gpio_pin_val_clear(DIMMPIN);
   1530 75 82 02      [24] 5284 	mov	dpl,#0x02
   1533 12r07r51      [24] 5285 	lcall	_gpio_pin_val_clear
   1536                    5286 00103$:
                           5287 ;	main.c:60: stdimm=1;
   1536 90r00rA2      [24] 5288 	mov	dptr,#_stdimm
   1539 74 01         [12] 5289 	mov	a,#0x01
   153B F0            [24] 5290 	movx	@dptr,a
   153C D0 D0         [24] 5291 	pop	psw
   153E D0 00         [24] 5292 	pop	(0+0)
   1540 D0 01         [24] 5293 	pop	(0+1)
   1542 D0 02         [24] 5294 	pop	(0+2)
   1544 D0 03         [24] 5295 	pop	(0+3)
   1546 D0 04         [24] 5296 	pop	(0+4)
   1548 D0 05         [24] 5297 	pop	(0+5)
   154A D0 06         [24] 5298 	pop	(0+6)
   154C D0 07         [24] 5299 	pop	(0+7)
   154E D0 83         [24] 5300 	pop	dph
   1550 D0 82         [24] 5301 	pop	dpl
   1552 D0 F0         [24] 5302 	pop	b
   1554 D0 E0         [24] 5303 	pop	acc
   1556 D0*00         [24] 5304 	pop	bits
   1558 32            [24] 5305 	reti
                           5306 ;------------------------------------------------------------
                           5307 ;Allocation info for local variables in function 'isr_t1'
                           5308 ;------------------------------------------------------------
                           5309 ;	main.c:64: interrupt_isr_t1() {
                           5310 ;	-----------------------------------------
                           5311 ;	 function isr_t1
                           5312 ;	-----------------------------------------
   1559                    5313 _isr_t1:
   1559 C0*00         [24] 5314 	push	bits
   155B C0 E0         [24] 5315 	push	acc
   155D C0 F0         [24] 5316 	push	b
   155F C0 82         [24] 5317 	push	dpl
   1561 C0 83         [24] 5318 	push	dph
   1563 C0 07         [24] 5319 	push	(0+7)
   1565 C0 06         [24] 5320 	push	(0+6)
   1567 C0 05         [24] 5321 	push	(0+5)
   1569 C0 04         [24] 5322 	push	(0+4)
   156B C0 03         [24] 5323 	push	(0+3)
   156D C0 02         [24] 5324 	push	(0+2)
   156F C0 01         [24] 5325 	push	(0+1)
   1571 C0 00         [24] 5326 	push	(0+0)
   1573 C0 D0         [24] 5327 	push	psw
   1575 75 D0 00      [24] 5328 	mov	psw,#0x00
                           5329 ;	main.c:66: if (stdimm) {
   1578 90r00rA2      [24] 5330 	mov	dptr,#_stdimm
   157B E0            [24] 5331 	movx	a,@dptr
   157C FF            [12] 5332 	mov	r7,a
   157D 60 13         [24] 5333 	jz	00102$
                           5334 ;	main.c:67: gpio_pin_val_set(DIMMPIN); 
   157F 75 82 02      [24] 5335 	mov	dpl,#0x02
   1582 12r07rBC      [24] 5336 	lcall	_gpio_pin_val_set
                           5337 ;	main.c:68: timer1_set_t1_val(65535-100);
   1585 75 8B 9B      [24] 5338 	mov	((_T1 >> 0) & 0xFF),#0x9B
   1588 75 8D FF      [24] 5339 	mov	((_T1 >> 8) & 0xFF),#0xFF
                           5340 ;	main.c:69: stdimm=0;
   158B 90r00rA2      [24] 5341 	mov	dptr,#_stdimm
   158E E4            [12] 5342 	clr	a
   158F F0            [24] 5343 	movx	@dptr,a
   1590 80 06         [24] 5344 	sjmp	00104$
   1592                    5345 00102$:
                           5346 ;	main.c:71: gpio_pin_val_clear(DIMMPIN);
   1592 75 82 02      [24] 5347 	mov	dpl,#0x02
   1595 12r07r51      [24] 5348 	lcall	_gpio_pin_val_clear
   1598                    5349 00104$:
   1598 D0 D0         [24] 5350 	pop	psw
   159A D0 00         [24] 5351 	pop	(0+0)
   159C D0 01         [24] 5352 	pop	(0+1)
   159E D0 02         [24] 5353 	pop	(0+2)
   15A0 D0 03         [24] 5354 	pop	(0+3)
   15A2 D0 04         [24] 5355 	pop	(0+4)
   15A4 D0 05         [24] 5356 	pop	(0+5)
   15A6 D0 06         [24] 5357 	pop	(0+6)
   15A8 D0 07         [24] 5358 	pop	(0+7)
   15AA D0 83         [24] 5359 	pop	dph
   15AC D0 82         [24] 5360 	pop	dpl
   15AE D0 F0         [24] 5361 	pop	b
   15B0 D0 E0         [24] 5362 	pop	acc
   15B2 D0*00         [24] 5363 	pop	bits
   15B4 32            [24] 5364 	reti
                           5365 ;------------------------------------------------------------
                           5366 ;Allocation info for local variables in function 'dimmon'
                           5367 ;------------------------------------------------------------
                           5368 ;mode                      Allocated with name '_dimmon_mode_1_252'
                           5369 ;------------------------------------------------------------
                           5370 ;	main.c:74: void dimmon(uint8_t mode) // функция управлением вкл/выкл
                           5371 ;	-----------------------------------------
                           5372 ;	 function dimmon
                           5373 ;	-----------------------------------------
   15B5                    5374 _dimmon:
   15B5 E5 82         [12] 5375 	mov	a,dpl
                           5376 ;	main.c:76: if (mode) interrupt_control_ifp_enable();
   15B7 90r00rA3      [24] 5377 	mov	dptr,#_dimmon_mode_1_252
   15BA F0            [24] 5378 	movx	@dptr,a
   15BB FF            [12] 5379 	mov	r7,a
   15BC 60 04         [24] 5380 	jz	00102$
   15BE D2 A8         [12] 5381 	setb _IEN0_SB_IFP 
   15C0 80 0E         [24] 5382 	sjmp	00103$
   15C2                    5383 00102$:
                           5384 ;	main.c:78: interrupt_control_ifp_disable();
   15C2 C2 A8         [12] 5385 	clr _IEN0_SB_IFP 
                           5386 ;	main.c:79: timer1_stop();
   15C4 C2 8E         [12] 5387 	clr _TCON_SB_TR1 
                           5388 ;	main.c:80: gpio_pin_val_clear(DIMMPIN);
   15C6 75 82 02      [24] 5389 	mov	dpl,#0x02
   15C9 C0 07         [24] 5390 	push	ar7
   15CB 12r07r51      [24] 5391 	lcall	_gpio_pin_val_clear
   15CE D0 07         [24] 5392 	pop	ar7
   15D0                    5393 00103$:
                           5394 ;	main.c:82: clientnf.test_data=mode;
   15D0 90r00r92      [24] 5395 	mov	dptr,#(_clientnf + 0x0003)
   15D3 EF            [12] 5396 	mov	a,r7
   15D4 F0            [24] 5397 	movx	@dptr,a
   15D5 22            [24] 5398 	ret
                           5399 ;------------------------------------------------------------
                           5400 ;Allocation info for local variables in function 'isr_rtc2'
                           5401 ;------------------------------------------------------------
                           5402 ;	main.c:89: interrupt_isr_rtc2()
                           5403 ;	-----------------------------------------
                           5404 ;	 function isr_rtc2
                           5405 ;	-----------------------------------------
   15D6                    5406 _isr_rtc2:
   15D6 C0 E0         [24] 5407 	push	acc
   15D8 C0 82         [24] 5408 	push	dpl
   15DA C0 83         [24] 5409 	push	dph
   15DC C0 D0         [24] 5410 	push	psw
                           5411 ;	main.c:91: countrtc++;
   15DE 90r00r02      [24] 5412 	mov	dptr,#_countrtc
   15E1 E0            [24] 5413 	movx	a,@dptr
   15E2 24 01         [12] 5414 	add	a,#0x01
   15E4 F0            [24] 5415 	movx	@dptr,a
   15E5 A3            [24] 5416 	inc	dptr
   15E6 E0            [24] 5417 	movx	a,@dptr
   15E7 34 00         [12] 5418 	addc	a,#0x00
   15E9 F0            [24] 5419 	movx	@dptr,a
   15EA A3            [24] 5420 	inc	dptr
   15EB E0            [24] 5421 	movx	a,@dptr
   15EC 34 00         [12] 5422 	addc	a,#0x00
   15EE F0            [24] 5423 	movx	@dptr,a
   15EF A3            [24] 5424 	inc	dptr
   15F0 E0            [24] 5425 	movx	a,@dptr
   15F1 34 00         [12] 5426 	addc	a,#0x00
   15F3 F0            [24] 5427 	movx	@dptr,a
   15F4 D0 D0         [24] 5428 	pop	psw
   15F6 D0 83         [24] 5429 	pop	dph
   15F8 D0 82         [24] 5430 	pop	dpl
   15FA D0 E0         [24] 5431 	pop	acc
   15FC 32            [24] 5432 	reti
                           5433 ;	eliminated unneeded mov psw,# (no regs used in bank)
                           5434 ;	eliminated unneeded push/pop b
                           5435 ;------------------------------------------------------------
                           5436 ;Allocation info for local variables in function 'main'
                           5437 ;------------------------------------------------------------
                           5438 ;state                     Allocated with name '_main_state_1_256'
                           5439 ;count                     Allocated with name '_main_count_1_256'
                           5440 ;st                        Allocated with name '_main_st_1_256'
                           5441 ;countpause                Allocated with name '_main_countpause_1_256'
                           5442 ;rewers                    Allocated with name '_main_rewers_1_256'
                           5443 ;statesend                 Allocated with name '_main_statesend_1_256'
                           5444 ;radiosend                 Allocated with name '_main_radiosend_1_256'
                           5445 ;------------------------------------------------------------
                           5446 ;	main.c:96: void main()
                           5447 ;	-----------------------------------------
                           5448 ;	 function main
                           5449 ;	-----------------------------------------
   15FD                    5450 _main:
                           5451 ;	main.c:101: uint8_t st=0,countpause=0,rewers=0; // for key dat=0,
   15FD 90r00rC4      [24] 5452 	mov	dptr,#_main_st_1_256
                           5453 ;	main.c:102: unsigned long statesend=0;
   1600 E4            [12] 5454 	clr	a
   1601 F0            [24] 5455 	movx	@dptr,a
   1602 90r00rC5      [24] 5456 	mov	dptr,#_main_countpause_1_256
   1605 F0            [24] 5457 	movx	@dptr,a
   1606 90r00rC6      [24] 5458 	mov	dptr,#_main_rewers_1_256
   1609 F0            [24] 5459 	movx	@dptr,a
   160A 90r00rC7      [24] 5460 	mov	dptr,#_main_statesend_1_256
   160D F0            [24] 5461 	movx	@dptr,a
   160E E4            [12] 5462 	clr	a
   160F A3            [24] 5463 	inc	dptr
   1610 F0            [24] 5464 	movx	@dptr,a
   1611 E4            [12] 5465 	clr	a
   1612 A3            [24] 5466 	inc	dptr
   1613 F0            [24] 5467 	movx	@dptr,a
   1614 E4            [12] 5468 	clr	a
   1615 A3            [24] 5469 	inc	dptr
   1616 F0            [24] 5470 	movx	@dptr,a
                           5471 ;	main.c:103: unsigned long radiosend=0;
   1617 90r00rCB      [24] 5472 	mov	dptr,#_main_radiosend_1_256
   161A E4            [12] 5473 	clr	a
   161B F0            [24] 5474 	movx	@dptr,a
   161C E4            [12] 5475 	clr	a
   161D A3            [24] 5476 	inc	dptr
   161E F0            [24] 5477 	movx	@dptr,a
   161F E4            [12] 5478 	clr	a
   1620 A3            [24] 5479 	inc	dptr
   1621 F0            [24] 5480 	movx	@dptr,a
   1622 E4            [12] 5481 	clr	a
   1623 A3            [24] 5482 	inc	dptr
   1624 F0            [24] 5483 	movx	@dptr,a
                           5484 ;	main.c:106: CLKLFCTRL=1; // 0 -внешний кварц на P0.1 и P0.0. 1 - внутренний генератор.
   1625 75 AD 01      [24] 5485 	mov	_CLKLFCTRL,#0x01
                           5486 ;	main.c:107: rtc2_configure(RTC2_CONFIG_OPTION_COMPARE_MODE_0_RESET_AT_IRQ ,8191); //65535=2 сек, 32767=1 сек,16383 = 0.250 сек ,8191 = 0.125 сек
   1628 90r00r7D      [24] 5487 	mov	dptr,#_rtc2_configure_PARM_2
   162B 74 FF         [12] 5488 	mov	a,#0xFF
   162D F0            [24] 5489 	movx	@dptr,a
   162E 74 1F         [12] 5490 	mov	a,#0x1F
   1630 A3            [24] 5491 	inc	dptr
   1631 F0            [24] 5492 	movx	@dptr,a
   1632 75 82 06      [24] 5493 	mov	dpl,#0x06
   1635 12r12r19      [24] 5494 	lcall	_rtc2_configure
                           5495 ;	main.c:108: rtc2_run();
   1638 43 B3 01      [24] 5496 	orl	_RTC2CON,#0x01
                           5497 ;	main.c:109: pwr_clk_mgmt_wakeup_configure(PWR_CLK_MGMT_WAKEUP_CONFIG_OPTION_WAKEUP_ON_RTC2_TICK_IF_INT_ENABLED,0);
   163B 90r00r4E      [24] 5498 	mov	dptr,#_pwr_clk_mgmt_wakeup_configure_PARM_2
   163E E4            [12] 5499 	clr	a
   163F F0            [24] 5500 	movx	@dptr,a
   1640 E4            [12] 5501 	clr	a
   1641 A3            [24] 5502 	inc	dptr
   1642 F0            [24] 5503 	movx	@dptr,a
   1643 75 82 00      [24] 5504 	mov	dpl,#0x00
   1646 12r09r9B      [24] 5505 	lcall	_pwr_clk_mgmt_wakeup_configure
                           5506 ;	main.c:110: interrupt_control_rtc2_enable();
   1649 D2 BD         [12] 5507 	setb _IEN1_SB_TICK 
                           5508 ;	main.c:112: gpio_pin_configure(BUTTON,GPIO_PIN_CONFIG_OPTION_DIR_INPUT|GPIO_PIN_CONFIG_OPTION_PIN_MODE_INPUT_BUFFER_ON_PULL_UP_RESISTOR); // для кнопки на вход и подтянуть резистором. 
   164B 90r00r38      [24] 5509 	mov	dptr,#_gpio_pin_configure_PARM_2
   164E 74 40         [12] 5510 	mov	a,#0x40
   1650 F0            [24] 5511 	movx	@dptr,a
   1651 75 82 04      [24] 5512 	mov	dpl,#0x04
   1654 12r04rC2      [24] 5513 	lcall	_gpio_pin_configure
                           5514 ;	main.c:115: gpio_pin_configure(DIMMPIN,GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT);
   1657 90r00r38      [24] 5515 	mov	dptr,#_gpio_pin_configure_PARM_2
   165A 74 01         [12] 5516 	mov	a,#0x01
   165C F0            [24] 5517 	movx	@dptr,a
   165D 75 82 02      [24] 5518 	mov	dpl,#0x02
   1660 12r04rC2      [24] 5519 	lcall	_gpio_pin_configure
                           5520 ;	main.c:116: gpio_pin_val_set(DIMMPIN);
   1663 75 82 02      [24] 5521 	mov	dpl,#0x02
   1666 12r07rBC      [24] 5522 	lcall	_gpio_pin_val_set
                           5523 ;	main.c:117: delay_ms(500); 
   1669 90 01 F4      [24] 5524 	mov	dptr,#0x01F4
   166C 12r08rBF      [24] 5525 	lcall	_delay_ms
                           5526 ;	main.c:118: gpio_pin_val_clear(DIMMPIN);
   166F 75 82 02      [24] 5527 	mov	dpl,#0x02
   1672 12r07r51      [24] 5528 	lcall	_gpio_pin_val_clear
                           5529 ;	main.c:119: delay_ms(500); 
   1675 90 01 F4      [24] 5530 	mov	dptr,#0x01F4
   1678 12r08rBF      [24] 5531 	lcall	_delay_ms
                           5532 ;	main.c:122: radiobegin(); //
   167B 12r12r49      [24] 5533 	lcall	_radiobegin
                           5534 ;	main.c:123: openAllPipe(); // открываем прием/передачу
   167E 12r13rCD      [24] 5535 	lcall	_openAllPipe
                           5536 ;	main.c:125: setChannel(100);
   1681 75 82 64      [24] 5537 	mov	dpl,#0x64
   1684 12r12r6E      [24] 5538 	lcall	_setChannel
                           5539 ;	main.c:126: setDataRate(2); // 1 - 250кб , 2 - 1 мб , 3 -2 мб.
   1687 75 82 02      [24] 5540 	mov	dpl,#0x02
   168A 12r12r90      [24] 5541 	lcall	_setDataRate
                           5542 ;	main.c:127: setAutoAck(false);
   168D 75 82 00      [24] 5543 	mov	dpl,#0x00
   1690 12r12rF2      [24] 5544 	lcall	_setAutoAck
                           5545 ;	main.c:128: setCRCLength(2); // 0 - crc off ,1 - 8bit ,2 - 16bit
   1693 75 82 02      [24] 5546 	mov	dpl,#0x02
   1696 12r13r25      [24] 5547 	lcall	_setCRCLength
                           5548 ;	main.c:129: setPALevel(3) ; // мощность 0..3
   1699 75 82 03      [24] 5549 	mov	dpl,#0x03
   169C 12r13r8E      [24] 5550 	lcall	_setPALevel
                           5551 ;	main.c:132: clientnf.identifier=chclient;
   169F 90r00r8F      [24] 5552 	mov	dptr,#_clientnf
   16A2 74 01         [12] 5553 	mov	a,#0x01
   16A4 F0            [24] 5554 	movx	@dptr,a
                           5555 ;	main.c:133: clientnf.countPWM=10;
   16A5 90r00r90      [24] 5556 	mov	dptr,#(_clientnf + 0x0001)
   16A8 74 0A         [12] 5557 	mov	a,#0x0A
   16AA F0            [24] 5558 	movx	@dptr,a
   16AB E4            [12] 5559 	clr	a
   16AC A3            [24] 5560 	inc	dptr
   16AD F0            [24] 5561 	movx	@dptr,a
                           5562 ;	main.c:136: interrupt_configure_ifp(INTERRUPT_IFP_INPUT_GPINT0,INTERRUPT_IFP_CONFIG_OPTION_ENABLE | INTERRUPT_IFP_CONFIG_OPTION_TYPE_FALLING_EDGE);
   16AE 90r00r59      [24] 5563 	mov	dptr,#_interrupt_configure_ifp_PARM_2
   16B1 74 81         [12] 5564 	mov	a,#0x81
   16B3 F0            [24] 5565 	movx	@dptr,a
   16B4 75 82 08      [24] 5566 	mov	dpl,#0x08
   16B7 12r0Ar87      [24] 5567 	lcall	_interrupt_configure_ifp
                           5568 ;	main.c:137: interrupt_control_ifp_enable();
   16BA D2 A8         [12] 5569 	setb _IEN0_SB_IFP 
                           5570 ;	main.c:140: interrupt_control_t1_enable()	;
   16BC D2 AB         [12] 5571 	setb _IEN0_SB_T1 
                           5572 ;	main.c:141: timer1_configure(TIMER1_CONFIG_OPTION_MODE_1_16_BIT_CTR_TMR,0);
   16BE 90r00r63      [24] 5573 	mov	dptr,#_timer1_configure_PARM_2
   16C1 E4            [12] 5574 	clr	a
   16C2 F0            [24] 5575 	movx	@dptr,a
   16C3 E4            [12] 5576 	clr	a
   16C4 A3            [24] 5577 	inc	dptr
   16C5 F0            [24] 5578 	movx	@dptr,a
   16C6 75 82 10      [24] 5579 	mov	dpl,#0x10
   16C9 12r0Br9A      [24] 5580 	lcall	_timer1_configure
                           5581 ;	main.c:142: timer1_run();
   16CC D2 8E         [12] 5582 	setb _TCON_SB_TR1 
                           5583 ;	main.c:144: sti();
   16CE D2 AF         [12] 5584 	setb _IEN0_SB_GLOBAL 
                           5585 ;	main.c:149: while(1)
   16D0                    5586 00146$:
                           5587 ;	main.c:156: if (countrtc-radiosend >=timesend) {
   16D0 90r00rCB      [24] 5588 	mov	dptr,#_main_radiosend_1_256
   16D3 E0            [24] 5589 	movx	a,@dptr
   16D4 FC            [12] 5590 	mov	r4,a
   16D5 A3            [24] 5591 	inc	dptr
   16D6 E0            [24] 5592 	movx	a,@dptr
   16D7 FD            [12] 5593 	mov	r5,a
   16D8 A3            [24] 5594 	inc	dptr
   16D9 E0            [24] 5595 	movx	a,@dptr
   16DA FE            [12] 5596 	mov	r6,a
   16DB A3            [24] 5597 	inc	dptr
   16DC E0            [24] 5598 	movx	a,@dptr
   16DD FF            [12] 5599 	mov	r7,a
   16DE 90r00r02      [24] 5600 	mov	dptr,#_countrtc
   16E1 E0            [24] 5601 	movx	a,@dptr
   16E2 F8            [12] 5602 	mov	r0,a
   16E3 A3            [24] 5603 	inc	dptr
   16E4 E0            [24] 5604 	movx	a,@dptr
   16E5 F9            [12] 5605 	mov	r1,a
   16E6 A3            [24] 5606 	inc	dptr
   16E7 E0            [24] 5607 	movx	a,@dptr
   16E8 FA            [12] 5608 	mov	r2,a
   16E9 A3            [24] 5609 	inc	dptr
   16EA E0            [24] 5610 	movx	a,@dptr
   16EB FB            [12] 5611 	mov	r3,a
   16EC E8            [12] 5612 	mov	a,r0
   16ED C3            [12] 5613 	clr	c
   16EE 9C            [12] 5614 	subb	a,r4
   16EF FC            [12] 5615 	mov	r4,a
   16F0 E9            [12] 5616 	mov	a,r1
   16F1 9D            [12] 5617 	subb	a,r5
   16F2 FD            [12] 5618 	mov	r5,a
   16F3 EA            [12] 5619 	mov	a,r2
   16F4 9E            [12] 5620 	subb	a,r6
   16F5 FE            [12] 5621 	mov	r6,a
   16F6 EB            [12] 5622 	mov	a,r3
   16F7 9F            [12] 5623 	subb	a,r7
   16F8 FF            [12] 5624 	mov	r7,a
   16F9 C3            [12] 5625 	clr	c
   16FA EC            [12] 5626 	mov	a,r4
   16FB 94 02         [12] 5627 	subb	a,#0x02
   16FD ED            [12] 5628 	mov	a,r5
   16FE 94 00         [12] 5629 	subb	a,#0x00
   1700 EE            [12] 5630 	mov	a,r6
   1701 94 00         [12] 5631 	subb	a,#0x00
   1703 EF            [12] 5632 	mov	a,r7
   1704 94 00         [12] 5633 	subb	a,#0x00
   1706 50 03         [24] 5634 	jnc	00215$
   1708 02r18r7B      [24] 5635 	ljmp	00121$
   170B                    5636 00215$:
                           5637 ;	main.c:158: rf_write_tx_payload((const uint8_t*)&clientnf, 32, true); //transmit received char over RF
   170B 7Er8F         [12] 5638 	mov	r6,#_clientnf
   170D 7Fs00         [12] 5639 	mov	r7,#(_clientnf >> 8)
   170F 7D 00         [12] 5640 	mov	r5,#0x00
   1711 90r00r0E      [24] 5641 	mov	dptr,#_rf_write_tx_payload_PARM_2
   1714 74 20         [12] 5642 	mov	a,#0x20
   1716 F0            [24] 5643 	movx	@dptr,a
   1717 E4            [12] 5644 	clr	a
   1718 A3            [24] 5645 	inc	dptr
   1719 F0            [24] 5646 	movx	@dptr,a
   171A 90r00r10      [24] 5647 	mov	dptr,#_rf_write_tx_payload_PARM_3
   171D 74 01         [12] 5648 	mov	a,#0x01
   171F F0            [24] 5649 	movx	@dptr,a
   1720 8E 82         [24] 5650 	mov	dpl,r6
   1722 8F 83         [24] 5651 	mov	dph,r7
   1724 8D F0         [24] 5652 	mov	b,r5
   1726 12r01r00      [24] 5653 	lcall	_rf_write_tx_payload
                           5654 ;	main.c:161: while(!(rf_irq_pin_active() && rf_irq_tx_ds_active()));
   1729                    5655 00102$:
   1729 30 C1 FD      [24] 5656 	jnb	_IRCON_SB_RFIRQ,00102$
   172C 90r00r18      [24] 5657 	mov	dptr,#_rf_spi_execute_command_PARM_2
   172F E4            [12] 5658 	clr	a
   1730 F0            [24] 5659 	movx	@dptr,a
   1731 E4            [12] 5660 	clr	a
   1732 A3            [24] 5661 	inc	dptr
   1733 F0            [24] 5662 	movx	@dptr,a
   1734 E4            [12] 5663 	clr	a
   1735 A3            [24] 5664 	inc	dptr
   1736 F0            [24] 5665 	movx	@dptr,a
   1737 90r00r1B      [24] 5666 	mov	dptr,#_rf_spi_execute_command_PARM_3
   173A E4            [12] 5667 	clr	a
   173B F0            [24] 5668 	movx	@dptr,a
   173C E4            [12] 5669 	clr	a
   173D A3            [24] 5670 	inc	dptr
   173E F0            [24] 5671 	movx	@dptr,a
   173F 90r00r1D      [24] 5672 	mov	dptr,#_rf_spi_execute_command_PARM_4
   1742 74 01         [12] 5673 	mov	a,#0x01
   1744 F0            [24] 5674 	movx	@dptr,a
   1745 75 82 FF      [24] 5675 	mov	dpl,#0xFF
   1748 12r02r35      [24] 5676 	lcall	_rf_spi_execute_command
   174B E5 82         [12] 5677 	mov	a,dpl
   174D 30 E5 D9      [24] 5678 	jnb	acc.5,00102$
                           5679 ;	main.c:163: rf_irq_clear_all(); //clear all interrupts in the 24L01
   1750 12r01rC6      [24] 5680 	lcall	_rf_irq_clear_all
                           5681 ;	main.c:164: rf_set_as_rx(true); //change the device to an RX to get the character back from the other 24L01
   1753 75 82 01      [24] 5682 	mov	dpl,#0x01
   1756 12r01r66      [24] 5683 	lcall	_rf_set_as_rx
                           5684 ;	main.c:168: for(count = 0; count < 25000; count++)
   1759 7E 00         [12] 5685 	mov	r6,#0x00
   175B 7F 00         [12] 5686 	mov	r7,#0x00
   175D                    5687 00148$:
                           5688 ;	main.c:171: if((rf_irq_pin_active() && rf_irq_rx_dr_active()))
   175D 20 C1 03      [24] 5689 	jb	_IRCON_SB_RFIRQ,00218$
   1760 02r17rF1      [24] 5690 	ljmp	00109$
   1763                    5691 00218$:
   1763 90r00r18      [24] 5692 	mov	dptr,#_rf_spi_execute_command_PARM_2
   1766 E4            [12] 5693 	clr	a
   1767 F0            [24] 5694 	movx	@dptr,a
   1768 E4            [12] 5695 	clr	a
   1769 A3            [24] 5696 	inc	dptr
   176A F0            [24] 5697 	movx	@dptr,a
   176B E4            [12] 5698 	clr	a
   176C A3            [24] 5699 	inc	dptr
   176D F0            [24] 5700 	movx	@dptr,a
   176E 90r00r1B      [24] 5701 	mov	dptr,#_rf_spi_execute_command_PARM_3
   1771 E4            [12] 5702 	clr	a
   1772 F0            [24] 5703 	movx	@dptr,a
   1773 E4            [12] 5704 	clr	a
   1774 A3            [24] 5705 	inc	dptr
   1775 F0            [24] 5706 	movx	@dptr,a
   1776 90r00r1D      [24] 5707 	mov	dptr,#_rf_spi_execute_command_PARM_4
   1779 74 01         [12] 5708 	mov	a,#0x01
   177B F0            [24] 5709 	movx	@dptr,a
   177C 75 82 FF      [24] 5710 	mov	dpl,#0xFF
   177F C0 07         [24] 5711 	push	ar7
   1781 C0 06         [24] 5712 	push	ar6
   1783 12r02r35      [24] 5713 	lcall	_rf_spi_execute_command
   1786 E5 82         [12] 5714 	mov	a,dpl
   1788 D0 06         [24] 5715 	pop	ar6
   178A D0 07         [24] 5716 	pop	ar7
   178C 30 E6 62      [24] 5717 	jnb	acc.6,00109$
                           5718 ;	main.c:174: if (clientnf.count <= 2147483646) clientnf.count++;      /// счетчик передач для контроля качества канала
   178F 90r00r95      [24] 5719 	mov	dptr,#(_clientnf + 0x0006)
   1792 E0            [24] 5720 	movx	a,@dptr
   1793 FA            [12] 5721 	mov	r2,a
   1794 A3            [24] 5722 	inc	dptr
   1795 E0            [24] 5723 	movx	a,@dptr
   1796 FB            [12] 5724 	mov	r3,a
   1797 A3            [24] 5725 	inc	dptr
   1798 E0            [24] 5726 	movx	a,@dptr
   1799 FC            [12] 5727 	mov	r4,a
   179A A3            [24] 5728 	inc	dptr
   179B E0            [24] 5729 	movx	a,@dptr
   179C FD            [12] 5730 	mov	r5,a
   179D C3            [12] 5731 	clr	c
   179E 74 FE         [12] 5732 	mov	a,#0xFE
   17A0 9A            [12] 5733 	subb	a,r2
   17A1 74 FF         [12] 5734 	mov	a,#0xFF
   17A3 9B            [12] 5735 	subb	a,r3
   17A4 74 FF         [12] 5736 	mov	a,#0xFF
   17A6 9C            [12] 5737 	subb	a,r4
   17A7 74 FF         [12] 5738 	mov	a,#(0x7F ^ 0x80)
   17A9 8D F0         [24] 5739 	mov	b,r5
   17AB 63 F0 80      [24] 5740 	xrl	b,#0x80
   17AE 95 F0         [12] 5741 	subb	a,b
   17B0 40 1D         [24] 5742 	jc	00106$
   17B2 0A            [12] 5743 	inc	r2
   17B3 BA 00 09      [24] 5744 	cjne	r2,#0x00,00221$
   17B6 0B            [12] 5745 	inc	r3
   17B7 BB 00 05      [24] 5746 	cjne	r3,#0x00,00221$
   17BA 0C            [12] 5747 	inc	r4
   17BB BC 00 01      [24] 5748 	cjne	r4,#0x00,00221$
   17BE 0D            [12] 5749 	inc	r5
   17BF                    5750 00221$:
   17BF 90r00r95      [24] 5751 	mov	dptr,#(_clientnf + 0x0006)
   17C2 EA            [12] 5752 	mov	a,r2
   17C3 F0            [24] 5753 	movx	@dptr,a
   17C4 EB            [12] 5754 	mov	a,r3
   17C5 A3            [24] 5755 	inc	dptr
   17C6 F0            [24] 5756 	movx	@dptr,a
   17C7 EC            [12] 5757 	mov	a,r4
   17C8 A3            [24] 5758 	inc	dptr
   17C9 F0            [24] 5759 	movx	@dptr,a
   17CA ED            [12] 5760 	mov	a,r5
   17CB A3            [24] 5761 	inc	dptr
   17CC F0            [24] 5762 	movx	@dptr,a
   17CD 80 0E         [24] 5763 	sjmp	00107$
   17CF                    5764 00106$:
                           5765 ;	main.c:175: else clientnf.count = 0;
   17CF 90r00r95      [24] 5766 	mov	dptr,#(_clientnf + 0x0006)
   17D2 E4            [12] 5767 	clr	a
   17D3 F0            [24] 5768 	movx	@dptr,a
   17D4 E4            [12] 5769 	clr	a
   17D5 A3            [24] 5770 	inc	dptr
   17D6 F0            [24] 5771 	movx	@dptr,a
   17D7 E4            [12] 5772 	clr	a
   17D8 A3            [24] 5773 	inc	dptr
   17D9 F0            [24] 5774 	movx	@dptr,a
   17DA E4            [12] 5775 	clr	a
   17DB A3            [24] 5776 	inc	dptr
   17DC F0            [24] 5777 	movx	@dptr,a
   17DD                    5778 00107$:
                           5779 ;	main.c:177: rf_read_rx_payload((const uint8_t*)&servernf, 32); //get the payload into data
   17DD 90r00r00      [24] 5780 	mov	dptr,#_rf_read_rx_payload_PARM_2
   17E0 74 20         [12] 5781 	mov	a,#0x20
   17E2 F0            [24] 5782 	movx	@dptr,a
   17E3 E4            [12] 5783 	clr	a
   17E4 A3            [24] 5784 	inc	dptr
   17E5 F0            [24] 5785 	movx	@dptr,a
   17E6 90r00rA4      [24] 5786 	mov	dptr,#_servernf
   17E9 75 F0 00      [24] 5787 	mov	b,#0x00
   17EC 12r00r00      [24] 5788 	lcall	_rf_read_rx_payload
                           5789 ;	main.c:178: break;
   17EF 80 2C         [24] 5790 	sjmp	00113$
   17F1                    5791 00109$:
                           5792 ;	main.c:185: if(count == 24999) clientnf.Error_Message++;
   17F1 BE A7 18      [24] 5793 	cjne	r6,#0xA7,00149$
   17F4 BF 61 15      [24] 5794 	cjne	r7,#0x61,00149$
   17F7 90r00r93      [24] 5795 	mov	dptr,#(_clientnf + 0x0004)
   17FA E0            [24] 5796 	movx	a,@dptr
   17FB FC            [12] 5797 	mov	r4,a
   17FC A3            [24] 5798 	inc	dptr
   17FD E0            [24] 5799 	movx	a,@dptr
   17FE FD            [12] 5800 	mov	r5,a
   17FF 0C            [12] 5801 	inc	r4
   1800 BC 00 01      [24] 5802 	cjne	r4,#0x00,00224$
   1803 0D            [12] 5803 	inc	r5
   1804                    5804 00224$:
   1804 90r00r93      [24] 5805 	mov	dptr,#(_clientnf + 0x0004)
   1807 EC            [12] 5806 	mov	a,r4
   1808 F0            [24] 5807 	movx	@dptr,a
   1809 ED            [12] 5808 	mov	a,r5
   180A A3            [24] 5809 	inc	dptr
   180B F0            [24] 5810 	movx	@dptr,a
   180C                    5811 00149$:
                           5812 ;	main.c:168: for(count = 0; count < 25000; count++)
   180C 0E            [12] 5813 	inc	r6
   180D BE 00 01      [24] 5814 	cjne	r6,#0x00,00225$
   1810 0F            [12] 5815 	inc	r7
   1811                    5816 00225$:
   1811 C3            [12] 5817 	clr	c
   1812 EE            [12] 5818 	mov	a,r6
   1813 94 A8         [12] 5819 	subb	a,#0xA8
   1815 EF            [12] 5820 	mov	a,r7
   1816 94 61         [12] 5821 	subb	a,#0x61
   1818 50 03         [24] 5822 	jnc	00226$
   181A 02r17r5D      [24] 5823 	ljmp	00148$
   181D                    5824 00226$:
   181D                    5825 00113$:
                           5826 ;	main.c:190: rf_irq_clear_all(); //clear interrupts again
   181D 12r01rC6      [24] 5827 	lcall	_rf_irq_clear_all
                           5828 ;	main.c:192: rf_set_as_tx(); //resume normal operation as a TX
   1820 12r01rEB      [24] 5829 	lcall	_rf_set_as_tx
                           5830 ;	main.c:195: if (servernf[0]==chclient){	
   1823 90r00rA4      [24] 5831 	mov	dptr,#_servernf
   1826 E0            [24] 5832 	movx	a,@dptr
   1827 FF            [12] 5833 	mov	r7,a
   1828 BF 01 34      [24] 5834 	cjne	r7,#0x01,00119$
                           5835 ;	main.c:198: if (servernf[1]==10) {
   182B 90r00rA5      [24] 5836 	mov	dptr,#(_servernf + 0x0001)
   182E E0            [24] 5837 	movx	a,@dptr
   182F FF            [12] 5838 	mov	r7,a
   1830 BF 0A 09      [24] 5839 	cjne	r7,#0x0A,00115$
                           5840 ;	main.c:199: dimmon(servernf[3]);
   1833 90r00rA7      [24] 5841 	mov	dptr,#(_servernf + 0x0003)
   1836 E0            [24] 5842 	movx	a,@dptr
   1837 F5 82         [12] 5843 	mov	dpl,a
   1839 12r15rB5      [24] 5844 	lcall	_dimmon
   183C                    5845 00115$:
                           5846 ;	main.c:202: if (servernf[1]==11) clientnf.countPWM=servernf[3];
   183C 90r00rA5      [24] 5847 	mov	dptr,#(_servernf + 0x0001)
   183F E0            [24] 5848 	movx	a,@dptr
   1840 FF            [12] 5849 	mov	r7,a
   1841 BF 0B 0F      [24] 5850 	cjne	r7,#0x0B,00117$
   1844 90r00rA7      [24] 5851 	mov	dptr,#(_servernf + 0x0003)
   1847 E0            [24] 5852 	movx	a,@dptr
   1848 FF            [12] 5853 	mov	r7,a
   1849 7E 00         [12] 5854 	mov	r6,#0x00
   184B 90r00r90      [24] 5855 	mov	dptr,#(_clientnf + 0x0001)
   184E EF            [12] 5856 	mov	a,r7
   184F F0            [24] 5857 	movx	@dptr,a
   1850 EE            [12] 5858 	mov	a,r6
   1851 A3            [24] 5859 	inc	dptr
   1852 F0            [24] 5860 	movx	@dptr,a
   1853                    5861 00117$:
                           5862 ;	main.c:203: setdimmer(clientnf.countPWM);
   1853 90r00r90      [24] 5863 	mov	dptr,#(_clientnf + 0x0001)
   1856 E0            [24] 5864 	movx	a,@dptr
   1857 FE            [12] 5865 	mov	r6,a
   1858 A3            [24] 5866 	inc	dptr
   1859 E0            [24] 5867 	movx	a,@dptr
   185A 8E 82         [24] 5868 	mov	dpl,r6
   185C 12r14r89      [24] 5869 	lcall	_setdimmer
   185F                    5870 00119$:
                           5871 ;	main.c:205: radiosend=countrtc;
   185F 90r00r02      [24] 5872 	mov	dptr,#_countrtc
   1862 E0            [24] 5873 	movx	a,@dptr
   1863 FC            [12] 5874 	mov	r4,a
   1864 A3            [24] 5875 	inc	dptr
   1865 E0            [24] 5876 	movx	a,@dptr
   1866 FD            [12] 5877 	mov	r5,a
   1867 A3            [24] 5878 	inc	dptr
   1868 E0            [24] 5879 	movx	a,@dptr
   1869 FE            [12] 5880 	mov	r6,a
   186A A3            [24] 5881 	inc	dptr
   186B E0            [24] 5882 	movx	a,@dptr
   186C FF            [12] 5883 	mov	r7,a
   186D 90r00rCB      [24] 5884 	mov	dptr,#_main_radiosend_1_256
   1870 EC            [12] 5885 	mov	a,r4
   1871 F0            [24] 5886 	movx	@dptr,a
   1872 ED            [12] 5887 	mov	a,r5
   1873 A3            [24] 5888 	inc	dptr
   1874 F0            [24] 5889 	movx	@dptr,a
   1875 EE            [12] 5890 	mov	a,r6
   1876 A3            [24] 5891 	inc	dptr
   1877 F0            [24] 5892 	movx	@dptr,a
   1878 EF            [12] 5893 	mov	a,r7
   1879 A3            [24] 5894 	inc	dptr
   187A F0            [24] 5895 	movx	@dptr,a
   187B                    5896 00121$:
                           5897 ;	main.c:214: if (digitalRead(BUTTON)==0){
   187B 75 82 04      [24] 5898 	mov	dpl,#0x04
   187E 12r06rBD      [24] 5899 	lcall	_gpio_pin_val_read
   1881 E5 82         [12] 5900 	mov	a,dpl
   1883 60 03         [24] 5901 	jz	00233$
   1885 02r19rB1      [24] 5902 	ljmp	00143$
   1888                    5903 00233$:
                           5904 ;	main.c:215: if (countrtc-statesend>=4) {
   1888 90r00rC7      [24] 5905 	mov	dptr,#_main_statesend_1_256
   188B E0            [24] 5906 	movx	a,@dptr
   188C FC            [12] 5907 	mov	r4,a
   188D A3            [24] 5908 	inc	dptr
   188E E0            [24] 5909 	movx	a,@dptr
   188F FD            [12] 5910 	mov	r5,a
   1890 A3            [24] 5911 	inc	dptr
   1891 E0            [24] 5912 	movx	a,@dptr
   1892 FE            [12] 5913 	mov	r6,a
   1893 A3            [24] 5914 	inc	dptr
   1894 E0            [24] 5915 	movx	a,@dptr
   1895 FF            [12] 5916 	mov	r7,a
   1896 90r00r02      [24] 5917 	mov	dptr,#_countrtc
   1899 E0            [24] 5918 	movx	a,@dptr
   189A F8            [12] 5919 	mov	r0,a
   189B A3            [24] 5920 	inc	dptr
   189C E0            [24] 5921 	movx	a,@dptr
   189D F9            [12] 5922 	mov	r1,a
   189E A3            [24] 5923 	inc	dptr
   189F E0            [24] 5924 	movx	a,@dptr
   18A0 FA            [12] 5925 	mov	r2,a
   18A1 A3            [24] 5926 	inc	dptr
   18A2 E0            [24] 5927 	movx	a,@dptr
   18A3 FB            [12] 5928 	mov	r3,a
   18A4 E8            [12] 5929 	mov	a,r0
   18A5 C3            [12] 5930 	clr	c
   18A6 9C            [12] 5931 	subb	a,r4
   18A7 FC            [12] 5932 	mov	r4,a
   18A8 E9            [12] 5933 	mov	a,r1
   18A9 9D            [12] 5934 	subb	a,r5
   18AA FD            [12] 5935 	mov	r5,a
   18AB EA            [12] 5936 	mov	a,r2
   18AC 9E            [12] 5937 	subb	a,r6
   18AD FE            [12] 5938 	mov	r6,a
   18AE EB            [12] 5939 	mov	a,r3
   18AF 9F            [12] 5940 	subb	a,r7
   18B0 FF            [12] 5941 	mov	r7,a
   18B1 C3            [12] 5942 	clr	c
   18B2 EC            [12] 5943 	mov	a,r4
   18B3 94 04         [12] 5944 	subb	a,#0x04
   18B5 ED            [12] 5945 	mov	a,r5
   18B6 94 00         [12] 5946 	subb	a,#0x00
   18B8 EE            [12] 5947 	mov	a,r6
   18B9 94 00         [12] 5948 	subb	a,#0x00
   18BB EF            [12] 5949 	mov	a,r7
   18BC 94 00         [12] 5950 	subb	a,#0x00
   18BE 50 03         [24] 5951 	jnc	00234$
   18C0 02r16rD0      [24] 5952 	ljmp	00146$
   18C3                    5953 00234$:
                           5954 ;	main.c:217: if (st){
   18C3 90r00rC4      [24] 5955 	mov	dptr,#_main_st_1_256
   18C6 E0            [24] 5956 	movx	a,@dptr
   18C7 FF            [12] 5957 	mov	r7,a
   18C8 60 1F         [24] 5958 	jz	00138$
                           5959 ;	main.c:218: st=0;
   18CA 90r00rC4      [24] 5960 	mov	dptr,#_main_st_1_256
   18CD E4            [12] 5961 	clr	a
   18CE F0            [24] 5962 	movx	@dptr,a
                           5963 ;	main.c:219: dat=!dat;
   18CF 90r00r92      [24] 5964 	mov	dptr,#(_clientnf + 0x0003)
   18D2 E0            [24] 5965 	movx	a,@dptr
   18D3 FF            [12] 5966 	mov	r7,a
   18D4 B4 01 00      [24] 5967 	cjne	a,#0x01,00236$
   18D7                    5968 00236$:
   18D7 E4            [12] 5969 	clr	a
   18D8 33            [12] 5970 	rlc	a
   18D9 90r00r92      [24] 5971 	mov	dptr,#(_clientnf + 0x0003)
   18DC F0            [24] 5972 	movx	@dptr,a
                           5973 ;	main.c:221: dimmon (dat);
   18DD 90r00r92      [24] 5974 	mov	dptr,#(_clientnf + 0x0003)
   18E0 E0            [24] 5975 	movx	a,@dptr
   18E1 F5 82         [12] 5976 	mov	dpl,a
   18E3 12r15rB5      [24] 5977 	lcall	_dimmon
   18E6 02r19r92      [24] 5978 	ljmp	00139$
   18E9                    5979 00138$:
                           5980 ;	main.c:224: if (countpause>=3){
   18E9 90r00rC5      [24] 5981 	mov	dptr,#_main_countpause_1_256
   18EC E0            [24] 5982 	movx	a,@dptr
   18ED FF            [12] 5983 	mov	r7,a
   18EE BF 03 00      [24] 5984 	cjne	r7,#0x03,00237$
   18F1                    5985 00237$:
   18F1 50 03         [24] 5986 	jnc	00238$
   18F3 02r19r8C      [24] 5987 	ljmp	00135$
   18F6                    5988 00238$:
                           5989 ;	main.c:226: if (!dat) dimmon(1);
   18F6 90r00r92      [24] 5990 	mov	dptr,#(_clientnf + 0x0003)
   18F9 E0            [24] 5991 	movx	a,@dptr
   18FA 70 09         [24] 5992 	jnz	00132$
   18FC 75 82 01      [24] 5993 	mov	dpl,#0x01
   18FF 12r15rB5      [24] 5994 	lcall	_dimmon
   1902 02r19r92      [24] 5995 	ljmp	00139$
   1905                    5996 00132$:
                           5997 ;	main.c:229: if(rewers) {
   1905 90r00rC6      [24] 5998 	mov	dptr,#_main_rewers_1_256
   1908 E0            [24] 5999 	movx	a,@dptr
   1909 FE            [12] 6000 	mov	r6,a
   190A 60 34         [24] 6001 	jz	00129$
                           6002 ;	main.c:230: if(dimm-stepdimm>=0)  dimm=dimm-stepdimm;
   190C 90r00r90      [24] 6003 	mov	dptr,#(_clientnf + 0x0001)
   190F E0            [24] 6004 	movx	a,@dptr
   1910 FD            [12] 6005 	mov	r5,a
   1911 A3            [24] 6006 	inc	dptr
   1912 E0            [24] 6007 	movx	a,@dptr
   1913 FE            [12] 6008 	mov	r6,a
   1914 ED            [12] 6009 	mov	a,r5
   1915 24 FB         [12] 6010 	add	a,#0xFB
   1917 FD            [12] 6011 	mov	r5,a
   1918 EE            [12] 6012 	mov	a,r6
   1919 34 FF         [12] 6013 	addc	a,#0xFF
   191B FE            [12] 6014 	mov	r6,a
   191C 20 E7 1A      [24] 6015 	jb	acc.7,00123$
   191F 90r00r90      [24] 6016 	mov	dptr,#(_clientnf + 0x0001)
   1922 E0            [24] 6017 	movx	a,@dptr
   1923 FD            [12] 6018 	mov	r5,a
   1924 A3            [24] 6019 	inc	dptr
   1925 E0            [24] 6020 	movx	a,@dptr
   1926 FE            [12] 6021 	mov	r6,a
   1927 ED            [12] 6022 	mov	a,r5
   1928 24 FB         [12] 6023 	add	a,#0xFB
   192A FD            [12] 6024 	mov	r5,a
   192B EE            [12] 6025 	mov	a,r6
   192C 34 FF         [12] 6026 	addc	a,#0xFF
   192E FE            [12] 6027 	mov	r6,a
   192F 90r00r90      [24] 6028 	mov	dptr,#(_clientnf + 0x0001)
   1932 ED            [12] 6029 	mov	a,r5
   1933 F0            [24] 6030 	movx	@dptr,a
   1934 EE            [12] 6031 	mov	a,r6
   1935 A3            [24] 6032 	inc	dptr
   1936 F0            [24] 6033 	movx	@dptr,a
   1937 80 45         [24] 6034 	sjmp	00130$
   1939                    6035 00123$:
                           6036 ;	main.c:231: else rewers=0;
   1939 90r00rC6      [24] 6037 	mov	dptr,#_main_rewers_1_256
   193C E4            [12] 6038 	clr	a
   193D F0            [24] 6039 	movx	@dptr,a
   193E 80 3E         [24] 6040 	sjmp	00130$
   1940                    6041 00129$:
                           6042 ;	main.c:233: if(dimm+stepdimm<=DIMMERSTEP) dimm=dimm+stepdimm;
   1940 90r00r90      [24] 6043 	mov	dptr,#(_clientnf + 0x0001)
   1943 E0            [24] 6044 	movx	a,@dptr
   1944 FD            [12] 6045 	mov	r5,a
   1945 A3            [24] 6046 	inc	dptr
   1946 E0            [24] 6047 	movx	a,@dptr
   1947 FE            [12] 6048 	mov	r6,a
   1948 74 05         [12] 6049 	mov	a,#0x05
   194A 2D            [12] 6050 	add	a,r5
   194B FD            [12] 6051 	mov	r5,a
   194C E4            [12] 6052 	clr	a
   194D 3E            [12] 6053 	addc	a,r6
   194E FE            [12] 6054 	mov	r6,a
   194F C3            [12] 6055 	clr	c
   1950 74 64         [12] 6056 	mov	a,#0x64
   1952 9D            [12] 6057 	subb	a,r5
   1953 E4            [12] 6058 	clr	a
   1954 64 80         [12] 6059 	xrl	a,#0x80
   1956 8E F0         [24] 6060 	mov	b,r6
   1958 63 F0 80      [24] 6061 	xrl	b,#0x80
   195B 95 F0         [12] 6062 	subb	a,b
   195D 40 19         [24] 6063 	jc	00126$
   195F 90r00r90      [24] 6064 	mov	dptr,#(_clientnf + 0x0001)
   1962 E0            [24] 6065 	movx	a,@dptr
   1963 FD            [12] 6066 	mov	r5,a
   1964 A3            [24] 6067 	inc	dptr
   1965 E0            [24] 6068 	movx	a,@dptr
   1966 FE            [12] 6069 	mov	r6,a
   1967 74 05         [12] 6070 	mov	a,#0x05
   1969 2D            [12] 6071 	add	a,r5
   196A FD            [12] 6072 	mov	r5,a
   196B E4            [12] 6073 	clr	a
   196C 3E            [12] 6074 	addc	a,r6
   196D FE            [12] 6075 	mov	r6,a
   196E 90r00r90      [24] 6076 	mov	dptr,#(_clientnf + 0x0001)
   1971 ED            [12] 6077 	mov	a,r5
   1972 F0            [24] 6078 	movx	@dptr,a
   1973 EE            [12] 6079 	mov	a,r6
   1974 A3            [24] 6080 	inc	dptr
   1975 F0            [24] 6081 	movx	@dptr,a
   1976 80 06         [24] 6082 	sjmp	00130$
   1978                    6083 00126$:
                           6084 ;	main.c:234: else rewers=1;
   1978 90r00rC6      [24] 6085 	mov	dptr,#_main_rewers_1_256
   197B 74 01         [12] 6086 	mov	a,#0x01
   197D F0            [24] 6087 	movx	@dptr,a
   197E                    6088 00130$:
                           6089 ;	main.c:236: setdimmer(dimm);
   197E 90r00r90      [24] 6090 	mov	dptr,#(_clientnf + 0x0001)
   1981 E0            [24] 6091 	movx	a,@dptr
   1982 FD            [12] 6092 	mov	r5,a
   1983 A3            [24] 6093 	inc	dptr
   1984 E0            [24] 6094 	movx	a,@dptr
   1985 8D 82         [24] 6095 	mov	dpl,r5
   1987 12r14r89      [24] 6096 	lcall	_setdimmer
   198A 80 06         [24] 6097 	sjmp	00139$
   198C                    6098 00135$:
                           6099 ;	main.c:238: } else countpause++;
   198C 90r00rC5      [24] 6100 	mov	dptr,#_main_countpause_1_256
   198F EF            [12] 6101 	mov	a,r7
   1990 04            [12] 6102 	inc	a
   1991 F0            [24] 6103 	movx	@dptr,a
   1992                    6104 00139$:
                           6105 ;	main.c:239: statesend=countrtc;
   1992 90r00r02      [24] 6106 	mov	dptr,#_countrtc
   1995 E0            [24] 6107 	movx	a,@dptr
   1996 FC            [12] 6108 	mov	r4,a
   1997 A3            [24] 6109 	inc	dptr
   1998 E0            [24] 6110 	movx	a,@dptr
   1999 FD            [12] 6111 	mov	r5,a
   199A A3            [24] 6112 	inc	dptr
   199B E0            [24] 6113 	movx	a,@dptr
   199C FE            [12] 6114 	mov	r6,a
   199D A3            [24] 6115 	inc	dptr
   199E E0            [24] 6116 	movx	a,@dptr
   199F FF            [12] 6117 	mov	r7,a
   19A0 90r00rC7      [24] 6118 	mov	dptr,#_main_statesend_1_256
   19A3 EC            [12] 6119 	mov	a,r4
   19A4 F0            [24] 6120 	movx	@dptr,a
   19A5 ED            [12] 6121 	mov	a,r5
   19A6 A3            [24] 6122 	inc	dptr
   19A7 F0            [24] 6123 	movx	@dptr,a
   19A8 EE            [12] 6124 	mov	a,r6
   19A9 A3            [24] 6125 	inc	dptr
   19AA F0            [24] 6126 	movx	@dptr,a
   19AB EF            [12] 6127 	mov	a,r7
   19AC A3            [24] 6128 	inc	dptr
   19AD F0            [24] 6129 	movx	@dptr,a
   19AE 02r16rD0      [24] 6130 	ljmp	00146$
   19B1                    6131 00143$:
                           6132 ;	main.c:243: st=1;
   19B1 90r00rC4      [24] 6133 	mov	dptr,#_main_st_1_256
   19B4 74 01         [12] 6134 	mov	a,#0x01
   19B6 F0            [24] 6135 	movx	@dptr,a
                           6136 ;	main.c:244: countpause=0;
   19B7 90r00rC5      [24] 6137 	mov	dptr,#_main_countpause_1_256
   19BA E4            [12] 6138 	clr	a
   19BB F0            [24] 6139 	movx	@dptr,a
                           6140 ;	main.c:245: rewers=!rewers;
   19BC 90r00rC6      [24] 6141 	mov	dptr,#_main_rewers_1_256
   19BF E0            [24] 6142 	movx	a,@dptr
   19C0 FF            [12] 6143 	mov	r7,a
   19C1 90r00rC6      [24] 6144 	mov	dptr,#_main_rewers_1_256
   19C4 B4 01 00      [24] 6145 	cjne	a,#0x01,00243$
   19C7                    6146 00243$:
   19C7 E4            [12] 6147 	clr	a
   19C8 33            [12] 6148 	rlc	a
   19C9 F0            [24] 6149 	movx	@dptr,a
   19CA 02r16rD0      [24] 6150 	ljmp	00146$
                           6151 	.area CSEG    (CODE)
                           6152 	.area CONST   (CODE)
                           6153 	.area XINIT   (CODE)
   0000                    6154 __xinit__valuepwm:
   0000 00 00              6155 	.byte #0x00,#0x00	; 0
   0002                    6156 __xinit__countrtc:
   0002 00 00 00 00        6157 	.byte #0x00,#0x00,#0x00,#0x00	; 0
                           6158 	.area CABS    (ABS,CODE)
