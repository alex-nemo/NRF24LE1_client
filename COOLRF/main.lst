                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Thu Jun 12 15:57:40 2014
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _dimmon
                             14 	.globl _isr_t1
                             15 	.globl _isr_ifp
                             16 	.globl _openAllPipe
                             17 	.globl _setPALevel
                             18 	.globl _setCRCLength
                             19 	.globl _setAutoAck
                             20 	.globl _setDataRate
                             21 	.globl _setChannel
                             22 	.globl _radiobegin
                             23 	.globl _watchdog_start_and_set_timeout_in_ms
                             24 	.globl _watchdog_set_wdsv_count
                             25 	.globl _gpio_pin_val_write
                             26 	.globl _gpio_pin_val_set
                             27 	.globl _gpio_pin_val_clear
                             28 	.globl _gpio_pin_val_read
                             29 	.globl _FSR_SB_ENDBG
                             30 	.globl _FSR_SB_STP
                             31 	.globl _FSR_SB_WEN
                             32 	.globl _FSR_SB_RDYN
                             33 	.globl _FSR_SB_INFEN
                             34 	.globl _FSR_SB_RDISMB
                             35 	.globl _RFCON_SB_RFCKEN
                             36 	.globl _RFCON_SB_RFCSN
                             37 	.globl _RFCON_SB_RFCE
                             38 	.globl _ADCON_SB_BD
                             39 	.globl _PSW_SB_P
                             40 	.globl _PSW_SB_F1
                             41 	.globl _PSW_SB_OV
                             42 	.globl _PSW_SB_RS0
                             43 	.globl _PSW_SB_RS1
                             44 	.globl _PSW_SB_F0
                             45 	.globl _PSW_SB_AC
                             46 	.globl _PSW_SB_CY
                             47 	.globl _T2CON_SB_T2PS
                             48 	.globl _T2CON_SB_I3FR
                             49 	.globl _T2CON_SB_I2FR
                             50 	.globl _T2CON_SB_T2R1
                             51 	.globl _T2CON_SB_T2R0
                             52 	.globl _T2CON_SB_T2CM
                             53 	.globl _T2CON_SB_T2I1
                             54 	.globl _T2CON_SB_T2I0
                             55 	.globl _IRCON_SB_EXF2
                             56 	.globl _IRCON_SB_TF2
                             57 	.globl _IRCON_SB_TICK
                             58 	.globl _IRCON_SB_MISCIRQ
                             59 	.globl _IRCON_SB_WUOPIRQ
                             60 	.globl _IRCON_SB_SPI_2WIRE
                             61 	.globl _IRCON_SB_RFIRQ
                             62 	.globl _IRCON_SB_RFRDY
                             63 	.globl _IEN1_SB_T2EXTRLD
                             64 	.globl _IEN1_SB_TICK
                             65 	.globl _IEN1_SB_MISCIRQ
                             66 	.globl _IEN1_SB_WUOPIRQ
                             67 	.globl _IEN1_SB_SPI_2WIRE
                             68 	.globl _IEN1_SB_RFIRQ
                             69 	.globl _IEN1_SB_RFRDY
                             70 	.globl _P3_SB_D7
                             71 	.globl _P3_SB_D6
                             72 	.globl _P3_SB_D5
                             73 	.globl _P3_SB_D4
                             74 	.globl _P3_SB_D3
                             75 	.globl _P3_SB_D2
                             76 	.globl _P3_SB_D1
                             77 	.globl _P3_SB_D0
                             78 	.globl _IEN0_SB_GLOBAL
                             79 	.globl _IEN0_SB_T2
                             80 	.globl _IEN0_SB_UART
                             81 	.globl _IEN0_SB_T1
                             82 	.globl _IEN0_SB_POFIRQ
                             83 	.globl _IEN0_SB_T0
                             84 	.globl _IEN0_SB_IFP
                             85 	.globl _P2_SB_D7
                             86 	.globl _P2_SB_D6
                             87 	.globl _P2_SB_D5
                             88 	.globl _P2_SB_D4
                             89 	.globl _P2_SB_D3
                             90 	.globl _P2_SB_D2
                             91 	.globl _P2_SB_D1
                             92 	.globl _P2_SB_D0
                             93 	.globl _S0CON_SB_SM0
                             94 	.globl _S0CON_SB_SM1
                             95 	.globl _S0CON_SB_SM20
                             96 	.globl _S0CON_SB_REN0
                             97 	.globl _S0CON_SB_TB80
                             98 	.globl _S0CON_SB_RB80
                             99 	.globl _S0CON_SB_TI0
                            100 	.globl _S0CON_SB_RI0
                            101 	.globl _P1_SB_D7
                            102 	.globl _P1_SB_D6
                            103 	.globl _P1_SB_D5
                            104 	.globl _P1_SB_D4
                            105 	.globl _P1_SB_D3
                            106 	.globl _P1_SB_D2
                            107 	.globl _P1_SB_D1
                            108 	.globl _P1_SB_D0
                            109 	.globl _TCON_SB_TF1
                            110 	.globl _TCON_SB_TR1
                            111 	.globl _TCON_SB_TF0
                            112 	.globl _TCON_SB_TR0
                            113 	.globl _TCON_SB_IE1
                            114 	.globl _TCON_SB_IT1
                            115 	.globl _TCON_SB_IE0
                            116 	.globl _TCON_SB_IT0
                            117 	.globl _P0_SB_D7
                            118 	.globl _P0_SB_D6
                            119 	.globl _P0_SB_D5
                            120 	.globl _P0_SB_D4
                            121 	.globl _P0_SB_D3
                            122 	.globl _P0_SB_D2
                            123 	.globl _P0_SB_D1
                            124 	.globl _P0_SB_D0
                            125 	.globl _ADCDAT
                            126 	.globl _S0REL
                            127 	.globl _T2
                            128 	.globl _T1
                            129 	.globl _T0
                            130 	.globl _CRC
                            131 	.globl _CC3
                            132 	.globl _CC2
                            133 	.globl _CC1
                            134 	.globl _SPIMDAT
                            135 	.globl _SPIMSTAT
                            136 	.globl _SPIMCON1
                            137 	.globl _SPIMCON0
                            138 	.globl _FCR
                            139 	.globl _FPCR
                            140 	.globl _FSR
                            141 	.globl _B
                            142 	.globl _ARCON
                            143 	.globl _MD5
                            144 	.globl _MD4
                            145 	.globl _MD3
                            146 	.globl _MD2
                            147 	.globl _MD1
                            148 	.globl _MD0
                            149 	.globl _RFCON
                            150 	.globl _SPIRDAT
                            151 	.globl _SPIRSTAT
                            152 	.globl _SPIRCON1
                            153 	.globl _SPIRCON0
                            154 	.globl _W2CON0
                            155 	.globl _W2CON1
                            156 	.globl _ACC
                            157 	.globl _CCPDATO
                            158 	.globl _CCPDATIB
                            159 	.globl _CCPDATIA
                            160 	.globl _POFCON
                            161 	.globl _COMPCON
                            162 	.globl _W2DAT
                            163 	.globl _W2SADR
                            164 	.globl _ADCON
                            165 	.globl _RNGDAT
                            166 	.globl _RNGCTL
                            167 	.globl _ADCDATL
                            168 	.globl _ADCDATH
                            169 	.globl _ADCCON1
                            170 	.globl _ADCCON2
                            171 	.globl _ADCCON3
                            172 	.globl _PSW
                            173 	.globl _WUOPC0
                            174 	.globl _WUOPC1
                            175 	.globl _TH2
                            176 	.globl _TL2
                            177 	.globl _CRCH
                            178 	.globl _CRCL
                            179 	.globl __XPAGE
                            180 	.globl _MPAGE
                            181 	.globl _T2CON
                            182 	.globl _CCH3
                            183 	.globl _CCL3
                            184 	.globl _CCH2
                            185 	.globl _CCL2
                            186 	.globl _CCH1
                            187 	.globl _CCL1
                            188 	.globl _CCEN
                            189 	.globl _IRCON
                            190 	.globl _SPISDAT
                            191 	.globl _SPISSTAT
                            192 	.globl _SPISCON1
                            193 	.globl _SPISCON0
                            194 	.globl _S0RELH
                            195 	.globl _IP1
                            196 	.globl _IEN1
                            197 	.globl _SPISRDSZ
                            198 	.globl _RTC2CPT00
                            199 	.globl _RTC2CMP1
                            200 	.globl _RTC2CMP0
                            201 	.globl _RTC2CON
                            202 	.globl _PWMCON
                            203 	.globl _RSTREAS
                            204 	.globl _P3
                            205 	.globl _WDSV
                            206 	.globl _OPMCON
                            207 	.globl _CLKLFCTRL
                            208 	.globl _RTC2CPT10
                            209 	.globl _RTC2CPT01
                            210 	.globl _S0RELL
                            211 	.globl _IP0
                            212 	.globl _IEN0
                            213 	.globl _MEMCON
                            214 	.globl _INTEXP
                            215 	.globl _WUCON
                            216 	.globl _PWRDWN
                            217 	.globl _CLKCTRL
                            218 	.globl _PWMDC1
                            219 	.globl _PWMDC0
                            220 	.globl _P2
                            221 	.globl _P1CON
                            222 	.globl _P0CON
                            223 	.globl _S0BUF
                            224 	.globl _S0CON
                            225 	.globl _P2CON
                            226 	.globl _P3DIR
                            227 	.globl _P2DIR
                            228 	.globl _P1DIR
                            229 	.globl _P0DIR
                            230 	.globl _DPS
                            231 	.globl _P1
                            232 	.globl _P3CON
                            233 	.globl _TH1
                            234 	.globl _TH0
                            235 	.globl _TL1
                            236 	.globl _TL0
                            237 	.globl _TMOD
                            238 	.globl _TCON
                            239 	.globl _PCON
                            240 	.globl _DPH1
                            241 	.globl _DPL1
                            242 	.globl _DPH
                            243 	.globl _DPL
                            244 	.globl _SP
                            245 	.globl _P0
                            246 	.globl _servernf
                            247 	.globl _stdimm
                            248 	.globl _clientnf
                            249 	.globl _uart_configure_auto_baud_calc_PARM_2
                            250 	.globl _uart_calc_th1_value_PARM_2
                            251 	.globl _uart_calc_s0rel_value_PARM_2
                            252 	.globl _uart_calc_actual_baud_rate_from_th1_PARM_2
                            253 	.globl _uart_calc_actual_baud_rate_from_s0rel_PARM_2
                            254 	.globl _uart_configure_manual_baud_calc_PARM_2
                            255 	.globl _timer1_configure_PARM_2
                            256 	.globl _timer0_configure_PARM_2
                            257 	.globl _interrupt_configure_ifp_PARM_2
                            258 	.globl _pwm_start_PARM_2
                            259 	.globl _gpio_pin_val_write_PARM_2
                            260 	.globl _gpio_pin_configure_PARM_2
                            261 	.globl _rf_set_rx_addr_PARM_3
                            262 	.globl _rf_set_rx_addr_PARM_2
                            263 	.globl _rf_read_register_PARM_3
                            264 	.globl _rf_read_register_PARM_2
                            265 	.globl _rf_power_up_param_PARM_2
                            266 	.globl _rf_spi_send_read_PARM_3
                            267 	.globl _rf_spi_send_read_PARM_2
                            268 	.globl _rf_spi_execute_command_PARM_4
                            269 	.globl _rf_spi_execute_command_PARM_3
                            270 	.globl _rf_spi_execute_command_PARM_2
                            271 	.globl _rf_write_tx_payload_PARM_3
                            272 	.globl _rf_write_tx_payload_PARM_2
                            273 	.globl _rf_write_register_PARM_3
                            274 	.globl _rf_write_register_PARM_2
                            275 	.globl _rf_configure_debug_lite_PARM_2
                            276 	.globl _rf_read_rx_payload_PARM_2
                            277 	.globl _rf_read_rx_payload
                            278 	.globl _rf_configure_debug_lite
                            279 	.globl _rf_write_register
                            280 	.globl _rf_spi_configure_enable
                            281 	.globl _rf_write_tx_payload
                            282 	.globl _rf_transmit
                            283 	.globl _rf_set_as_rx
                            284 	.globl _rf_irq_clear_all
                            285 	.globl _rf_set_as_tx
                            286 	.globl _rf_spi_execute_command
                            287 	.globl _rf_spi_send_read
                            288 	.globl _rf_power_up_param
                            289 	.globl _rf_read_register
                            290 	.globl _rf_spi_send_read_byte
                            291 	.globl _rf_set_rx_addr
                            292 	.globl _rf_power_down
                            293 	.globl _rf_power_up
                            294 	.globl _gpio_pin_configure
                            295 	.globl _delay_us
                            296 	.globl _delay_s
                            297 	.globl _delay_ms
                            298 	.globl _pwm_configure
                            299 	.globl _pwm_start
                            300 	.globl _pwr_clk_mgmt_clklf_configure
                            301 	.globl _pwr_clk_mgmt_get_cclk_freq_in_hz
                            302 	.globl _interrupt_configure_ifp
                            303 	.globl _adc_configure
                            304 	.globl _adc_set_input_channel
                            305 	.globl _adc_start_single_conversion
                            306 	.globl _adc_start_single_conversion_get_value
                            307 	.globl _timer0_configure
                            308 	.globl _timer1_configure
                            309 	.globl _uart_configure_manual_baud_calc
                            310 	.globl _uart_calc_actual_baud_rate_from_s0rel
                            311 	.globl _uart_calc_actual_baud_rate_from_th1
                            312 	.globl _uart_calc_s0rel_value
                            313 	.globl _uart_calc_th1_value
                            314 	.globl _uart_configure_auto_baud_calc
                            315 ;--------------------------------------------------------
                            316 ; special function registers
                            317 ;--------------------------------------------------------
                            318 	.area RSEG    (ABS,DATA)
   0000                     319 	.org 0x0000
                     0080   320 _P0	=	0x0080
                     0081   321 _SP	=	0x0081
                     0082   322 _DPL	=	0x0082
                     0083   323 _DPH	=	0x0083
                     0084   324 _DPL1	=	0x0084
                     0085   325 _DPH1	=	0x0085
                     0087   326 _PCON	=	0x0087
                     0088   327 _TCON	=	0x0088
                     0089   328 _TMOD	=	0x0089
                     008A   329 _TL0	=	0x008a
                     008B   330 _TL1	=	0x008b
                     008C   331 _TH0	=	0x008c
                     008D   332 _TH1	=	0x008d
                     008F   333 _P3CON	=	0x008f
                     0090   334 _P1	=	0x0090
                     0092   335 _DPS	=	0x0092
                     0093   336 _P0DIR	=	0x0093
                     0094   337 _P1DIR	=	0x0094
                     0095   338 _P2DIR	=	0x0095
                     0096   339 _P3DIR	=	0x0096
                     0097   340 _P2CON	=	0x0097
                     0098   341 _S0CON	=	0x0098
                     0099   342 _S0BUF	=	0x0099
                     009E   343 _P0CON	=	0x009e
                     009F   344 _P1CON	=	0x009f
                     00A0   345 _P2	=	0x00a0
                     00A1   346 _PWMDC0	=	0x00a1
                     00A2   347 _PWMDC1	=	0x00a2
                     00A3   348 _CLKCTRL	=	0x00a3
                     00A4   349 _PWRDWN	=	0x00a4
                     00A5   350 _WUCON	=	0x00a5
                     00A6   351 _INTEXP	=	0x00a6
                     00A7   352 _MEMCON	=	0x00a7
                     00A8   353 _IEN0	=	0x00a8
                     00A9   354 _IP0	=	0x00a9
                     00AA   355 _S0RELL	=	0x00aa
                     00AB   356 _RTC2CPT01	=	0x00ab
                     00AC   357 _RTC2CPT10	=	0x00ac
                     00AD   358 _CLKLFCTRL	=	0x00ad
                     00AE   359 _OPMCON	=	0x00ae
                     00AF   360 _WDSV	=	0x00af
                     00B0   361 _P3	=	0x00b0
                     00B1   362 _RSTREAS	=	0x00b1
                     00B2   363 _PWMCON	=	0x00b2
                     00B3   364 _RTC2CON	=	0x00b3
                     00B4   365 _RTC2CMP0	=	0x00b4
                     00B5   366 _RTC2CMP1	=	0x00b5
                     00B6   367 _RTC2CPT00	=	0x00b6
                     00B7   368 _SPISRDSZ	=	0x00b7
                     00B8   369 _IEN1	=	0x00b8
                     00B9   370 _IP1	=	0x00b9
                     00BA   371 _S0RELH	=	0x00ba
                     00BC   372 _SPISCON0	=	0x00bc
                     00BD   373 _SPISCON1	=	0x00bd
                     00BE   374 _SPISSTAT	=	0x00be
                     00BF   375 _SPISDAT	=	0x00bf
                     00C0   376 _IRCON	=	0x00c0
                     00C1   377 _CCEN	=	0x00c1
                     00C2   378 _CCL1	=	0x00c2
                     00C3   379 _CCH1	=	0x00c3
                     00C4   380 _CCL2	=	0x00c4
                     00C5   381 _CCH2	=	0x00c5
                     00C6   382 _CCL3	=	0x00c6
                     00C7   383 _CCH3	=	0x00c7
                     00C8   384 _T2CON	=	0x00c8
                     00C9   385 _MPAGE	=	0x00c9
                     00C9   386 __XPAGE	=	0x00c9
                     00CA   387 _CRCL	=	0x00ca
                     00CB   388 _CRCH	=	0x00cb
                     00CC   389 _TL2	=	0x00cc
                     00CD   390 _TH2	=	0x00cd
                     00CE   391 _WUOPC1	=	0x00ce
                     00CF   392 _WUOPC0	=	0x00cf
                     00D0   393 _PSW	=	0x00d0
                     00D1   394 _ADCCON3	=	0x00d1
                     00D2   395 _ADCCON2	=	0x00d2
                     00D3   396 _ADCCON1	=	0x00d3
                     00D4   397 _ADCDATH	=	0x00d4
                     00D5   398 _ADCDATL	=	0x00d5
                     00D6   399 _RNGCTL	=	0x00d6
                     00D7   400 _RNGDAT	=	0x00d7
                     00D8   401 _ADCON	=	0x00d8
                     00D9   402 _W2SADR	=	0x00d9
                     00DA   403 _W2DAT	=	0x00da
                     00DB   404 _COMPCON	=	0x00db
                     00DC   405 _POFCON	=	0x00dc
                     00DD   406 _CCPDATIA	=	0x00dd
                     00DE   407 _CCPDATIB	=	0x00de
                     00DF   408 _CCPDATO	=	0x00df
                     00E0   409 _ACC	=	0x00e0
                     00E1   410 _W2CON1	=	0x00e1
                     00E2   411 _W2CON0	=	0x00e2
                     00E4   412 _SPIRCON0	=	0x00e4
                     00E5   413 _SPIRCON1	=	0x00e5
                     00E6   414 _SPIRSTAT	=	0x00e6
                     00E7   415 _SPIRDAT	=	0x00e7
                     00E8   416 _RFCON	=	0x00e8
                     00E9   417 _MD0	=	0x00e9
                     00EA   418 _MD1	=	0x00ea
                     00EB   419 _MD2	=	0x00eb
                     00EC   420 _MD3	=	0x00ec
                     00ED   421 _MD4	=	0x00ed
                     00EE   422 _MD5	=	0x00ee
                     00EF   423 _ARCON	=	0x00ef
                     00F0   424 _B	=	0x00f0
                     00F8   425 _FSR	=	0x00f8
                     00F9   426 _FPCR	=	0x00f9
                     00FA   427 _FCR	=	0x00fa
                     00FC   428 _SPIMCON0	=	0x00fc
                     00FD   429 _SPIMCON1	=	0x00fd
                     00FE   430 _SPIMSTAT	=	0x00fe
                     00FF   431 _SPIMDAT	=	0x00ff
                     C3C2   432 _CC1	=	0xc3c2
                     C5C4   433 _CC2	=	0xc5c4
                     C7C6   434 _CC3	=	0xc7c6
                     CBCA   435 _CRC	=	0xcbca
                     8C8A   436 _T0	=	0x8c8a
                     8D8B   437 _T1	=	0x8d8b
                     CDCC   438 _T2	=	0xcdcc
                     BAAA   439 _S0REL	=	0xbaaa
                     D4D5   440 _ADCDAT	=	0xd4d5
                            441 ;--------------------------------------------------------
                            442 ; special function bits
                            443 ;--------------------------------------------------------
                            444 	.area RSEG    (ABS,DATA)
   0000                     445 	.org 0x0000
                     0080   446 _P0_SB_D0	=	0x0080
                     0081   447 _P0_SB_D1	=	0x0081
                     0082   448 _P0_SB_D2	=	0x0082
                     0083   449 _P0_SB_D3	=	0x0083
                     0084   450 _P0_SB_D4	=	0x0084
                     0085   451 _P0_SB_D5	=	0x0085
                     0086   452 _P0_SB_D6	=	0x0086
                     0087   453 _P0_SB_D7	=	0x0087
                     0088   454 _TCON_SB_IT0	=	0x0088
                     0089   455 _TCON_SB_IE0	=	0x0089
                     008A   456 _TCON_SB_IT1	=	0x008a
                     008B   457 _TCON_SB_IE1	=	0x008b
                     008C   458 _TCON_SB_TR0	=	0x008c
                     008D   459 _TCON_SB_TF0	=	0x008d
                     008E   460 _TCON_SB_TR1	=	0x008e
                     008F   461 _TCON_SB_TF1	=	0x008f
                     0090   462 _P1_SB_D0	=	0x0090
                     0091   463 _P1_SB_D1	=	0x0091
                     0092   464 _P1_SB_D2	=	0x0092
                     0093   465 _P1_SB_D3	=	0x0093
                     0094   466 _P1_SB_D4	=	0x0094
                     0095   467 _P1_SB_D5	=	0x0095
                     0096   468 _P1_SB_D6	=	0x0096
                     0097   469 _P1_SB_D7	=	0x0097
                     0098   470 _S0CON_SB_RI0	=	0x0098
                     0099   471 _S0CON_SB_TI0	=	0x0099
                     009A   472 _S0CON_SB_RB80	=	0x009a
                     009B   473 _S0CON_SB_TB80	=	0x009b
                     009C   474 _S0CON_SB_REN0	=	0x009c
                     009D   475 _S0CON_SB_SM20	=	0x009d
                     009E   476 _S0CON_SB_SM1	=	0x009e
                     009F   477 _S0CON_SB_SM0	=	0x009f
                     00A0   478 _P2_SB_D0	=	0x00a0
                     00A1   479 _P2_SB_D1	=	0x00a1
                     00A2   480 _P2_SB_D2	=	0x00a2
                     00A3   481 _P2_SB_D3	=	0x00a3
                     00A4   482 _P2_SB_D4	=	0x00a4
                     00A5   483 _P2_SB_D5	=	0x00a5
                     00A6   484 _P2_SB_D6	=	0x00a6
                     00A7   485 _P2_SB_D7	=	0x00a7
                     00A8   486 _IEN0_SB_IFP	=	0x00a8
                     00A9   487 _IEN0_SB_T0	=	0x00a9
                     00AA   488 _IEN0_SB_POFIRQ	=	0x00aa
                     00AB   489 _IEN0_SB_T1	=	0x00ab
                     00AC   490 _IEN0_SB_UART	=	0x00ac
                     00AD   491 _IEN0_SB_T2	=	0x00ad
                     00AF   492 _IEN0_SB_GLOBAL	=	0x00af
                     00B0   493 _P3_SB_D0	=	0x00b0
                     00B1   494 _P3_SB_D1	=	0x00b1
                     00B2   495 _P3_SB_D2	=	0x00b2
                     00B3   496 _P3_SB_D3	=	0x00b3
                     00B4   497 _P3_SB_D4	=	0x00b4
                     00B5   498 _P3_SB_D5	=	0x00b5
                     00B6   499 _P3_SB_D6	=	0x00b6
                     00B7   500 _P3_SB_D7	=	0x00b7
                     00B8   501 _IEN1_SB_RFRDY	=	0x00b8
                     00B9   502 _IEN1_SB_RFIRQ	=	0x00b9
                     00BA   503 _IEN1_SB_SPI_2WIRE	=	0x00ba
                     00BB   504 _IEN1_SB_WUOPIRQ	=	0x00bb
                     00BC   505 _IEN1_SB_MISCIRQ	=	0x00bc
                     00BD   506 _IEN1_SB_TICK	=	0x00bd
                     00BF   507 _IEN1_SB_T2EXTRLD	=	0x00bf
                     00C0   508 _IRCON_SB_RFRDY	=	0x00c0
                     00C1   509 _IRCON_SB_RFIRQ	=	0x00c1
                     00C2   510 _IRCON_SB_SPI_2WIRE	=	0x00c2
                     00C3   511 _IRCON_SB_WUOPIRQ	=	0x00c3
                     00C4   512 _IRCON_SB_MISCIRQ	=	0x00c4
                     00C5   513 _IRCON_SB_TICK	=	0x00c5
                     00C6   514 _IRCON_SB_TF2	=	0x00c6
                     00C7   515 _IRCON_SB_EXF2	=	0x00c7
                     00C8   516 _T2CON_SB_T2I0	=	0x00c8
                     00C9   517 _T2CON_SB_T2I1	=	0x00c9
                     00CA   518 _T2CON_SB_T2CM	=	0x00ca
                     00CB   519 _T2CON_SB_T2R0	=	0x00cb
                     00CC   520 _T2CON_SB_T2R1	=	0x00cc
                     00CD   521 _T2CON_SB_I2FR	=	0x00cd
                     00CE   522 _T2CON_SB_I3FR	=	0x00ce
                     00CF   523 _T2CON_SB_T2PS	=	0x00cf
                     00D7   524 _PSW_SB_CY	=	0x00d7
                     00D6   525 _PSW_SB_AC	=	0x00d6
                     00D5   526 _PSW_SB_F0	=	0x00d5
                     00D4   527 _PSW_SB_RS1	=	0x00d4
                     00D3   528 _PSW_SB_RS0	=	0x00d3
                     00D2   529 _PSW_SB_OV	=	0x00d2
                     00D1   530 _PSW_SB_F1	=	0x00d1
                     00D0   531 _PSW_SB_P	=	0x00d0
                     00DF   532 _ADCON_SB_BD	=	0x00df
                     00E8   533 _RFCON_SB_RFCE	=	0x00e8
                     00E9   534 _RFCON_SB_RFCSN	=	0x00e9
                     00EA   535 _RFCON_SB_RFCKEN	=	0x00ea
                     00FA   536 _FSR_SB_RDISMB	=	0x00fa
                     00FB   537 _FSR_SB_INFEN	=	0x00fb
                     00FC   538 _FSR_SB_RDYN	=	0x00fc
                     00FD   539 _FSR_SB_WEN	=	0x00fd
                     00FE   540 _FSR_SB_STP	=	0x00fe
                     00FF   541 _FSR_SB_ENDBG	=	0x00ff
                            542 ;--------------------------------------------------------
                            543 ; overlayable register banks
                            544 ;--------------------------------------------------------
                            545 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     546 	.ds 8
                            547 ;--------------------------------------------------------
                            548 ; overlayable bit register bank
                            549 ;--------------------------------------------------------
                            550 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     551 bits:
   0000                     552 	.ds 1
                     8000   553 	b0 = bits[0]
                     8100   554 	b1 = bits[1]
                     8200   555 	b2 = bits[2]
                     8300   556 	b3 = bits[3]
                     8400   557 	b4 = bits[4]
                     8500   558 	b5 = bits[5]
                     8600   559 	b6 = bits[6]
                     8700   560 	b7 = bits[7]
                            561 ;--------------------------------------------------------
                            562 ; internal ram data
                            563 ;--------------------------------------------------------
                            564 	.area DSEG    (DATA)
   0000                     565 _rf_spi_send_read_sloc0_1_0:
   0000                     566 	.ds 3
   0003                     567 _rf_spi_send_read_sloc1_1_0:
   0003                     568 	.ds 1
   0004                     569 _uart_configure_auto_baud_calc_sloc0_1_0:
   0004                     570 	.ds 2
   0006                     571 _uart_configure_auto_baud_calc_sloc1_1_0:
   0006                     572 	.ds 4
   000A                     573 _uart_configure_auto_baud_calc_sloc2_1_0:
   000A                     574 	.ds 4
   000E                     575 _uart_configure_auto_baud_calc_sloc3_1_0:
   000E                     576 	.ds 4
                            577 ;--------------------------------------------------------
                            578 ; overlayable items in internal ram 
                            579 ;--------------------------------------------------------
                            580 ;--------------------------------------------------------
                            581 ; Stack segment in internal ram 
                            582 ;--------------------------------------------------------
                            583 	.area	SSEG	(DATA)
   0000                     584 __start__stack:
   0000                     585 	.ds	1
                            586 
                            587 ;--------------------------------------------------------
                            588 ; indirectly addressable internal ram data
                            589 ;--------------------------------------------------------
                            590 	.area ISEG    (DATA)
                            591 ;--------------------------------------------------------
                            592 ; absolute internal ram data
                            593 ;--------------------------------------------------------
                            594 	.area IABS    (ABS,DATA)
                            595 	.area IABS    (ABS,DATA)
                            596 ;--------------------------------------------------------
                            597 ; bit data
                            598 ;--------------------------------------------------------
                            599 	.area BSEG    (BIT)
                            600 ;--------------------------------------------------------
                            601 ; paged external ram data
                            602 ;--------------------------------------------------------
                            603 	.area PSEG    (PAG,XDATA)
                            604 ;--------------------------------------------------------
                            605 ; external ram data
                            606 ;--------------------------------------------------------
                            607 	.area XSEG    (XDATA)
   0000                     608 _rf_read_rx_payload_PARM_2:
   0000                     609 	.ds 2
   0002                     610 _rf_read_rx_payload_dataptr_1_37:
   0002                     611 	.ds 3
   0005                     612 _rf_configure_debug_lite_PARM_2:
   0005                     613 	.ds 1
   0006                     614 _rf_configure_debug_lite_rx_1_39:
   0006                     615 	.ds 1
   0007                     616 _rf_configure_debug_lite_config_1_40:
   0007                     617 	.ds 1
   0008                     618 _rf_write_register_PARM_2:
   0008                     619 	.ds 3
   000B                     620 _rf_write_register_PARM_3:
   000B                     621 	.ds 2
   000D                     622 _rf_write_register_regnumber_1_42:
   000D                     623 	.ds 1
   000E                     624 _rf_write_tx_payload_PARM_2:
   000E                     625 	.ds 2
   0010                     626 _rf_write_tx_payload_PARM_3:
   0010                     627 	.ds 1
   0011                     628 _rf_write_tx_payload_dataptr_1_45:
   0011                     629 	.ds 3
   0014                     630 _rf_set_as_rx_rx_active_mode_1_49:
   0014                     631 	.ds 1
   0015                     632 _rf_set_as_rx_config_1_50:
   0015                     633 	.ds 1
   0016                     634 _rf_irq_clear_all_dataptr_1_54:
   0016                     635 	.ds 1
   0017                     636 _rf_set_as_tx_config_1_55:
   0017                     637 	.ds 1
   0018                     638 _rf_spi_execute_command_PARM_2:
   0018                     639 	.ds 3
   001B                     640 _rf_spi_execute_command_PARM_3:
   001B                     641 	.ds 2
   001D                     642 _rf_spi_execute_command_PARM_4:
   001D                     643 	.ds 1
   001E                     644 _rf_spi_execute_command_instruction_1_57:
   001E                     645 	.ds 1
   001F                     646 _rf_spi_execute_command_status_1_58:
   001F                     647 	.ds 1
   0020                     648 _rf_spi_send_read_PARM_2:
   0020                     649 	.ds 2
   0022                     650 _rf_spi_send_read_PARM_3:
   0022                     651 	.ds 1
   0023                     652 _rf_spi_send_read_dataptr_1_59:
   0023                     653 	.ds 3
   0026                     654 _rf_power_up_param_PARM_2:
   0026                     655 	.ds 1
   0027                     656 _rf_power_up_param_rx_active_mode_1_63:
   0027                     657 	.ds 1
   0028                     658 _rf_read_register_PARM_2:
   0028                     659 	.ds 3
   002B                     660 _rf_read_register_PARM_3:
   002B                     661 	.ds 2
   002D                     662 _rf_read_register_regnumber_1_69:
   002D                     663 	.ds 1
   002E                     664 _rf_spi_send_read_byte_byte_1_71:
   002E                     665 	.ds 1
   002F                     666 _rf_set_rx_addr_PARM_2:
   002F                     667 	.ds 2
   0031                     668 _rf_set_rx_addr_PARM_3:
   0031                     669 	.ds 1
   0032                     670 _rf_set_rx_addr_address_1_73:
   0032                     671 	.ds 3
   0035                     672 _rf_power_down_config_1_76:
   0035                     673 	.ds 1
   0036                     674 _rf_power_up_rx_active_mode_1_78:
   0036                     675 	.ds 1
   0037                     676 _rf_power_up_config_1_79:
   0037                     677 	.ds 1
   0038                     678 _gpio_pin_configure_PARM_2:
   0038                     679 	.ds 1
   0039                     680 _gpio_pin_configure_gpio_pin_id_1_86:
   0039                     681 	.ds 1
   003A                     682 _gpio_pin_val_read_gpio_pin_id_1_108:
   003A                     683 	.ds 1
   003B                     684 _gpio_pin_val_read_value_1_109:
   003B                     685 	.ds 1
   003C                     686 _gpio_pin_val_clear_gpio_pin_id_1_116:
   003C                     687 	.ds 1
   003D                     688 _gpio_pin_val_set_gpio_pin_id_1_122:
   003D                     689 	.ds 1
   003E                     690 _gpio_pin_val_write_PARM_2:
   003E                     691 	.ds 1
   003F                     692 _gpio_pin_val_write_gpio_pin_id_1_128:
   003F                     693 	.ds 1
   0040                     694 _delay_us_microseconds_1_132:
   0040                     695 	.ds 2
   0042                     696 _delay_s_seconds_1_135:
   0042                     697 	.ds 2
   0044                     698 _delay_ms_milliseconds_1_138:
   0044                     699 	.ds 2
   0046                     700 _pwm_configure_pwm_config_options_1_143:
   0046                     701 	.ds 1
   0047                     702 _pwm_start_PARM_2:
   0047                     703 	.ds 1
   0048                     704 _pwm_start_pwm_channel_1_145:
   0048                     705 	.ds 1
   0049                     706 _pwr_clk_mgmt_clklf_configure_clklf_config_options_1_154:
   0049                     707 	.ds 1
   004A                     708 _pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156:
   004A                     709 	.ds 4
   004E                     710 _watchdog_set_wdsv_count_wdsv_value_1_159:
   004E                     711 	.ds 2
   0050                     712 _watchdog_start_and_set_timeout_in_ms_milliseconds_1_161:
   0050                     713 	.ds 4
   0054                     714 _watchdog_start_and_set_timeout_in_ms_wd_value_1_162:
   0054                     715 	.ds 2
   0056                     716 _interrupt_configure_ifp_PARM_2:
   0056                     717 	.ds 1
   0057                     718 _interrupt_configure_ifp_interrupt_ifp_input_1_165:
   0057                     719 	.ds 1
   0058                     720 _adc_configure_adc_config_options_1_179:
   0058                     721 	.ds 2
   005A                     722 _adc_set_input_channel_adc_channel_1_181:
   005A                     723 	.ds 1
   005B                     724 _adc_start_single_conversion_adc_channel_1_183:
   005B                     725 	.ds 1
   005C                     726 _adc_start_single_conversion_get_value_adc_channel_1_185:
   005C                     727 	.ds 1
   005D                     728 _timer0_configure_PARM_2:
   005D                     729 	.ds 2
   005F                     730 _timer0_configure_timer0_config_options_1_188:
   005F                     731 	.ds 1
   0060                     732 _timer1_configure_PARM_2:
   0060                     733 	.ds 2
   0062                     734 _timer1_configure_timer1_config_options_1_193:
   0062                     735 	.ds 1
   0063                     736 _uart_configure_manual_baud_calc_PARM_2:
   0063                     737 	.ds 2
   0065                     738 _uart_configure_manual_baud_calc_uart_config_options_1_203:
   0065                     739 	.ds 1
   0066                     740 _uart_calc_actual_baud_rate_from_s0rel_PARM_2:
   0066                     741 	.ds 1
   0067                     742 _uart_calc_actual_baud_rate_from_s0rel_s0rel_reg_value_1_210:
   0067                     743 	.ds 2
   0069                     744 _uart_calc_actual_baud_rate_from_th1_PARM_2:
   0069                     745 	.ds 1
   006A                     746 _uart_calc_actual_baud_rate_from_th1_th1_reg_value_1_212:
   006A                     747 	.ds 1
   006B                     748 _uart_calc_s0rel_value_PARM_2:
   006B                     749 	.ds 1
   006C                     750 _uart_calc_s0rel_value_desired_baud_rate_1_214:
   006C                     751 	.ds 4
   0070                     752 _uart_calc_th1_value_PARM_2:
   0070                     753 	.ds 1
   0071                     754 _uart_calc_th1_value_desired_baud_rate_1_216:
   0071                     755 	.ds 4
   0075                     756 _uart_configure_auto_baud_calc_PARM_2:
   0075                     757 	.ds 4
   0079                     758 _uart_configure_auto_baud_calc_uart_config_options_1_218:
   0079                     759 	.ds 1
   007A                     760 _radiobegin_setup_1_227:
   007A                     761 	.ds 1
   007B                     762 _setChannel_channel_1_228:
   007B                     763 	.ds 1
   007C                     764 _setDataRate_speed_1_230:
   007C                     765 	.ds 1
   007D                     766 _setDataRate_buffer_1_231:
   007D                     767 	.ds 1
   007E                     768 _setAutoAck_enable_1_232:
   007E                     769 	.ds 1
   007F                     770 _setAutoAck_buffer_1_233:
   007F                     771 	.ds 1
   0080                     772 _setCRCLength_length_1_234:
   0080                     773 	.ds 1
   0081                     774 _setCRCLength_buffer_1_235:
   0081                     775 	.ds 1
   0082                     776 _setPALevel_setup_1_237:
   0082                     777 	.ds 1
   0083                     778 _openAllPipe_buffer_1_238:
   0083                     779 	.ds 5
   0088                     780 _openAllPipe_setup_1_238:
   0088                     781 	.ds 1
   0089                     782 _clientnf::
   0089                     783 	.ds 18
   009B                     784 _stdimm::
   009B                     785 	.ds 1
   009C                     786 _dimmon_mode_1_243:
   009C                     787 	.ds 1
   009D                     788 _servernf::
   009D                     789 	.ds 32
                            790 ;--------------------------------------------------------
                            791 ; absolute external ram data
                            792 ;--------------------------------------------------------
                            793 	.area XABS    (ABS,XDATA)
                            794 ;--------------------------------------------------------
                            795 ; external initialized ram data
                            796 ;--------------------------------------------------------
                            797 	.area XISEG   (XDATA)
                            798 	.area HOME    (CODE)
                            799 	.area GSINIT0 (CODE)
                            800 	.area GSINIT1 (CODE)
                            801 	.area GSINIT2 (CODE)
                            802 	.area GSINIT3 (CODE)
                            803 	.area GSINIT4 (CODE)
                            804 	.area GSINIT5 (CODE)
                            805 	.area GSINIT  (CODE)
                            806 	.area GSFINAL (CODE)
                            807 	.area CSEG    (CODE)
                            808 ;--------------------------------------------------------
                            809 ; interrupt vector 
                            810 ;--------------------------------------------------------
                            811 	.area HOME    (CODE)
   0000                     812 __interrupt_vect:
   0000 02r00r00      [24]  813 	ljmp	__sdcc_gsinit_startup
   0003 02r14r40      [24]  814 	ljmp	_isr_ifp
   0006                     815 	.ds	5
   000B 32            [24]  816 	reti
   000C                     817 	.ds	7
   0013 32            [24]  818 	reti
   0014                     819 	.ds	7
   001B 02r14rD4      [24]  820 	ljmp	_isr_t1
                            821 ;--------------------------------------------------------
                            822 ; global & static initialisations
                            823 ;--------------------------------------------------------
                            824 	.area HOME    (CODE)
                            825 	.area GSINIT  (CODE)
                            826 	.area GSFINAL (CODE)
                            827 	.area GSINIT  (CODE)
                            828 	.globl __sdcc_gsinit_startup
                            829 	.globl __sdcc_program_startup
                            830 	.globl __start__stack
                            831 	.globl __mcs51_genXINIT
                            832 	.globl __mcs51_genXRAMCLEAR
                            833 	.globl __mcs51_genRAMCLEAR
                            834 	.area GSFINAL (CODE)
   0000 02r00r1E      [24]  835 	ljmp	__sdcc_program_startup
                            836 ;--------------------------------------------------------
                            837 ; Home
                            838 ;--------------------------------------------------------
                            839 	.area HOME    (CODE)
                            840 	.area HOME    (CODE)
   001E                     841 __sdcc_program_startup:
   001E 02r15r4F      [24]  842 	ljmp	_main
                            843 ;	return from main will return to caller
                            844 ;--------------------------------------------------------
                            845 ; code
                            846 ;--------------------------------------------------------
                            847 	.area CSEG    (CODE)
                            848 ;------------------------------------------------------------
                            849 ;Allocation info for local variables in function 'rf_read_rx_payload'
                            850 ;------------------------------------------------------------
                            851 ;len                       Allocated with name '_rf_read_rx_payload_PARM_2'
                            852 ;dataptr                   Allocated with name '_rf_read_rx_payload_dataptr_1_37'
                            853 ;status                    Allocated with name '_rf_read_rx_payload_status_1_38'
                            854 ;------------------------------------------------------------
                            855 ;	../src/rf/src/rf_read_rx_payload.c:48: unsigned char rf_read_rx_payload(unsigned char * dataptr, unsigned int len)
                            856 ;	-----------------------------------------
                            857 ;	 function rf_read_rx_payload
                            858 ;	-----------------------------------------
   0000                     859 _rf_read_rx_payload:
                     0007   860 	ar7 = 0x07
                     0006   861 	ar6 = 0x06
                     0005   862 	ar5 = 0x05
                     0004   863 	ar4 = 0x04
                     0003   864 	ar3 = 0x03
                     0002   865 	ar2 = 0x02
                     0001   866 	ar1 = 0x01
                     0000   867 	ar0 = 0x00
   0000 AF F0         [24]  868 	mov	r7,b
   0002 AE 83         [24]  869 	mov	r6,dph
   0004 E5 82         [12]  870 	mov	a,dpl
   0006 90r00r02      [24]  871 	mov	dptr,#_rf_read_rx_payload_dataptr_1_37
   0009 F0            [24]  872 	movx	@dptr,a
   000A EE            [12]  873 	mov	a,r6
   000B A3            [24]  874 	inc	dptr
   000C F0            [24]  875 	movx	@dptr,a
   000D EF            [12]  876 	mov	a,r7
   000E A3            [24]  877 	inc	dptr
   000F F0            [24]  878 	movx	@dptr,a
                            879 ;	../src/rf/src/rf_read_rx_payload.c:53: rf_clear_ce();
   0010 C2 E8         [12]  880 	clr _RFCON_SB_RFCE 
                            881 ;	../src/rf/src/rf_read_rx_payload.c:54: status = rf_spi_execute_command(RF_R_RX_PAYLOAD, dataptr, len, true);
   0012 90r00r02      [24]  882 	mov	dptr,#_rf_read_rx_payload_dataptr_1_37
   0015 E0            [24]  883 	movx	a,@dptr
   0016 FD            [12]  884 	mov	r5,a
   0017 A3            [24]  885 	inc	dptr
   0018 E0            [24]  886 	movx	a,@dptr
   0019 FE            [12]  887 	mov	r6,a
   001A A3            [24]  888 	inc	dptr
   001B E0            [24]  889 	movx	a,@dptr
   001C FF            [12]  890 	mov	r7,a
   001D 90r00r00      [24]  891 	mov	dptr,#_rf_read_rx_payload_PARM_2
   0020 E0            [24]  892 	movx	a,@dptr
   0021 FB            [12]  893 	mov	r3,a
   0022 A3            [24]  894 	inc	dptr
   0023 E0            [24]  895 	movx	a,@dptr
   0024 FC            [12]  896 	mov	r4,a
   0025 90r00r18      [24]  897 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0028 ED            [12]  898 	mov	a,r5
   0029 F0            [24]  899 	movx	@dptr,a
   002A EE            [12]  900 	mov	a,r6
   002B A3            [24]  901 	inc	dptr
   002C F0            [24]  902 	movx	@dptr,a
   002D EF            [12]  903 	mov	a,r7
   002E A3            [24]  904 	inc	dptr
   002F F0            [24]  905 	movx	@dptr,a
   0030 90r00r1B      [24]  906 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0033 EB            [12]  907 	mov	a,r3
   0034 F0            [24]  908 	movx	@dptr,a
   0035 EC            [12]  909 	mov	a,r4
   0036 A3            [24]  910 	inc	dptr
   0037 F0            [24]  911 	movx	@dptr,a
   0038 90r00r1D      [24]  912 	mov	dptr,#_rf_spi_execute_command_PARM_4
   003B 74 01         [12]  913 	mov	a,#0x01
   003D F0            [24]  914 	movx	@dptr,a
   003E 75 82 61      [24]  915 	mov	dpl,#0x61
   0041 12r02r35      [24]  916 	lcall	_rf_spi_execute_command
   0044 AF 82         [24]  917 	mov	r7,dpl
                            918 ;	../src/rf/src/rf_read_rx_payload.c:55: rf_set_ce();
   0046 D2 E8         [12]  919 	setb _RFCON_SB_RFCE 
   0048 90 00 04      [24]  920 	mov	dptr,#0x0004
   004B C0 07         [24]  921 	push	ar7
   004D 12r08r42      [24]  922 	lcall	_delay_us
   0050 D0 07         [24]  923 	pop	ar7
                            924 ;	../src/rf/src/rf_read_rx_payload.c:57: return status; //Return the STATUS register value
   0052 8F 82         [24]  925 	mov	dpl,r7
   0054 22            [24]  926 	ret
                            927 ;------------------------------------------------------------
                            928 ;Allocation info for local variables in function 'rf_configure_debug_lite'
                            929 ;------------------------------------------------------------
                            930 ;p0_payload_width          Allocated with name '_rf_configure_debug_lite_PARM_2'
                            931 ;rx                        Allocated with name '_rf_configure_debug_lite_rx_1_39'
                            932 ;config                    Allocated with name '_rf_configure_debug_lite_config_1_40'
                            933 ;------------------------------------------------------------
                            934 ;	../src/rf/src/rf_configure_debug_lite.c:48: void rf_configure_debug_lite(bool rx, unsigned char p0_payload_width)
                            935 ;	-----------------------------------------
                            936 ;	 function rf_configure_debug_lite
                            937 ;	-----------------------------------------
   0055                     938 _rf_configure_debug_lite:
   0055 E5 82         [12]  939 	mov	a,dpl
   0057 90r00r06      [24]  940 	mov	dptr,#_rf_configure_debug_lite_rx_1_39
   005A F0            [24]  941 	movx	@dptr,a
                            942 ;	../src/rf/src/rf_configure_debug_lite.c:52: rf_spi_configure_enable(); //Enable RF SPI
   005B 12r00rF9      [24]  943 	lcall	_rf_spi_configure_enable
                            944 ;	../src/rf/src/rf_configure_debug_lite.c:55: config = 0;
   005E 90r00r07      [24]  945 	mov	dptr,#_rf_configure_debug_lite_config_1_40
   0061 E4            [12]  946 	clr	a
   0062 F0            [24]  947 	movx	@dptr,a
                            948 ;	../src/rf/src/rf_configure_debug_lite.c:56: rf_write_register(RF_EN_AA, &config, 1); //Turn auto-acknowledge off
   0063 90r00r08      [24]  949 	mov	dptr,#_rf_write_register_PARM_2
   0066 74r07         [12]  950 	mov	a,#_rf_configure_debug_lite_config_1_40
   0068 F0            [24]  951 	movx	@dptr,a
   0069 74s00         [12]  952 	mov	a,#(_rf_configure_debug_lite_config_1_40 >> 8)
   006B A3            [24]  953 	inc	dptr
   006C F0            [24]  954 	movx	@dptr,a
   006D E4            [12]  955 	clr	a
   006E A3            [24]  956 	inc	dptr
   006F F0            [24]  957 	movx	@dptr,a
   0070 90r00r0B      [24]  958 	mov	dptr,#_rf_write_register_PARM_3
   0073 74 01         [12]  959 	mov	a,#0x01
   0075 F0            [24]  960 	movx	@dptr,a
   0076 E4            [12]  961 	clr	a
   0077 A3            [24]  962 	inc	dptr
   0078 F0            [24]  963 	movx	@dptr,a
   0079 75 82 01      [24]  964 	mov	dpl,#0x01
   007C 12r00rBC      [24]  965 	lcall	_rf_write_register
                            966 ;	../src/rf/src/rf_configure_debug_lite.c:59: config = RF_CONFIG_DEFAULT_VAL; //Set config to the default value of the CONFIG register
   007F 90r00r07      [24]  967 	mov	dptr,#_rf_configure_debug_lite_config_1_40
   0082 74 08         [12]  968 	mov	a,#0x08
   0084 F0            [24]  969 	movx	@dptr,a
                            970 ;	../src/rf/src/rf_configure_debug_lite.c:62: rf_write_register(RF_RX_PW_P0, &p0_payload_width, 1);
   0085 90r00r08      [24]  971 	mov	dptr,#_rf_write_register_PARM_2
   0088 74r05         [12]  972 	mov	a,#_rf_configure_debug_lite_PARM_2
   008A F0            [24]  973 	movx	@dptr,a
   008B 74s00         [12]  974 	mov	a,#(_rf_configure_debug_lite_PARM_2 >> 8)
   008D A3            [24]  975 	inc	dptr
   008E F0            [24]  976 	movx	@dptr,a
   008F E4            [12]  977 	clr	a
   0090 A3            [24]  978 	inc	dptr
   0091 F0            [24]  979 	movx	@dptr,a
   0092 90r00r0B      [24]  980 	mov	dptr,#_rf_write_register_PARM_3
   0095 74 01         [12]  981 	mov	a,#0x01
   0097 F0            [24]  982 	movx	@dptr,a
   0098 E4            [12]  983 	clr	a
   0099 A3            [24]  984 	inc	dptr
   009A F0            [24]  985 	movx	@dptr,a
   009B 75 82 11      [24]  986 	mov	dpl,#0x11
   009E 12r00rBC      [24]  987 	lcall	_rf_write_register
                            988 ;	../src/rf/src/rf_configure_debug_lite.c:65: if(rx != false)
   00A1 90r00r06      [24]  989 	mov	dptr,#_rf_configure_debug_lite_rx_1_39
   00A4 E0            [24]  990 	movx	a,@dptr
   00A5 FF            [12]  991 	mov	r7,a
   00A6 60 06         [24]  992 	jz	00102$
                            993 ;	../src/rf/src/rf_configure_debug_lite.c:67: config |= RF_CONFIG_PRIM_RX;
   00A8 90r00r07      [24]  994 	mov	dptr,#_rf_configure_debug_lite_config_1_40
   00AB 74 09         [12]  995 	mov	a,#0x09
   00AD F0            [24]  996 	movx	@dptr,a
   00AE                     997 00102$:
                            998 ;	../src/rf/src/rf_configure_debug_lite.c:70: rf_power_up_param(true, config);
   00AE 90r00r07      [24]  999 	mov	dptr,#_rf_configure_debug_lite_config_1_40
   00B1 E0            [24] 1000 	movx	a,@dptr
   00B2 90r00r26      [24] 1001 	mov	dptr,#_rf_power_up_param_PARM_2
   00B5 F0            [24] 1002 	movx	@dptr,a
   00B6 75 82 01      [24] 1003 	mov	dpl,#0x01
   00B9 02r03r24      [24] 1004 	ljmp	_rf_power_up_param
                           1005 ;------------------------------------------------------------
                           1006 ;Allocation info for local variables in function 'rf_write_register'
                           1007 ;------------------------------------------------------------
                           1008 ;dataptr                   Allocated with name '_rf_write_register_PARM_2'
                           1009 ;len                       Allocated with name '_rf_write_register_PARM_3'
                           1010 ;regnumber                 Allocated with name '_rf_write_register_regnumber_1_42'
                           1011 ;------------------------------------------------------------
                           1012 ;	../src/rf/src/rf_write_register.c:49: unsigned char rf_write_register(unsigned char regnumber, unsigned char * dataptr, unsigned int len)
                           1013 ;	-----------------------------------------
                           1014 ;	 function rf_write_register
                           1015 ;	-----------------------------------------
   00BC                    1016 _rf_write_register:
   00BC E5 82         [12] 1017 	mov	a,dpl
                           1018 ;	../src/rf/src/rf_write_register.c:52: return rf_spi_execute_command(RF_W_REGISTER | (regnumber & RF_W_REGISTER_DATA), dataptr, len, false);
   00BE 90r00r0D      [24] 1019 	mov	dptr,#_rf_write_register_regnumber_1_42
   00C1 F0            [24] 1020 	movx	@dptr,a
   00C2 FF            [12] 1021 	mov	r7,a
   00C3 74 1F         [12] 1022 	mov	a,#0x1F
   00C5 5F            [12] 1023 	anl	a,r7
   00C6 44 20         [12] 1024 	orl	a,#0x20
   00C8 FF            [12] 1025 	mov	r7,a
   00C9 90r00r08      [24] 1026 	mov	dptr,#_rf_write_register_PARM_2
   00CC E0            [24] 1027 	movx	a,@dptr
   00CD FC            [12] 1028 	mov	r4,a
   00CE A3            [24] 1029 	inc	dptr
   00CF E0            [24] 1030 	movx	a,@dptr
   00D0 FD            [12] 1031 	mov	r5,a
   00D1 A3            [24] 1032 	inc	dptr
   00D2 E0            [24] 1033 	movx	a,@dptr
   00D3 FE            [12] 1034 	mov	r6,a
   00D4 90r00r0B      [24] 1035 	mov	dptr,#_rf_write_register_PARM_3
   00D7 E0            [24] 1036 	movx	a,@dptr
   00D8 FA            [12] 1037 	mov	r2,a
   00D9 A3            [24] 1038 	inc	dptr
   00DA E0            [24] 1039 	movx	a,@dptr
   00DB FB            [12] 1040 	mov	r3,a
   00DC 90r00r18      [24] 1041 	mov	dptr,#_rf_spi_execute_command_PARM_2
   00DF EC            [12] 1042 	mov	a,r4
   00E0 F0            [24] 1043 	movx	@dptr,a
   00E1 ED            [12] 1044 	mov	a,r5
   00E2 A3            [24] 1045 	inc	dptr
   00E3 F0            [24] 1046 	movx	@dptr,a
   00E4 EE            [12] 1047 	mov	a,r6
   00E5 A3            [24] 1048 	inc	dptr
   00E6 F0            [24] 1049 	movx	@dptr,a
   00E7 90r00r1B      [24] 1050 	mov	dptr,#_rf_spi_execute_command_PARM_3
   00EA EA            [12] 1051 	mov	a,r2
   00EB F0            [24] 1052 	movx	@dptr,a
   00EC EB            [12] 1053 	mov	a,r3
   00ED A3            [24] 1054 	inc	dptr
   00EE F0            [24] 1055 	movx	@dptr,a
   00EF 90r00r1D      [24] 1056 	mov	dptr,#_rf_spi_execute_command_PARM_4
   00F2 E4            [12] 1057 	clr	a
   00F3 F0            [24] 1058 	movx	@dptr,a
   00F4 8F 82         [24] 1059 	mov	dpl,r7
   00F6 02r02r35      [24] 1060 	ljmp	_rf_spi_execute_command
                           1061 ;------------------------------------------------------------
                           1062 ;Allocation info for local variables in function 'rf_spi_configure_enable'
                           1063 ;------------------------------------------------------------
                           1064 ;	../src/rf/src/rf_spi_configure_enable.c:47: void rf_spi_configure_enable()
                           1065 ;	-----------------------------------------
                           1066 ;	 function rf_spi_configure_enable
                           1067 ;	-----------------------------------------
   00F9                    1068 _rf_spi_configure_enable:
                           1069 ;	../src/rf/src/rf_spi_configure_enable.c:50: RFCON = 0x02;
   00F9 75 E8 02      [24] 1070 	mov	_RFCON,#0x02
                           1071 ;	../src/rf/src/rf_spi_configure_enable.c:51: RFCON = RFCON_RFCKEN;
   00FC 75 E8 04      [24] 1072 	mov	_RFCON,#0x04
   00FF 22            [24] 1073 	ret
                           1074 ;------------------------------------------------------------
                           1075 ;Allocation info for local variables in function 'rf_write_tx_payload'
                           1076 ;------------------------------------------------------------
                           1077 ;len                       Allocated with name '_rf_write_tx_payload_PARM_2'
                           1078 ;transmit                  Allocated with name '_rf_write_tx_payload_PARM_3'
                           1079 ;dataptr                   Allocated with name '_rf_write_tx_payload_dataptr_1_45'
                           1080 ;status                    Allocated with name '_rf_write_tx_payload_status_1_46'
                           1081 ;------------------------------------------------------------
                           1082 ;	../src/rf/src/rf_write_tx_payload.c:49: unsigned char rf_write_tx_payload(unsigned char * dataptr, unsigned int len, bool transmit)
                           1083 ;	-----------------------------------------
                           1084 ;	 function rf_write_tx_payload
                           1085 ;	-----------------------------------------
   0100                    1086 _rf_write_tx_payload:
   0100 AF F0         [24] 1087 	mov	r7,b
   0102 AE 83         [24] 1088 	mov	r6,dph
   0104 E5 82         [12] 1089 	mov	a,dpl
   0106 90r00r11      [24] 1090 	mov	dptr,#_rf_write_tx_payload_dataptr_1_45
   0109 F0            [24] 1091 	movx	@dptr,a
   010A EE            [12] 1092 	mov	a,r6
   010B A3            [24] 1093 	inc	dptr
   010C F0            [24] 1094 	movx	@dptr,a
   010D EF            [12] 1095 	mov	a,r7
   010E A3            [24] 1096 	inc	dptr
   010F F0            [24] 1097 	movx	@dptr,a
                           1098 ;	../src/rf/src/rf_write_tx_payload.c:53: status = rf_spi_execute_command(RF_W_TX_PAYLOAD, dataptr, len, false); //Write the payload
   0110 90r00r11      [24] 1099 	mov	dptr,#_rf_write_tx_payload_dataptr_1_45
   0113 E0            [24] 1100 	movx	a,@dptr
   0114 FD            [12] 1101 	mov	r5,a
   0115 A3            [24] 1102 	inc	dptr
   0116 E0            [24] 1103 	movx	a,@dptr
   0117 FE            [12] 1104 	mov	r6,a
   0118 A3            [24] 1105 	inc	dptr
   0119 E0            [24] 1106 	movx	a,@dptr
   011A FF            [12] 1107 	mov	r7,a
   011B 90r00r0E      [24] 1108 	mov	dptr,#_rf_write_tx_payload_PARM_2
   011E E0            [24] 1109 	movx	a,@dptr
   011F FB            [12] 1110 	mov	r3,a
   0120 A3            [24] 1111 	inc	dptr
   0121 E0            [24] 1112 	movx	a,@dptr
   0122 FC            [12] 1113 	mov	r4,a
   0123 90r00r18      [24] 1114 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0126 ED            [12] 1115 	mov	a,r5
   0127 F0            [24] 1116 	movx	@dptr,a
   0128 EE            [12] 1117 	mov	a,r6
   0129 A3            [24] 1118 	inc	dptr
   012A F0            [24] 1119 	movx	@dptr,a
   012B EF            [12] 1120 	mov	a,r7
   012C A3            [24] 1121 	inc	dptr
   012D F0            [24] 1122 	movx	@dptr,a
   012E 90r00r1B      [24] 1123 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0131 EB            [12] 1124 	mov	a,r3
   0132 F0            [24] 1125 	movx	@dptr,a
   0133 EC            [12] 1126 	mov	a,r4
   0134 A3            [24] 1127 	inc	dptr
   0135 F0            [24] 1128 	movx	@dptr,a
   0136 90r00r1D      [24] 1129 	mov	dptr,#_rf_spi_execute_command_PARM_4
   0139 E4            [12] 1130 	clr	a
   013A F0            [24] 1131 	movx	@dptr,a
   013B 75 82 A0      [24] 1132 	mov	dpl,#0xA0
   013E 12r02r35      [24] 1133 	lcall	_rf_spi_execute_command
   0141 AF 82         [24] 1134 	mov	r7,dpl
                           1135 ;	../src/rf/src/rf_write_tx_payload.c:56: if(transmit == true)
   0143 90r00r10      [24] 1136 	mov	dptr,#_rf_write_tx_payload_PARM_3
   0146 E0            [24] 1137 	movx	a,@dptr
   0147 FE            [12] 1138 	mov	r6,a
   0148 BE 01 07      [24] 1139 	cjne	r6,#0x01,00102$
                           1140 ;	../src/rf/src/rf_write_tx_payload.c:58: rf_transmit();
   014B C0 07         [24] 1141 	push	ar7
   014D 12r01r55      [24] 1142 	lcall	_rf_transmit
   0150 D0 07         [24] 1143 	pop	ar7
   0152                    1144 00102$:
                           1145 ;	../src/rf/src/rf_write_tx_payload.c:61: return status; //Return the value of STATUS
   0152 8F 82         [24] 1146 	mov	dpl,r7
   0154 22            [24] 1147 	ret
                           1148 ;------------------------------------------------------------
                           1149 ;Allocation info for local variables in function 'rf_transmit'
                           1150 ;------------------------------------------------------------
                           1151 ;	../src/rf/src/rf_transmit.c:47: void rf_transmit()
                           1152 ;	-----------------------------------------
                           1153 ;	 function rf_transmit
                           1154 ;	-----------------------------------------
   0155                    1155 _rf_transmit:
                           1156 ;	../src/rf/src/rf_transmit.c:50: rf_set_ce();
   0155 D2 E8         [12] 1157 	setb _RFCON_SB_RFCE 
   0157 90 00 04      [24] 1158 	mov	dptr,#0x0004
   015A 12r08r42      [24] 1159 	lcall	_delay_us
                           1160 ;	../src/rf/src/rf_transmit.c:51: delay_us(10);
   015D 90 00 0A      [24] 1161 	mov	dptr,#0x000A
   0160 12r08r42      [24] 1162 	lcall	_delay_us
                           1163 ;	../src/rf/src/rf_transmit.c:52: rf_clear_ce();
   0163 C2 E8         [12] 1164 	clr _RFCON_SB_RFCE 
   0165 22            [24] 1165 	ret
                           1166 ;------------------------------------------------------------
                           1167 ;Allocation info for local variables in function 'rf_set_as_rx'
                           1168 ;------------------------------------------------------------
                           1169 ;rx_active_mode            Allocated with name '_rf_set_as_rx_rx_active_mode_1_49'
                           1170 ;config                    Allocated with name '_rf_set_as_rx_config_1_50'
                           1171 ;------------------------------------------------------------
                           1172 ;	../src/rf/src/rf_set_as_rx.c:47: void rf_set_as_rx(bool rx_active_mode)
                           1173 ;	-----------------------------------------
                           1174 ;	 function rf_set_as_rx
                           1175 ;	-----------------------------------------
   0166                    1176 _rf_set_as_rx:
   0166 E5 82         [12] 1177 	mov	a,dpl
   0168 90r00r14      [24] 1178 	mov	dptr,#_rf_set_as_rx_rx_active_mode_1_49
   016B F0            [24] 1179 	movx	@dptr,a
                           1180 ;	../src/rf/src/rf_set_as_rx.c:51: rf_read_register(RF_CONFIG, &config, 1); //Read the current CONFIG value
   016C 90r00r28      [24] 1181 	mov	dptr,#_rf_read_register_PARM_2
   016F 74r15         [12] 1182 	mov	a,#_rf_set_as_rx_config_1_50
   0171 F0            [24] 1183 	movx	@dptr,a
   0172 74s00         [12] 1184 	mov	a,#(_rf_set_as_rx_config_1_50 >> 8)
   0174 A3            [24] 1185 	inc	dptr
   0175 F0            [24] 1186 	movx	@dptr,a
   0176 E4            [12] 1187 	clr	a
   0177 A3            [24] 1188 	inc	dptr
   0178 F0            [24] 1189 	movx	@dptr,a
   0179 90r00r2B      [24] 1190 	mov	dptr,#_rf_read_register_PARM_3
   017C 74 01         [12] 1191 	mov	a,#0x01
   017E F0            [24] 1192 	movx	@dptr,a
   017F E4            [12] 1193 	clr	a
   0180 A3            [24] 1194 	inc	dptr
   0181 F0            [24] 1195 	movx	@dptr,a
   0182 75 82 00      [24] 1196 	mov	dpl,#0x00
   0185 12r03r70      [24] 1197 	lcall	_rf_read_register
                           1198 ;	../src/rf/src/rf_set_as_rx.c:54: if((config & RF_CONFIG_PRIM_RX) != 0)
   0188 90r00r15      [24] 1199 	mov	dptr,#_rf_set_as_rx_config_1_50
   018B E0            [24] 1200 	movx	a,@dptr
   018C FF            [12] 1201 	mov	r7,a
   018D 30 E0 01      [24] 1202 	jnb	acc.0,00102$
                           1203 ;	../src/rf/src/rf_set_as_rx.c:56: return;
   0190 22            [24] 1204 	ret
   0191                    1205 00102$:
                           1206 ;	../src/rf/src/rf_set_as_rx.c:60: config |= RF_CONFIG_PRIM_RX;
   0191 90r00r15      [24] 1207 	mov	dptr,#_rf_set_as_rx_config_1_50
   0194 74 01         [12] 1208 	mov	a,#0x01
   0196 4F            [12] 1209 	orl	a,r7
   0197 F0            [24] 1210 	movx	@dptr,a
                           1211 ;	../src/rf/src/rf_set_as_rx.c:61: rf_write_register(RF_CONFIG, &config, 1);
   0198 90r00r08      [24] 1212 	mov	dptr,#_rf_write_register_PARM_2
   019B 74r15         [12] 1213 	mov	a,#_rf_set_as_rx_config_1_50
   019D F0            [24] 1214 	movx	@dptr,a
   019E 74s00         [12] 1215 	mov	a,#(_rf_set_as_rx_config_1_50 >> 8)
   01A0 A3            [24] 1216 	inc	dptr
   01A1 F0            [24] 1217 	movx	@dptr,a
   01A2 E4            [12] 1218 	clr	a
   01A3 A3            [24] 1219 	inc	dptr
   01A4 F0            [24] 1220 	movx	@dptr,a
   01A5 90r00r0B      [24] 1221 	mov	dptr,#_rf_write_register_PARM_3
   01A8 74 01         [12] 1222 	mov	a,#0x01
   01AA F0            [24] 1223 	movx	@dptr,a
   01AB E4            [12] 1224 	clr	a
   01AC A3            [24] 1225 	inc	dptr
   01AD F0            [24] 1226 	movx	@dptr,a
   01AE 75 82 00      [24] 1227 	mov	dpl,#0x00
   01B1 12r00rBC      [24] 1228 	lcall	_rf_write_register
                           1229 ;	../src/rf/src/rf_set_as_rx.c:64: if(rx_active_mode != false)
   01B4 90r00r14      [24] 1230 	mov	dptr,#_rf_set_as_rx_rx_active_mode_1_49
   01B7 E0            [24] 1231 	movx	a,@dptr
   01B8 FF            [12] 1232 	mov	r7,a
   01B9 60 08         [24] 1233 	jz	00104$
                           1234 ;	../src/rf/src/rf_set_as_rx.c:66: rf_set_ce();
   01BB D2 E8         [12] 1235 	setb _RFCON_SB_RFCE 
   01BD 90 00 04      [24] 1236 	mov	dptr,#0x0004
   01C0 02r08r42      [24] 1237 	ljmp	_delay_us
   01C3                    1238 00104$:
                           1239 ;	../src/rf/src/rf_set_as_rx.c:70: rf_clear_ce();
   01C3 C2 E8         [12] 1240 	clr _RFCON_SB_RFCE 
   01C5 22            [24] 1241 	ret
                           1242 ;------------------------------------------------------------
                           1243 ;Allocation info for local variables in function 'rf_irq_clear_all'
                           1244 ;------------------------------------------------------------
                           1245 ;dataptr                   Allocated with name '_rf_irq_clear_all_dataptr_1_54'
                           1246 ;------------------------------------------------------------
                           1247 ;	../src/rf/src/rf_irq_clear_all.c:47: void rf_irq_clear_all()
                           1248 ;	-----------------------------------------
                           1249 ;	 function rf_irq_clear_all
                           1250 ;	-----------------------------------------
   01C6                    1251 _rf_irq_clear_all:
                           1252 ;	../src/rf/src/rf_irq_clear_all.c:50: unsigned char dataptr = RF_STATUS_RX_DR | RF_STATUS_TX_DS | RF_STATUS_MAX_RT;
   01C6 90r00r16      [24] 1253 	mov	dptr,#_rf_irq_clear_all_dataptr_1_54
   01C9 74 70         [12] 1254 	mov	a,#0x70
   01CB F0            [24] 1255 	movx	@dptr,a
                           1256 ;	../src/rf/src/rf_irq_clear_all.c:52: rf_write_register(RF_STATUS, &dataptr, 1);
   01CC 90r00r08      [24] 1257 	mov	dptr,#_rf_write_register_PARM_2
   01CF 74r16         [12] 1258 	mov	a,#_rf_irq_clear_all_dataptr_1_54
   01D1 F0            [24] 1259 	movx	@dptr,a
   01D2 74s00         [12] 1260 	mov	a,#(_rf_irq_clear_all_dataptr_1_54 >> 8)
   01D4 A3            [24] 1261 	inc	dptr
   01D5 F0            [24] 1262 	movx	@dptr,a
   01D6 E4            [12] 1263 	clr	a
   01D7 A3            [24] 1264 	inc	dptr
   01D8 F0            [24] 1265 	movx	@dptr,a
   01D9 90r00r0B      [24] 1266 	mov	dptr,#_rf_write_register_PARM_3
   01DC 74 01         [12] 1267 	mov	a,#0x01
   01DE F0            [24] 1268 	movx	@dptr,a
   01DF E4            [12] 1269 	clr	a
   01E0 A3            [24] 1270 	inc	dptr
   01E1 F0            [24] 1271 	movx	@dptr,a
   01E2 75 82 07      [24] 1272 	mov	dpl,#0x07
   01E5 12r00rBC      [24] 1273 	lcall	_rf_write_register
                           1274 ;	../src/rf/src/rf_irq_clear_all.c:54: sbit_clear(IRCON_SB_RFIRQ); //Clear the master interrupt
   01E8 C2 C1         [12] 1275 	clr _IRCON_SB_RFIRQ 
   01EA 22            [24] 1276 	ret
                           1277 ;------------------------------------------------------------
                           1278 ;Allocation info for local variables in function 'rf_set_as_tx'
                           1279 ;------------------------------------------------------------
                           1280 ;config                    Allocated with name '_rf_set_as_tx_config_1_55'
                           1281 ;------------------------------------------------------------
                           1282 ;	../src/rf/src/rf_set_as_tx.c:47: void rf_set_as_tx()
                           1283 ;	-----------------------------------------
                           1284 ;	 function rf_set_as_tx
                           1285 ;	-----------------------------------------
   01EB                    1286 _rf_set_as_tx:
                           1287 ;	../src/rf/src/rf_set_as_tx.c:51: rf_read_register(RF_CONFIG, &config, 1); //Read the current CONFIG value
   01EB 90r00r28      [24] 1288 	mov	dptr,#_rf_read_register_PARM_2
   01EE 74r17         [12] 1289 	mov	a,#_rf_set_as_tx_config_1_55
   01F0 F0            [24] 1290 	movx	@dptr,a
   01F1 74s00         [12] 1291 	mov	a,#(_rf_set_as_tx_config_1_55 >> 8)
   01F3 A3            [24] 1292 	inc	dptr
   01F4 F0            [24] 1293 	movx	@dptr,a
   01F5 E4            [12] 1294 	clr	a
   01F6 A3            [24] 1295 	inc	dptr
   01F7 F0            [24] 1296 	movx	@dptr,a
   01F8 90r00r2B      [24] 1297 	mov	dptr,#_rf_read_register_PARM_3
   01FB 74 01         [12] 1298 	mov	a,#0x01
   01FD F0            [24] 1299 	movx	@dptr,a
   01FE E4            [12] 1300 	clr	a
   01FF A3            [24] 1301 	inc	dptr
   0200 F0            [24] 1302 	movx	@dptr,a
   0201 75 82 00      [24] 1303 	mov	dpl,#0x00
   0204 12r03r70      [24] 1304 	lcall	_rf_read_register
                           1305 ;	../src/rf/src/rf_set_as_tx.c:54: if((config & RF_CONFIG_PRIM_RX) == 0)
   0207 90r00r17      [24] 1306 	mov	dptr,#_rf_set_as_tx_config_1_55
   020A E0            [24] 1307 	movx	a,@dptr
   020B FF            [12] 1308 	mov	r7,a
   020C 20 E0 01      [24] 1309 	jb	acc.0,00102$
                           1310 ;	../src/rf/src/rf_set_as_tx.c:56: return;
   020F 22            [24] 1311 	ret
   0210                    1312 00102$:
                           1313 ;	../src/rf/src/rf_set_as_tx.c:59: rf_clear_ce(); //Clear the CE pin
   0210 C2 E8         [12] 1314 	clr _RFCON_SB_RFCE 
                           1315 ;	../src/rf/src/rf_set_as_tx.c:62: config &= (~RF_CONFIG_PRIM_RX);
   0212 90r00r17      [24] 1316 	mov	dptr,#_rf_set_as_tx_config_1_55
   0215 74 FE         [12] 1317 	mov	a,#0xFE
   0217 5F            [12] 1318 	anl	a,r7
   0218 F0            [24] 1319 	movx	@dptr,a
                           1320 ;	../src/rf/src/rf_set_as_tx.c:63: rf_write_register(RF_CONFIG, &config, 1);
   0219 90r00r08      [24] 1321 	mov	dptr,#_rf_write_register_PARM_2
   021C 74r17         [12] 1322 	mov	a,#_rf_set_as_tx_config_1_55
   021E F0            [24] 1323 	movx	@dptr,a
   021F 74s00         [12] 1324 	mov	a,#(_rf_set_as_tx_config_1_55 >> 8)
   0221 A3            [24] 1325 	inc	dptr
   0222 F0            [24] 1326 	movx	@dptr,a
   0223 E4            [12] 1327 	clr	a
   0224 A3            [24] 1328 	inc	dptr
   0225 F0            [24] 1329 	movx	@dptr,a
   0226 90r00r0B      [24] 1330 	mov	dptr,#_rf_write_register_PARM_3
   0229 74 01         [12] 1331 	mov	a,#0x01
   022B F0            [24] 1332 	movx	@dptr,a
   022C E4            [12] 1333 	clr	a
   022D A3            [24] 1334 	inc	dptr
   022E F0            [24] 1335 	movx	@dptr,a
   022F 75 82 00      [24] 1336 	mov	dpl,#0x00
   0232 02r00rBC      [24] 1337 	ljmp	_rf_write_register
                           1338 ;------------------------------------------------------------
                           1339 ;Allocation info for local variables in function 'rf_spi_execute_command'
                           1340 ;------------------------------------------------------------
                           1341 ;dataptr                   Allocated with name '_rf_spi_execute_command_PARM_2'
                           1342 ;len                       Allocated with name '_rf_spi_execute_command_PARM_3'
                           1343 ;copydata                  Allocated with name '_rf_spi_execute_command_PARM_4'
                           1344 ;instruction               Allocated with name '_rf_spi_execute_command_instruction_1_57'
                           1345 ;status                    Allocated with name '_rf_spi_execute_command_status_1_58'
                           1346 ;------------------------------------------------------------
                           1347 ;	../src/rf/src/rf_spi_execute_command.c:50: unsigned char rf_spi_execute_command(unsigned char instruction, unsigned char * dataptr, unsigned int len, bool copydata)
                           1348 ;	-----------------------------------------
                           1349 ;	 function rf_spi_execute_command
                           1350 ;	-----------------------------------------
   0235                    1351 _rf_spi_execute_command:
   0235 E5 82         [12] 1352 	mov	a,dpl
                           1353 ;	../src/rf/src/rf_spi_execute_command.c:52: unsigned char status = instruction; //status writes the instruction, then reads the current STATUS value
   0237 90r00r1E      [24] 1354 	mov	dptr,#_rf_spi_execute_command_instruction_1_57
   023A F0            [24] 1355 	movx	@dptr,a
   023B FF            [12] 1356 	mov	r7,a
   023C 90r00r1F      [24] 1357 	mov	dptr,#_rf_spi_execute_command_status_1_58
   023F F0            [24] 1358 	movx	@dptr,a
                           1359 ;	../src/rf/src/rf_spi_execute_command.c:54: rf_clear_csn(); //Clear CSN to start the transaction
   0240 C2 E9         [12] 1360 	clr _RFCON_SB_RFCSN 
                           1361 ;	../src/rf/src/rf_spi_execute_command.c:57: rf_spi_send_read(&status, 1, true);
   0242 90r00r20      [24] 1362 	mov	dptr,#_rf_spi_send_read_PARM_2
   0245 74 01         [12] 1363 	mov	a,#0x01
   0247 F0            [24] 1364 	movx	@dptr,a
   0248 E4            [12] 1365 	clr	a
   0249 A3            [24] 1366 	inc	dptr
   024A F0            [24] 1367 	movx	@dptr,a
   024B 90r00r22      [24] 1368 	mov	dptr,#_rf_spi_send_read_PARM_3
   024E 74 01         [12] 1369 	mov	a,#0x01
   0250 F0            [24] 1370 	movx	@dptr,a
   0251 90r00r1F      [24] 1371 	mov	dptr,#_rf_spi_execute_command_status_1_58
   0254 75 F0 00      [24] 1372 	mov	b,#0x00
   0257 12r02r91      [24] 1373 	lcall	_rf_spi_send_read
                           1374 ;	../src/rf/src/rf_spi_execute_command.c:58: rf_spi_send_read(dataptr, len, copydata);
   025A 90r00r18      [24] 1375 	mov	dptr,#_rf_spi_execute_command_PARM_2
   025D E0            [24] 1376 	movx	a,@dptr
   025E FD            [12] 1377 	mov	r5,a
   025F A3            [24] 1378 	inc	dptr
   0260 E0            [24] 1379 	movx	a,@dptr
   0261 FE            [12] 1380 	mov	r6,a
   0262 A3            [24] 1381 	inc	dptr
   0263 E0            [24] 1382 	movx	a,@dptr
   0264 FF            [12] 1383 	mov	r7,a
   0265 90r00r1B      [24] 1384 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0268 E0            [24] 1385 	movx	a,@dptr
   0269 FB            [12] 1386 	mov	r3,a
   026A A3            [24] 1387 	inc	dptr
   026B E0            [24] 1388 	movx	a,@dptr
   026C FC            [12] 1389 	mov	r4,a
   026D 90r00r1D      [24] 1390 	mov	dptr,#_rf_spi_execute_command_PARM_4
   0270 E0            [24] 1391 	movx	a,@dptr
   0271 FA            [12] 1392 	mov	r2,a
   0272 90r00r20      [24] 1393 	mov	dptr,#_rf_spi_send_read_PARM_2
   0275 EB            [12] 1394 	mov	a,r3
   0276 F0            [24] 1395 	movx	@dptr,a
   0277 EC            [12] 1396 	mov	a,r4
   0278 A3            [24] 1397 	inc	dptr
   0279 F0            [24] 1398 	movx	@dptr,a
   027A 90r00r22      [24] 1399 	mov	dptr,#_rf_spi_send_read_PARM_3
   027D EA            [12] 1400 	mov	a,r2
   027E F0            [24] 1401 	movx	@dptr,a
   027F 8D 82         [24] 1402 	mov	dpl,r5
   0281 8E 83         [24] 1403 	mov	dph,r6
   0283 8F F0         [24] 1404 	mov	b,r7
   0285 12r02r91      [24] 1405 	lcall	_rf_spi_send_read
                           1406 ;	../src/rf/src/rf_spi_execute_command.c:60: rf_set_csn(); //Set CSN to end the transaction
   0288 D2 E9         [12] 1407 	setb _RFCON_SB_RFCSN 
                           1408 ;	../src/rf/src/rf_spi_execute_command.c:62: return status; //Return the value of STATUS
   028A 90r00r1F      [24] 1409 	mov	dptr,#_rf_spi_execute_command_status_1_58
   028D E0            [24] 1410 	movx	a,@dptr
   028E F5 82         [12] 1411 	mov	dpl,a
   0290 22            [24] 1412 	ret
                           1413 ;------------------------------------------------------------
                           1414 ;Allocation info for local variables in function 'rf_spi_send_read'
                           1415 ;------------------------------------------------------------
                           1416 ;sloc0                     Allocated with name '_rf_spi_send_read_sloc0_1_0'
                           1417 ;sloc1                     Allocated with name '_rf_spi_send_read_sloc1_1_0'
                           1418 ;len                       Allocated with name '_rf_spi_send_read_PARM_2'
                           1419 ;copydata                  Allocated with name '_rf_spi_send_read_PARM_3'
                           1420 ;dataptr                   Allocated with name '_rf_spi_send_read_dataptr_1_59'
                           1421 ;i                         Allocated with name '_rf_spi_send_read_i_1_60'
                           1422 ;tempbyte                  Allocated with name '_rf_spi_send_read_tempbyte_1_60'
                           1423 ;------------------------------------------------------------
                           1424 ;	../src/rf/src/rf_spi_send_read.c:49: void rf_spi_send_read(unsigned char * dataptr, unsigned int len, bool copydata)
                           1425 ;	-----------------------------------------
                           1426 ;	 function rf_spi_send_read
                           1427 ;	-----------------------------------------
   0291                    1428 _rf_spi_send_read:
   0291 AF F0         [24] 1429 	mov	r7,b
   0293 AE 83         [24] 1430 	mov	r6,dph
   0295 E5 82         [12] 1431 	mov	a,dpl
   0297 90r00r23      [24] 1432 	mov	dptr,#_rf_spi_send_read_dataptr_1_59
   029A F0            [24] 1433 	movx	@dptr,a
   029B EE            [12] 1434 	mov	a,r6
   029C A3            [24] 1435 	inc	dptr
   029D F0            [24] 1436 	movx	@dptr,a
   029E EF            [12] 1437 	mov	a,r7
   029F A3            [24] 1438 	inc	dptr
   02A0 F0            [24] 1439 	movx	@dptr,a
                           1440 ;	../src/rf/src/rf_spi_send_read.c:55: for(i = 0; i < len; i++)
   02A1 90r00r23      [24] 1441 	mov	dptr,#_rf_spi_send_read_dataptr_1_59
   02A4 E0            [24] 1442 	movx	a,@dptr
   02A5 FD            [12] 1443 	mov	r5,a
   02A6 A3            [24] 1444 	inc	dptr
   02A7 E0            [24] 1445 	movx	a,@dptr
   02A8 FE            [12] 1446 	mov	r6,a
   02A9 A3            [24] 1447 	inc	dptr
   02AA E0            [24] 1448 	movx	a,@dptr
   02AB FF            [12] 1449 	mov	r7,a
   02AC 90r00r22      [24] 1450 	mov	dptr,#_rf_spi_send_read_PARM_3
   02AF E0            [24] 1451 	movx	a,@dptr
   02B0 FC            [12] 1452 	mov	r4,a
   02B1 90r00r20      [24] 1453 	mov	dptr,#_rf_spi_send_read_PARM_2
   02B4 E0            [24] 1454 	movx	a,@dptr
   02B5 FA            [12] 1455 	mov	r2,a
   02B6 A3            [24] 1456 	inc	dptr
   02B7 E0            [24] 1457 	movx	a,@dptr
   02B8 FB            [12] 1458 	mov	r3,a
   02B9 78 00         [12] 1459 	mov	r0,#0x00
   02BB 79 00         [12] 1460 	mov	r1,#0x00
   02BD                    1461 00105$:
   02BD C3            [12] 1462 	clr	c
   02BE E8            [12] 1463 	mov	a,r0
   02BF 9A            [12] 1464 	subb	a,r2
   02C0 E9            [12] 1465 	mov	a,r1
   02C1 9B            [12] 1466 	subb	a,r3
   02C2 50 5F         [24] 1467 	jnc	00107$
                           1468 ;	../src/rf/src/rf_spi_send_read.c:57: tempbyte = rf_spi_send_read_byte(dataptr[i]); //Send the value, and then save the received value
   02C4 C0 02         [24] 1469 	push	ar2
   02C6 C0 03         [24] 1470 	push	ar3
   02C8 E8            [12] 1471 	mov	a,r0
   02C9 2D            [12] 1472 	add	a,r5
   02CA F5*00         [12] 1473 	mov	_rf_spi_send_read_sloc0_1_0,a
   02CC E9            [12] 1474 	mov	a,r1
   02CD 3E            [12] 1475 	addc	a,r6
   02CE F5*01         [12] 1476 	mov	(_rf_spi_send_read_sloc0_1_0 + 1),a
   02D0 8F*02         [24] 1477 	mov	(_rf_spi_send_read_sloc0_1_0 + 2),r7
   02D2 85*00 82      [24] 1478 	mov	dpl,_rf_spi_send_read_sloc0_1_0
   02D5 85*01 83      [24] 1479 	mov	dph,(_rf_spi_send_read_sloc0_1_0 + 1)
   02D8 85*02 F0      [24] 1480 	mov	b,(_rf_spi_send_read_sloc0_1_0 + 2)
   02DB 12r00r00      [24] 1481 	lcall	__gptrget
   02DE FB            [12] 1482 	mov	r3,a
   02DF F5 82         [12] 1483 	mov	dpl,a
   02E1 C0 07         [24] 1484 	push	ar7
   02E3 C0 06         [24] 1485 	push	ar6
   02E5 C0 05         [24] 1486 	push	ar5
   02E7 C0 04         [24] 1487 	push	ar4
   02E9 C0 03         [24] 1488 	push	ar3
   02EB C0 02         [24] 1489 	push	ar2
   02ED C0 01         [24] 1490 	push	ar1
   02EF C0 00         [24] 1491 	push	ar0
   02F1 12r03rAB      [24] 1492 	lcall	_rf_spi_send_read_byte
   02F4 85 82*03      [24] 1493 	mov	_rf_spi_send_read_sloc1_1_0,dpl
   02F7 D0 00         [24] 1494 	pop	ar0
   02F9 D0 01         [24] 1495 	pop	ar1
   02FB D0 02         [24] 1496 	pop	ar2
   02FD D0 03         [24] 1497 	pop	ar3
   02FF D0 04         [24] 1498 	pop	ar4
   0301 D0 05         [24] 1499 	pop	ar5
   0303 D0 06         [24] 1500 	pop	ar6
   0305 D0 07         [24] 1501 	pop	ar7
                           1502 ;	../src/rf/src/rf_spi_send_read.c:60: if(copydata != false)
   0307 D0 03         [24] 1503 	pop	ar3
   0309 D0 02         [24] 1504 	pop	ar2
   030B EC            [12] 1505 	mov	a,r4
   030C 60 0E         [24] 1506 	jz	00106$
                           1507 ;	../src/rf/src/rf_spi_send_read.c:62: dataptr[i] = tempbyte;
   030E 85*00 82      [24] 1508 	mov	dpl,_rf_spi_send_read_sloc0_1_0
   0311 85*01 83      [24] 1509 	mov	dph,(_rf_spi_send_read_sloc0_1_0 + 1)
   0314 85*02 F0      [24] 1510 	mov	b,(_rf_spi_send_read_sloc0_1_0 + 2)
   0317 E5*03         [12] 1511 	mov	a,_rf_spi_send_read_sloc1_1_0
   0319 12r00r00      [24] 1512 	lcall	__gptrput
   031C                    1513 00106$:
                           1514 ;	../src/rf/src/rf_spi_send_read.c:55: for(i = 0; i < len; i++)
   031C 08            [12] 1515 	inc	r0
   031D B8 00 9D      [24] 1516 	cjne	r0,#0x00,00105$
   0320 09            [12] 1517 	inc	r1
   0321 80 9A         [24] 1518 	sjmp	00105$
   0323                    1519 00107$:
   0323 22            [24] 1520 	ret
                           1521 ;------------------------------------------------------------
                           1522 ;Allocation info for local variables in function 'rf_power_up_param'
                           1523 ;------------------------------------------------------------
                           1524 ;config                    Allocated with name '_rf_power_up_param_PARM_2'
                           1525 ;rx_active_mode            Allocated with name '_rf_power_up_param_rx_active_mode_1_63'
                           1526 ;------------------------------------------------------------
                           1527 ;	../src/rf/src/rf_power_up_param.c:49: void rf_power_up_param(bool rx_active_mode, unsigned char config)
                           1528 ;	-----------------------------------------
                           1529 ;	 function rf_power_up_param
                           1530 ;	-----------------------------------------
   0324                    1531 _rf_power_up_param:
   0324 E5 82         [12] 1532 	mov	a,dpl
   0326 90r00r27      [24] 1533 	mov	dptr,#_rf_power_up_param_rx_active_mode_1_63
   0329 F0            [24] 1534 	movx	@dptr,a
                           1535 ;	../src/rf/src/rf_power_up_param.c:52: config |= RF_CONFIG_PWR_UP;
   032A 90r00r26      [24] 1536 	mov	dptr,#_rf_power_up_param_PARM_2
   032D E0            [24] 1537 	movx	a,@dptr
   032E 44 02         [12] 1538 	orl	a,#0x02
   0330 F0            [24] 1539 	movx	@dptr,a
                           1540 ;	../src/rf/src/rf_power_up_param.c:53: rf_write_register(RF_CONFIG, &config, 1);
   0331 90r00r08      [24] 1541 	mov	dptr,#_rf_write_register_PARM_2
   0334 74r26         [12] 1542 	mov	a,#_rf_power_up_param_PARM_2
   0336 F0            [24] 1543 	movx	@dptr,a
   0337 74s00         [12] 1544 	mov	a,#(_rf_power_up_param_PARM_2 >> 8)
   0339 A3            [24] 1545 	inc	dptr
   033A F0            [24] 1546 	movx	@dptr,a
   033B E4            [12] 1547 	clr	a
   033C A3            [24] 1548 	inc	dptr
   033D F0            [24] 1549 	movx	@dptr,a
   033E 90r00r0B      [24] 1550 	mov	dptr,#_rf_write_register_PARM_3
   0341 74 01         [12] 1551 	mov	a,#0x01
   0343 F0            [24] 1552 	movx	@dptr,a
   0344 E4            [12] 1553 	clr	a
   0345 A3            [24] 1554 	inc	dptr
   0346 F0            [24] 1555 	movx	@dptr,a
   0347 75 82 00      [24] 1556 	mov	dpl,#0x00
   034A 12r00rBC      [24] 1557 	lcall	_rf_write_register
                           1558 ;	../src/rf/src/rf_power_up_param.c:55: delay_us(1); //Delay for power up
   034D 90 00 01      [24] 1559 	mov	dptr,#0x0001
   0350 12r08r42      [24] 1560 	lcall	_delay_us
                           1561 ;	../src/rf/src/rf_power_up_param.c:58: if((config & RF_CONFIG_PRIM_RX) == 0)
   0353 90r00r26      [24] 1562 	mov	dptr,#_rf_power_up_param_PARM_2
   0356 E0            [24] 1563 	movx	a,@dptr
   0357 FF            [12] 1564 	mov	r7,a
   0358 20 E0 03      [24] 1565 	jb	acc.0,00105$
                           1566 ;	../src/rf/src/rf_power_up_param.c:60: rf_clear_ce(); //Clear CE for TX mode
   035B C2 E8         [12] 1567 	clr _RFCON_SB_RFCE 
   035D 22            [24] 1568 	ret
   035E                    1569 00105$:
                           1570 ;	../src/rf/src/rf_power_up_param.c:65: if(rx_active_mode != false)
   035E 90r00r27      [24] 1571 	mov	dptr,#_rf_power_up_param_rx_active_mode_1_63
   0361 E0            [24] 1572 	movx	a,@dptr
   0362 FF            [12] 1573 	mov	r7,a
   0363 60 08         [24] 1574 	jz	00102$
                           1575 ;	../src/rf/src/rf_power_up_param.c:67: rf_set_ce();
   0365 D2 E8         [12] 1576 	setb _RFCON_SB_RFCE 
   0367 90 00 04      [24] 1577 	mov	dptr,#0x0004
   036A 02r08r42      [24] 1578 	ljmp	_delay_us
   036D                    1579 00102$:
                           1580 ;	../src/rf/src/rf_power_up_param.c:71: rf_clear_ce();
   036D C2 E8         [12] 1581 	clr _RFCON_SB_RFCE 
   036F 22            [24] 1582 	ret
                           1583 ;------------------------------------------------------------
                           1584 ;Allocation info for local variables in function 'rf_read_register'
                           1585 ;------------------------------------------------------------
                           1586 ;dataptr                   Allocated with name '_rf_read_register_PARM_2'
                           1587 ;len                       Allocated with name '_rf_read_register_PARM_3'
                           1588 ;regnumber                 Allocated with name '_rf_read_register_regnumber_1_69'
                           1589 ;------------------------------------------------------------
                           1590 ;	../src/rf/src/rf_read_register.c:49: unsigned char rf_read_register(unsigned char regnumber, unsigned char * dataptr, unsigned int len)
                           1591 ;	-----------------------------------------
                           1592 ;	 function rf_read_register
                           1593 ;	-----------------------------------------
   0370                    1594 _rf_read_register:
   0370 E5 82         [12] 1595 	mov	a,dpl
                           1596 ;	../src/rf/src/rf_read_register.c:52: return rf_spi_execute_command(regnumber & RF_R_REGISTER_DATA, dataptr, len, true);
   0372 90r00r2D      [24] 1597 	mov	dptr,#_rf_read_register_regnumber_1_69
   0375 F0            [24] 1598 	movx	@dptr,a
   0376 FF            [12] 1599 	mov	r7,a
   0377 53 07 1F      [24] 1600 	anl	ar7,#0x1F
   037A 90r00r28      [24] 1601 	mov	dptr,#_rf_read_register_PARM_2
   037D E0            [24] 1602 	movx	a,@dptr
   037E FC            [12] 1603 	mov	r4,a
   037F A3            [24] 1604 	inc	dptr
   0380 E0            [24] 1605 	movx	a,@dptr
   0381 FD            [12] 1606 	mov	r5,a
   0382 A3            [24] 1607 	inc	dptr
   0383 E0            [24] 1608 	movx	a,@dptr
   0384 FE            [12] 1609 	mov	r6,a
   0385 90r00r2B      [24] 1610 	mov	dptr,#_rf_read_register_PARM_3
   0388 E0            [24] 1611 	movx	a,@dptr
   0389 FA            [12] 1612 	mov	r2,a
   038A A3            [24] 1613 	inc	dptr
   038B E0            [24] 1614 	movx	a,@dptr
   038C FB            [12] 1615 	mov	r3,a
   038D 90r00r18      [24] 1616 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0390 EC            [12] 1617 	mov	a,r4
   0391 F0            [24] 1618 	movx	@dptr,a
   0392 ED            [12] 1619 	mov	a,r5
   0393 A3            [24] 1620 	inc	dptr
   0394 F0            [24] 1621 	movx	@dptr,a
   0395 EE            [12] 1622 	mov	a,r6
   0396 A3            [24] 1623 	inc	dptr
   0397 F0            [24] 1624 	movx	@dptr,a
   0398 90r00r1B      [24] 1625 	mov	dptr,#_rf_spi_execute_command_PARM_3
   039B EA            [12] 1626 	mov	a,r2
   039C F0            [24] 1627 	movx	@dptr,a
   039D EB            [12] 1628 	mov	a,r3
   039E A3            [24] 1629 	inc	dptr
   039F F0            [24] 1630 	movx	@dptr,a
   03A0 90r00r1D      [24] 1631 	mov	dptr,#_rf_spi_execute_command_PARM_4
   03A3 74 01         [12] 1632 	mov	a,#0x01
   03A5 F0            [24] 1633 	movx	@dptr,a
   03A6 8F 82         [24] 1634 	mov	dpl,r7
   03A8 02r02r35      [24] 1635 	ljmp	_rf_spi_execute_command
                           1636 ;------------------------------------------------------------
                           1637 ;Allocation info for local variables in function 'rf_spi_send_read_byte'
                           1638 ;------------------------------------------------------------
                           1639 ;byte                      Allocated with name '_rf_spi_send_read_byte_byte_1_71'
                           1640 ;------------------------------------------------------------
                           1641 ;	../src/rf/src/rf_spi_send_read_byte.c:47: unsigned char rf_spi_send_read_byte(unsigned char byte)
                           1642 ;	-----------------------------------------
                           1643 ;	 function rf_spi_send_read_byte
                           1644 ;	-----------------------------------------
   03AB                    1645 _rf_spi_send_read_byte:
   03AB E5 82         [12] 1646 	mov	a,dpl
                           1647 ;	../src/rf/src/rf_spi_send_read_byte.c:49: SPIRDAT = byte; //Send byte over SPI
   03AD 90r00r2E      [24] 1648 	mov	dptr,#_rf_spi_send_read_byte_byte_1_71
   03B0 F0            [24] 1649 	movx	@dptr,a
   03B1 F5 E7         [12] 1650 	mov	_SPIRDAT,a
                           1651 ;	../src/rf/src/rf_spi_send_read_byte.c:51: while(!(SPIRSTAT & SPIRSTAT_IRQ_RX_FIFO_READY)); //Wait for the transaction to finish
   03B3                    1652 00101$:
   03B3 E5 E6         [12] 1653 	mov	a,_SPIRSTAT
   03B5 30 E2 FB      [24] 1654 	jnb	acc.2,00101$
                           1655 ;	../src/rf/src/rf_spi_send_read_byte.c:53: IRCON_SB_RFRDY = BIT_FALSE; //Clear the IRQ bit
   03B8 C2 C0         [12] 1656 	clr	_IRCON_SB_RFRDY
                           1657 ;	../src/rf/src/rf_spi_send_read_byte.c:55: return SPIRDAT; //Return the received value
   03BA 85 E7 82      [24] 1658 	mov	dpl,_SPIRDAT
   03BD 22            [24] 1659 	ret
                           1660 ;------------------------------------------------------------
                           1661 ;Allocation info for local variables in function 'rf_set_rx_addr'
                           1662 ;------------------------------------------------------------
                           1663 ;len                       Allocated with name '_rf_set_rx_addr_PARM_2'
                           1664 ;rxpipenum                 Allocated with name '_rf_set_rx_addr_PARM_3'
                           1665 ;address                   Allocated with name '_rf_set_rx_addr_address_1_73'
                           1666 ;------------------------------------------------------------
                           1667 ;	../src/rf/src/rf_set_rx_addr.c:49: void rf_set_rx_addr(unsigned char * address, unsigned int len, unsigned char rxpipenum)
                           1668 ;	-----------------------------------------
                           1669 ;	 function rf_set_rx_addr
                           1670 ;	-----------------------------------------
   03BE                    1671 _rf_set_rx_addr:
   03BE AF F0         [24] 1672 	mov	r7,b
   03C0 AE 83         [24] 1673 	mov	r6,dph
   03C2 E5 82         [12] 1674 	mov	a,dpl
   03C4 90r00r32      [24] 1675 	mov	dptr,#_rf_set_rx_addr_address_1_73
   03C7 F0            [24] 1676 	movx	@dptr,a
   03C8 EE            [12] 1677 	mov	a,r6
   03C9 A3            [24] 1678 	inc	dptr
   03CA F0            [24] 1679 	movx	@dptr,a
   03CB EF            [12] 1680 	mov	a,r7
   03CC A3            [24] 1681 	inc	dptr
   03CD F0            [24] 1682 	movx	@dptr,a
                           1683 ;	../src/rf/src/rf_set_rx_addr.c:52: if(rxpipenum > 5)
   03CE 90r00r31      [24] 1684 	mov	dptr,#_rf_set_rx_addr_PARM_3
   03D1 E0            [24] 1685 	movx	a,@dptr
   03D2 FF            [12] 1686 	mov  r7,a
   03D3 24 FA         [12] 1687 	add	a,#0xff - 0x05
   03D5 50 01         [24] 1688 	jnc	00102$
                           1689 ;	../src/rf/src/rf_set_rx_addr.c:54: return;
   03D7 22            [24] 1690 	ret
   03D8                    1691 00102$:
                           1692 ;	../src/rf/src/rf_set_rx_addr.c:57: rf_write_register(RF_RX_ADDR_P0 + rxpipenum, address, len); //Write the requested address to the requested RX pipe
   03D8 74 0A         [12] 1693 	mov	a,#0x0A
   03DA 2F            [12] 1694 	add	a,r7
   03DB FF            [12] 1695 	mov	r7,a
   03DC 90r00r32      [24] 1696 	mov	dptr,#_rf_set_rx_addr_address_1_73
   03DF E0            [24] 1697 	movx	a,@dptr
   03E0 FC            [12] 1698 	mov	r4,a
   03E1 A3            [24] 1699 	inc	dptr
   03E2 E0            [24] 1700 	movx	a,@dptr
   03E3 FD            [12] 1701 	mov	r5,a
   03E4 A3            [24] 1702 	inc	dptr
   03E5 E0            [24] 1703 	movx	a,@dptr
   03E6 FE            [12] 1704 	mov	r6,a
   03E7 90r00r2F      [24] 1705 	mov	dptr,#_rf_set_rx_addr_PARM_2
   03EA E0            [24] 1706 	movx	a,@dptr
   03EB FA            [12] 1707 	mov	r2,a
   03EC A3            [24] 1708 	inc	dptr
   03ED E0            [24] 1709 	movx	a,@dptr
   03EE FB            [12] 1710 	mov	r3,a
   03EF 90r00r08      [24] 1711 	mov	dptr,#_rf_write_register_PARM_2
   03F2 EC            [12] 1712 	mov	a,r4
   03F3 F0            [24] 1713 	movx	@dptr,a
   03F4 ED            [12] 1714 	mov	a,r5
   03F5 A3            [24] 1715 	inc	dptr
   03F6 F0            [24] 1716 	movx	@dptr,a
   03F7 EE            [12] 1717 	mov	a,r6
   03F8 A3            [24] 1718 	inc	dptr
   03F9 F0            [24] 1719 	movx	@dptr,a
   03FA 90r00r0B      [24] 1720 	mov	dptr,#_rf_write_register_PARM_3
   03FD EA            [12] 1721 	mov	a,r2
   03FE F0            [24] 1722 	movx	@dptr,a
   03FF EB            [12] 1723 	mov	a,r3
   0400 A3            [24] 1724 	inc	dptr
   0401 F0            [24] 1725 	movx	@dptr,a
   0402 8F 82         [24] 1726 	mov	dpl,r7
   0404 02r00rBC      [24] 1727 	ljmp	_rf_write_register
                           1728 ;------------------------------------------------------------
                           1729 ;Allocation info for local variables in function 'rf_power_down'
                           1730 ;------------------------------------------------------------
                           1731 ;config                    Allocated with name '_rf_power_down_config_1_76'
                           1732 ;------------------------------------------------------------
                           1733 ;	../src/rf/src/rf_power_down.c:47: void rf_power_down()
                           1734 ;	-----------------------------------------
                           1735 ;	 function rf_power_down
                           1736 ;	-----------------------------------------
   0407                    1737 _rf_power_down:
                           1738 ;	../src/rf/src/rf_power_down.c:51: rf_clear_ce(); //Clear the CE pin
   0407 C2 E8         [12] 1739 	clr _RFCON_SB_RFCE 
                           1740 ;	../src/rf/src/rf_power_down.c:53: rf_read_register(RF_CONFIG, &config, 1); //Read the current value of the CONFIG register
   0409 90r00r28      [24] 1741 	mov	dptr,#_rf_read_register_PARM_2
   040C 74r35         [12] 1742 	mov	a,#_rf_power_down_config_1_76
   040E F0            [24] 1743 	movx	@dptr,a
   040F 74s00         [12] 1744 	mov	a,#(_rf_power_down_config_1_76 >> 8)
   0411 A3            [24] 1745 	inc	dptr
   0412 F0            [24] 1746 	movx	@dptr,a
   0413 E4            [12] 1747 	clr	a
   0414 A3            [24] 1748 	inc	dptr
   0415 F0            [24] 1749 	movx	@dptr,a
   0416 90r00r2B      [24] 1750 	mov	dptr,#_rf_read_register_PARM_3
   0419 74 01         [12] 1751 	mov	a,#0x01
   041B F0            [24] 1752 	movx	@dptr,a
   041C E4            [12] 1753 	clr	a
   041D A3            [24] 1754 	inc	dptr
   041E F0            [24] 1755 	movx	@dptr,a
   041F 75 82 00      [24] 1756 	mov	dpl,#0x00
   0422 12r03r70      [24] 1757 	lcall	_rf_read_register
                           1758 ;	../src/rf/src/rf_power_down.c:56: if((config & RF_CONFIG_PWR_UP) == 0)
   0425 90r00r35      [24] 1759 	mov	dptr,#_rf_power_down_config_1_76
   0428 E0            [24] 1760 	movx	a,@dptr
   0429 FF            [12] 1761 	mov	r7,a
   042A 20 E1 01      [24] 1762 	jb	acc.1,00102$
                           1763 ;	../src/rf/src/rf_power_down.c:58: return;
   042D 22            [24] 1764 	ret
   042E                    1765 00102$:
                           1766 ;	../src/rf/src/rf_power_down.c:62: config &= (~RF_CONFIG_PWR_UP);
   042E 90r00r35      [24] 1767 	mov	dptr,#_rf_power_down_config_1_76
   0431 74 FD         [12] 1768 	mov	a,#0xFD
   0433 5F            [12] 1769 	anl	a,r7
   0434 F0            [24] 1770 	movx	@dptr,a
                           1771 ;	../src/rf/src/rf_power_down.c:63: rf_write_register(RF_CONFIG, &config, 1);
   0435 90r00r08      [24] 1772 	mov	dptr,#_rf_write_register_PARM_2
   0438 74r35         [12] 1773 	mov	a,#_rf_power_down_config_1_76
   043A F0            [24] 1774 	movx	@dptr,a
   043B 74s00         [12] 1775 	mov	a,#(_rf_power_down_config_1_76 >> 8)
   043D A3            [24] 1776 	inc	dptr
   043E F0            [24] 1777 	movx	@dptr,a
   043F E4            [12] 1778 	clr	a
   0440 A3            [24] 1779 	inc	dptr
   0441 F0            [24] 1780 	movx	@dptr,a
   0442 90r00r0B      [24] 1781 	mov	dptr,#_rf_write_register_PARM_3
   0445 74 01         [12] 1782 	mov	a,#0x01
   0447 F0            [24] 1783 	movx	@dptr,a
   0448 E4            [12] 1784 	clr	a
   0449 A3            [24] 1785 	inc	dptr
   044A F0            [24] 1786 	movx	@dptr,a
   044B 75 82 00      [24] 1787 	mov	dpl,#0x00
   044E 02r00rBC      [24] 1788 	ljmp	_rf_write_register
                           1789 ;------------------------------------------------------------
                           1790 ;Allocation info for local variables in function 'rf_power_up'
                           1791 ;------------------------------------------------------------
                           1792 ;rx_active_mode            Allocated with name '_rf_power_up_rx_active_mode_1_78'
                           1793 ;config                    Allocated with name '_rf_power_up_config_1_79'
                           1794 ;------------------------------------------------------------
                           1795 ;	../src/rf/src/rf_power_up.c:47: void rf_power_up(bool rx_active_mode)
                           1796 ;	-----------------------------------------
                           1797 ;	 function rf_power_up
                           1798 ;	-----------------------------------------
   0451                    1799 _rf_power_up:
   0451 E5 82         [12] 1800 	mov	a,dpl
   0453 90r00r36      [24] 1801 	mov	dptr,#_rf_power_up_rx_active_mode_1_78
   0456 F0            [24] 1802 	movx	@dptr,a
                           1803 ;	../src/rf/src/rf_power_up.c:51: rf_read_register(RF_CONFIG, &config, 1); //Get the current value of the CONFIG register
   0457 90r00r28      [24] 1804 	mov	dptr,#_rf_read_register_PARM_2
   045A 74r37         [12] 1805 	mov	a,#_rf_power_up_config_1_79
   045C F0            [24] 1806 	movx	@dptr,a
   045D 74s00         [12] 1807 	mov	a,#(_rf_power_up_config_1_79 >> 8)
   045F A3            [24] 1808 	inc	dptr
   0460 F0            [24] 1809 	movx	@dptr,a
   0461 E4            [12] 1810 	clr	a
   0462 A3            [24] 1811 	inc	dptr
   0463 F0            [24] 1812 	movx	@dptr,a
   0464 90r00r2B      [24] 1813 	mov	dptr,#_rf_read_register_PARM_3
   0467 74 01         [12] 1814 	mov	a,#0x01
   0469 F0            [24] 1815 	movx	@dptr,a
   046A E4            [12] 1816 	clr	a
   046B A3            [24] 1817 	inc	dptr
   046C F0            [24] 1818 	movx	@dptr,a
   046D 75 82 00      [24] 1819 	mov	dpl,#0x00
   0470 12r03r70      [24] 1820 	lcall	_rf_read_register
                           1821 ;	../src/rf/src/rf_power_up.c:54: if((config & RF_CONFIG_PWR_UP) != 0)
   0473 90r00r37      [24] 1822 	mov	dptr,#_rf_power_up_config_1_79
   0476 E0            [24] 1823 	movx	a,@dptr
   0477 FF            [12] 1824 	mov	r7,a
   0478 30 E1 01      [24] 1825 	jnb	acc.1,00102$
                           1826 ;	../src/rf/src/rf_power_up.c:56: return;
   047B 22            [24] 1827 	ret
   047C                    1828 00102$:
                           1829 ;	../src/rf/src/rf_power_up.c:60: config |= RF_CONFIG_PWR_UP;
   047C 90r00r37      [24] 1830 	mov	dptr,#_rf_power_up_config_1_79
   047F 74 02         [12] 1831 	mov	a,#0x02
   0481 4F            [12] 1832 	orl	a,r7
   0482 F0            [24] 1833 	movx	@dptr,a
                           1834 ;	../src/rf/src/rf_power_up.c:61: rf_write_register(RF_CONFIG, &config, 1);
   0483 90r00r08      [24] 1835 	mov	dptr,#_rf_write_register_PARM_2
   0486 74r37         [12] 1836 	mov	a,#_rf_power_up_config_1_79
   0488 F0            [24] 1837 	movx	@dptr,a
   0489 74s00         [12] 1838 	mov	a,#(_rf_power_up_config_1_79 >> 8)
   048B A3            [24] 1839 	inc	dptr
   048C F0            [24] 1840 	movx	@dptr,a
   048D E4            [12] 1841 	clr	a
   048E A3            [24] 1842 	inc	dptr
   048F F0            [24] 1843 	movx	@dptr,a
   0490 90r00r0B      [24] 1844 	mov	dptr,#_rf_write_register_PARM_3
   0493 74 01         [12] 1845 	mov	a,#0x01
   0495 F0            [24] 1846 	movx	@dptr,a
   0496 E4            [12] 1847 	clr	a
   0497 A3            [24] 1848 	inc	dptr
   0498 F0            [24] 1849 	movx	@dptr,a
   0499 75 82 00      [24] 1850 	mov	dpl,#0x00
   049C 12r00rBC      [24] 1851 	lcall	_rf_write_register
                           1852 ;	../src/rf/src/rf_power_up.c:63: delay_us(1); //Delay for power up
   049F 90 00 01      [24] 1853 	mov	dptr,#0x0001
   04A2 12r08r42      [24] 1854 	lcall	_delay_us
                           1855 ;	../src/rf/src/rf_power_up.c:66: if((config & RF_CONFIG_PRIM_RX) == 0)
   04A5 90r00r37      [24] 1856 	mov	dptr,#_rf_power_up_config_1_79
   04A8 E0            [24] 1857 	movx	a,@dptr
   04A9 FF            [12] 1858 	mov	r7,a
   04AA 20 E0 03      [24] 1859 	jb	acc.0,00107$
                           1860 ;	../src/rf/src/rf_power_up.c:68: rf_clear_ce(); //Clear CE for TX mode
   04AD C2 E8         [12] 1861 	clr _RFCON_SB_RFCE 
   04AF 22            [24] 1862 	ret
   04B0                    1863 00107$:
                           1864 ;	../src/rf/src/rf_power_up.c:73: if(rx_active_mode != false)
   04B0 90r00r36      [24] 1865 	mov	dptr,#_rf_power_up_rx_active_mode_1_78
   04B3 E0            [24] 1866 	movx	a,@dptr
   04B4 FF            [12] 1867 	mov	r7,a
   04B5 60 08         [24] 1868 	jz	00104$
                           1869 ;	../src/rf/src/rf_power_up.c:75: rf_set_ce();
   04B7 D2 E8         [12] 1870 	setb _RFCON_SB_RFCE 
   04B9 90 00 04      [24] 1871 	mov	dptr,#0x0004
   04BC 02r08r42      [24] 1872 	ljmp	_delay_us
   04BF                    1873 00104$:
                           1874 ;	../src/rf/src/rf_power_up.c:79: rf_clear_ce();
   04BF C2 E8         [12] 1875 	clr _RFCON_SB_RFCE 
   04C1 22            [24] 1876 	ret
                           1877 ;------------------------------------------------------------
                           1878 ;Allocation info for local variables in function 'gpio_pin_configure'
                           1879 ;------------------------------------------------------------
                           1880 ;gpio_pin_config_options   Allocated with name '_gpio_pin_configure_PARM_2'
                           1881 ;gpio_pin_id               Allocated with name '_gpio_pin_configure_gpio_pin_id_1_86'
                           1882 ;------------------------------------------------------------
                           1883 ;	../src/gpio/src/gpio_pin_configure.c:47: void gpio_pin_configure(gpio_pin_id_t gpio_pin_id, uint8_t gpio_pin_config_options)
                           1884 ;	-----------------------------------------
                           1885 ;	 function gpio_pin_configure
                           1886 ;	-----------------------------------------
   04C2                    1887 _gpio_pin_configure:
   04C2 E5 82         [12] 1888 	mov	a,dpl
                           1889 ;	../src/gpio/src/gpio_pin_configure.c:50: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   04C4 90r00r39      [24] 1890 	mov	dptr,#_gpio_pin_configure_gpio_pin_id_1_86
   04C7 F0            [24] 1891 	movx	@dptr,a
   04C8 FF            [12] 1892 	mov  r7,a
   04C9 24 F8         [12] 1893 	add	a,#0xff - 0x07
   04CB 50 03         [24] 1894 	jnc	00174$
   04CD 02r05r46      [24] 1895 	ljmp	00134$
   04D0                    1896 00174$:
                           1897 ;	../src/gpio/src/gpio_pin_configure.c:53: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   04D0 90r00r38      [24] 1898 	mov	dptr,#_gpio_pin_configure_PARM_2
   04D3 E0            [24] 1899 	movx	a,@dptr
   04D4 FE            [12] 1900 	mov	r6,a
   04D5 FD            [12] 1901 	mov	r5,a
   04D6 ED            [12] 1902 	mov	a,r5
   04D7 30 E0 4C      [24] 1903 	jnb	acc.0,00105$
                           1904 ;	../src/gpio/src/gpio_pin_configure.c:56: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   04DA EE            [12] 1905 	mov	a,r6
   04DB 30 E1 15      [24] 1906 	jnb	acc.1,00102$
                           1907 ;	../src/gpio/src/gpio_pin_configure.c:58: gpio_pins_val_set(P0, (1 << (gpio_pin_id % 8)));
   04DE 74 07         [12] 1908 	mov	a,#0x07
   04E0 5F            [12] 1909 	anl	a,r7
   04E1 F5 F0         [12] 1910 	mov	b,a
   04E3 05 F0         [12] 1911 	inc	b
   04E5 74 01         [12] 1912 	mov	a,#0x01
   04E7 80 02         [24] 1913 	sjmp	00179$
   04E9                    1914 00177$:
   04E9 25 E0         [12] 1915 	add	a,acc
   04EB                    1916 00179$:
   04EB D5 F0 FB      [24] 1917 	djnz	b,00177$
   04EE FD            [12] 1918 	mov	r5,a
   04EF 42 80         [12] 1919 	orl	_P0,a
   04F1 80 14         [24] 1920 	sjmp	00103$
   04F3                    1921 00102$:
                           1922 ;	../src/gpio/src/gpio_pin_configure.c:62: gpio_pins_val_clear(P0, (1 << (gpio_pin_id % 8)));
   04F3 74 07         [12] 1923 	mov	a,#0x07
   04F5 5F            [12] 1924 	anl	a,r7
   04F6 F5 F0         [12] 1925 	mov	b,a
   04F8 05 F0         [12] 1926 	inc	b
   04FA 74 01         [12] 1927 	mov	a,#0x01
   04FC 80 02         [24] 1928 	sjmp	00182$
   04FE                    1929 00180$:
   04FE 25 E0         [12] 1930 	add	a,acc
   0500                    1931 00182$:
   0500 D5 F0 FB      [24] 1932 	djnz	b,00180$
   0503 F4            [12] 1933 	cpl	a
   0504 FD            [12] 1934 	mov	r5,a
   0505 52 80         [12] 1935 	anl	_P0,a
   0507                    1936 00103$:
                           1937 ;	../src/gpio/src/gpio_pin_configure.c:66: P0CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0507 74 07         [12] 1938 	mov	a,#0x07
   0509 5F            [12] 1939 	anl	a,r7
   050A FD            [12] 1940 	mov	r5,a
   050B 74 07         [12] 1941 	mov	a,#0x07
   050D 5D            [12] 1942 	anl	a,r5
   050E FC            [12] 1943 	mov	r4,a
                           1944 ;	../src/gpio/src/gpio_pin_configure.c:67: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   050F 74 E0         [12] 1945 	mov	a,#0xE0
   0511 5E            [12] 1946 	anl	a,r6
   0512 4C            [12] 1947 	orl	a,r4
   0513 F5 9E         [12] 1948 	mov	_P0CON,a
                           1949 ;	../src/gpio/src/gpio_pin_configure.c:70: gpio_pins_dir_output(P0DIR, (1 << (gpio_pin_id % 8)));
   0515 8D F0         [24] 1950 	mov	b,r5
   0517 05 F0         [12] 1951 	inc	b
   0519 74 01         [12] 1952 	mov	a,#0x01
   051B 80 02         [24] 1953 	sjmp	00185$
   051D                    1954 00183$:
   051D 25 E0         [12] 1955 	add	a,acc
   051F                    1956 00185$:
   051F D5 F0 FB      [24] 1957 	djnz	b,00183$
   0522 F4            [12] 1958 	cpl	a
   0523 52 93         [12] 1959 	anl	_P0DIR,a
   0525 22            [24] 1960 	ret
   0526                    1961 00105$:
                           1962 ;	../src/gpio/src/gpio_pin_configure.c:75: P0CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0526 74 07         [12] 1963 	mov	a,#0x07
   0528 5F            [12] 1964 	anl	a,r7
   0529 FD            [12] 1965 	mov	r5,a
   052A 74 07         [12] 1966 	mov	a,#0x07
   052C 5D            [12] 1967 	anl	a,r5
   052D 44 10         [12] 1968 	orl	a,#0x10
   052F FC            [12] 1969 	mov	r4,a
                           1970 ;	../src/gpio/src/gpio_pin_configure.c:77: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   0530 74 E0         [12] 1971 	mov	a,#0xE0
   0532 5E            [12] 1972 	anl	a,r6
   0533 4C            [12] 1973 	orl	a,r4
   0534 F5 9E         [12] 1974 	mov	_P0CON,a
                           1975 ;	../src/gpio/src/gpio_pin_configure.c:80: gpio_pins_dir_input(P0DIR, (1 << (gpio_pin_id % 8)));
   0536 8D F0         [24] 1976 	mov	b,r5
   0538 05 F0         [12] 1977 	inc	b
   053A 74 01         [12] 1978 	mov	a,#0x01
   053C 80 02         [24] 1979 	sjmp	00188$
   053E                    1980 00186$:
   053E 25 E0         [12] 1981 	add	a,acc
   0540                    1982 00188$:
   0540 D5 F0 FB      [24] 1983 	djnz	b,00186$
   0543 42 93         [12] 1984 	orl	_P0DIR,a
   0545 22            [24] 1985 	ret
   0546                    1986 00134$:
                           1987 ;	../src/gpio/src/gpio_pin_configure.c:83: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   0546 EF            [12] 1988 	mov	a,r7
   0547 24 F0         [12] 1989 	add	a,#0xff - 0x0F
   0549 50 03         [24] 1990 	jnc	00189$
   054B 02r05rC4      [24] 1991 	ljmp	00131$
   054E                    1992 00189$:
                           1993 ;	../src/gpio/src/gpio_pin_configure.c:86: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   054E 90r00r38      [24] 1994 	mov	dptr,#_gpio_pin_configure_PARM_2
   0551 E0            [24] 1995 	movx	a,@dptr
   0552 FE            [12] 1996 	mov	r6,a
   0553 FD            [12] 1997 	mov	r5,a
   0554 ED            [12] 1998 	mov	a,r5
   0555 30 E0 4C      [24] 1999 	jnb	acc.0,00111$
                           2000 ;	../src/gpio/src/gpio_pin_configure.c:89: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   0558 EE            [12] 2001 	mov	a,r6
   0559 30 E1 15      [24] 2002 	jnb	acc.1,00108$
                           2003 ;	../src/gpio/src/gpio_pin_configure.c:91: gpio_pins_val_set(P1, (1 << (gpio_pin_id % 8)));
   055C 74 07         [12] 2004 	mov	a,#0x07
   055E 5F            [12] 2005 	anl	a,r7
   055F F5 F0         [12] 2006 	mov	b,a
   0561 05 F0         [12] 2007 	inc	b
   0563 74 01         [12] 2008 	mov	a,#0x01
   0565 80 02         [24] 2009 	sjmp	00194$
   0567                    2010 00192$:
   0567 25 E0         [12] 2011 	add	a,acc
   0569                    2012 00194$:
   0569 D5 F0 FB      [24] 2013 	djnz	b,00192$
   056C FD            [12] 2014 	mov	r5,a
   056D 42 90         [12] 2015 	orl	_P1,a
   056F 80 14         [24] 2016 	sjmp	00109$
   0571                    2017 00108$:
                           2018 ;	../src/gpio/src/gpio_pin_configure.c:95: gpio_pins_val_clear(P1, (1 << (gpio_pin_id % 8)));
   0571 74 07         [12] 2019 	mov	a,#0x07
   0573 5F            [12] 2020 	anl	a,r7
   0574 F5 F0         [12] 2021 	mov	b,a
   0576 05 F0         [12] 2022 	inc	b
   0578 74 01         [12] 2023 	mov	a,#0x01
   057A 80 02         [24] 2024 	sjmp	00197$
   057C                    2025 00195$:
   057C 25 E0         [12] 2026 	add	a,acc
   057E                    2027 00197$:
   057E D5 F0 FB      [24] 2028 	djnz	b,00195$
   0581 F4            [12] 2029 	cpl	a
   0582 FD            [12] 2030 	mov	r5,a
   0583 52 90         [12] 2031 	anl	_P1,a
   0585                    2032 00109$:
                           2033 ;	../src/gpio/src/gpio_pin_configure.c:99: P1CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0585 74 07         [12] 2034 	mov	a,#0x07
   0587 5F            [12] 2035 	anl	a,r7
   0588 FD            [12] 2036 	mov	r5,a
   0589 74 07         [12] 2037 	mov	a,#0x07
   058B 5D            [12] 2038 	anl	a,r5
   058C FC            [12] 2039 	mov	r4,a
                           2040 ;	../src/gpio/src/gpio_pin_configure.c:100: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   058D 74 E0         [12] 2041 	mov	a,#0xE0
   058F 5E            [12] 2042 	anl	a,r6
   0590 4C            [12] 2043 	orl	a,r4
   0591 F5 9F         [12] 2044 	mov	_P1CON,a
                           2045 ;	../src/gpio/src/gpio_pin_configure.c:103: gpio_pins_dir_output(P1DIR, (1 << (gpio_pin_id % 8)));
   0593 8D F0         [24] 2046 	mov	b,r5
   0595 05 F0         [12] 2047 	inc	b
   0597 74 01         [12] 2048 	mov	a,#0x01
   0599 80 02         [24] 2049 	sjmp	00200$
   059B                    2050 00198$:
   059B 25 E0         [12] 2051 	add	a,acc
   059D                    2052 00200$:
   059D D5 F0 FB      [24] 2053 	djnz	b,00198$
   05A0 F4            [12] 2054 	cpl	a
   05A1 52 94         [12] 2055 	anl	_P1DIR,a
   05A3 22            [24] 2056 	ret
   05A4                    2057 00111$:
                           2058 ;	../src/gpio/src/gpio_pin_configure.c:108: P1CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   05A4 74 07         [12] 2059 	mov	a,#0x07
   05A6 5F            [12] 2060 	anl	a,r7
   05A7 FD            [12] 2061 	mov	r5,a
   05A8 74 07         [12] 2062 	mov	a,#0x07
   05AA 5D            [12] 2063 	anl	a,r5
   05AB 44 10         [12] 2064 	orl	a,#0x10
   05AD FC            [12] 2065 	mov	r4,a
                           2066 ;	../src/gpio/src/gpio_pin_configure.c:110: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   05AE 74 E0         [12] 2067 	mov	a,#0xE0
   05B0 5E            [12] 2068 	anl	a,r6
   05B1 4C            [12] 2069 	orl	a,r4
   05B2 F5 9F         [12] 2070 	mov	_P1CON,a
                           2071 ;	../src/gpio/src/gpio_pin_configure.c:113: gpio_pins_dir_input(P1DIR, (1 << (gpio_pin_id % 8)));
   05B4 8D F0         [24] 2072 	mov	b,r5
   05B6 05 F0         [12] 2073 	inc	b
   05B8 74 01         [12] 2074 	mov	a,#0x01
   05BA 80 02         [24] 2075 	sjmp	00203$
   05BC                    2076 00201$:
   05BC 25 E0         [12] 2077 	add	a,acc
   05BE                    2078 00203$:
   05BE D5 F0 FB      [24] 2079 	djnz	b,00201$
   05C1 42 94         [12] 2080 	orl	_P1DIR,a
   05C3 22            [24] 2081 	ret
   05C4                    2082 00131$:
                           2083 ;	../src/gpio/src/gpio_pin_configure.c:116: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   05C4 EF            [12] 2084 	mov	a,r7
   05C5 24 E8         [12] 2085 	add	a,#0xff - 0x17
   05C7 50 03         [24] 2086 	jnc	00204$
   05C9 02r06r42      [24] 2087 	ljmp	00128$
   05CC                    2088 00204$:
                           2089 ;	../src/gpio/src/gpio_pin_configure.c:119: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   05CC 90r00r38      [24] 2090 	mov	dptr,#_gpio_pin_configure_PARM_2
   05CF E0            [24] 2091 	movx	a,@dptr
   05D0 FE            [12] 2092 	mov	r6,a
   05D1 FD            [12] 2093 	mov	r5,a
   05D2 ED            [12] 2094 	mov	a,r5
   05D3 30 E0 4C      [24] 2095 	jnb	acc.0,00117$
                           2096 ;	../src/gpio/src/gpio_pin_configure.c:122: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   05D6 EE            [12] 2097 	mov	a,r6
   05D7 30 E1 15      [24] 2098 	jnb	acc.1,00114$
                           2099 ;	../src/gpio/src/gpio_pin_configure.c:124: gpio_pins_val_set(P2, (1 << (gpio_pin_id % 8)));
   05DA 74 07         [12] 2100 	mov	a,#0x07
   05DC 5F            [12] 2101 	anl	a,r7
   05DD F5 F0         [12] 2102 	mov	b,a
   05DF 05 F0         [12] 2103 	inc	b
   05E1 74 01         [12] 2104 	mov	a,#0x01
   05E3 80 02         [24] 2105 	sjmp	00209$
   05E5                    2106 00207$:
   05E5 25 E0         [12] 2107 	add	a,acc
   05E7                    2108 00209$:
   05E7 D5 F0 FB      [24] 2109 	djnz	b,00207$
   05EA FD            [12] 2110 	mov	r5,a
   05EB 42 A0         [12] 2111 	orl	_P2,a
   05ED 80 14         [24] 2112 	sjmp	00115$
   05EF                    2113 00114$:
                           2114 ;	../src/gpio/src/gpio_pin_configure.c:128: gpio_pins_val_clear(P2, (1 << (gpio_pin_id % 8)));
   05EF 74 07         [12] 2115 	mov	a,#0x07
   05F1 5F            [12] 2116 	anl	a,r7
   05F2 F5 F0         [12] 2117 	mov	b,a
   05F4 05 F0         [12] 2118 	inc	b
   05F6 74 01         [12] 2119 	mov	a,#0x01
   05F8 80 02         [24] 2120 	sjmp	00212$
   05FA                    2121 00210$:
   05FA 25 E0         [12] 2122 	add	a,acc
   05FC                    2123 00212$:
   05FC D5 F0 FB      [24] 2124 	djnz	b,00210$
   05FF F4            [12] 2125 	cpl	a
   0600 FD            [12] 2126 	mov	r5,a
   0601 52 A0         [12] 2127 	anl	_P2,a
   0603                    2128 00115$:
                           2129 ;	../src/gpio/src/gpio_pin_configure.c:132: P2CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0603 74 07         [12] 2130 	mov	a,#0x07
   0605 5F            [12] 2131 	anl	a,r7
   0606 FD            [12] 2132 	mov	r5,a
   0607 74 07         [12] 2133 	mov	a,#0x07
   0609 5D            [12] 2134 	anl	a,r5
   060A FC            [12] 2135 	mov	r4,a
                           2136 ;	../src/gpio/src/gpio_pin_configure.c:133: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   060B 74 E0         [12] 2137 	mov	a,#0xE0
   060D 5E            [12] 2138 	anl	a,r6
   060E 4C            [12] 2139 	orl	a,r4
   060F F5 97         [12] 2140 	mov	_P2CON,a
                           2141 ;	../src/gpio/src/gpio_pin_configure.c:136: gpio_pins_dir_output(P2DIR, (1 << (gpio_pin_id % 8)));
   0611 8D F0         [24] 2142 	mov	b,r5
   0613 05 F0         [12] 2143 	inc	b
   0615 74 01         [12] 2144 	mov	a,#0x01
   0617 80 02         [24] 2145 	sjmp	00215$
   0619                    2146 00213$:
   0619 25 E0         [12] 2147 	add	a,acc
   061B                    2148 00215$:
   061B D5 F0 FB      [24] 2149 	djnz	b,00213$
   061E F4            [12] 2150 	cpl	a
   061F 52 95         [12] 2151 	anl	_P2DIR,a
   0621 22            [24] 2152 	ret
   0622                    2153 00117$:
                           2154 ;	../src/gpio/src/gpio_pin_configure.c:141: P2CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0622 74 07         [12] 2155 	mov	a,#0x07
   0624 5F            [12] 2156 	anl	a,r7
   0625 FD            [12] 2157 	mov	r5,a
   0626 74 07         [12] 2158 	mov	a,#0x07
   0628 5D            [12] 2159 	anl	a,r5
   0629 44 10         [12] 2160 	orl	a,#0x10
   062B FC            [12] 2161 	mov	r4,a
                           2162 ;	../src/gpio/src/gpio_pin_configure.c:143: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   062C 74 E0         [12] 2163 	mov	a,#0xE0
   062E 5E            [12] 2164 	anl	a,r6
   062F 4C            [12] 2165 	orl	a,r4
   0630 F5 97         [12] 2166 	mov	_P2CON,a
                           2167 ;	../src/gpio/src/gpio_pin_configure.c:146: gpio_pins_dir_input(P2DIR, (1 << (gpio_pin_id % 8)));
   0632 8D F0         [24] 2168 	mov	b,r5
   0634 05 F0         [12] 2169 	inc	b
   0636 74 01         [12] 2170 	mov	a,#0x01
   0638 80 02         [24] 2171 	sjmp	00218$
   063A                    2172 00216$:
   063A 25 E0         [12] 2173 	add	a,acc
   063C                    2174 00218$:
   063C D5 F0 FB      [24] 2175 	djnz	b,00216$
   063F 42 95         [12] 2176 	orl	_P2DIR,a
   0641 22            [24] 2177 	ret
   0642                    2178 00128$:
                           2179 ;	../src/gpio/src/gpio_pin_configure.c:149: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   0642 EF            [12] 2180 	mov	a,r7
   0643 24 E1         [12] 2181 	add	a,#0xff - 0x1E
   0645 40 75         [24] 2182 	jc	00136$
                           2183 ;	../src/gpio/src/gpio_pin_configure.c:152: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   0647 90r00r38      [24] 2184 	mov	dptr,#_gpio_pin_configure_PARM_2
   064A E0            [24] 2185 	movx	a,@dptr
   064B FE            [12] 2186 	mov	r6,a
   064C FD            [12] 2187 	mov	r5,a
   064D ED            [12] 2188 	mov	a,r5
   064E 30 E0 4C      [24] 2189 	jnb	acc.0,00123$
                           2190 ;	../src/gpio/src/gpio_pin_configure.c:155: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   0651 EE            [12] 2191 	mov	a,r6
   0652 30 E1 15      [24] 2192 	jnb	acc.1,00120$
                           2193 ;	../src/gpio/src/gpio_pin_configure.c:157: gpio_pins_val_set(P3, (1 << (gpio_pin_id % 8)));
   0655 74 07         [12] 2194 	mov	a,#0x07
   0657 5F            [12] 2195 	anl	a,r7
   0658 F5 F0         [12] 2196 	mov	b,a
   065A 05 F0         [12] 2197 	inc	b
   065C 74 01         [12] 2198 	mov	a,#0x01
   065E 80 02         [24] 2199 	sjmp	00224$
   0660                    2200 00222$:
   0660 25 E0         [12] 2201 	add	a,acc
   0662                    2202 00224$:
   0662 D5 F0 FB      [24] 2203 	djnz	b,00222$
   0665 FD            [12] 2204 	mov	r5,a
   0666 42 B0         [12] 2205 	orl	_P3,a
   0668 80 14         [24] 2206 	sjmp	00121$
   066A                    2207 00120$:
                           2208 ;	../src/gpio/src/gpio_pin_configure.c:161: gpio_pins_val_clear(P3, (1 << (gpio_pin_id % 8)));
   066A 74 07         [12] 2209 	mov	a,#0x07
   066C 5F            [12] 2210 	anl	a,r7
   066D F5 F0         [12] 2211 	mov	b,a
   066F 05 F0         [12] 2212 	inc	b
   0671 74 01         [12] 2213 	mov	a,#0x01
   0673 80 02         [24] 2214 	sjmp	00227$
   0675                    2215 00225$:
   0675 25 E0         [12] 2216 	add	a,acc
   0677                    2217 00227$:
   0677 D5 F0 FB      [24] 2218 	djnz	b,00225$
   067A F4            [12] 2219 	cpl	a
   067B FD            [12] 2220 	mov	r5,a
   067C 52 B0         [12] 2221 	anl	_P3,a
   067E                    2222 00121$:
                           2223 ;	../src/gpio/src/gpio_pin_configure.c:165: P3CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   067E 74 07         [12] 2224 	mov	a,#0x07
   0680 5F            [12] 2225 	anl	a,r7
   0681 FD            [12] 2226 	mov	r5,a
   0682 74 07         [12] 2227 	mov	a,#0x07
   0684 5D            [12] 2228 	anl	a,r5
   0685 FC            [12] 2229 	mov	r4,a
                           2230 ;	../src/gpio/src/gpio_pin_configure.c:166: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   0686 74 E0         [12] 2231 	mov	a,#0xE0
   0688 5E            [12] 2232 	anl	a,r6
   0689 4C            [12] 2233 	orl	a,r4
   068A F5 8F         [12] 2234 	mov	_P3CON,a
                           2235 ;	../src/gpio/src/gpio_pin_configure.c:169: gpio_pins_dir_output(P3DIR, (1 << (gpio_pin_id % 8)));
   068C 8D F0         [24] 2236 	mov	b,r5
   068E 05 F0         [12] 2237 	inc	b
   0690 74 01         [12] 2238 	mov	a,#0x01
   0692 80 02         [24] 2239 	sjmp	00230$
   0694                    2240 00228$:
   0694 25 E0         [12] 2241 	add	a,acc
   0696                    2242 00230$:
   0696 D5 F0 FB      [24] 2243 	djnz	b,00228$
   0699 F4            [12] 2244 	cpl	a
   069A 52 96         [12] 2245 	anl	_P3DIR,a
   069C 22            [24] 2246 	ret
   069D                    2247 00123$:
                           2248 ;	../src/gpio/src/gpio_pin_configure.c:174: P3CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   069D 53 07 07      [24] 2249 	anl	ar7,#0x07
   06A0 74 07         [12] 2250 	mov	a,#0x07
   06A2 5F            [12] 2251 	anl	a,r7
   06A3 44 10         [12] 2252 	orl	a,#0x10
   06A5 FD            [12] 2253 	mov	r5,a
                           2254 ;	../src/gpio/src/gpio_pin_configure.c:176: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   06A6 74 E0         [12] 2255 	mov	a,#0xE0
   06A8 5E            [12] 2256 	anl	a,r6
   06A9 4D            [12] 2257 	orl	a,r5
   06AA F5 8F         [12] 2258 	mov	_P3CON,a
                           2259 ;	../src/gpio/src/gpio_pin_configure.c:179: gpio_pins_dir_input(P3DIR, (1 << (gpio_pin_id % 8)));
   06AC 8F F0         [24] 2260 	mov	b,r7
   06AE 05 F0         [12] 2261 	inc	b
   06B0 74 01         [12] 2262 	mov	a,#0x01
   06B2 80 02         [24] 2263 	sjmp	00233$
   06B4                    2264 00231$:
   06B4 25 E0         [12] 2265 	add	a,acc
   06B6                    2266 00233$:
   06B6 D5 F0 FB      [24] 2267 	djnz	b,00231$
   06B9 FF            [12] 2268 	mov	r7,a
   06BA 42 96         [12] 2269 	orl	_P3DIR,a
   06BC                    2270 00136$:
   06BC 22            [24] 2271 	ret
                           2272 ;------------------------------------------------------------
                           2273 ;Allocation info for local variables in function 'gpio_pin_val_read'
                           2274 ;------------------------------------------------------------
                           2275 ;gpio_pin_id               Allocated with name '_gpio_pin_val_read_gpio_pin_id_1_108'
                           2276 ;value                     Allocated with name '_gpio_pin_val_read_value_1_109'
                           2277 ;------------------------------------------------------------
                           2278 ;	../src/gpio/src/gpio_pin_val_read.c:46: bool gpio_pin_val_read(gpio_pin_id_t gpio_pin_id)
                           2279 ;	-----------------------------------------
                           2280 ;	 function gpio_pin_val_read
                           2281 ;	-----------------------------------------
   06BD                    2282 _gpio_pin_val_read:
   06BD E5 82         [12] 2283 	mov	a,dpl
   06BF 90r00r3A      [24] 2284 	mov	dptr,#_gpio_pin_val_read_gpio_pin_id_1_108
   06C2 F0            [24] 2285 	movx	@dptr,a
                           2286 ;	../src/gpio/src/gpio_pin_val_read.c:48: bool value = false;
   06C3 90r00r3B      [24] 2287 	mov	dptr,#_gpio_pin_val_read_value_1_109
   06C6 E4            [12] 2288 	clr	a
   06C7 F0            [24] 2289 	movx	@dptr,a
                           2290 ;	../src/gpio/src/gpio_pin_val_read.c:51: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   06C8 90r00r3A      [24] 2291 	mov	dptr,#_gpio_pin_val_read_gpio_pin_id_1_108
   06CB E0            [24] 2292 	movx	a,@dptr
   06CC FF            [12] 2293 	mov  r7,a
   06CD 24 F8         [12] 2294 	add	a,#0xff - 0x07
   06CF 40 19         [24] 2295 	jc	00110$
                           2296 ;	../src/gpio/src/gpio_pin_val_read.c:53: value = P0 & (1 << (gpio_pin_id % 8));
   06D1 74 07         [12] 2297 	mov	a,#0x07
   06D3 5F            [12] 2298 	anl	a,r7
   06D4 F5 F0         [12] 2299 	mov	b,a
   06D6 05 F0         [12] 2300 	inc	b
   06D8 74 01         [12] 2301 	mov	a,#0x01
   06DA 80 02         [24] 2302 	sjmp	00135$
   06DC                    2303 00133$:
   06DC 25 E0         [12] 2304 	add	a,acc
   06DE                    2305 00135$:
   06DE D5 F0 FB      [24] 2306 	djnz	b,00133$
   06E1 FE            [12] 2307 	mov	r6,a
   06E2 90r00r3B      [24] 2308 	mov	dptr,#_gpio_pin_val_read_value_1_109
   06E5 55 80         [12] 2309 	anl	a,_P0
   06E7 F0            [24] 2310 	movx	@dptr,a
   06E8 80 58         [24] 2311 	sjmp	00111$
   06EA                    2312 00110$:
                           2313 ;	../src/gpio/src/gpio_pin_val_read.c:55: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   06EA EF            [12] 2314 	mov	a,r7
   06EB 24 F0         [12] 2315 	add	a,#0xff - 0x0F
   06ED 40 19         [24] 2316 	jc	00107$
                           2317 ;	../src/gpio/src/gpio_pin_val_read.c:57: value = P1 & (1 << (gpio_pin_id % 8));
   06EF 74 07         [12] 2318 	mov	a,#0x07
   06F1 5F            [12] 2319 	anl	a,r7
   06F2 F5 F0         [12] 2320 	mov	b,a
   06F4 05 F0         [12] 2321 	inc	b
   06F6 74 01         [12] 2322 	mov	a,#0x01
   06F8 80 02         [24] 2323 	sjmp	00139$
   06FA                    2324 00137$:
   06FA 25 E0         [12] 2325 	add	a,acc
   06FC                    2326 00139$:
   06FC D5 F0 FB      [24] 2327 	djnz	b,00137$
   06FF FE            [12] 2328 	mov	r6,a
   0700 90r00r3B      [24] 2329 	mov	dptr,#_gpio_pin_val_read_value_1_109
   0703 55 90         [12] 2330 	anl	a,_P1
   0705 F0            [24] 2331 	movx	@dptr,a
   0706 80 3A         [24] 2332 	sjmp	00111$
   0708                    2333 00107$:
                           2334 ;	../src/gpio/src/gpio_pin_val_read.c:59: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   0708 EF            [12] 2335 	mov	a,r7
   0709 24 E8         [12] 2336 	add	a,#0xff - 0x17
   070B 40 19         [24] 2337 	jc	00104$
                           2338 ;	../src/gpio/src/gpio_pin_val_read.c:61: value = P2 & (1 << (gpio_pin_id % 8));
   070D 74 07         [12] 2339 	mov	a,#0x07
   070F 5F            [12] 2340 	anl	a,r7
   0710 F5 F0         [12] 2341 	mov	b,a
   0712 05 F0         [12] 2342 	inc	b
   0714 74 01         [12] 2343 	mov	a,#0x01
   0716 80 02         [24] 2344 	sjmp	00143$
   0718                    2345 00141$:
   0718 25 E0         [12] 2346 	add	a,acc
   071A                    2347 00143$:
   071A D5 F0 FB      [24] 2348 	djnz	b,00141$
   071D FE            [12] 2349 	mov	r6,a
   071E 90r00r3B      [24] 2350 	mov	dptr,#_gpio_pin_val_read_value_1_109
   0721 55 A0         [12] 2351 	anl	a,_P2
   0723 F0            [24] 2352 	movx	@dptr,a
   0724 80 1C         [24] 2353 	sjmp	00111$
   0726                    2354 00104$:
                           2355 ;	../src/gpio/src/gpio_pin_val_read.c:63: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   0726 EF            [12] 2356 	mov	a,r7
   0727 24 E1         [12] 2357 	add	a,#0xff - 0x1E
   0729 40 17         [24] 2358 	jc	00111$
                           2359 ;	../src/gpio/src/gpio_pin_val_read.c:65: value = P3 & (1 << (gpio_pin_id % 8));
   072B 74 07         [12] 2360 	mov	a,#0x07
   072D 5F            [12] 2361 	anl	a,r7
   072E F5 F0         [12] 2362 	mov	b,a
   0730 05 F0         [12] 2363 	inc	b
   0732 74 01         [12] 2364 	mov	a,#0x01
   0734 80 02         [24] 2365 	sjmp	00147$
   0736                    2366 00145$:
   0736 25 E0         [12] 2367 	add	a,acc
   0738                    2368 00147$:
   0738 D5 F0 FB      [24] 2369 	djnz	b,00145$
   073B FF            [12] 2370 	mov	r7,a
   073C 90r00r3B      [24] 2371 	mov	dptr,#_gpio_pin_val_read_value_1_109
   073F 55 B0         [12] 2372 	anl	a,_P3
   0741 F0            [24] 2373 	movx	@dptr,a
   0742                    2374 00111$:
                           2375 ;	../src/gpio/src/gpio_pin_val_read.c:68: if(value)
   0742 90r00r3B      [24] 2376 	mov	dptr,#_gpio_pin_val_read_value_1_109
   0745 E0            [24] 2377 	movx	a,@dptr
   0746 FF            [12] 2378 	mov	r7,a
   0747 60 04         [24] 2379 	jz	00113$
                           2380 ;	../src/gpio/src/gpio_pin_val_read.c:70: return true;
   0749 75 82 01      [24] 2381 	mov	dpl,#0x01
   074C 22            [24] 2382 	ret
   074D                    2383 00113$:
                           2384 ;	../src/gpio/src/gpio_pin_val_read.c:74: return false;
   074D 75 82 00      [24] 2385 	mov	dpl,#0x00
   0750 22            [24] 2386 	ret
                           2387 ;------------------------------------------------------------
                           2388 ;Allocation info for local variables in function 'gpio_pin_val_clear'
                           2389 ;------------------------------------------------------------
                           2390 ;gpio_pin_id               Allocated with name '_gpio_pin_val_clear_gpio_pin_id_1_116'
                           2391 ;------------------------------------------------------------
                           2392 ;	../src/gpio/src/gpio_pin_val_clear.c:46: void gpio_pin_val_clear(gpio_pin_id_t gpio_pin_id)
                           2393 ;	-----------------------------------------
                           2394 ;	 function gpio_pin_val_clear
                           2395 ;	-----------------------------------------
   0751                    2396 _gpio_pin_val_clear:
   0751 E5 82         [12] 2397 	mov	a,dpl
                           2398 ;	../src/gpio/src/gpio_pin_val_clear.c:49: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   0753 90r00r3C      [24] 2399 	mov	dptr,#_gpio_pin_val_clear_gpio_pin_id_1_116
   0756 F0            [24] 2400 	movx	@dptr,a
   0757 FF            [12] 2401 	mov  r7,a
   0758 24 F8         [12] 2402 	add	a,#0xff - 0x07
   075A 40 14         [24] 2403 	jc	00110$
                           2404 ;	../src/gpio/src/gpio_pin_val_clear.c:51: gpio_pins_val_clear(P0, (1 << (gpio_pin_id % 8)));
   075C 74 07         [12] 2405 	mov	a,#0x07
   075E 5F            [12] 2406 	anl	a,r7
   075F F5 F0         [12] 2407 	mov	b,a
   0761 05 F0         [12] 2408 	inc	b
   0763 74 01         [12] 2409 	mov	a,#0x01
   0765 80 02         [24] 2410 	sjmp	00129$
   0767                    2411 00127$:
   0767 25 E0         [12] 2412 	add	a,acc
   0769                    2413 00129$:
   0769 D5 F0 FB      [24] 2414 	djnz	b,00127$
   076C F4            [12] 2415 	cpl	a
   076D 52 80         [12] 2416 	anl	_P0,a
   076F 22            [24] 2417 	ret
   0770                    2418 00110$:
                           2419 ;	../src/gpio/src/gpio_pin_val_clear.c:53: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   0770 EF            [12] 2420 	mov	a,r7
   0771 24 F0         [12] 2421 	add	a,#0xff - 0x0F
   0773 40 14         [24] 2422 	jc	00107$
                           2423 ;	../src/gpio/src/gpio_pin_val_clear.c:55: gpio_pins_val_clear(P1, (1 << (gpio_pin_id % 8)));
   0775 74 07         [12] 2424 	mov	a,#0x07
   0777 5F            [12] 2425 	anl	a,r7
   0778 F5 F0         [12] 2426 	mov	b,a
   077A 05 F0         [12] 2427 	inc	b
   077C 74 01         [12] 2428 	mov	a,#0x01
   077E 80 02         [24] 2429 	sjmp	00133$
   0780                    2430 00131$:
   0780 25 E0         [12] 2431 	add	a,acc
   0782                    2432 00133$:
   0782 D5 F0 FB      [24] 2433 	djnz	b,00131$
   0785 F4            [12] 2434 	cpl	a
   0786 52 90         [12] 2435 	anl	_P1,a
   0788 22            [24] 2436 	ret
   0789                    2437 00107$:
                           2438 ;	../src/gpio/src/gpio_pin_val_clear.c:57: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   0789 EF            [12] 2439 	mov	a,r7
   078A 24 E8         [12] 2440 	add	a,#0xff - 0x17
   078C 40 14         [24] 2441 	jc	00104$
                           2442 ;	../src/gpio/src/gpio_pin_val_clear.c:59: gpio_pins_val_clear(P2, (1 << (gpio_pin_id % 8)));
   078E 74 07         [12] 2443 	mov	a,#0x07
   0790 5F            [12] 2444 	anl	a,r7
   0791 F5 F0         [12] 2445 	mov	b,a
   0793 05 F0         [12] 2446 	inc	b
   0795 74 01         [12] 2447 	mov	a,#0x01
   0797 80 02         [24] 2448 	sjmp	00137$
   0799                    2449 00135$:
   0799 25 E0         [12] 2450 	add	a,acc
   079B                    2451 00137$:
   079B D5 F0 FB      [24] 2452 	djnz	b,00135$
   079E F4            [12] 2453 	cpl	a
   079F 52 A0         [12] 2454 	anl	_P2,a
   07A1 22            [24] 2455 	ret
   07A2                    2456 00104$:
                           2457 ;	../src/gpio/src/gpio_pin_val_clear.c:61: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   07A2 EF            [12] 2458 	mov	a,r7
   07A3 24 E1         [12] 2459 	add	a,#0xff - 0x1E
   07A5 40 14         [24] 2460 	jc	00112$
                           2461 ;	../src/gpio/src/gpio_pin_val_clear.c:63: gpio_pins_val_clear(P3, (1 << (gpio_pin_id % 8)));
   07A7 74 07         [12] 2462 	mov	a,#0x07
   07A9 5F            [12] 2463 	anl	a,r7
   07AA F5 F0         [12] 2464 	mov	b,a
   07AC 05 F0         [12] 2465 	inc	b
   07AE 74 01         [12] 2466 	mov	a,#0x01
   07B0 80 02         [24] 2467 	sjmp	00141$
   07B2                    2468 00139$:
   07B2 25 E0         [12] 2469 	add	a,acc
   07B4                    2470 00141$:
   07B4 D5 F0 FB      [24] 2471 	djnz	b,00139$
   07B7 F4            [12] 2472 	cpl	a
   07B8 FF            [12] 2473 	mov	r7,a
   07B9 52 B0         [12] 2474 	anl	_P3,a
   07BB                    2475 00112$:
   07BB 22            [24] 2476 	ret
                           2477 ;------------------------------------------------------------
                           2478 ;Allocation info for local variables in function 'gpio_pin_val_set'
                           2479 ;------------------------------------------------------------
                           2480 ;gpio_pin_id               Allocated with name '_gpio_pin_val_set_gpio_pin_id_1_122'
                           2481 ;------------------------------------------------------------
                           2482 ;	../src/gpio/src/gpio_pin_val_set.c:46: void gpio_pin_val_set(gpio_pin_id_t gpio_pin_id)
                           2483 ;	-----------------------------------------
                           2484 ;	 function gpio_pin_val_set
                           2485 ;	-----------------------------------------
   07BC                    2486 _gpio_pin_val_set:
   07BC E5 82         [12] 2487 	mov	a,dpl
                           2488 ;	../src/gpio/src/gpio_pin_val_set.c:49: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   07BE 90r00r3D      [24] 2489 	mov	dptr,#_gpio_pin_val_set_gpio_pin_id_1_122
   07C1 F0            [24] 2490 	movx	@dptr,a
   07C2 FF            [12] 2491 	mov  r7,a
   07C3 24 F8         [12] 2492 	add	a,#0xff - 0x07
   07C5 40 13         [24] 2493 	jc	00110$
                           2494 ;	../src/gpio/src/gpio_pin_val_set.c:51: gpio_pins_val_set(P0, (1 << (gpio_pin_id % 8)));
   07C7 74 07         [12] 2495 	mov	a,#0x07
   07C9 5F            [12] 2496 	anl	a,r7
   07CA F5 F0         [12] 2497 	mov	b,a
   07CC 05 F0         [12] 2498 	inc	b
   07CE 74 01         [12] 2499 	mov	a,#0x01
   07D0 80 02         [24] 2500 	sjmp	00129$
   07D2                    2501 00127$:
   07D2 25 E0         [12] 2502 	add	a,acc
   07D4                    2503 00129$:
   07D4 D5 F0 FB      [24] 2504 	djnz	b,00127$
   07D7 42 80         [12] 2505 	orl	_P0,a
   07D9 22            [24] 2506 	ret
   07DA                    2507 00110$:
                           2508 ;	../src/gpio/src/gpio_pin_val_set.c:53: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   07DA EF            [12] 2509 	mov	a,r7
   07DB 24 F0         [12] 2510 	add	a,#0xff - 0x0F
   07DD 40 13         [24] 2511 	jc	00107$
                           2512 ;	../src/gpio/src/gpio_pin_val_set.c:55: gpio_pins_val_set(P1, (1 << (gpio_pin_id % 8)));
   07DF 74 07         [12] 2513 	mov	a,#0x07
   07E1 5F            [12] 2514 	anl	a,r7
   07E2 F5 F0         [12] 2515 	mov	b,a
   07E4 05 F0         [12] 2516 	inc	b
   07E6 74 01         [12] 2517 	mov	a,#0x01
   07E8 80 02         [24] 2518 	sjmp	00133$
   07EA                    2519 00131$:
   07EA 25 E0         [12] 2520 	add	a,acc
   07EC                    2521 00133$:
   07EC D5 F0 FB      [24] 2522 	djnz	b,00131$
   07EF 42 90         [12] 2523 	orl	_P1,a
   07F1 22            [24] 2524 	ret
   07F2                    2525 00107$:
                           2526 ;	../src/gpio/src/gpio_pin_val_set.c:57: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   07F2 EF            [12] 2527 	mov	a,r7
   07F3 24 E8         [12] 2528 	add	a,#0xff - 0x17
   07F5 40 13         [24] 2529 	jc	00104$
                           2530 ;	../src/gpio/src/gpio_pin_val_set.c:59: gpio_pins_val_set(P2, (1 << (gpio_pin_id % 8)));
   07F7 74 07         [12] 2531 	mov	a,#0x07
   07F9 5F            [12] 2532 	anl	a,r7
   07FA F5 F0         [12] 2533 	mov	b,a
   07FC 05 F0         [12] 2534 	inc	b
   07FE 74 01         [12] 2535 	mov	a,#0x01
   0800 80 02         [24] 2536 	sjmp	00137$
   0802                    2537 00135$:
   0802 25 E0         [12] 2538 	add	a,acc
   0804                    2539 00137$:
   0804 D5 F0 FB      [24] 2540 	djnz	b,00135$
   0807 42 A0         [12] 2541 	orl	_P2,a
   0809 22            [24] 2542 	ret
   080A                    2543 00104$:
                           2544 ;	../src/gpio/src/gpio_pin_val_set.c:61: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   080A EF            [12] 2545 	mov	a,r7
   080B 24 E1         [12] 2546 	add	a,#0xff - 0x1E
   080D 40 13         [24] 2547 	jc	00112$
                           2548 ;	../src/gpio/src/gpio_pin_val_set.c:63: gpio_pins_val_set(P3, (1 << (gpio_pin_id % 8)));
   080F 74 07         [12] 2549 	mov	a,#0x07
   0811 5F            [12] 2550 	anl	a,r7
   0812 F5 F0         [12] 2551 	mov	b,a
   0814 05 F0         [12] 2552 	inc	b
   0816 74 01         [12] 2553 	mov	a,#0x01
   0818 80 02         [24] 2554 	sjmp	00141$
   081A                    2555 00139$:
   081A 25 E0         [12] 2556 	add	a,acc
   081C                    2557 00141$:
   081C D5 F0 FB      [24] 2558 	djnz	b,00139$
   081F FF            [12] 2559 	mov	r7,a
   0820 42 B0         [12] 2560 	orl	_P3,a
   0822                    2561 00112$:
   0822 22            [24] 2562 	ret
                           2563 ;------------------------------------------------------------
                           2564 ;Allocation info for local variables in function 'gpio_pin_val_write'
                           2565 ;------------------------------------------------------------
                           2566 ;value                     Allocated with name '_gpio_pin_val_write_PARM_2'
                           2567 ;gpio_pin_id               Allocated with name '_gpio_pin_val_write_gpio_pin_id_1_128'
                           2568 ;------------------------------------------------------------
                           2569 ;	../src/gpio/src/gpio_pin_val_write.c:47: void gpio_pin_val_write(gpio_pin_id_t gpio_pin_id, bool value)
                           2570 ;	-----------------------------------------
                           2571 ;	 function gpio_pin_val_write
                           2572 ;	-----------------------------------------
   0823                    2573 _gpio_pin_val_write:
   0823 E5 82         [12] 2574 	mov	a,dpl
   0825 90r00r3F      [24] 2575 	mov	dptr,#_gpio_pin_val_write_gpio_pin_id_1_128
   0828 F0            [24] 2576 	movx	@dptr,a
                           2577 ;	../src/gpio/src/gpio_pin_val_write.c:50: if(value)
   0829 90r00r3E      [24] 2578 	mov	dptr,#_gpio_pin_val_write_PARM_2
   082C E0            [24] 2579 	movx	a,@dptr
   082D FF            [12] 2580 	mov	r7,a
   082E 60 09         [24] 2581 	jz	00102$
                           2582 ;	../src/gpio/src/gpio_pin_val_write.c:52: gpio_pin_val_set(gpio_pin_id);
   0830 90r00r3F      [24] 2583 	mov	dptr,#_gpio_pin_val_write_gpio_pin_id_1_128
   0833 E0            [24] 2584 	movx	a,@dptr
   0834 F5 82         [12] 2585 	mov	dpl,a
   0836 02r07rBC      [24] 2586 	ljmp	_gpio_pin_val_set
   0839                    2587 00102$:
                           2588 ;	../src/gpio/src/gpio_pin_val_write.c:56: gpio_pin_val_clear(gpio_pin_id);
   0839 90r00r3F      [24] 2589 	mov	dptr,#_gpio_pin_val_write_gpio_pin_id_1_128
   083C E0            [24] 2590 	movx	a,@dptr
   083D F5 82         [12] 2591 	mov	dpl,a
   083F 02r07r51      [24] 2592 	ljmp	_gpio_pin_val_clear
                           2593 ;------------------------------------------------------------
                           2594 ;Allocation info for local variables in function 'delay_us'
                           2595 ;------------------------------------------------------------
                           2596 ;microseconds              Allocated with name '_delay_us_microseconds_1_132'
                           2597 ;count                     Allocated with name '_delay_us_count_1_133'
                           2598 ;------------------------------------------------------------
                           2599 ;	../src/delay/src/delay_us.c:46: void delay_us(uint16_t microseconds)
                           2600 ;	-----------------------------------------
                           2601 ;	 function delay_us
                           2602 ;	-----------------------------------------
   0842                    2603 _delay_us:
   0842 AF 83         [24] 2604 	mov	r7,dph
   0844 E5 82         [12] 2605 	mov	a,dpl
   0846 90r00r40      [24] 2606 	mov	dptr,#_delay_us_microseconds_1_132
   0849 F0            [24] 2607 	movx	@dptr,a
   084A EF            [12] 2608 	mov	a,r7
   084B A3            [24] 2609 	inc	dptr
   084C F0            [24] 2610 	movx	@dptr,a
                           2611 ;	../src/delay/src/delay_us.c:51: if(microseconds == 0)
   084D 90r00r40      [24] 2612 	mov	dptr,#_delay_us_microseconds_1_132
   0850 E0            [24] 2613 	movx	a,@dptr
   0851 FE            [12] 2614 	mov	r6,a
   0852 A3            [24] 2615 	inc	dptr
   0853 E0            [24] 2616 	movx	a,@dptr
   0854 FF            [12] 2617 	mov	r7,a
   0855 4E            [12] 2618 	orl	a,r6
   0856 70 01         [24] 2619 	jnz	00102$
                           2620 ;	../src/delay/src/delay_us.c:52: return;
   0858 22            [24] 2621 	ret
   0859                    2622 00102$:
                           2623 ;	../src/delay/src/delay_us.c:54: microseconds -= 1;
   0859 1E            [12] 2624 	dec	r6
   085A BE FF 01      [24] 2625 	cjne	r6,#0xFF,00121$
   085D 1F            [12] 2626 	dec	r7
   085E                    2627 00121$:
   085E 90r00r40      [24] 2628 	mov	dptr,#_delay_us_microseconds_1_132
   0861 EE            [12] 2629 	mov	a,r6
   0862 F0            [24] 2630 	movx	@dptr,a
   0863 EF            [12] 2631 	mov	a,r7
   0864 A3            [24] 2632 	inc	dptr
   0865 F0            [24] 2633 	movx	@dptr,a
                           2634 ;	../src/delay/src/delay_us.c:56: for(count = 0; count < microseconds; count++)
   0866 90r00r40      [24] 2635 	mov	dptr,#_delay_us_microseconds_1_132
   0869 E0            [24] 2636 	movx	a,@dptr
   086A FE            [12] 2637 	mov	r6,a
   086B A3            [24] 2638 	inc	dptr
   086C E0            [24] 2639 	movx	a,@dptr
   086D FF            [12] 2640 	mov	r7,a
   086E 7C 00         [12] 2641 	mov	r4,#0x00
   0870 7D 00         [12] 2642 	mov	r5,#0x00
   0872                    2643 00106$:
   0872 C3            [12] 2644 	clr	c
   0873 EC            [12] 2645 	mov	a,r4
   0874 9E            [12] 2646 	subb	a,r6
   0875 ED            [12] 2647 	mov	a,r5
   0876 9F            [12] 2648 	subb	a,r7
   0877 50 09         [24] 2649 	jnc	00108$
                           2650 ;	../src/delay/src/delay_us.c:58: nop();
   0879 00            [12] 2651 	nop 
                           2652 ;	../src/delay/src/delay_us.c:59: nop();
   087A 00            [12] 2653 	nop 
                           2654 ;	../src/delay/src/delay_us.c:56: for(count = 0; count < microseconds; count++)
   087B 0C            [12] 2655 	inc	r4
   087C BC 00 F3      [24] 2656 	cjne	r4,#0x00,00106$
   087F 0D            [12] 2657 	inc	r5
   0880 80 F0         [24] 2658 	sjmp	00106$
   0882                    2659 00108$:
   0882 22            [24] 2660 	ret
                           2661 ;------------------------------------------------------------
                           2662 ;Allocation info for local variables in function 'delay_s'
                           2663 ;------------------------------------------------------------
                           2664 ;seconds                   Allocated with name '_delay_s_seconds_1_135'
                           2665 ;count                     Allocated with name '_delay_s_count_1_136'
                           2666 ;------------------------------------------------------------
                           2667 ;	../src/delay/src/delay_s.c:46: void delay_s(uint16_t seconds)
                           2668 ;	-----------------------------------------
                           2669 ;	 function delay_s
                           2670 ;	-----------------------------------------
   0883                    2671 _delay_s:
   0883 AF 83         [24] 2672 	mov	r7,dph
   0885 E5 82         [12] 2673 	mov	a,dpl
   0887 90r00r42      [24] 2674 	mov	dptr,#_delay_s_seconds_1_135
   088A F0            [24] 2675 	movx	@dptr,a
   088B EF            [12] 2676 	mov	a,r7
   088C A3            [24] 2677 	inc	dptr
   088D F0            [24] 2678 	movx	@dptr,a
                           2679 ;	../src/delay/src/delay_s.c:51: for(count = 0; count < seconds; count++)
   088E 90r00r42      [24] 2680 	mov	dptr,#_delay_s_seconds_1_135
   0891 E0            [24] 2681 	movx	a,@dptr
   0892 FE            [12] 2682 	mov	r6,a
   0893 A3            [24] 2683 	inc	dptr
   0894 E0            [24] 2684 	movx	a,@dptr
   0895 FF            [12] 2685 	mov	r7,a
   0896 7C 00         [12] 2686 	mov	r4,#0x00
   0898 7D 00         [12] 2687 	mov	r5,#0x00
   089A                    2688 00103$:
   089A C3            [12] 2689 	clr	c
   089B EC            [12] 2690 	mov	a,r4
   089C 9E            [12] 2691 	subb	a,r6
   089D ED            [12] 2692 	mov	a,r5
   089E 9F            [12] 2693 	subb	a,r7
   089F 50 1D         [24] 2694 	jnc	00105$
                           2695 ;	../src/delay/src/delay_s.c:53: delay_ms(1000);
   08A1 90 03 E8      [24] 2696 	mov	dptr,#0x03E8
   08A4 C0 07         [24] 2697 	push	ar7
   08A6 C0 06         [24] 2698 	push	ar6
   08A8 C0 05         [24] 2699 	push	ar5
   08AA C0 04         [24] 2700 	push	ar4
   08AC 12r08rBF      [24] 2701 	lcall	_delay_ms
   08AF D0 04         [24] 2702 	pop	ar4
   08B1 D0 05         [24] 2703 	pop	ar5
   08B3 D0 06         [24] 2704 	pop	ar6
   08B5 D0 07         [24] 2705 	pop	ar7
                           2706 ;	../src/delay/src/delay_s.c:51: for(count = 0; count < seconds; count++)
   08B7 0C            [12] 2707 	inc	r4
   08B8 BC 00 DF      [24] 2708 	cjne	r4,#0x00,00103$
   08BB 0D            [12] 2709 	inc	r5
   08BC 80 DC         [24] 2710 	sjmp	00103$
   08BE                    2711 00105$:
   08BE 22            [24] 2712 	ret
                           2713 ;------------------------------------------------------------
                           2714 ;Allocation info for local variables in function 'delay_ms'
                           2715 ;------------------------------------------------------------
                           2716 ;milliseconds              Allocated with name '_delay_ms_milliseconds_1_138'
                           2717 ;count                     Allocated with name '_delay_ms_count_1_139'
                           2718 ;------------------------------------------------------------
                           2719 ;	../src/delay/src/delay_ms.c:46: void delay_ms(uint16_t milliseconds)
                           2720 ;	-----------------------------------------
                           2721 ;	 function delay_ms
                           2722 ;	-----------------------------------------
   08BF                    2723 _delay_ms:
   08BF AF 83         [24] 2724 	mov	r7,dph
   08C1 E5 82         [12] 2725 	mov	a,dpl
   08C3 90r00r44      [24] 2726 	mov	dptr,#_delay_ms_milliseconds_1_138
   08C6 F0            [24] 2727 	movx	@dptr,a
   08C7 EF            [12] 2728 	mov	a,r7
   08C8 A3            [24] 2729 	inc	dptr
   08C9 F0            [24] 2730 	movx	@dptr,a
                           2731 ;	../src/delay/src/delay_ms.c:51: for(count = 0; count < milliseconds; count++)
   08CA 90r00r44      [24] 2732 	mov	dptr,#_delay_ms_milliseconds_1_138
   08CD E0            [24] 2733 	movx	a,@dptr
   08CE FE            [12] 2734 	mov	r6,a
   08CF A3            [24] 2735 	inc	dptr
   08D0 E0            [24] 2736 	movx	a,@dptr
   08D1 FF            [12] 2737 	mov	r7,a
   08D2 7C 00         [12] 2738 	mov	r4,#0x00
   08D4 7D 00         [12] 2739 	mov	r5,#0x00
   08D6                    2740 00103$:
   08D6 C3            [12] 2741 	clr	c
   08D7 EC            [12] 2742 	mov	a,r4
   08D8 9E            [12] 2743 	subb	a,r6
   08D9 ED            [12] 2744 	mov	a,r5
   08DA 9F            [12] 2745 	subb	a,r7
   08DB 50 1D         [24] 2746 	jnc	00105$
                           2747 ;	../src/delay/src/delay_ms.c:53: delay_us(1000);
   08DD 90 03 E8      [24] 2748 	mov	dptr,#0x03E8
   08E0 C0 07         [24] 2749 	push	ar7
   08E2 C0 06         [24] 2750 	push	ar6
   08E4 C0 05         [24] 2751 	push	ar5
   08E6 C0 04         [24] 2752 	push	ar4
   08E8 12r08r42      [24] 2753 	lcall	_delay_us
   08EB D0 04         [24] 2754 	pop	ar4
   08ED D0 05         [24] 2755 	pop	ar5
   08EF D0 06         [24] 2756 	pop	ar6
   08F1 D0 07         [24] 2757 	pop	ar7
                           2758 ;	../src/delay/src/delay_ms.c:51: for(count = 0; count < milliseconds; count++)
   08F3 0C            [12] 2759 	inc	r4
   08F4 BC 00 DF      [24] 2760 	cjne	r4,#0x00,00103$
   08F7 0D            [12] 2761 	inc	r5
   08F8 80 DC         [24] 2762 	sjmp	00103$
   08FA                    2763 00105$:
   08FA 22            [24] 2764 	ret
                           2765 ;------------------------------------------------------------
                           2766 ;Allocation info for local variables in function 'pwm_configure'
                           2767 ;------------------------------------------------------------
                           2768 ;pwm_config_options        Allocated with name '_pwm_configure_pwm_config_options_1_143'
                           2769 ;------------------------------------------------------------
                           2770 ;	../src/pwm/src/pwm_configure.c:52: void pwm_configure(uint8_t pwm_config_options)
                           2771 ;	-----------------------------------------
                           2772 ;	 function pwm_configure
                           2773 ;	-----------------------------------------
   08FB                    2774 _pwm_configure:
   08FB E5 82         [12] 2775 	mov	a,dpl
   08FD 90r00r46      [24] 2776 	mov	dptr,#_pwm_configure_pwm_config_options_1_143
   0900 F0            [24] 2777 	movx	@dptr,a
                           2778 ;	../src/pwm/src/pwm_configure.c:55: PWMCON = (PWMCON & ~PWM_CONFIG_OPTION_PWMCON_MASK) | (pwm_config_options & PWM_CONFIG_OPTION_PWMCON_MASK);
   0901 AF B2         [24] 2779 	mov	r7,_PWMCON
   0903 53 07 03      [24] 2780 	anl	ar7,#0x03
   0906 90r00r46      [24] 2781 	mov	dptr,#_pwm_configure_pwm_config_options_1_143
   0909 E0            [24] 2782 	movx	a,@dptr
   090A 54 FC         [12] 2783 	anl	a,#0xFC
   090C 4F            [12] 2784 	orl	a,r7
   090D F5 B2         [12] 2785 	mov	_PWMCON,a
   090F 22            [24] 2786 	ret
                           2787 ;------------------------------------------------------------
                           2788 ;Allocation info for local variables in function 'pwm_start'
                           2789 ;------------------------------------------------------------
                           2790 ;pwm_duty_cycle            Allocated with name '_pwm_start_PARM_2'
                           2791 ;pwm_channel               Allocated with name '_pwm_start_pwm_channel_1_145'
                           2792 ;------------------------------------------------------------
                           2793 ;	../src/pwm/src/pwm_start.c:47: void pwm_start(pwm_channel_t pwm_channel, uint8_t pwm_duty_cycle)
                           2794 ;	-----------------------------------------
                           2795 ;	 function pwm_start
                           2796 ;	-----------------------------------------
   0910                    2797 _pwm_start:
   0910 E5 82         [12] 2798 	mov	a,dpl
                           2799 ;	../src/pwm/src/pwm_start.c:50: if(pwm_channel == PWM_CHANNEL_0)
   0912 90r00r48      [24] 2800 	mov	dptr,#_pwm_start_pwm_channel_1_145
   0915 F0            [24] 2801 	movx	@dptr,a
   0916 FF            [12] 2802 	mov	r7,a
   0917 70 0A         [24] 2803 	jnz	00102$
                           2804 ;	../src/pwm/src/pwm_start.c:52: PWMDC0 = pwm_duty_cycle;
   0919 90r00r47      [24] 2805 	mov	dptr,#_pwm_start_PARM_2
   091C E0            [24] 2806 	movx	a,@dptr
   091D F5 A1         [12] 2807 	mov	_PWMDC0,a
                           2808 ;	../src/pwm/src/pwm_start.c:53: reg_bits_set(PWMCON, PWMCON_PWM0_ENABLE);
   091F 43 B2 01      [24] 2809 	orl	_PWMCON,#0x01
   0922 22            [24] 2810 	ret
   0923                    2811 00102$:
                           2812 ;	../src/pwm/src/pwm_start.c:57: PWMDC1 = pwm_duty_cycle;
   0923 90r00r47      [24] 2813 	mov	dptr,#_pwm_start_PARM_2
   0926 E0            [24] 2814 	movx	a,@dptr
   0927 F5 A2         [12] 2815 	mov	_PWMDC1,a
                           2816 ;	../src/pwm/src/pwm_start.c:58: reg_bits_set(PWMCON, PWMCON_PWM1_ENABLE);
   0929 43 B2 02      [24] 2817 	orl	_PWMCON,#0x02
   092C 22            [24] 2818 	ret
                           2819 ;------------------------------------------------------------
                           2820 ;Allocation info for local variables in function 'pwr_clk_mgmt_clklf_configure'
                           2821 ;------------------------------------------------------------
                           2822 ;clklf_config_options      Allocated with name '_pwr_clk_mgmt_clklf_configure_clklf_config_options_1_154'
                           2823 ;------------------------------------------------------------
                           2824 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_clklf_configure.c:52: void pwr_clk_mgmt_clklf_configure(uint8_t clklf_config_options)
                           2825 ;	-----------------------------------------
                           2826 ;	 function pwr_clk_mgmt_clklf_configure
                           2827 ;	-----------------------------------------
   092D                    2828 _pwr_clk_mgmt_clklf_configure:
   092D E5 82         [12] 2829 	mov	a,dpl
   092F 90r00r49      [24] 2830 	mov	dptr,#_pwr_clk_mgmt_clklf_configure_clklf_config_options_1_154
   0932 F0            [24] 2831 	movx	@dptr,a
                           2832 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_clklf_configure.c:55: CLKLFCTRL = (CLKLFCTRL & ~PWR_CLK_MGMT_CLKLF_CONFIG_OPTION_CLKLFCTRL_MASK) | (clklf_config_options & PWR_CLK_MGMT_CLKLF_CONFIG_OPTION_CLKLFCTRL_MASK);
   0933 AF AD         [24] 2833 	mov	r7,_CLKLFCTRL
   0935 53 07 F8      [24] 2834 	anl	ar7,#0xF8
   0938 90r00r49      [24] 2835 	mov	dptr,#_pwr_clk_mgmt_clklf_configure_clklf_config_options_1_154
   093B E0            [24] 2836 	movx	a,@dptr
   093C 54 07         [12] 2837 	anl	a,#0x07
   093E 4F            [12] 2838 	orl	a,r7
   093F F5 AD         [12] 2839 	mov	_CLKLFCTRL,a
   0941 22            [24] 2840 	ret
                           2841 ;------------------------------------------------------------
                           2842 ;Allocation info for local variables in function 'pwr_clk_mgmt_get_cclk_freq_in_hz'
                           2843 ;------------------------------------------------------------
                           2844 ;divider                   Allocated with name '_pwr_clk_mgmt_get_cclk_freq_in_hz_divider_1_156'
                           2845 ;i                         Allocated with name '_pwr_clk_mgmt_get_cclk_freq_in_hz_i_1_156'
                           2846 ;cclk_freq_hz              Allocated with name '_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156'
                           2847 ;------------------------------------------------------------
                           2848 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:46: uint32_t pwr_clk_mgmt_get_cclk_freq_in_hz()
                           2849 ;	-----------------------------------------
                           2850 ;	 function pwr_clk_mgmt_get_cclk_freq_in_hz
                           2851 ;	-----------------------------------------
   0942                    2852 _pwr_clk_mgmt_get_cclk_freq_in_hz:
                           2853 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:48: uint8_t divider = (CLKCTRL & CLKCTRL_CLK_FREQ_MASK) >> CLKCTRL_CLK_FREQ_SHIFT;
   0942 74 07         [12] 2854 	mov	a,#0x07
   0944 55 A3         [12] 2855 	anl	a,_CLKCTRL
   0946 FF            [12] 2856 	mov	r7,a
                           2857 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:50: uint32_t cclk_freq_hz = CCLK_MAX_FREQ_HZ;
   0947 90r00r4A      [24] 2858 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156
   094A E4            [12] 2859 	clr	a
   094B F0            [24] 2860 	movx	@dptr,a
   094C 74 24         [12] 2861 	mov	a,#0x24
   094E A3            [24] 2862 	inc	dptr
   094F F0            [24] 2863 	movx	@dptr,a
   0950 74 F4         [12] 2864 	mov	a,#0xF4
   0952 A3            [24] 2865 	inc	dptr
   0953 F0            [24] 2866 	movx	@dptr,a
   0954 E4            [12] 2867 	clr	a
   0955 A3            [24] 2868 	inc	dptr
   0956 F0            [24] 2869 	movx	@dptr,a
                           2870 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:52: for(i = 0; i < divider; i++)
   0957 7E 00         [12] 2871 	mov	r6,#0x00
   0959                    2872 00103$:
   0959 C3            [12] 2873 	clr	c
   095A EE            [12] 2874 	mov	a,r6
   095B 9F            [12] 2875 	subb	a,r7
   095C 50 29         [24] 2876 	jnc	00101$
                           2877 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:54: cclk_freq_hz /= 2;
   095E 90r00r4A      [24] 2878 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156
   0961 E0            [24] 2879 	movx	a,@dptr
   0962 FA            [12] 2880 	mov	r2,a
   0963 A3            [24] 2881 	inc	dptr
   0964 E0            [24] 2882 	movx	a,@dptr
   0965 FB            [12] 2883 	mov	r3,a
   0966 A3            [24] 2884 	inc	dptr
   0967 E0            [24] 2885 	movx	a,@dptr
   0968 FC            [12] 2886 	mov	r4,a
   0969 A3            [24] 2887 	inc	dptr
   096A E0            [24] 2888 	movx	a,@dptr
   096B C3            [12] 2889 	clr	c
   096C 13            [12] 2890 	rrc	a
   096D FD            [12] 2891 	mov	r5,a
   096E EC            [12] 2892 	mov	a,r4
   096F 13            [12] 2893 	rrc	a
   0970 FC            [12] 2894 	mov	r4,a
   0971 EB            [12] 2895 	mov	a,r3
   0972 13            [12] 2896 	rrc	a
   0973 FB            [12] 2897 	mov	r3,a
   0974 EA            [12] 2898 	mov	a,r2
   0975 13            [12] 2899 	rrc	a
   0976 FA            [12] 2900 	mov	r2,a
   0977 90r00r4A      [24] 2901 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156
   097A F0            [24] 2902 	movx	@dptr,a
   097B EB            [12] 2903 	mov	a,r3
   097C A3            [24] 2904 	inc	dptr
   097D F0            [24] 2905 	movx	@dptr,a
   097E EC            [12] 2906 	mov	a,r4
   097F A3            [24] 2907 	inc	dptr
   0980 F0            [24] 2908 	movx	@dptr,a
   0981 ED            [12] 2909 	mov	a,r5
   0982 A3            [24] 2910 	inc	dptr
   0983 F0            [24] 2911 	movx	@dptr,a
                           2912 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:52: for(i = 0; i < divider; i++)
   0984 0E            [12] 2913 	inc	r6
   0985 80 D2         [24] 2914 	sjmp	00103$
   0987                    2915 00101$:
                           2916 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:57: return cclk_freq_hz;
   0987 90r00r4A      [24] 2917 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156
   098A E0            [24] 2918 	movx	a,@dptr
   098B FC            [12] 2919 	mov	r4,a
   098C A3            [24] 2920 	inc	dptr
   098D E0            [24] 2921 	movx	a,@dptr
   098E FD            [12] 2922 	mov	r5,a
   098F A3            [24] 2923 	inc	dptr
   0990 E0            [24] 2924 	movx	a,@dptr
   0991 FE            [12] 2925 	mov	r6,a
   0992 A3            [24] 2926 	inc	dptr
   0993 E0            [24] 2927 	movx	a,@dptr
   0994 8C 82         [24] 2928 	mov	dpl,r4
   0996 8D 83         [24] 2929 	mov	dph,r5
   0998 8E F0         [24] 2930 	mov	b,r6
   099A 22            [24] 2931 	ret
                           2932 ;------------------------------------------------------------
                           2933 ;Allocation info for local variables in function 'watchdog_set_wdsv_count'
                           2934 ;------------------------------------------------------------
                           2935 ;wdsv_value                Allocated with name '_watchdog_set_wdsv_count_wdsv_value_1_159'
                           2936 ;------------------------------------------------------------
                           2937 ;	../src/watchdog/src/watchdog_set_wdsv_count.c:46: void watchdog_set_wdsv_count(uint16_t wdsv_value)
                           2938 ;	-----------------------------------------
                           2939 ;	 function watchdog_set_wdsv_count
                           2940 ;	-----------------------------------------
   099B                    2941 _watchdog_set_wdsv_count:
   099B AF 83         [24] 2942 	mov	r7,dph
   099D E5 82         [12] 2943 	mov	a,dpl
   099F 90r00r4E      [24] 2944 	mov	dptr,#_watchdog_set_wdsv_count_wdsv_value_1_159
   09A2 F0            [24] 2945 	movx	@dptr,a
   09A3 EF            [12] 2946 	mov	a,r7
   09A4 A3            [24] 2947 	inc	dptr
   09A5 F0            [24] 2948 	movx	@dptr,a
                           2949 ;	../src/watchdog/src/watchdog_set_wdsv_count.c:49: WDSV = (uint8_t)wdsv_value;
   09A6 90r00r4E      [24] 2950 	mov	dptr,#_watchdog_set_wdsv_count_wdsv_value_1_159
   09A9 E0            [24] 2951 	movx	a,@dptr
   09AA FE            [12] 2952 	mov	r6,a
   09AB A3            [24] 2953 	inc	dptr
   09AC E0            [24] 2954 	movx	a,@dptr
   09AD FF            [12] 2955 	mov	r7,a
   09AE 8E AF         [24] 2956 	mov	_WDSV,r6
                           2957 ;	../src/watchdog/src/watchdog_set_wdsv_count.c:50: WDSV = (uint8_t)(wdsv_value >> 8);
   09B0 8F AF         [24] 2958 	mov	_WDSV,r7
   09B2 22            [24] 2959 	ret
                           2960 ;------------------------------------------------------------
                           2961 ;Allocation info for local variables in function 'watchdog_start_and_set_timeout_in_ms'
                           2962 ;------------------------------------------------------------
                           2963 ;milliseconds              Allocated with name '_watchdog_start_and_set_timeout_in_ms_milliseconds_1_161'
                           2964 ;wd_value                  Allocated with name '_watchdog_start_and_set_timeout_in_ms_wd_value_1_162'
                           2965 ;------------------------------------------------------------
                           2966 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:50: uint16_t watchdog_start_and_set_timeout_in_ms(uint32_t milliseconds)
                           2967 ;	-----------------------------------------
                           2968 ;	 function watchdog_start_and_set_timeout_in_ms
                           2969 ;	-----------------------------------------
   09B3                    2970 _watchdog_start_and_set_timeout_in_ms:
   09B3 AF 82         [24] 2971 	mov	r7,dpl
   09B5 AE 83         [24] 2972 	mov	r6,dph
   09B7 AD F0         [24] 2973 	mov	r5,b
   09B9 FC            [12] 2974 	mov	r4,a
   09BA 90r00r50      [24] 2975 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_milliseconds_1_161
   09BD EF            [12] 2976 	mov	a,r7
   09BE F0            [24] 2977 	movx	@dptr,a
   09BF EE            [12] 2978 	mov	a,r6
   09C0 A3            [24] 2979 	inc	dptr
   09C1 F0            [24] 2980 	movx	@dptr,a
   09C2 ED            [12] 2981 	mov	a,r5
   09C3 A3            [24] 2982 	inc	dptr
   09C4 F0            [24] 2983 	movx	@dptr,a
   09C5 EC            [12] 2984 	mov	a,r4
   09C6 A3            [24] 2985 	inc	dptr
   09C7 F0            [24] 2986 	movx	@dptr,a
                           2987 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:52: uint16_t wd_value = 0;
   09C8 90r00r54      [24] 2988 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_wd_value_1_162
   09CB E4            [12] 2989 	clr	a
   09CC F0            [24] 2990 	movx	@dptr,a
   09CD E4            [12] 2991 	clr	a
   09CE A3            [24] 2992 	inc	dptr
   09CF F0            [24] 2993 	movx	@dptr,a
                           2994 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:55: if(!pwr_clk_mgmt_is_clklf_enabled())
   09D0 74 07         [12] 2995 	mov	a,#0x07
   09D2 55 AD         [12] 2996 	anl	a,_CLKLFCTRL
   09D4 FF            [12] 2997 	mov	r7,a
   09D5 BF 07 0B      [24] 2998 	cjne	r7,#0x07,00105$
                           2999 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:58: pwr_clk_mgmt_clklf_configure(PWR_CLK_MGMT_CLKLF_CONFIG_OPTION_CLK_SRC_XOSC16M);
   09D8 75 82 02      [24] 3000 	mov	dpl,#0x02
   09DB 12r09r2D      [24] 3001 	lcall	_pwr_clk_mgmt_clklf_configure
                           3002 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:59: pwr_clk_mgmt_wait_until_clklf_is_ready();
   09DE                    3003 00101$:
   09DE E5 AD         [12] 3004 	mov	a,_CLKLFCTRL
   09E0 30 E6 FB      [24] 3005 	jnb	acc.6,00101$
   09E3                    3006 00105$:
                           3007 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:63: if(milliseconds < 511992)
   09E3 90r00r50      [24] 3008 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_milliseconds_1_161
   09E6 E0            [24] 3009 	movx	a,@dptr
   09E7 FC            [12] 3010 	mov	r4,a
   09E8 A3            [24] 3011 	inc	dptr
   09E9 E0            [24] 3012 	movx	a,@dptr
   09EA FD            [12] 3013 	mov	r5,a
   09EB A3            [24] 3014 	inc	dptr
   09EC E0            [24] 3015 	movx	a,@dptr
   09ED FE            [12] 3016 	mov	r6,a
   09EE A3            [24] 3017 	inc	dptr
   09EF E0            [24] 3018 	movx	a,@dptr
   09F0 FF            [12] 3019 	mov	r7,a
   09F1 C3            [12] 3020 	clr	c
   09F2 EC            [12] 3021 	mov	a,r4
   09F3 94 F8         [12] 3022 	subb	a,#0xF8
   09F5 ED            [12] 3023 	mov	a,r5
   09F6 94 CF         [12] 3024 	subb	a,#0xCF
   09F8 EE            [12] 3025 	mov	a,r6
   09F9 94 07         [12] 3026 	subb	a,#0x07
   09FB EF            [12] 3027 	mov	a,r7
   09FC 94 00         [12] 3028 	subb	a,#0x00
   09FE 50 52         [24] 3029 	jnc	00107$
                           3030 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:90: wd_value = (uint16_t)(((uint32_t)(milliseconds * ((uint32_t)128)) + (uint32_t)500) / ((uint32_t)1000));
   0A00 EF            [12] 3031 	mov	a,r7
   0A01 54 01         [12] 3032 	anl	a,#0x01
   0A03 A2 E0         [12] 3033 	mov	c,acc.0
   0A05 CE            [12] 3034 	xch	a,r6
   0A06 13            [12] 3035 	rrc	a
   0A07 CE            [12] 3036 	xch	a,r6
   0A08 13            [12] 3037 	rrc	a
   0A09 CE            [12] 3038 	xch	a,r6
   0A0A FF            [12] 3039 	mov	r7,a
   0A0B ED            [12] 3040 	mov	a,r5
   0A0C C3            [12] 3041 	clr	c
   0A0D 13            [12] 3042 	rrc	a
   0A0E 4E            [12] 3043 	orl	a,r6
   0A0F FE            [12] 3044 	mov	r6,a
   0A10 ED            [12] 3045 	mov	a,r5
   0A11 54 01         [12] 3046 	anl	a,#0x01
   0A13 A2 E0         [12] 3047 	mov	c,acc.0
   0A15 CC            [12] 3048 	xch	a,r4
   0A16 13            [12] 3049 	rrc	a
   0A17 CC            [12] 3050 	xch	a,r4
   0A18 13            [12] 3051 	rrc	a
   0A19 CC            [12] 3052 	xch	a,r4
   0A1A FD            [12] 3053 	mov	r5,a
   0A1B 74 F4         [12] 3054 	mov	a,#0xF4
   0A1D 2C            [12] 3055 	add	a,r4
   0A1E FC            [12] 3056 	mov	r4,a
   0A1F 74 01         [12] 3057 	mov	a,#0x01
   0A21 3D            [12] 3058 	addc	a,r5
   0A22 FD            [12] 3059 	mov	r5,a
   0A23 E4            [12] 3060 	clr	a
   0A24 3E            [12] 3061 	addc	a,r6
   0A25 FE            [12] 3062 	mov	r6,a
   0A26 E4            [12] 3063 	clr	a
   0A27 3F            [12] 3064 	addc	a,r7
   0A28 FF            [12] 3065 	mov	r7,a
   0A29 90r00r00      [24] 3066 	mov	dptr,#__divulong_PARM_2
   0A2C 74 E8         [12] 3067 	mov	a,#0xE8
   0A2E F0            [24] 3068 	movx	@dptr,a
   0A2F 74 03         [12] 3069 	mov	a,#0x03
   0A31 A3            [24] 3070 	inc	dptr
   0A32 F0            [24] 3071 	movx	@dptr,a
   0A33 E4            [12] 3072 	clr	a
   0A34 A3            [24] 3073 	inc	dptr
   0A35 F0            [24] 3074 	movx	@dptr,a
   0A36 E4            [12] 3075 	clr	a
   0A37 A3            [24] 3076 	inc	dptr
   0A38 F0            [24] 3077 	movx	@dptr,a
   0A39 8C 82         [24] 3078 	mov	dpl,r4
   0A3B 8D 83         [24] 3079 	mov	dph,r5
   0A3D 8E F0         [24] 3080 	mov	b,r6
   0A3F EF            [12] 3081 	mov	a,r7
   0A40 12r00r00      [24] 3082 	lcall	__divulong
   0A43 AC 82         [24] 3083 	mov	r4,dpl
   0A45 AD 83         [24] 3084 	mov	r5,dph
   0A47 AE F0         [24] 3085 	mov	r6,b
   0A49 FF            [12] 3086 	mov	r7,a
   0A4A 90r00r54      [24] 3087 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_wd_value_1_162
   0A4D EC            [12] 3088 	mov	a,r4
   0A4E F0            [24] 3089 	movx	@dptr,a
   0A4F ED            [12] 3090 	mov	a,r5
   0A50 A3            [24] 3091 	inc	dptr
   0A51 F0            [24] 3092 	movx	@dptr,a
   0A52                    3093 00107$:
                           3094 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:93: watchdog_set_wdsv_count(wd_value);
   0A52 90r00r54      [24] 3095 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_wd_value_1_162
   0A55 E0            [24] 3096 	movx	a,@dptr
   0A56 FE            [12] 3097 	mov	r6,a
   0A57 A3            [24] 3098 	inc	dptr
   0A58 E0            [24] 3099 	movx	a,@dptr
   0A59 FF            [12] 3100 	mov	r7,a
   0A5A 8E 82         [24] 3101 	mov	dpl,r6
   0A5C 8F 83         [24] 3102 	mov	dph,r7
   0A5E C0 07         [24] 3103 	push	ar7
   0A60 C0 06         [24] 3104 	push	ar6
   0A62 12r09r9B      [24] 3105 	lcall	_watchdog_set_wdsv_count
   0A65 D0 06         [24] 3106 	pop	ar6
   0A67 D0 07         [24] 3107 	pop	ar7
                           3108 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:95: return wd_value;
   0A69 8E 82         [24] 3109 	mov	dpl,r6
   0A6B 8F 83         [24] 3110 	mov	dph,r7
   0A6D 22            [24] 3111 	ret
                           3112 ;------------------------------------------------------------
                           3113 ;Allocation info for local variables in function 'interrupt_configure_ifp'
                           3114 ;------------------------------------------------------------
                           3115 ;ifp_int_config_options    Allocated with name '_interrupt_configure_ifp_PARM_2'
                           3116 ;interrupt_ifp_input       Allocated with name '_interrupt_configure_ifp_interrupt_ifp_input_1_165'
                           3117 ;------------------------------------------------------------
                           3118 ;	../src/interrupt/src/interrupt_configure_ifp.c:57: bool interrupt_configure_ifp(interrupt_ifp_input_t interrupt_ifp_input, uint8_t ifp_int_config_options)
                           3119 ;	-----------------------------------------
                           3120 ;	 function interrupt_configure_ifp
                           3121 ;	-----------------------------------------
   0A6E                    3122 _interrupt_configure_ifp:
   0A6E E5 82         [12] 3123 	mov	a,dpl
   0A70 90r00r57      [24] 3124 	mov	dptr,#_interrupt_configure_ifp_interrupt_ifp_input_1_165
   0A73 F0            [24] 3125 	movx	@dptr,a
                           3126 ;	../src/interrupt/src/interrupt_configure_ifp.c:60: if(ifp_int_config_options & INTERRUPT_IFP_CONFIG_OPTION_ENABLE)
   0A74 90r00r56      [24] 3127 	mov	dptr,#_interrupt_configure_ifp_PARM_2
   0A77 E0            [24] 3128 	movx	a,@dptr
   0A78 FF            [12] 3129 	mov	r7,a
   0A79 30 E7 41      [24] 3130 	jnb	acc.7,00116$
                           3131 ;	../src/interrupt/src/interrupt_configure_ifp.c:63: if(interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT0)
   0A7C 90r00r57      [24] 3132 	mov	dptr,#_interrupt_configure_ifp_interrupt_ifp_input_1_165
   0A7F E0            [24] 3133 	movx	a,@dptr
   0A80 FE            [12] 3134 	mov	r6,a
   0A81 BE 08 0B      [24] 3135 	cjne	r6,#0x08,00108$
                           3136 ;	../src/interrupt/src/interrupt_configure_ifp.c:65: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK) | INTERRUPT_IFP_INPUT_GPINT0;
   0A84 AD A6         [24] 3137 	mov	r5,_INTEXP
   0A86 74 C7         [12] 3138 	mov	a,#0xC7
   0A88 5D            [12] 3139 	anl	a,r5
   0A89 44 08         [12] 3140 	orl	a,#0x08
   0A8B F5 A6         [12] 3141 	mov	_INTEXP,a
   0A8D 80 20         [24] 3142 	sjmp	00109$
   0A8F                    3143 00108$:
                           3144 ;	../src/interrupt/src/interrupt_configure_ifp.c:67: else if(interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT1)
   0A8F BE 10 0B      [24] 3145 	cjne	r6,#0x10,00105$
                           3146 ;	../src/interrupt/src/interrupt_configure_ifp.c:69: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK) | INTERRUPT_IFP_INPUT_GPINT1;
   0A92 AD A6         [24] 3147 	mov	r5,_INTEXP
   0A94 74 C7         [12] 3148 	mov	a,#0xC7
   0A96 5D            [12] 3149 	anl	a,r5
   0A97 44 10         [12] 3150 	orl	a,#0x10
   0A99 F5 A6         [12] 3151 	mov	_INTEXP,a
   0A9B 80 12         [24] 3152 	sjmp	00109$
   0A9D                    3153 00105$:
                           3154 ;	../src/interrupt/src/interrupt_configure_ifp.c:71: else if(interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT2)
   0A9D BE 20 0B      [24] 3155 	cjne	r6,#0x20,00102$
                           3156 ;	../src/interrupt/src/interrupt_configure_ifp.c:73: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK) | INTERRUPT_IFP_INPUT_GPINT2;
   0AA0 AE A6         [24] 3157 	mov	r6,_INTEXP
   0AA2 74 C7         [12] 3158 	mov	a,#0xC7
   0AA4 5E            [12] 3159 	anl	a,r6
   0AA5 44 20         [12] 3160 	orl	a,#0x20
   0AA7 F5 A6         [12] 3161 	mov	_INTEXP,a
   0AA9 80 04         [24] 3162 	sjmp	00109$
   0AAB                    3163 00102$:
                           3164 ;	../src/interrupt/src/interrupt_configure_ifp.c:78: return false;
   0AAB 75 82 00      [24] 3165 	mov	dpl,#0x00
   0AAE 22            [24] 3166 	ret
   0AAF                    3167 00109$:
                           3168 ;	../src/interrupt/src/interrupt_configure_ifp.c:82: TCON = (TCON & ~INTERRUPT_IFP_CONFIG_TCON_MASK) | (ifp_int_config_options & INTERRUPT_IFP_CONFIG_TCON_MASK);
   0AAF AE 88         [24] 3169 	mov	r6,_TCON
   0AB1 53 06 FE      [24] 3170 	anl	ar6,#0xFE
   0AB4 53 07 01      [24] 3171 	anl	ar7,#0x01
   0AB7 EF            [12] 3172 	mov	a,r7
   0AB8 4E            [12] 3173 	orl	a,r6
   0AB9 F5 88         [12] 3174 	mov	_TCON,a
   0ABB 80 1F         [24] 3175 	sjmp	00117$
   0ABD                    3176 00116$:
                           3177 ;	../src/interrupt/src/interrupt_configure_ifp.c:87: if((interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT0) || (interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT1) || (interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT2))
   0ABD 90r00r57      [24] 3178 	mov	dptr,#_interrupt_configure_ifp_interrupt_ifp_input_1_165
   0AC0 E0            [24] 3179 	movx	a,@dptr
   0AC1 FF            [12] 3180 	mov	r7,a
   0AC2 BF 08 02      [24] 3181 	cjne	r7,#0x08,00145$
   0AC5 80 08         [24] 3182 	sjmp	00110$
   0AC7                    3183 00145$:
   0AC7 BF 10 02      [24] 3184 	cjne	r7,#0x10,00146$
   0ACA 80 03         [24] 3185 	sjmp	00110$
   0ACC                    3186 00146$:
   0ACC BF 20 09      [24] 3187 	cjne	r7,#0x20,00111$
   0ACF                    3188 00110$:
                           3189 ;	../src/interrupt/src/interrupt_configure_ifp.c:89: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK);
   0ACF AF A6         [24] 3190 	mov	r7,_INTEXP
   0AD1 74 C7         [12] 3191 	mov	a,#0xC7
   0AD3 5F            [12] 3192 	anl	a,r7
   0AD4 F5 A6         [12] 3193 	mov	_INTEXP,a
   0AD6 80 04         [24] 3194 	sjmp	00117$
   0AD8                    3195 00111$:
                           3196 ;	../src/interrupt/src/interrupt_configure_ifp.c:94: return false;
   0AD8 75 82 00      [24] 3197 	mov	dpl,#0x00
   0ADB 22            [24] 3198 	ret
   0ADC                    3199 00117$:
                           3200 ;	../src/interrupt/src/interrupt_configure_ifp.c:98: return true;
   0ADC 75 82 01      [24] 3201 	mov	dpl,#0x01
   0ADF 22            [24] 3202 	ret
                           3203 ;------------------------------------------------------------
                           3204 ;Allocation info for local variables in function 'adc_configure'
                           3205 ;------------------------------------------------------------
                           3206 ;adc_config_options        Allocated with name '_adc_configure_adc_config_options_1_179'
                           3207 ;------------------------------------------------------------
                           3208 ;	../src/adc/src/adc_configure.c:54: void adc_configure(unsigned int adc_config_options)
                           3209 ;	-----------------------------------------
                           3210 ;	 function adc_configure
                           3211 ;	-----------------------------------------
   0AE0                    3212 _adc_configure:
   0AE0 AF 83         [24] 3213 	mov	r7,dph
   0AE2 E5 82         [12] 3214 	mov	a,dpl
   0AE4 90r00r58      [24] 3215 	mov	dptr,#_adc_configure_adc_config_options_1_179
   0AE7 F0            [24] 3216 	movx	@dptr,a
   0AE8 EF            [12] 3217 	mov	a,r7
   0AE9 A3            [24] 3218 	inc	dptr
   0AEA F0            [24] 3219 	movx	@dptr,a
                           3220 ;	../src/adc/src/adc_configure.c:57: ADCCON1 = (adc_config_options >> 8) & ADC_CONFIG_OPTION_ADCCON1_WRITE_MASK;
   0AEB 90r00r58      [24] 3221 	mov	dptr,#_adc_configure_adc_config_options_1_179
   0AEE E0            [24] 3222 	movx	a,@dptr
   0AEF FE            [12] 3223 	mov	r6,a
   0AF0 A3            [24] 3224 	inc	dptr
   0AF1 E0            [24] 3225 	movx	a,@dptr
   0AF2 FD            [12] 3226 	mov	r5,a
   0AF3 74 03         [12] 3227 	mov	a,#0x03
   0AF5 5D            [12] 3228 	anl	a,r5
   0AF6 F5 D3         [12] 3229 	mov	_ADCCON1,a
                           3230 ;	../src/adc/src/adc_configure.c:58: ADCCON2 = (adc_config_options)      & ADC_CONFIG_OPTION_ADCCON2_WRITE_MASK;
   0AF8 8E D2         [24] 3231 	mov	_ADCCON2,r6
                           3232 ;	../src/adc/src/adc_configure.c:59: ADCCON3 = (adc_config_options >> 8) & ADC_CONFIG_OPTION_ADCCON3_WRITE_MASK;
   0AFA 74 E0         [12] 3233 	mov	a,#0xE0
   0AFC 5D            [12] 3234 	anl	a,r5
   0AFD F5 D1         [12] 3235 	mov	_ADCCON3,a
   0AFF 22            [24] 3236 	ret
                           3237 ;------------------------------------------------------------
                           3238 ;Allocation info for local variables in function 'adc_set_input_channel'
                           3239 ;------------------------------------------------------------
                           3240 ;adc_channel               Allocated with name '_adc_set_input_channel_adc_channel_1_181'
                           3241 ;------------------------------------------------------------
                           3242 ;	../src/adc/src/adc_set_input_channel.c:46: void adc_set_input_channel(adc_channel_t adc_channel)
                           3243 ;	-----------------------------------------
                           3244 ;	 function adc_set_input_channel
                           3245 ;	-----------------------------------------
   0B00                    3246 _adc_set_input_channel:
   0B00 E5 82         [12] 3247 	mov	a,dpl
                           3248 ;	../src/adc/src/adc_set_input_channel.c:49: adc_channel &= (ADCCON1_CHAN_SEL_MASK >> ADCCON1_CHAN_SEL_SHIFT);
   0B02 90r00r5A      [24] 3249 	mov	dptr,#_adc_set_input_channel_adc_channel_1_181
   0B05 F0            [24] 3250 	movx	@dptr,a
   0B06 FF            [12] 3251 	mov	r7,a
   0B07 90r00r5A      [24] 3252 	mov	dptr,#_adc_set_input_channel_adc_channel_1_181
   0B0A 74 0F         [12] 3253 	mov	a,#0x0F
   0B0C 5F            [12] 3254 	anl	a,r7
   0B0D F0            [24] 3255 	movx	@dptr,a
                           3256 ;	../src/adc/src/adc_set_input_channel.c:52: ADCCON1 = (ADCCON1 & ~ADCCON1_CHAN_SEL_MASK) | (adc_channel << ADCCON1_CHAN_SEL_SHIFT);
   0B0E AF D3         [24] 3257 	mov	r7,_ADCCON1
   0B10 53 07 C3      [24] 3258 	anl	ar7,#0xC3
   0B13 90r00r5A      [24] 3259 	mov	dptr,#_adc_set_input_channel_adc_channel_1_181
   0B16 E0            [24] 3260 	movx	a,@dptr
   0B17 25 E0         [12] 3261 	add	a,acc
   0B19 25 E0         [12] 3262 	add	a,acc
   0B1B 4F            [12] 3263 	orl	a,r7
   0B1C F5 D3         [12] 3264 	mov	_ADCCON1,a
   0B1E 22            [24] 3265 	ret
                           3266 ;------------------------------------------------------------
                           3267 ;Allocation info for local variables in function 'adc_start_single_conversion'
                           3268 ;------------------------------------------------------------
                           3269 ;adc_channel               Allocated with name '_adc_start_single_conversion_adc_channel_1_183'
                           3270 ;------------------------------------------------------------
                           3271 ;	../src/adc/src/adc_start_single_conversion.c:47: void adc_start_single_conversion(adc_channel_t adc_channel)
                           3272 ;	-----------------------------------------
                           3273 ;	 function adc_start_single_conversion
                           3274 ;	-----------------------------------------
   0B1F                    3275 _adc_start_single_conversion:
   0B1F E5 82         [12] 3276 	mov	a,dpl
                           3277 ;	../src/adc/src/adc_start_single_conversion.c:49: adc_set_input_channel(adc_channel);
   0B21 90r00r5B      [24] 3278 	mov	dptr,#_adc_start_single_conversion_adc_channel_1_183
   0B24 F0            [24] 3279 	movx	@dptr,a
   0B25 F5 82         [12] 3280 	mov	dpl,a
   0B27 12r0Br00      [24] 3281 	lcall	_adc_set_input_channel
                           3282 ;	../src/adc/src/adc_start_single_conversion.c:52: adc_power_up();
   0B2A 43 D3 80      [24] 3283 	orl	_ADCCON1,#0x80
                           3284 ;	../src/adc/src/adc_start_single_conversion.c:53: nop(); nop(); nop(); nop(); //4 clock cycles must elapse before busy flag is set (datasheet v1.3, p. 165)
   0B2D 00            [12] 3285 	nop 
   0B2E 00            [12] 3286 	nop 
   0B2F 00            [12] 3287 	nop 
   0B30 00            [12] 3288 	nop 
   0B31 22            [24] 3289 	ret
                           3290 ;------------------------------------------------------------
                           3291 ;Allocation info for local variables in function 'adc_start_single_conversion_get_value'
                           3292 ;------------------------------------------------------------
                           3293 ;adc_channel               Allocated with name '_adc_start_single_conversion_get_value_adc_channel_1_185'
                           3294 ;------------------------------------------------------------
                           3295 ;	../src/adc/src/adc_start_single_conversion_get_value.c:48: uint16_t adc_start_single_conversion_get_value(adc_channel_t adc_channel)
                           3296 ;	-----------------------------------------
                           3297 ;	 function adc_start_single_conversion_get_value
                           3298 ;	-----------------------------------------
   0B32                    3299 _adc_start_single_conversion_get_value:
   0B32 E5 82         [12] 3300 	mov	a,dpl
                           3301 ;	../src/adc/src/adc_start_single_conversion_get_value.c:50: adc_start_single_conversion(adc_channel);
   0B34 90r00r5C      [24] 3302 	mov	dptr,#_adc_start_single_conversion_get_value_adc_channel_1_185
   0B37 F0            [24] 3303 	movx	@dptr,a
   0B38 F5 82         [12] 3304 	mov	dpl,a
   0B3A 12r0Br1F      [24] 3305 	lcall	_adc_start_single_conversion
                           3306 ;	../src/adc/src/adc_start_single_conversion_get_value.c:52: while(adc_is_conversion_in_progress());
   0B3D                    3307 00101$:
   0B3D 74 40         [12] 3308 	mov	a,#0x40
   0B3F 55 D3         [12] 3309 	anl	a,_ADCCON1
   0B41 FF            [12] 3310 	mov	r7,a
   0B42 BF 40 02      [24] 3311 	cjne	r7,#0x40,00112$
   0B45 80 F6         [24] 3312 	sjmp	00101$
   0B47                    3313 00112$:
                           3314 ;	../src/adc/src/adc_start_single_conversion_get_value.c:54: return adc_get_result();
   0B47 85 D5 82      [24] 3315 	mov	dpl,((_ADCDAT >> 0) & 0xFF)
   0B4A 85 D4 83      [24] 3316 	mov	dph,((_ADCDAT >> 8) & 0xFF)
   0B4D 22            [24] 3317 	ret
                           3318 ;------------------------------------------------------------
                           3319 ;Allocation info for local variables in function 'timer0_configure'
                           3320 ;------------------------------------------------------------
                           3321 ;t0_val                    Allocated with name '_timer0_configure_PARM_2'
                           3322 ;timer0_config_options     Allocated with name '_timer0_configure_timer0_config_options_1_188'
                           3323 ;------------------------------------------------------------
                           3324 ;	../src/timer0/src/timer0_configure.c:53: void timer0_configure(uint8_t timer0_config_options, uint16_t t0_val)
                           3325 ;	-----------------------------------------
                           3326 ;	 function timer0_configure
                           3327 ;	-----------------------------------------
   0B4E                    3328 _timer0_configure:
   0B4E E5 82         [12] 3329 	mov	a,dpl
                           3330 ;	../src/timer0/src/timer0_configure.c:56: if((timer0_config_options & TMOD_MODE0_MASK) == TIMER0_CONFIG_OPTION_MODE_2_8_BIT_AUTO_RLD_TMR)
   0B50 90r00r5F      [24] 3331 	mov	dptr,#_timer0_configure_timer0_config_options_1_188
   0B53 F0            [24] 3332 	movx	@dptr,a
   0B54 FF            [12] 3333 	mov	r7,a
   0B55 74 03         [12] 3334 	mov	a,#0x03
   0B57 5F            [12] 3335 	anl	a,r7
   0B58 FE            [12] 3336 	mov	r6,a
   0B59 BE 02 0E      [24] 3337 	cjne	r6,#0x02,00102$
                           3338 ;	../src/timer0/src/timer0_configure.c:58: TH0 = (uint8_t)t0_val;
   0B5C 90r00r5D      [24] 3339 	mov	dptr,#_timer0_configure_PARM_2
   0B5F E0            [24] 3340 	movx	a,@dptr
   0B60 FD            [12] 3341 	mov	r5,a
   0B61 A3            [24] 3342 	inc	dptr
   0B62 E0            [24] 3343 	movx	a,@dptr
   0B63 FE            [12] 3344 	mov	r6,a
   0B64 8D 8C         [24] 3345 	mov	_TH0,r5
                           3346 ;	../src/timer0/src/timer0_configure.c:59: TL0 = (uint8_t)t0_val;
   0B66 8D 8A         [24] 3347 	mov	_TL0,r5
   0B68 80 0A         [24] 3348 	sjmp	00103$
   0B6A                    3349 00102$:
                           3350 ;	../src/timer0/src/timer0_configure.c:63: timer0_set_t0_val(t0_val);
   0B6A 90r00r5D      [24] 3351 	mov	dptr,#_timer0_configure_PARM_2
   0B6D E0            [24] 3352 	movx	a,@dptr
   0B6E F5 8A         [12] 3353 	mov	((_T0 >> 0) & 0xFF),a
   0B70 A3            [24] 3354 	inc	dptr
   0B71 E0            [24] 3355 	movx	a,@dptr
   0B72 F5 8C         [12] 3356 	mov	((_T0 >> 8) & 0xFF),a
   0B74                    3357 00103$:
                           3358 ;	../src/timer0/src/timer0_configure.c:67: TMOD = (TMOD & ~TIMER0_CONFIG_OPTION_TMOD_MASK) | (timer0_config_options & TIMER0_CONFIG_OPTION_TMOD_MASK);
   0B74 AE 89         [24] 3359 	mov	r6,_TMOD
   0B76 53 06 F0      [24] 3360 	anl	ar6,#0xF0
   0B79 53 07 0F      [24] 3361 	anl	ar7,#0x0F
   0B7C EF            [12] 3362 	mov	a,r7
   0B7D 4E            [12] 3363 	orl	a,r6
   0B7E F5 89         [12] 3364 	mov	_TMOD,a
   0B80 22            [24] 3365 	ret
                           3366 ;------------------------------------------------------------
                           3367 ;Allocation info for local variables in function 'timer1_configure'
                           3368 ;------------------------------------------------------------
                           3369 ;t1_val                    Allocated with name '_timer1_configure_PARM_2'
                           3370 ;timer1_config_options     Allocated with name '_timer1_configure_timer1_config_options_1_193'
                           3371 ;------------------------------------------------------------
                           3372 ;	../src/timer1/src/timer1_configure.c:53: void timer1_configure(uint8_t timer1_config_options, uint16_t t1_val)
                           3373 ;	-----------------------------------------
                           3374 ;	 function timer1_configure
                           3375 ;	-----------------------------------------
   0B81                    3376 _timer1_configure:
   0B81 E5 82         [12] 3377 	mov	a,dpl
                           3378 ;	../src/timer1/src/timer1_configure.c:56: if((timer1_config_options & TMOD_MODE1_MASK) == TIMER1_CONFIG_OPTION_MODE_2_8_BIT_AUTO_RLD_TMR)
   0B83 90r00r62      [24] 3379 	mov	dptr,#_timer1_configure_timer1_config_options_1_193
   0B86 F0            [24] 3380 	movx	@dptr,a
   0B87 FF            [12] 3381 	mov	r7,a
   0B88 74 30         [12] 3382 	mov	a,#0x30
   0B8A 5F            [12] 3383 	anl	a,r7
   0B8B FE            [12] 3384 	mov	r6,a
   0B8C BE 20 0E      [24] 3385 	cjne	r6,#0x20,00102$
                           3386 ;	../src/timer1/src/timer1_configure.c:58: TH1 = (uint8_t)t1_val;
   0B8F 90r00r60      [24] 3387 	mov	dptr,#_timer1_configure_PARM_2
   0B92 E0            [24] 3388 	movx	a,@dptr
   0B93 FD            [12] 3389 	mov	r5,a
   0B94 A3            [24] 3390 	inc	dptr
   0B95 E0            [24] 3391 	movx	a,@dptr
   0B96 FE            [12] 3392 	mov	r6,a
   0B97 8D 8D         [24] 3393 	mov	_TH1,r5
                           3394 ;	../src/timer1/src/timer1_configure.c:59: TL1 = (uint8_t)t1_val;
   0B99 8D 8B         [24] 3395 	mov	_TL1,r5
   0B9B 80 0A         [24] 3396 	sjmp	00103$
   0B9D                    3397 00102$:
                           3398 ;	../src/timer1/src/timer1_configure.c:63: timer1_set_t1_val(t1_val);
   0B9D 90r00r60      [24] 3399 	mov	dptr,#_timer1_configure_PARM_2
   0BA0 E0            [24] 3400 	movx	a,@dptr
   0BA1 F5 8B         [12] 3401 	mov	((_T1 >> 0) & 0xFF),a
   0BA3 A3            [24] 3402 	inc	dptr
   0BA4 E0            [24] 3403 	movx	a,@dptr
   0BA5 F5 8D         [12] 3404 	mov	((_T1 >> 8) & 0xFF),a
   0BA7                    3405 00103$:
                           3406 ;	../src/timer1/src/timer1_configure.c:67: TMOD = (TMOD & ~TIMER1_CONFIG_OPTION_TMOD_MASK) | (timer1_config_options & TIMER1_CONFIG_OPTION_TMOD_MASK);
   0BA7 AE 89         [24] 3407 	mov	r6,_TMOD
   0BA9 53 06 0F      [24] 3408 	anl	ar6,#0x0F
   0BAC 53 07 F0      [24] 3409 	anl	ar7,#0xF0
   0BAF EF            [12] 3410 	mov	a,r7
   0BB0 4E            [12] 3411 	orl	a,r6
   0BB1 F5 89         [12] 3412 	mov	_TMOD,a
   0BB3 22            [24] 3413 	ret
                           3414 ;------------------------------------------------------------
                           3415 ;Allocation info for local variables in function 'uart_configure_manual_baud_calc'
                           3416 ;------------------------------------------------------------
                           3417 ;s0rel_val_if_br_gen_or_th1_val_if_tmr1 Allocated with name '_uart_configure_manual_baud_calc_PARM_2'
                           3418 ;uart_config_options       Allocated with name '_uart_configure_manual_baud_calc_uart_config_options_1_203'
                           3419 ;------------------------------------------------------------
                           3420 ;	../src/uart/src/uart_configure_manual_baud_calc.c:55: void uart_configure_manual_baud_calc(uint8_t uart_config_options, uint16_t s0rel_val_if_br_gen_or_th1_val_if_tmr1)
                           3421 ;	-----------------------------------------
                           3422 ;	 function uart_configure_manual_baud_calc
                           3423 ;	-----------------------------------------
   0BB4                    3424 _uart_configure_manual_baud_calc:
   0BB4 E5 82         [12] 3425 	mov	a,dpl
                           3426 ;	../src/uart/src/uart_configure_manual_baud_calc.c:58: if(uart_config_options & UART_CONFIG_OPTION_BIT_SMOD_SET)
   0BB6 90r00r65      [24] 3427 	mov	dptr,#_uart_configure_manual_baud_calc_uart_config_options_1_203
   0BB9 F0            [24] 3428 	movx	@dptr,a
   0BBA FF            [12] 3429 	mov	r7,a
   0BBB 30 E2 05      [24] 3430 	jnb	acc.2,00102$
                           3431 ;	../src/uart/src/uart_configure_manual_baud_calc.c:60: reg_bits_set(PCON, PCON_SMOD);
   0BBE 43 87 80      [24] 3432 	orl	_PCON,#0x80
   0BC1 80 07         [24] 3433 	sjmp	00103$
   0BC3                    3434 00102$:
                           3435 ;	../src/uart/src/uart_configure_manual_baud_calc.c:64: reg_bits_clear(PCON, PCON_SMOD);
   0BC3 AE 87         [24] 3436 	mov	r6,_PCON
   0BC5 74 7F         [12] 3437 	mov	a,#0x7F
   0BC7 5E            [12] 3438 	anl	a,r6
   0BC8 F5 87         [12] 3439 	mov	_PCON,a
   0BCA                    3440 00103$:
                           3441 ;	../src/uart/src/uart_configure_manual_baud_calc.c:68: if(((uart_config_options & UART_CONFIG_OPTION_MODE_MASK) == UART_CONFIG_OPTION_MODE_1_UART_8_BIT) ||
   0BCA 74 C0         [12] 3442 	mov	a,#0xC0
   0BCC 5F            [12] 3443 	anl	a,r7
   0BCD FE            [12] 3444 	mov	r6,a
   0BCE BE 40 02      [24] 3445 	cjne	r6,#0x40,00122$
   0BD1 80 07         [24] 3446 	sjmp	00107$
   0BD3                    3447 00122$:
                           3448 ;	../src/uart/src/uart_configure_manual_baud_calc.c:69: ((uart_config_options & UART_CONFIG_OPTION_MODE_MASK) == UART_CONFIG_OPTION_MODE_3_UART_9_BIT))
   0BD3 74 C0         [12] 3449 	mov	a,#0xC0
   0BD5 5F            [12] 3450 	anl	a,r7
   0BD6 FE            [12] 3451 	mov	r6,a
   0BD7 BE C0 32      [24] 3452 	cjne	r6,#0xC0,00108$
   0BDA                    3453 00107$:
                           3454 ;	../src/uart/src/uart_configure_manual_baud_calc.c:72: if((uart_config_options & UART_CONFIG_OPTION_CLOCK_MASK) == UART_CONFIG_OPTION_CLOCK_FOR_MODES_1_3_USE_BR_GEN)
   0BDA 74 02         [12] 3455 	mov	a,#0x02
   0BDC 5F            [12] 3456 	anl	a,r7
   0BDD FE            [12] 3457 	mov	r6,a
   0BDE BE 02 0E      [24] 3458 	cjne	r6,#0x02,00105$
                           3459 ;	../src/uart/src/uart_configure_manual_baud_calc.c:74: S0REL = s0rel_val_if_br_gen_or_th1_val_if_tmr1; //set S0REL to the value requested
   0BE1 90r00r63      [24] 3460 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   0BE4 E0            [24] 3461 	movx	a,@dptr
   0BE5 F5 AA         [12] 3462 	mov	((_S0REL >> 0) & 0xFF),a
   0BE7 A3            [24] 3463 	inc	dptr
   0BE8 E0            [24] 3464 	movx	a,@dptr
   0BE9 F5 BA         [12] 3465 	mov	((_S0REL >> 8) & 0xFF),a
                           3466 ;	../src/uart/src/uart_configure_manual_baud_calc.c:75: sbit_set(ADCON_SB_BD); //enable BR generator
   0BEB D2 DF         [12] 3467 	setb _ADCON_SB_BD 
   0BED 80 1D         [24] 3468 	sjmp	00108$
   0BEF                    3469 00105$:
                           3470 ;	../src/uart/src/uart_configure_manual_baud_calc.c:79: sbit_clear(ADCON_SB_BD); //disable BR generator and use TMR1 overflow
   0BEF C2 DF         [12] 3471 	clr _ADCON_SB_BD 
                           3472 ;	../src/uart/src/uart_configure_manual_baud_calc.c:85: (uint8_t)s0rel_val_if_br_gen_or_th1_val_if_tmr1);
   0BF1 90r00r63      [24] 3473 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   0BF4 E0            [24] 3474 	movx	a,@dptr
   0BF5 FD            [12] 3475 	mov	r5,a
   0BF6 A3            [24] 3476 	inc	dptr
   0BF7 E0            [24] 3477 	movx	a,@dptr
   0BF8 90r00r60      [24] 3478 	mov	dptr,#_timer1_configure_PARM_2
   0BFB ED            [12] 3479 	mov	a,r5
   0BFC F0            [24] 3480 	movx	@dptr,a
   0BFD E4            [12] 3481 	clr	a
   0BFE A3            [24] 3482 	inc	dptr
   0BFF F0            [24] 3483 	movx	@dptr,a
   0C00 75 82 20      [24] 3484 	mov	dpl,#0x20
   0C03 C0 07         [24] 3485 	push	ar7
   0C05 12r0Br81      [24] 3486 	lcall	_timer1_configure
   0C08 D0 07         [24] 3487 	pop	ar7
                           3488 ;	../src/uart/src/uart_configure_manual_baud_calc.c:87: timer1_run(); //enable the timer
   0C0A D2 8E         [12] 3489 	setb _TCON_SB_TR1 
   0C0C                    3490 00108$:
                           3491 ;	../src/uart/src/uart_configure_manual_baud_calc.c:92: S0CON = uart_config_options & UART_CONFIG_OPTION_S0CON_MASK;
   0C0C 74 F0         [12] 3492 	mov	a,#0xF0
   0C0E 5F            [12] 3493 	anl	a,r7
   0C0F F5 98         [12] 3494 	mov	_S0CON,a
   0C11 22            [24] 3495 	ret
                           3496 ;------------------------------------------------------------
                           3497 ;Allocation info for local variables in function 'uart_calc_actual_baud_rate_from_s0rel'
                           3498 ;------------------------------------------------------------
                           3499 ;smod_bit_value            Allocated with name '_uart_calc_actual_baud_rate_from_s0rel_PARM_2'
                           3500 ;s0rel_reg_value           Allocated with name '_uart_calc_actual_baud_rate_from_s0rel_s0rel_reg_value_1_210'
                           3501 ;------------------------------------------------------------
                           3502 ;	../src/uart/src/uart_calc_actual_baud_rate_from_s0rel.c:48: uint32_t uart_calc_actual_baud_rate_from_s0rel(uint16_t s0rel_reg_value, bool smod_bit_value)
                           3503 ;	-----------------------------------------
                           3504 ;	 function uart_calc_actual_baud_rate_from_s0rel
                           3505 ;	-----------------------------------------
   0C12                    3506 _uart_calc_actual_baud_rate_from_s0rel:
   0C12 AF 83         [24] 3507 	mov	r7,dph
   0C14 E5 82         [12] 3508 	mov	a,dpl
   0C16 90r00r67      [24] 3509 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_s0rel_reg_value_1_210
   0C19 F0            [24] 3510 	movx	@dptr,a
   0C1A EF            [12] 3511 	mov	a,r7
   0C1B A3            [24] 3512 	inc	dptr
   0C1C F0            [24] 3513 	movx	@dptr,a
                           3514 ;	../src/uart/src/uart_calc_actual_baud_rate_from_s0rel.c:57: return (uint32_t)(((((uint32_t)(2 * ((smod_bit_value != 0) ? 2 : 1) * pwr_clk_mgmt_get_cclk_freq_in_hz())) / ((uint32_t)(64 * (1024 - s0rel_reg_value)))) + 1) / 2);
   0C1D 90r00r66      [24] 3515 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_PARM_2
   0C20 E0            [24] 3516 	movx	a,@dptr
   0C21 FF            [12] 3517 	mov	r7,a
   0C22 60 04         [24] 3518 	jz	00103$
   0C24 7F 02         [12] 3519 	mov	r7,#0x02
   0C26 80 02         [24] 3520 	sjmp	00104$
   0C28                    3521 00103$:
   0C28 7F 01         [12] 3522 	mov	r7,#0x01
   0C2A                    3523 00104$:
   0C2A EF            [12] 3524 	mov	a,r7
   0C2B 75 F0 02      [24] 3525 	mov	b,#0x02
   0C2E A4            [48] 3526 	mul	ab
   0C2F FF            [12] 3527 	mov	r7,a
   0C30 AE F0         [24] 3528 	mov	r6,b
   0C32 C0 07         [24] 3529 	push	ar7
   0C34 C0 06         [24] 3530 	push	ar6
   0C36 12r09r42      [24] 3531 	lcall	_pwr_clk_mgmt_get_cclk_freq_in_hz
   0C39 AA 82         [24] 3532 	mov	r2,dpl
   0C3B AB 83         [24] 3533 	mov	r3,dph
   0C3D AC F0         [24] 3534 	mov	r4,b
   0C3F FD            [12] 3535 	mov	r5,a
   0C40 D0 06         [24] 3536 	pop	ar6
   0C42 D0 07         [24] 3537 	pop	ar7
   0C44 8F 00         [24] 3538 	mov	ar0,r7
   0C46 EE            [12] 3539 	mov	a,r6
   0C47 F9            [12] 3540 	mov	r1,a
   0C48 33            [12] 3541 	rlc	a
   0C49 95 E0         [12] 3542 	subb	a,acc
   0C4B FE            [12] 3543 	mov	r6,a
   0C4C FF            [12] 3544 	mov	r7,a
   0C4D 90r00r00      [24] 3545 	mov	dptr,#__mullong_PARM_2
   0C50 EA            [12] 3546 	mov	a,r2
   0C51 F0            [24] 3547 	movx	@dptr,a
   0C52 EB            [12] 3548 	mov	a,r3
   0C53 A3            [24] 3549 	inc	dptr
   0C54 F0            [24] 3550 	movx	@dptr,a
   0C55 EC            [12] 3551 	mov	a,r4
   0C56 A3            [24] 3552 	inc	dptr
   0C57 F0            [24] 3553 	movx	@dptr,a
   0C58 ED            [12] 3554 	mov	a,r5
   0C59 A3            [24] 3555 	inc	dptr
   0C5A F0            [24] 3556 	movx	@dptr,a
   0C5B 88 82         [24] 3557 	mov	dpl,r0
   0C5D 89 83         [24] 3558 	mov	dph,r1
   0C5F 8E F0         [24] 3559 	mov	b,r6
   0C61 EF            [12] 3560 	mov	a,r7
   0C62 12r00r00      [24] 3561 	lcall	__mullong
   0C65 AC 82         [24] 3562 	mov	r4,dpl
   0C67 AD 83         [24] 3563 	mov	r5,dph
   0C69 AE F0         [24] 3564 	mov	r6,b
   0C6B FF            [12] 3565 	mov	r7,a
   0C6C 90r00r67      [24] 3566 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_s0rel_reg_value_1_210
   0C6F E0            [24] 3567 	movx	a,@dptr
   0C70 FA            [12] 3568 	mov	r2,a
   0C71 A3            [24] 3569 	inc	dptr
   0C72 E0            [24] 3570 	movx	a,@dptr
   0C73 FB            [12] 3571 	mov	r3,a
   0C74 E4            [12] 3572 	clr	a
   0C75 C3            [12] 3573 	clr	c
   0C76 9A            [12] 3574 	subb	a,r2
   0C77 FA            [12] 3575 	mov	r2,a
   0C78 74 04         [12] 3576 	mov	a,#0x04
   0C7A 9B            [12] 3577 	subb	a,r3
   0C7B 54 03         [12] 3578 	anl	a,#0x03
   0C7D A2 E0         [12] 3579 	mov	c,acc.0
   0C7F CA            [12] 3580 	xch	a,r2
   0C80 13            [12] 3581 	rrc	a
   0C81 CA            [12] 3582 	xch	a,r2
   0C82 13            [12] 3583 	rrc	a
   0C83 A2 E0         [12] 3584 	mov	c,acc.0
   0C85 CA            [12] 3585 	xch	a,r2
   0C86 13            [12] 3586 	rrc	a
   0C87 CA            [12] 3587 	xch	a,r2
   0C88 13            [12] 3588 	rrc	a
   0C89 CA            [12] 3589 	xch	a,r2
   0C8A FB            [12] 3590 	mov	r3,a
   0C8B 90r00r00      [24] 3591 	mov	dptr,#__divulong_PARM_2
   0C8E EA            [12] 3592 	mov	a,r2
   0C8F F0            [24] 3593 	movx	@dptr,a
   0C90 EB            [12] 3594 	mov	a,r3
   0C91 A3            [24] 3595 	inc	dptr
   0C92 F0            [24] 3596 	movx	@dptr,a
   0C93 E4            [12] 3597 	clr	a
   0C94 A3            [24] 3598 	inc	dptr
   0C95 F0            [24] 3599 	movx	@dptr,a
   0C96 E4            [12] 3600 	clr	a
   0C97 A3            [24] 3601 	inc	dptr
   0C98 F0            [24] 3602 	movx	@dptr,a
   0C99 8C 82         [24] 3603 	mov	dpl,r4
   0C9B 8D 83         [24] 3604 	mov	dph,r5
   0C9D 8E F0         [24] 3605 	mov	b,r6
   0C9F EF            [12] 3606 	mov	a,r7
   0CA0 12r00r00      [24] 3607 	lcall	__divulong
   0CA3 AC 82         [24] 3608 	mov	r4,dpl
   0CA5 AD 83         [24] 3609 	mov	r5,dph
   0CA7 AE F0         [24] 3610 	mov	r6,b
   0CA9 FF            [12] 3611 	mov	r7,a
   0CAA 0C            [12] 3612 	inc	r4
   0CAB BC 00 09      [24] 3613 	cjne	r4,#0x00,00109$
   0CAE 0D            [12] 3614 	inc	r5
   0CAF BD 00 05      [24] 3615 	cjne	r5,#0x00,00109$
   0CB2 0E            [12] 3616 	inc	r6
   0CB3 BE 00 01      [24] 3617 	cjne	r6,#0x00,00109$
   0CB6 0F            [12] 3618 	inc	r7
   0CB7                    3619 00109$:
   0CB7 EF            [12] 3620 	mov	a,r7
   0CB8 C3            [12] 3621 	clr	c
   0CB9 13            [12] 3622 	rrc	a
   0CBA FF            [12] 3623 	mov	r7,a
   0CBB EE            [12] 3624 	mov	a,r6
   0CBC 13            [12] 3625 	rrc	a
   0CBD FE            [12] 3626 	mov	r6,a
   0CBE ED            [12] 3627 	mov	a,r5
   0CBF 13            [12] 3628 	rrc	a
   0CC0 FD            [12] 3629 	mov	r5,a
   0CC1 EC            [12] 3630 	mov	a,r4
   0CC2 13            [12] 3631 	rrc	a
   0CC3 F5 82         [12] 3632 	mov	dpl,a
   0CC5 8D 83         [24] 3633 	mov	dph,r5
   0CC7 8E F0         [24] 3634 	mov	b,r6
   0CC9 EF            [12] 3635 	mov	a,r7
   0CCA 22            [24] 3636 	ret
                           3637 ;------------------------------------------------------------
                           3638 ;Allocation info for local variables in function 'uart_calc_actual_baud_rate_from_th1'
                           3639 ;------------------------------------------------------------
                           3640 ;smod_bit_value            Allocated with name '_uart_calc_actual_baud_rate_from_th1_PARM_2'
                           3641 ;th1_reg_value             Allocated with name '_uart_calc_actual_baud_rate_from_th1_th1_reg_value_1_212'
                           3642 ;------------------------------------------------------------
                           3643 ;	../src/uart/src/uart_calc_actual_baud_rate_from_th1.c:48: uint32_t uart_calc_actual_baud_rate_from_th1(uint8_t th1_reg_value, bool smod_bit_value)
                           3644 ;	-----------------------------------------
                           3645 ;	 function uart_calc_actual_baud_rate_from_th1
                           3646 ;	-----------------------------------------
   0CCB                    3647 _uart_calc_actual_baud_rate_from_th1:
   0CCB E5 82         [12] 3648 	mov	a,dpl
   0CCD 90r00r6A      [24] 3649 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_th1_reg_value_1_212
   0CD0 F0            [24] 3650 	movx	@dptr,a
                           3651 ;	../src/uart/src/uart_calc_actual_baud_rate_from_th1.c:57: return (uint32_t)(((((uint32_t)(2 * ((smod_bit_value != 0) ? 2 : 1) * pwr_clk_mgmt_get_cclk_freq_in_hz())) / ((uint32_t)(384 * (256 - th1_reg_value)))) + 1) / 2);
   0CD1 90r00r69      [24] 3652 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_PARM_2
   0CD4 E0            [24] 3653 	movx	a,@dptr
   0CD5 FF            [12] 3654 	mov	r7,a
   0CD6 60 04         [24] 3655 	jz	00103$
   0CD8 7F 02         [12] 3656 	mov	r7,#0x02
   0CDA 80 02         [24] 3657 	sjmp	00104$
   0CDC                    3658 00103$:
   0CDC 7F 01         [12] 3659 	mov	r7,#0x01
   0CDE                    3660 00104$:
   0CDE EF            [12] 3661 	mov	a,r7
   0CDF 75 F0 02      [24] 3662 	mov	b,#0x02
   0CE2 A4            [48] 3663 	mul	ab
   0CE3 FF            [12] 3664 	mov	r7,a
   0CE4 AE F0         [24] 3665 	mov	r6,b
   0CE6 C0 07         [24] 3666 	push	ar7
   0CE8 C0 06         [24] 3667 	push	ar6
   0CEA 12r09r42      [24] 3668 	lcall	_pwr_clk_mgmt_get_cclk_freq_in_hz
   0CED AA 82         [24] 3669 	mov	r2,dpl
   0CEF AB 83         [24] 3670 	mov	r3,dph
   0CF1 AC F0         [24] 3671 	mov	r4,b
   0CF3 FD            [12] 3672 	mov	r5,a
   0CF4 D0 06         [24] 3673 	pop	ar6
   0CF6 D0 07         [24] 3674 	pop	ar7
   0CF8 8F 00         [24] 3675 	mov	ar0,r7
   0CFA EE            [12] 3676 	mov	a,r6
   0CFB F9            [12] 3677 	mov	r1,a
   0CFC 33            [12] 3678 	rlc	a
   0CFD 95 E0         [12] 3679 	subb	a,acc
   0CFF FE            [12] 3680 	mov	r6,a
   0D00 FF            [12] 3681 	mov	r7,a
   0D01 90r00r00      [24] 3682 	mov	dptr,#__mullong_PARM_2
   0D04 EA            [12] 3683 	mov	a,r2
   0D05 F0            [24] 3684 	movx	@dptr,a
   0D06 EB            [12] 3685 	mov	a,r3
   0D07 A3            [24] 3686 	inc	dptr
   0D08 F0            [24] 3687 	movx	@dptr,a
   0D09 EC            [12] 3688 	mov	a,r4
   0D0A A3            [24] 3689 	inc	dptr
   0D0B F0            [24] 3690 	movx	@dptr,a
   0D0C ED            [12] 3691 	mov	a,r5
   0D0D A3            [24] 3692 	inc	dptr
   0D0E F0            [24] 3693 	movx	@dptr,a
   0D0F 88 82         [24] 3694 	mov	dpl,r0
   0D11 89 83         [24] 3695 	mov	dph,r1
   0D13 8E F0         [24] 3696 	mov	b,r6
   0D15 EF            [12] 3697 	mov	a,r7
   0D16 12r00r00      [24] 3698 	lcall	__mullong
   0D19 AC 82         [24] 3699 	mov	r4,dpl
   0D1B AD 83         [24] 3700 	mov	r5,dph
   0D1D AE F0         [24] 3701 	mov	r6,b
   0D1F FF            [12] 3702 	mov	r7,a
   0D20 90r00r6A      [24] 3703 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_th1_reg_value_1_212
   0D23 E0            [24] 3704 	movx	a,@dptr
   0D24 FB            [12] 3705 	mov	r3,a
   0D25 7A 00         [12] 3706 	mov	r2,#0x00
   0D27 90r00r00      [24] 3707 	mov	dptr,#__mulint_PARM_2
   0D2A E4            [12] 3708 	clr	a
   0D2B C3            [12] 3709 	clr	c
   0D2C 9B            [12] 3710 	subb	a,r3
   0D2D F0            [24] 3711 	movx	@dptr,a
   0D2E 74 01         [12] 3712 	mov	a,#0x01
   0D30 9A            [12] 3713 	subb	a,r2
   0D31 A3            [24] 3714 	inc	dptr
   0D32 F0            [24] 3715 	movx	@dptr,a
   0D33 90 01 80      [24] 3716 	mov	dptr,#0x0180
   0D36 C0 07         [24] 3717 	push	ar7
   0D38 C0 06         [24] 3718 	push	ar6
   0D3A C0 05         [24] 3719 	push	ar5
   0D3C C0 04         [24] 3720 	push	ar4
   0D3E 12r00r00      [24] 3721 	lcall	__mulint
   0D41 AA 82         [24] 3722 	mov	r2,dpl
   0D43 AB 83         [24] 3723 	mov	r3,dph
   0D45 D0 04         [24] 3724 	pop	ar4
   0D47 D0 05         [24] 3725 	pop	ar5
   0D49 D0 06         [24] 3726 	pop	ar6
   0D4B D0 07         [24] 3727 	pop	ar7
   0D4D 90r00r00      [24] 3728 	mov	dptr,#__divulong_PARM_2
   0D50 EA            [12] 3729 	mov	a,r2
   0D51 F0            [24] 3730 	movx	@dptr,a
   0D52 EB            [12] 3731 	mov	a,r3
   0D53 A3            [24] 3732 	inc	dptr
   0D54 F0            [24] 3733 	movx	@dptr,a
   0D55 EB            [12] 3734 	mov	a,r3
   0D56 33            [12] 3735 	rlc	a
   0D57 95 E0         [12] 3736 	subb	a,acc
   0D59 A3            [24] 3737 	inc	dptr
   0D5A F0            [24] 3738 	movx	@dptr,a
   0D5B A3            [24] 3739 	inc	dptr
   0D5C F0            [24] 3740 	movx	@dptr,a
   0D5D 8C 82         [24] 3741 	mov	dpl,r4
   0D5F 8D 83         [24] 3742 	mov	dph,r5
   0D61 8E F0         [24] 3743 	mov	b,r6
   0D63 EF            [12] 3744 	mov	a,r7
   0D64 12r00r00      [24] 3745 	lcall	__divulong
   0D67 AC 82         [24] 3746 	mov	r4,dpl
   0D69 AD 83         [24] 3747 	mov	r5,dph
   0D6B AE F0         [24] 3748 	mov	r6,b
   0D6D FF            [12] 3749 	mov	r7,a
   0D6E 0C            [12] 3750 	inc	r4
   0D6F BC 00 09      [24] 3751 	cjne	r4,#0x00,00109$
   0D72 0D            [12] 3752 	inc	r5
   0D73 BD 00 05      [24] 3753 	cjne	r5,#0x00,00109$
   0D76 0E            [12] 3754 	inc	r6
   0D77 BE 00 01      [24] 3755 	cjne	r6,#0x00,00109$
   0D7A 0F            [12] 3756 	inc	r7
   0D7B                    3757 00109$:
   0D7B EF            [12] 3758 	mov	a,r7
   0D7C C3            [12] 3759 	clr	c
   0D7D 13            [12] 3760 	rrc	a
   0D7E FF            [12] 3761 	mov	r7,a
   0D7F EE            [12] 3762 	mov	a,r6
   0D80 13            [12] 3763 	rrc	a
   0D81 FE            [12] 3764 	mov	r6,a
   0D82 ED            [12] 3765 	mov	a,r5
   0D83 13            [12] 3766 	rrc	a
   0D84 FD            [12] 3767 	mov	r5,a
   0D85 EC            [12] 3768 	mov	a,r4
   0D86 13            [12] 3769 	rrc	a
   0D87 F5 82         [12] 3770 	mov	dpl,a
   0D89 8D 83         [24] 3771 	mov	dph,r5
   0D8B 8E F0         [24] 3772 	mov	b,r6
   0D8D EF            [12] 3773 	mov	a,r7
   0D8E 22            [24] 3774 	ret
                           3775 ;------------------------------------------------------------
                           3776 ;Allocation info for local variables in function 'uart_calc_s0rel_value'
                           3777 ;------------------------------------------------------------
                           3778 ;smod_bit_value            Allocated with name '_uart_calc_s0rel_value_PARM_2'
                           3779 ;desired_baud_rate         Allocated with name '_uart_calc_s0rel_value_desired_baud_rate_1_214'
                           3780 ;------------------------------------------------------------
                           3781 ;	../src/uart/src/uart_calc_s0rel_value.c:48: uint16_t uart_calc_s0rel_value(uint32_t desired_baud_rate, bool smod_bit_value)
                           3782 ;	-----------------------------------------
                           3783 ;	 function uart_calc_s0rel_value
                           3784 ;	-----------------------------------------
   0D8F                    3785 _uart_calc_s0rel_value:
   0D8F AF 82         [24] 3786 	mov	r7,dpl
   0D91 AE 83         [24] 3787 	mov	r6,dph
   0D93 AD F0         [24] 3788 	mov	r5,b
   0D95 FC            [12] 3789 	mov	r4,a
   0D96 90r00r6C      [24] 3790 	mov	dptr,#_uart_calc_s0rel_value_desired_baud_rate_1_214
   0D99 EF            [12] 3791 	mov	a,r7
   0D9A F0            [24] 3792 	movx	@dptr,a
   0D9B EE            [12] 3793 	mov	a,r6
   0D9C A3            [24] 3794 	inc	dptr
   0D9D F0            [24] 3795 	movx	@dptr,a
   0D9E ED            [12] 3796 	mov	a,r5
   0D9F A3            [24] 3797 	inc	dptr
   0DA0 F0            [24] 3798 	movx	@dptr,a
   0DA1 EC            [12] 3799 	mov	a,r4
   0DA2 A3            [24] 3800 	inc	dptr
   0DA3 F0            [24] 3801 	movx	@dptr,a
                           3802 ;	../src/uart/src/uart_calc_s0rel_value.c:57: return (uint16_t)(1024 - (((((uint32_t)(2 * ((smod_bit_value != 0) ? 2 : 1) * pwr_clk_mgmt_get_cclk_freq_in_hz())) / ((uint32_t)(64 * desired_baud_rate))) + 1) / 2));
   0DA4 90r00r6B      [24] 3803 	mov	dptr,#_uart_calc_s0rel_value_PARM_2
   0DA7 E0            [24] 3804 	movx	a,@dptr
   0DA8 FF            [12] 3805 	mov	r7,a
   0DA9 60 04         [24] 3806 	jz	00103$
   0DAB 7F 02         [12] 3807 	mov	r7,#0x02
   0DAD 80 02         [24] 3808 	sjmp	00104$
   0DAF                    3809 00103$:
   0DAF 7F 01         [12] 3810 	mov	r7,#0x01
   0DB1                    3811 00104$:
   0DB1 EF            [12] 3812 	mov	a,r7
   0DB2 75 F0 02      [24] 3813 	mov	b,#0x02
   0DB5 A4            [48] 3814 	mul	ab
   0DB6 FF            [12] 3815 	mov	r7,a
   0DB7 AE F0         [24] 3816 	mov	r6,b
   0DB9 C0 07         [24] 3817 	push	ar7
   0DBB C0 06         [24] 3818 	push	ar6
   0DBD 12r09r42      [24] 3819 	lcall	_pwr_clk_mgmt_get_cclk_freq_in_hz
   0DC0 AA 82         [24] 3820 	mov	r2,dpl
   0DC2 AB 83         [24] 3821 	mov	r3,dph
   0DC4 AC F0         [24] 3822 	mov	r4,b
   0DC6 FD            [12] 3823 	mov	r5,a
   0DC7 D0 06         [24] 3824 	pop	ar6
   0DC9 D0 07         [24] 3825 	pop	ar7
   0DCB 8F 00         [24] 3826 	mov	ar0,r7
   0DCD EE            [12] 3827 	mov	a,r6
   0DCE F9            [12] 3828 	mov	r1,a
   0DCF 33            [12] 3829 	rlc	a
   0DD0 95 E0         [12] 3830 	subb	a,acc
   0DD2 FE            [12] 3831 	mov	r6,a
   0DD3 FF            [12] 3832 	mov	r7,a
   0DD4 90r00r00      [24] 3833 	mov	dptr,#__mullong_PARM_2
   0DD7 EA            [12] 3834 	mov	a,r2
   0DD8 F0            [24] 3835 	movx	@dptr,a
   0DD9 EB            [12] 3836 	mov	a,r3
   0DDA A3            [24] 3837 	inc	dptr
   0DDB F0            [24] 3838 	movx	@dptr,a
   0DDC EC            [12] 3839 	mov	a,r4
   0DDD A3            [24] 3840 	inc	dptr
   0DDE F0            [24] 3841 	movx	@dptr,a
   0DDF ED            [12] 3842 	mov	a,r5
   0DE0 A3            [24] 3843 	inc	dptr
   0DE1 F0            [24] 3844 	movx	@dptr,a
   0DE2 88 82         [24] 3845 	mov	dpl,r0
   0DE4 89 83         [24] 3846 	mov	dph,r1
   0DE6 8E F0         [24] 3847 	mov	b,r6
   0DE8 EF            [12] 3848 	mov	a,r7
   0DE9 12r00r00      [24] 3849 	lcall	__mullong
   0DEC AC 82         [24] 3850 	mov	r4,dpl
   0DEE AD 83         [24] 3851 	mov	r5,dph
   0DF0 AE F0         [24] 3852 	mov	r6,b
   0DF2 FF            [12] 3853 	mov	r7,a
   0DF3 90r00r6C      [24] 3854 	mov	dptr,#_uart_calc_s0rel_value_desired_baud_rate_1_214
   0DF6 E0            [24] 3855 	movx	a,@dptr
   0DF7 F8            [12] 3856 	mov	r0,a
   0DF8 A3            [24] 3857 	inc	dptr
   0DF9 E0            [24] 3858 	movx	a,@dptr
   0DFA F9            [12] 3859 	mov	r1,a
   0DFB A3            [24] 3860 	inc	dptr
   0DFC E0            [24] 3861 	movx	a,@dptr
   0DFD FA            [12] 3862 	mov	r2,a
   0DFE A3            [24] 3863 	inc	dptr
   0DFF E0            [24] 3864 	movx	a,@dptr
   0E00 54 03         [12] 3865 	anl	a,#0x03
   0E02 A2 E0         [12] 3866 	mov	c,acc.0
   0E04 CA            [12] 3867 	xch	a,r2
   0E05 13            [12] 3868 	rrc	a
   0E06 CA            [12] 3869 	xch	a,r2
   0E07 13            [12] 3870 	rrc	a
   0E08 A2 E0         [12] 3871 	mov	c,acc.0
   0E0A CA            [12] 3872 	xch	a,r2
   0E0B 13            [12] 3873 	rrc	a
   0E0C CA            [12] 3874 	xch	a,r2
   0E0D 13            [12] 3875 	rrc	a
   0E0E CA            [12] 3876 	xch	a,r2
   0E0F FB            [12] 3877 	mov	r3,a
   0E10 E9            [12] 3878 	mov	a,r1
   0E11 03            [12] 3879 	rr	a
   0E12 03            [12] 3880 	rr	a
   0E13 54 3F         [12] 3881 	anl	a,#0x3F
   0E15 4A            [12] 3882 	orl	a,r2
   0E16 FA            [12] 3883 	mov	r2,a
   0E17 E9            [12] 3884 	mov	a,r1
   0E18 54 03         [12] 3885 	anl	a,#0x03
   0E1A A2 E0         [12] 3886 	mov	c,acc.0
   0E1C C8            [12] 3887 	xch	a,r0
   0E1D 13            [12] 3888 	rrc	a
   0E1E C8            [12] 3889 	xch	a,r0
   0E1F 13            [12] 3890 	rrc	a
   0E20 A2 E0         [12] 3891 	mov	c,acc.0
   0E22 C8            [12] 3892 	xch	a,r0
   0E23 13            [12] 3893 	rrc	a
   0E24 C8            [12] 3894 	xch	a,r0
   0E25 13            [12] 3895 	rrc	a
   0E26 C8            [12] 3896 	xch	a,r0
   0E27 F9            [12] 3897 	mov	r1,a
   0E28 90r00r00      [24] 3898 	mov	dptr,#__divulong_PARM_2
   0E2B E8            [12] 3899 	mov	a,r0
   0E2C F0            [24] 3900 	movx	@dptr,a
   0E2D E9            [12] 3901 	mov	a,r1
   0E2E A3            [24] 3902 	inc	dptr
   0E2F F0            [24] 3903 	movx	@dptr,a
   0E30 EA            [12] 3904 	mov	a,r2
   0E31 A3            [24] 3905 	inc	dptr
   0E32 F0            [24] 3906 	movx	@dptr,a
   0E33 EB            [12] 3907 	mov	a,r3
   0E34 A3            [24] 3908 	inc	dptr
   0E35 F0            [24] 3909 	movx	@dptr,a
   0E36 8C 82         [24] 3910 	mov	dpl,r4
   0E38 8D 83         [24] 3911 	mov	dph,r5
   0E3A 8E F0         [24] 3912 	mov	b,r6
   0E3C EF            [12] 3913 	mov	a,r7
   0E3D 12r00r00      [24] 3914 	lcall	__divulong
   0E40 AC 82         [24] 3915 	mov	r4,dpl
   0E42 AD 83         [24] 3916 	mov	r5,dph
   0E44 AE F0         [24] 3917 	mov	r6,b
   0E46 FF            [12] 3918 	mov	r7,a
   0E47 0C            [12] 3919 	inc	r4
   0E48 BC 00 09      [24] 3920 	cjne	r4,#0x00,00109$
   0E4B 0D            [12] 3921 	inc	r5
   0E4C BD 00 05      [24] 3922 	cjne	r5,#0x00,00109$
   0E4F 0E            [12] 3923 	inc	r6
   0E50 BE 00 01      [24] 3924 	cjne	r6,#0x00,00109$
   0E53 0F            [12] 3925 	inc	r7
   0E54                    3926 00109$:
   0E54 EF            [12] 3927 	mov	a,r7
   0E55 C3            [12] 3928 	clr	c
   0E56 13            [12] 3929 	rrc	a
   0E57 FF            [12] 3930 	mov	r7,a
   0E58 EE            [12] 3931 	mov	a,r6
   0E59 13            [12] 3932 	rrc	a
   0E5A FE            [12] 3933 	mov	r6,a
   0E5B ED            [12] 3934 	mov	a,r5
   0E5C 13            [12] 3935 	rrc	a
   0E5D FD            [12] 3936 	mov	r5,a
   0E5E EC            [12] 3937 	mov	a,r4
   0E5F 13            [12] 3938 	rrc	a
   0E60 FC            [12] 3939 	mov	r4,a
   0E61 E4            [12] 3940 	clr	a
   0E62 C3            [12] 3941 	clr	c
   0E63 9C            [12] 3942 	subb	a,r4
   0E64 FC            [12] 3943 	mov	r4,a
   0E65 74 04         [12] 3944 	mov	a,#0x04
   0E67 9D            [12] 3945 	subb	a,r5
   0E68 FD            [12] 3946 	mov	r5,a
   0E69 E4            [12] 3947 	clr	a
   0E6A 9E            [12] 3948 	subb	a,r6
   0E6B E4            [12] 3949 	clr	a
   0E6C 9F            [12] 3950 	subb	a,r7
   0E6D 8C 82         [24] 3951 	mov	dpl,r4
   0E6F 8D 83         [24] 3952 	mov	dph,r5
   0E71 22            [24] 3953 	ret
                           3954 ;------------------------------------------------------------
                           3955 ;Allocation info for local variables in function 'uart_calc_th1_value'
                           3956 ;------------------------------------------------------------
                           3957 ;smod_bit_value            Allocated with name '_uart_calc_th1_value_PARM_2'
                           3958 ;desired_baud_rate         Allocated with name '_uart_calc_th1_value_desired_baud_rate_1_216'
                           3959 ;------------------------------------------------------------
                           3960 ;	../src/uart/src/uart_calc_th1_value.c:48: uint8_t uart_calc_th1_value(uint32_t desired_baud_rate, bool smod_bit_value)
                           3961 ;	-----------------------------------------
                           3962 ;	 function uart_calc_th1_value
                           3963 ;	-----------------------------------------
   0E72                    3964 _uart_calc_th1_value:
   0E72 AF 82         [24] 3965 	mov	r7,dpl
   0E74 AE 83         [24] 3966 	mov	r6,dph
   0E76 AD F0         [24] 3967 	mov	r5,b
   0E78 FC            [12] 3968 	mov	r4,a
   0E79 90r00r71      [24] 3969 	mov	dptr,#_uart_calc_th1_value_desired_baud_rate_1_216
   0E7C EF            [12] 3970 	mov	a,r7
   0E7D F0            [24] 3971 	movx	@dptr,a
   0E7E EE            [12] 3972 	mov	a,r6
   0E7F A3            [24] 3973 	inc	dptr
   0E80 F0            [24] 3974 	movx	@dptr,a
   0E81 ED            [12] 3975 	mov	a,r5
   0E82 A3            [24] 3976 	inc	dptr
   0E83 F0            [24] 3977 	movx	@dptr,a
   0E84 EC            [12] 3978 	mov	a,r4
   0E85 A3            [24] 3979 	inc	dptr
   0E86 F0            [24] 3980 	movx	@dptr,a
                           3981 ;	../src/uart/src/uart_calc_th1_value.c:57: return (uint8_t)(256 - (((((uint32_t)(2 * ((smod_bit_value != 0) ? 2 : 1) * pwr_clk_mgmt_get_cclk_freq_in_hz())) / ((uint32_t)(384 * desired_baud_rate))) + 1) / 2));
   0E87 90r00r70      [24] 3982 	mov	dptr,#_uart_calc_th1_value_PARM_2
   0E8A E0            [24] 3983 	movx	a,@dptr
   0E8B FF            [12] 3984 	mov	r7,a
   0E8C 60 04         [24] 3985 	jz	00103$
   0E8E 7F 02         [12] 3986 	mov	r7,#0x02
   0E90 80 02         [24] 3987 	sjmp	00104$
   0E92                    3988 00103$:
   0E92 7F 01         [12] 3989 	mov	r7,#0x01
   0E94                    3990 00104$:
   0E94 EF            [12] 3991 	mov	a,r7
   0E95 75 F0 02      [24] 3992 	mov	b,#0x02
   0E98 A4            [48] 3993 	mul	ab
   0E99 FF            [12] 3994 	mov	r7,a
   0E9A AE F0         [24] 3995 	mov	r6,b
   0E9C C0 07         [24] 3996 	push	ar7
   0E9E C0 06         [24] 3997 	push	ar6
   0EA0 12r09r42      [24] 3998 	lcall	_pwr_clk_mgmt_get_cclk_freq_in_hz
   0EA3 AA 82         [24] 3999 	mov	r2,dpl
   0EA5 AB 83         [24] 4000 	mov	r3,dph
   0EA7 AC F0         [24] 4001 	mov	r4,b
   0EA9 FD            [12] 4002 	mov	r5,a
   0EAA D0 06         [24] 4003 	pop	ar6
   0EAC D0 07         [24] 4004 	pop	ar7
   0EAE 8F 00         [24] 4005 	mov	ar0,r7
   0EB0 EE            [12] 4006 	mov	a,r6
   0EB1 F9            [12] 4007 	mov	r1,a
   0EB2 33            [12] 4008 	rlc	a
   0EB3 95 E0         [12] 4009 	subb	a,acc
   0EB5 FE            [12] 4010 	mov	r6,a
   0EB6 FF            [12] 4011 	mov	r7,a
   0EB7 90r00r00      [24] 4012 	mov	dptr,#__mullong_PARM_2
   0EBA EA            [12] 4013 	mov	a,r2
   0EBB F0            [24] 4014 	movx	@dptr,a
   0EBC EB            [12] 4015 	mov	a,r3
   0EBD A3            [24] 4016 	inc	dptr
   0EBE F0            [24] 4017 	movx	@dptr,a
   0EBF EC            [12] 4018 	mov	a,r4
   0EC0 A3            [24] 4019 	inc	dptr
   0EC1 F0            [24] 4020 	movx	@dptr,a
   0EC2 ED            [12] 4021 	mov	a,r5
   0EC3 A3            [24] 4022 	inc	dptr
   0EC4 F0            [24] 4023 	movx	@dptr,a
   0EC5 88 82         [24] 4024 	mov	dpl,r0
   0EC7 89 83         [24] 4025 	mov	dph,r1
   0EC9 8E F0         [24] 4026 	mov	b,r6
   0ECB EF            [12] 4027 	mov	a,r7
   0ECC 12r00r00      [24] 4028 	lcall	__mullong
   0ECF AC 82         [24] 4029 	mov	r4,dpl
   0ED1 AD 83         [24] 4030 	mov	r5,dph
   0ED3 AE F0         [24] 4031 	mov	r6,b
   0ED5 FF            [12] 4032 	mov	r7,a
   0ED6 90r00r71      [24] 4033 	mov	dptr,#_uart_calc_th1_value_desired_baud_rate_1_216
   0ED9 E0            [24] 4034 	movx	a,@dptr
   0EDA F8            [12] 4035 	mov	r0,a
   0EDB A3            [24] 4036 	inc	dptr
   0EDC E0            [24] 4037 	movx	a,@dptr
   0EDD F9            [12] 4038 	mov	r1,a
   0EDE A3            [24] 4039 	inc	dptr
   0EDF E0            [24] 4040 	movx	a,@dptr
   0EE0 FA            [12] 4041 	mov	r2,a
   0EE1 A3            [24] 4042 	inc	dptr
   0EE2 E0            [24] 4043 	movx	a,@dptr
   0EE3 FB            [12] 4044 	mov	r3,a
   0EE4 90r00r00      [24] 4045 	mov	dptr,#__mullong_PARM_2
   0EE7 E8            [12] 4046 	mov	a,r0
   0EE8 F0            [24] 4047 	movx	@dptr,a
   0EE9 E9            [12] 4048 	mov	a,r1
   0EEA A3            [24] 4049 	inc	dptr
   0EEB F0            [24] 4050 	movx	@dptr,a
   0EEC EA            [12] 4051 	mov	a,r2
   0EED A3            [24] 4052 	inc	dptr
   0EEE F0            [24] 4053 	movx	@dptr,a
   0EEF EB            [12] 4054 	mov	a,r3
   0EF0 A3            [24] 4055 	inc	dptr
   0EF1 F0            [24] 4056 	movx	@dptr,a
   0EF2 90 01 80      [24] 4057 	mov	dptr,#0x0180
   0EF5 E4            [12] 4058 	clr	a
   0EF6 F5 F0         [12] 4059 	mov	b,a
   0EF8 C0 07         [24] 4060 	push	ar7
   0EFA C0 06         [24] 4061 	push	ar6
   0EFC C0 05         [24] 4062 	push	ar5
   0EFE C0 04         [24] 4063 	push	ar4
   0F00 12r00r00      [24] 4064 	lcall	__mullong
   0F03 A8 82         [24] 4065 	mov	r0,dpl
   0F05 A9 83         [24] 4066 	mov	r1,dph
   0F07 AA F0         [24] 4067 	mov	r2,b
   0F09 FB            [12] 4068 	mov	r3,a
   0F0A D0 04         [24] 4069 	pop	ar4
   0F0C D0 05         [24] 4070 	pop	ar5
   0F0E D0 06         [24] 4071 	pop	ar6
   0F10 D0 07         [24] 4072 	pop	ar7
   0F12 90r00r00      [24] 4073 	mov	dptr,#__divulong_PARM_2
   0F15 E8            [12] 4074 	mov	a,r0
   0F16 F0            [24] 4075 	movx	@dptr,a
   0F17 E9            [12] 4076 	mov	a,r1
   0F18 A3            [24] 4077 	inc	dptr
   0F19 F0            [24] 4078 	movx	@dptr,a
   0F1A EA            [12] 4079 	mov	a,r2
   0F1B A3            [24] 4080 	inc	dptr
   0F1C F0            [24] 4081 	movx	@dptr,a
   0F1D EB            [12] 4082 	mov	a,r3
   0F1E A3            [24] 4083 	inc	dptr
   0F1F F0            [24] 4084 	movx	@dptr,a
   0F20 8C 82         [24] 4085 	mov	dpl,r4
   0F22 8D 83         [24] 4086 	mov	dph,r5
   0F24 8E F0         [24] 4087 	mov	b,r6
   0F26 EF            [12] 4088 	mov	a,r7
   0F27 12r00r00      [24] 4089 	lcall	__divulong
   0F2A AC 82         [24] 4090 	mov	r4,dpl
   0F2C AD 83         [24] 4091 	mov	r5,dph
   0F2E AE F0         [24] 4092 	mov	r6,b
   0F30 FF            [12] 4093 	mov	r7,a
   0F31 0C            [12] 4094 	inc	r4
   0F32 BC 00 09      [24] 4095 	cjne	r4,#0x00,00109$
   0F35 0D            [12] 4096 	inc	r5
   0F36 BD 00 05      [24] 4097 	cjne	r5,#0x00,00109$
   0F39 0E            [12] 4098 	inc	r6
   0F3A BE 00 01      [24] 4099 	cjne	r6,#0x00,00109$
   0F3D 0F            [12] 4100 	inc	r7
   0F3E                    4101 00109$:
   0F3E EF            [12] 4102 	mov	a,r7
   0F3F C3            [12] 4103 	clr	c
   0F40 13            [12] 4104 	rrc	a
   0F41 EE            [12] 4105 	mov	a,r6
   0F42 13            [12] 4106 	rrc	a
   0F43 ED            [12] 4107 	mov	a,r5
   0F44 13            [12] 4108 	rrc	a
   0F45 EC            [12] 4109 	mov	a,r4
   0F46 13            [12] 4110 	rrc	a
   0F47 FC            [12] 4111 	mov	r4,a
   0F48 C3            [12] 4112 	clr	c
   0F49 E4            [12] 4113 	clr	a
   0F4A 9C            [12] 4114 	subb	a,r4
   0F4B F5 82         [12] 4115 	mov	dpl,a
   0F4D 22            [24] 4116 	ret
                           4117 ;------------------------------------------------------------
                           4118 ;Allocation info for local variables in function 'uart_configure_auto_baud_calc'
                           4119 ;------------------------------------------------------------
                           4120 ;sloc0                     Allocated with name '_uart_configure_auto_baud_calc_sloc0_1_0'
                           4121 ;sloc1                     Allocated with name '_uart_configure_auto_baud_calc_sloc1_1_0'
                           4122 ;sloc2                     Allocated with name '_uart_configure_auto_baud_calc_sloc2_1_0'
                           4123 ;sloc3                     Allocated with name '_uart_configure_auto_baud_calc_sloc3_1_0'
                           4124 ;baud_rate                 Allocated with name '_uart_configure_auto_baud_calc_PARM_2'
                           4125 ;uart_config_options       Allocated with name '_uart_configure_auto_baud_calc_uart_config_options_1_218'
                           4126 ;calc_br_with_smod_cleared Allocated with name '_uart_configure_auto_baud_calc_calc_br_with_smod_cleared_2_220'
                           4127 ;calc_br_with_smod_set     Allocated with name '_uart_configure_auto_baud_calc_calc_br_with_smod_set_2_220'
                           4128 ;error_calc_br_with_smod_cleared Allocated with name '_uart_configure_auto_baud_calc_error_calc_br_with_smod_cleared_2_220'
                           4129 ;error_calc_br_with_smod_set Allocated with name '_uart_configure_auto_baud_calc_error_calc_br_with_smod_set_2_220'
                           4130 ;s0rel_with_smod_cleared   Allocated with name '_uart_configure_auto_baud_calc_s0rel_with_smod_cleared_3_221'
                           4131 ;s0rel_with_smod_set       Allocated with name '_uart_configure_auto_baud_calc_s0rel_with_smod_set_3_221'
                           4132 ;th1_with_smod_cleared     Allocated with name '_uart_configure_auto_baud_calc_th1_with_smod_cleared_3_224'
                           4133 ;th1_with_smod_set         Allocated with name '_uart_configure_auto_baud_calc_th1_with_smod_set_3_224'
                           4134 ;------------------------------------------------------------
                           4135 ;	../src/uart/src/uart_configure_auto_baud_calc.c:48: void uart_configure_auto_baud_calc(uint8_t uart_config_options, uint32_t baud_rate)
                           4136 ;	-----------------------------------------
                           4137 ;	 function uart_configure_auto_baud_calc
                           4138 ;	-----------------------------------------
   0F4E                    4139 _uart_configure_auto_baud_calc:
   0F4E E5 82         [12] 4140 	mov	a,dpl
                           4141 ;	../src/uart/src/uart_configure_auto_baud_calc.c:51: if(((uart_config_options & UART_CONFIG_OPTION_MODE_MASK) == UART_CONFIG_OPTION_MODE_1_UART_8_BIT) ||
   0F50 90r00r79      [24] 4142 	mov	dptr,#_uart_configure_auto_baud_calc_uart_config_options_1_218
   0F53 F0            [24] 4143 	movx	@dptr,a
   0F54 FF            [12] 4144 	mov	r7,a
   0F55 74 C0         [12] 4145 	mov	a,#0xC0
   0F57 5F            [12] 4146 	anl	a,r7
   0F58 FE            [12] 4147 	mov	r6,a
   0F59 BE 40 02      [24] 4148 	cjne	r6,#0x40,00147$
   0F5C 80 0A         [24] 4149 	sjmp	00110$
   0F5E                    4150 00147$:
                           4151 ;	../src/uart/src/uart_configure_auto_baud_calc.c:52: ((uart_config_options & UART_CONFIG_OPTION_MODE_MASK) == UART_CONFIG_OPTION_MODE_3_UART_9_BIT))
   0F5E 74 C0         [12] 4152 	mov	a,#0xC0
   0F60 5F            [12] 4153 	anl	a,r7
   0F61 FE            [12] 4154 	mov	r6,a
   0F62 BE C0 02      [24] 4155 	cjne	r6,#0xC0,00148$
   0F65 80 01         [24] 4156 	sjmp	00149$
   0F67                    4157 00148$:
   0F67 22            [24] 4158 	ret
   0F68                    4159 00149$:
   0F68                    4160 00110$:
                           4161 ;	../src/uart/src/uart_configure_auto_baud_calc.c:58: if((uart_config_options & UART_CONFIG_OPTION_CLOCK_MASK) == UART_CONFIG_OPTION_CLOCK_FOR_MODES_1_3_USE_BR_GEN)
   0F68 74 02         [12] 4162 	mov	a,#0x02
   0F6A 5F            [12] 4163 	anl	a,r7
   0F6B FE            [12] 4164 	mov	r6,a
   0F6C BE 02 02      [24] 4165 	cjne	r6,#0x02,00150$
   0F6F 80 03         [24] 4166 	sjmp	00151$
   0F71                    4167 00150$:
   0F71 02r10rC2      [24] 4168 	ljmp	00108$
   0F74                    4169 00151$:
                           4170 ;	../src/uart/src/uart_configure_auto_baud_calc.c:63: s0rel_with_smod_cleared = uart_calc_s0rel_value(baud_rate, 0);
   0F74 90r00r75      [24] 4171 	mov	dptr,#_uart_configure_auto_baud_calc_PARM_2
   0F77 E0            [24] 4172 	movx	a,@dptr
   0F78 FB            [12] 4173 	mov	r3,a
   0F79 A3            [24] 4174 	inc	dptr
   0F7A E0            [24] 4175 	movx	a,@dptr
   0F7B FC            [12] 4176 	mov	r4,a
   0F7C A3            [24] 4177 	inc	dptr
   0F7D E0            [24] 4178 	movx	a,@dptr
   0F7E FD            [12] 4179 	mov	r5,a
   0F7F A3            [24] 4180 	inc	dptr
   0F80 E0            [24] 4181 	movx	a,@dptr
   0F81 FE            [12] 4182 	mov	r6,a
   0F82 90r00r6B      [24] 4183 	mov	dptr,#_uart_calc_s0rel_value_PARM_2
   0F85 E4            [12] 4184 	clr	a
   0F86 F0            [24] 4185 	movx	@dptr,a
   0F87 8B 82         [24] 4186 	mov	dpl,r3
   0F89 8C 83         [24] 4187 	mov	dph,r4
   0F8B 8D F0         [24] 4188 	mov	b,r5
   0F8D EE            [12] 4189 	mov	a,r6
   0F8E C0 07         [24] 4190 	push	ar7
   0F90 C0 06         [24] 4191 	push	ar6
   0F92 C0 05         [24] 4192 	push	ar5
   0F94 C0 04         [24] 4193 	push	ar4
   0F96 C0 03         [24] 4194 	push	ar3
   0F98 12r0Dr8F      [24] 4195 	lcall	_uart_calc_s0rel_value
   0F9B A9 82         [24] 4196 	mov	r1,dpl
   0F9D AA 83         [24] 4197 	mov	r2,dph
   0F9F D0 03         [24] 4198 	pop	ar3
   0FA1 D0 04         [24] 4199 	pop	ar4
   0FA3 D0 05         [24] 4200 	pop	ar5
   0FA5 D0 06         [24] 4201 	pop	ar6
                           4202 ;	../src/uart/src/uart_configure_auto_baud_calc.c:64: s0rel_with_smod_set = uart_calc_s0rel_value(baud_rate, 1);
   0FA7 90r00r6B      [24] 4203 	mov	dptr,#_uart_calc_s0rel_value_PARM_2
   0FAA 74 01         [12] 4204 	mov	a,#0x01
   0FAC F0            [24] 4205 	movx	@dptr,a
   0FAD 8B 82         [24] 4206 	mov	dpl,r3
   0FAF 8C 83         [24] 4207 	mov	dph,r4
   0FB1 8D F0         [24] 4208 	mov	b,r5
   0FB3 EE            [12] 4209 	mov	a,r6
   0FB4 C0 06         [24] 4210 	push	ar6
   0FB6 C0 05         [24] 4211 	push	ar5
   0FB8 C0 04         [24] 4212 	push	ar4
   0FBA C0 03         [24] 4213 	push	ar3
   0FBC C0 02         [24] 4214 	push	ar2
   0FBE C0 01         [24] 4215 	push	ar1
   0FC0 12r0Dr8F      [24] 4216 	lcall	_uart_calc_s0rel_value
   0FC3 85 82*04      [24] 4217 	mov	_uart_configure_auto_baud_calc_sloc0_1_0,dpl
   0FC6 85 83*05      [24] 4218 	mov	(_uart_configure_auto_baud_calc_sloc0_1_0 + 1),dph
   0FC9 D0 01         [24] 4219 	pop	ar1
   0FCB D0 02         [24] 4220 	pop	ar2
                           4221 ;	../src/uart/src/uart_configure_auto_baud_calc.c:67: calc_br_with_smod_cleared = uart_calc_actual_baud_rate_from_s0rel(s0rel_with_smod_cleared, false);
   0FCD 90r00r66      [24] 4222 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_PARM_2
   0FD0 E4            [12] 4223 	clr	a
   0FD1 F0            [24] 4224 	movx	@dptr,a
   0FD2 89 82         [24] 4225 	mov	dpl,r1
   0FD4 8A 83         [24] 4226 	mov	dph,r2
   0FD6 C0 02         [24] 4227 	push	ar2
   0FD8 C0 01         [24] 4228 	push	ar1
   0FDA 12r0Cr12      [24] 4229 	lcall	_uart_calc_actual_baud_rate_from_s0rel
   0FDD 85 82*06      [24] 4230 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,dpl
   0FE0 85 83*07      [24] 4231 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),dph
   0FE3 85 F0*08      [24] 4232 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),b
   0FE6 F5*09         [12] 4233 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
                           4234 ;	../src/uart/src/uart_configure_auto_baud_calc.c:68: calc_br_with_smod_set = uart_calc_actual_baud_rate_from_s0rel(s0rel_with_smod_set, true);
   0FE8 90r00r66      [24] 4235 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_PARM_2
   0FEB 74 01         [12] 4236 	mov	a,#0x01
   0FED F0            [24] 4237 	movx	@dptr,a
   0FEE 85*04 82      [24] 4238 	mov	dpl,_uart_configure_auto_baud_calc_sloc0_1_0
   0FF1 85*05 83      [24] 4239 	mov	dph,(_uart_configure_auto_baud_calc_sloc0_1_0 + 1)
   0FF4 12r0Cr12      [24] 4240 	lcall	_uart_calc_actual_baud_rate_from_s0rel
   0FF7 85 82*0A      [24] 4241 	mov	_uart_configure_auto_baud_calc_sloc2_1_0,dpl
   0FFA 85 83*0B      [24] 4242 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 1),dph
   0FFD 85 F0*0C      [24] 4243 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 2),b
   1000 F5*0D         [12] 4244 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 3),a
   1002 D0 01         [24] 4245 	pop	ar1
   1004 D0 02         [24] 4246 	pop	ar2
   1006 D0 03         [24] 4247 	pop	ar3
   1008 D0 04         [24] 4248 	pop	ar4
   100A D0 05         [24] 4249 	pop	ar5
   100C D0 06         [24] 4250 	pop	ar6
   100E D0 07         [24] 4251 	pop	ar7
                           4252 ;	../src/uart/src/uart_configure_auto_baud_calc.c:71: error_calc_br_with_smod_cleared = (calc_br_with_smod_cleared > baud_rate) ? (calc_br_with_smod_cleared - baud_rate) : (baud_rate - calc_br_with_smod_cleared);
   1010 C3            [12] 4253 	clr	c
   1011 EB            [12] 4254 	mov	a,r3
   1012 95*06         [12] 4255 	subb	a,_uart_configure_auto_baud_calc_sloc1_1_0
   1014 EC            [12] 4256 	mov	a,r4
   1015 95*07         [12] 4257 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   1017 ED            [12] 4258 	mov	a,r5
   1018 95*08         [12] 4259 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   101A EE            [12] 4260 	mov	a,r6
   101B 95*09         [12] 4261 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   101D 50 17         [24] 4262 	jnc	00115$
   101F E5*06         [12] 4263 	mov	a,_uart_configure_auto_baud_calc_sloc1_1_0
   1021 C3            [12] 4264 	clr	c
   1022 9B            [12] 4265 	subb	a,r3
   1023 F5*0E         [12] 4266 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,a
   1025 E5*07         [12] 4267 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   1027 9C            [12] 4268 	subb	a,r4
   1028 F5*0F         [12] 4269 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),a
   102A E5*08         [12] 4270 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   102C 9D            [12] 4271 	subb	a,r5
   102D F5*10         [12] 4272 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),a
   102F E5*09         [12] 4273 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   1031 9E            [12] 4274 	subb	a,r6
   1032 F5*11         [12] 4275 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   1034 80 15         [24] 4276 	sjmp	00116$
   1036                    4277 00115$:
   1036 EB            [12] 4278 	mov	a,r3
   1037 C3            [12] 4279 	clr	c
   1038 95*06         [12] 4280 	subb	a,_uart_configure_auto_baud_calc_sloc1_1_0
   103A F5*0E         [12] 4281 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,a
   103C EC            [12] 4282 	mov	a,r4
   103D 95*07         [12] 4283 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   103F F5*0F         [12] 4284 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),a
   1041 ED            [12] 4285 	mov	a,r5
   1042 95*08         [12] 4286 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   1044 F5*10         [12] 4287 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),a
   1046 EE            [12] 4288 	mov	a,r6
   1047 95*09         [12] 4289 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   1049 F5*11         [12] 4290 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   104B                    4291 00116$:
                           4292 ;	../src/uart/src/uart_configure_auto_baud_calc.c:72: error_calc_br_with_smod_set = (calc_br_with_smod_set > baud_rate) ? (calc_br_with_smod_set - baud_rate) : (baud_rate - calc_br_with_smod_set);
   104B C3            [12] 4293 	clr	c
   104C EB            [12] 4294 	mov	a,r3
   104D 95*0A         [12] 4295 	subb	a,_uart_configure_auto_baud_calc_sloc2_1_0
   104F EC            [12] 4296 	mov	a,r4
   1050 95*0B         [12] 4297 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   1052 ED            [12] 4298 	mov	a,r5
   1053 95*0C         [12] 4299 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   1055 EE            [12] 4300 	mov	a,r6
   1056 95*0D         [12] 4301 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   1058 50 17         [24] 4302 	jnc	00117$
   105A E5*0A         [12] 4303 	mov	a,_uart_configure_auto_baud_calc_sloc2_1_0
   105C C3            [12] 4304 	clr	c
   105D 9B            [12] 4305 	subb	a,r3
   105E F5*06         [12] 4306 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,a
   1060 E5*0B         [12] 4307 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   1062 9C            [12] 4308 	subb	a,r4
   1063 F5*07         [12] 4309 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),a
   1065 E5*0C         [12] 4310 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   1067 9D            [12] 4311 	subb	a,r5
   1068 F5*08         [12] 4312 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),a
   106A E5*0D         [12] 4313 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   106C 9E            [12] 4314 	subb	a,r6
   106D F5*09         [12] 4315 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
   106F 80 15         [24] 4316 	sjmp	00118$
   1071                    4317 00117$:
   1071 EB            [12] 4318 	mov	a,r3
   1072 C3            [12] 4319 	clr	c
   1073 95*0A         [12] 4320 	subb	a,_uart_configure_auto_baud_calc_sloc2_1_0
   1075 F5*06         [12] 4321 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,a
   1077 EC            [12] 4322 	mov	a,r4
   1078 95*0B         [12] 4323 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   107A F5*07         [12] 4324 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),a
   107C ED            [12] 4325 	mov	a,r5
   107D 95*0C         [12] 4326 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   107F F5*08         [12] 4327 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),a
   1081 EE            [12] 4328 	mov	a,r6
   1082 95*0D         [12] 4329 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   1084 F5*09         [12] 4330 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
   1086                    4331 00118$:
                           4332 ;	../src/uart/src/uart_configure_auto_baud_calc.c:75: if(error_calc_br_with_smod_cleared < error_calc_br_with_smod_set)
   1086 C3            [12] 4333 	clr	c
   1087 E5*0E         [12] 4334 	mov	a,_uart_configure_auto_baud_calc_sloc3_1_0
   1089 95*06         [12] 4335 	subb	a,_uart_configure_auto_baud_calc_sloc1_1_0
   108B E5*0F         [12] 4336 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   108D 95*07         [12] 4337 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   108F E5*10         [12] 4338 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   1091 95*08         [12] 4339 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   1093 E5*11         [12] 4340 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   1095 95*09         [12] 4341 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   1097 50 12         [24] 4342 	jnc	00102$
                           4343 ;	../src/uart/src/uart_configure_auto_baud_calc.c:77: uart_configure_manual_baud_calc(((uart_config_options & ~UART_CONFIG_OPTION_BIT_SMOD_MASK) | UART_CONFIG_OPTION_BIT_SMOD_CLEAR),
   1099 8F 06         [24] 4344 	mov	ar6,r7
   109B 53 06 FB      [24] 4345 	anl	ar6,#0xFB
                           4346 ;	../src/uart/src/uart_configure_auto_baud_calc.c:78: s0rel_with_smod_cleared);
   109E 90r00r63      [24] 4347 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   10A1 E9            [12] 4348 	mov	a,r1
   10A2 F0            [24] 4349 	movx	@dptr,a
   10A3 EA            [12] 4350 	mov	a,r2
   10A4 A3            [24] 4351 	inc	dptr
   10A5 F0            [24] 4352 	movx	@dptr,a
   10A6 8E 82         [24] 4353 	mov	dpl,r6
   10A8 02r0BrB4      [24] 4354 	ljmp	_uart_configure_manual_baud_calc
   10AB                    4355 00102$:
                           4356 ;	../src/uart/src/uart_configure_auto_baud_calc.c:82: uart_configure_manual_baud_calc(((uart_config_options & ~UART_CONFIG_OPTION_BIT_SMOD_MASK) | UART_CONFIG_OPTION_BIT_SMOD_SET),
   10AB 8F 06         [24] 4357 	mov	ar6,r7
   10AD 74 FB         [12] 4358 	mov	a,#0xFB
   10AF 5E            [12] 4359 	anl	a,r6
   10B0 44 04         [12] 4360 	orl	a,#0x04
   10B2 FE            [12] 4361 	mov	r6,a
                           4362 ;	../src/uart/src/uart_configure_auto_baud_calc.c:83: s0rel_with_smod_set);
   10B3 90r00r63      [24] 4363 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   10B6 E5*04         [12] 4364 	mov	a,_uart_configure_auto_baud_calc_sloc0_1_0
   10B8 F0            [24] 4365 	movx	@dptr,a
   10B9 E5*05         [12] 4366 	mov	a,(_uart_configure_auto_baud_calc_sloc0_1_0 + 1)
   10BB A3            [24] 4367 	inc	dptr
   10BC F0            [24] 4368 	movx	@dptr,a
   10BD 8E 82         [24] 4369 	mov	dpl,r6
   10BF 02r0BrB4      [24] 4370 	ljmp	_uart_configure_manual_baud_calc
   10C2                    4371 00108$:
                           4372 ;	../src/uart/src/uart_configure_auto_baud_calc.c:91: th1_with_smod_cleared = uart_calc_th1_value(baud_rate, 0);
   10C2 90r00r75      [24] 4373 	mov	dptr,#_uart_configure_auto_baud_calc_PARM_2
   10C5 E0            [24] 4374 	movx	a,@dptr
   10C6 FB            [12] 4375 	mov	r3,a
   10C7 A3            [24] 4376 	inc	dptr
   10C8 E0            [24] 4377 	movx	a,@dptr
   10C9 FC            [12] 4378 	mov	r4,a
   10CA A3            [24] 4379 	inc	dptr
   10CB E0            [24] 4380 	movx	a,@dptr
   10CC FD            [12] 4381 	mov	r5,a
   10CD A3            [24] 4382 	inc	dptr
   10CE E0            [24] 4383 	movx	a,@dptr
   10CF FE            [12] 4384 	mov	r6,a
   10D0 90r00r70      [24] 4385 	mov	dptr,#_uart_calc_th1_value_PARM_2
   10D3 E4            [12] 4386 	clr	a
   10D4 F0            [24] 4387 	movx	@dptr,a
   10D5 8B 82         [24] 4388 	mov	dpl,r3
   10D7 8C 83         [24] 4389 	mov	dph,r4
   10D9 8D F0         [24] 4390 	mov	b,r5
   10DB EE            [12] 4391 	mov	a,r6
   10DC C0 07         [24] 4392 	push	ar7
   10DE C0 06         [24] 4393 	push	ar6
   10E0 C0 05         [24] 4394 	push	ar5
   10E2 C0 04         [24] 4395 	push	ar4
   10E4 C0 03         [24] 4396 	push	ar3
   10E6 12r0Er72      [24] 4397 	lcall	_uart_calc_th1_value
   10E9 AA 82         [24] 4398 	mov	r2,dpl
   10EB D0 03         [24] 4399 	pop	ar3
   10ED D0 04         [24] 4400 	pop	ar4
   10EF D0 05         [24] 4401 	pop	ar5
   10F1 D0 06         [24] 4402 	pop	ar6
                           4403 ;	../src/uart/src/uart_configure_auto_baud_calc.c:92: th1_with_smod_set = uart_calc_th1_value(baud_rate, 1);
   10F3 90r00r70      [24] 4404 	mov	dptr,#_uart_calc_th1_value_PARM_2
   10F6 74 01         [12] 4405 	mov	a,#0x01
   10F8 F0            [24] 4406 	movx	@dptr,a
   10F9 8B 82         [24] 4407 	mov	dpl,r3
   10FB 8C 83         [24] 4408 	mov	dph,r4
   10FD 8D F0         [24] 4409 	mov	b,r5
   10FF EE            [12] 4410 	mov	a,r6
   1100 C0 06         [24] 4411 	push	ar6
   1102 C0 05         [24] 4412 	push	ar5
   1104 C0 04         [24] 4413 	push	ar4
   1106 C0 03         [24] 4414 	push	ar3
   1108 C0 02         [24] 4415 	push	ar2
   110A 12r0Er72      [24] 4416 	lcall	_uart_calc_th1_value
   110D A9 82         [24] 4417 	mov	r1,dpl
   110F D0 02         [24] 4418 	pop	ar2
                           4419 ;	../src/uart/src/uart_configure_auto_baud_calc.c:95: calc_br_with_smod_cleared = uart_calc_actual_baud_rate_from_th1(th1_with_smod_cleared, false);
   1111 90r00r69      [24] 4420 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_PARM_2
   1114 E4            [12] 4421 	clr	a
   1115 F0            [24] 4422 	movx	@dptr,a
   1116 8A 82         [24] 4423 	mov	dpl,r2
   1118 C0 02         [24] 4424 	push	ar2
   111A C0 01         [24] 4425 	push	ar1
   111C 12r0CrCB      [24] 4426 	lcall	_uart_calc_actual_baud_rate_from_th1
   111F 85 82*0E      [24] 4427 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,dpl
   1122 85 83*0F      [24] 4428 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),dph
   1125 85 F0*10      [24] 4429 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),b
   1128 F5*11         [12] 4430 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   112A D0 01         [24] 4431 	pop	ar1
                           4432 ;	../src/uart/src/uart_configure_auto_baud_calc.c:96: calc_br_with_smod_set = uart_calc_actual_baud_rate_from_th1(th1_with_smod_set, true);
   112C 90r00r69      [24] 4433 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_PARM_2
   112F 74 01         [12] 4434 	mov	a,#0x01
   1131 F0            [24] 4435 	movx	@dptr,a
   1132 89 82         [24] 4436 	mov	dpl,r1
   1134 C0 01         [24] 4437 	push	ar1
   1136 12r0CrCB      [24] 4438 	lcall	_uart_calc_actual_baud_rate_from_th1
   1139 85 82*0A      [24] 4439 	mov	_uart_configure_auto_baud_calc_sloc2_1_0,dpl
   113C 85 83*0B      [24] 4440 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 1),dph
   113F 85 F0*0C      [24] 4441 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 2),b
   1142 F5*0D         [12] 4442 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 3),a
   1144 D0 01         [24] 4443 	pop	ar1
   1146 D0 02         [24] 4444 	pop	ar2
   1148 D0 03         [24] 4445 	pop	ar3
   114A D0 04         [24] 4446 	pop	ar4
   114C D0 05         [24] 4447 	pop	ar5
   114E D0 06         [24] 4448 	pop	ar6
   1150 D0 07         [24] 4449 	pop	ar7
                           4450 ;	../src/uart/src/uart_configure_auto_baud_calc.c:99: error_calc_br_with_smod_cleared = (calc_br_with_smod_cleared > baud_rate) ? (calc_br_with_smod_cleared - baud_rate) : (baud_rate - calc_br_with_smod_cleared);
   1152 C3            [12] 4451 	clr	c
   1153 EB            [12] 4452 	mov	a,r3
   1154 95*0E         [12] 4453 	subb	a,_uart_configure_auto_baud_calc_sloc3_1_0
   1156 EC            [12] 4454 	mov	a,r4
   1157 95*0F         [12] 4455 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   1159 ED            [12] 4456 	mov	a,r5
   115A 95*10         [12] 4457 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   115C EE            [12] 4458 	mov	a,r6
   115D 95*11         [12] 4459 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   115F 50 17         [24] 4460 	jnc	00119$
   1161 E5*0E         [12] 4461 	mov	a,_uart_configure_auto_baud_calc_sloc3_1_0
   1163 C3            [12] 4462 	clr	c
   1164 9B            [12] 4463 	subb	a,r3
   1165 F5*06         [12] 4464 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,a
   1167 E5*0F         [12] 4465 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   1169 9C            [12] 4466 	subb	a,r4
   116A F5*07         [12] 4467 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),a
   116C E5*10         [12] 4468 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   116E 9D            [12] 4469 	subb	a,r5
   116F F5*08         [12] 4470 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),a
   1171 E5*11         [12] 4471 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   1173 9E            [12] 4472 	subb	a,r6
   1174 F5*09         [12] 4473 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
   1176 80 15         [24] 4474 	sjmp	00120$
   1178                    4475 00119$:
   1178 EB            [12] 4476 	mov	a,r3
   1179 C3            [12] 4477 	clr	c
   117A 95*0E         [12] 4478 	subb	a,_uart_configure_auto_baud_calc_sloc3_1_0
   117C F5*06         [12] 4479 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,a
   117E EC            [12] 4480 	mov	a,r4
   117F 95*0F         [12] 4481 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   1181 F5*07         [12] 4482 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),a
   1183 ED            [12] 4483 	mov	a,r5
   1184 95*10         [12] 4484 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   1186 F5*08         [12] 4485 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),a
   1188 EE            [12] 4486 	mov	a,r6
   1189 95*11         [12] 4487 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   118B F5*09         [12] 4488 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
   118D                    4489 00120$:
                           4490 ;	../src/uart/src/uart_configure_auto_baud_calc.c:100: error_calc_br_with_smod_set = (calc_br_with_smod_set > baud_rate) ? (calc_br_with_smod_set - baud_rate) : (baud_rate - calc_br_with_smod_set);
   118D C3            [12] 4491 	clr	c
   118E EB            [12] 4492 	mov	a,r3
   118F 95*0A         [12] 4493 	subb	a,_uart_configure_auto_baud_calc_sloc2_1_0
   1191 EC            [12] 4494 	mov	a,r4
   1192 95*0B         [12] 4495 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   1194 ED            [12] 4496 	mov	a,r5
   1195 95*0C         [12] 4497 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   1197 EE            [12] 4498 	mov	a,r6
   1198 95*0D         [12] 4499 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   119A 50 17         [24] 4500 	jnc	00121$
   119C E5*0A         [12] 4501 	mov	a,_uart_configure_auto_baud_calc_sloc2_1_0
   119E C3            [12] 4502 	clr	c
   119F 9B            [12] 4503 	subb	a,r3
   11A0 F5*0E         [12] 4504 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,a
   11A2 E5*0B         [12] 4505 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   11A4 9C            [12] 4506 	subb	a,r4
   11A5 F5*0F         [12] 4507 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),a
   11A7 E5*0C         [12] 4508 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   11A9 9D            [12] 4509 	subb	a,r5
   11AA F5*10         [12] 4510 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),a
   11AC E5*0D         [12] 4511 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   11AE 9E            [12] 4512 	subb	a,r6
   11AF F5*11         [12] 4513 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   11B1 80 15         [24] 4514 	sjmp	00122$
   11B3                    4515 00121$:
   11B3 EB            [12] 4516 	mov	a,r3
   11B4 C3            [12] 4517 	clr	c
   11B5 95*0A         [12] 4518 	subb	a,_uart_configure_auto_baud_calc_sloc2_1_0
   11B7 F5*0E         [12] 4519 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,a
   11B9 EC            [12] 4520 	mov	a,r4
   11BA 95*0B         [12] 4521 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   11BC F5*0F         [12] 4522 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),a
   11BE ED            [12] 4523 	mov	a,r5
   11BF 95*0C         [12] 4524 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   11C1 F5*10         [12] 4525 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),a
   11C3 EE            [12] 4526 	mov	a,r6
   11C4 95*0D         [12] 4527 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   11C6 F5*11         [12] 4528 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   11C8                    4529 00122$:
                           4530 ;	../src/uart/src/uart_configure_auto_baud_calc.c:103: if(error_calc_br_with_smod_cleared < error_calc_br_with_smod_set)
   11C8 C3            [12] 4531 	clr	c
   11C9 E5*06         [12] 4532 	mov	a,_uart_configure_auto_baud_calc_sloc1_1_0
   11CB 95*0E         [12] 4533 	subb	a,_uart_configure_auto_baud_calc_sloc3_1_0
   11CD E5*07         [12] 4534 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   11CF 95*0F         [12] 4535 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   11D1 E5*08         [12] 4536 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   11D3 95*10         [12] 4537 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   11D5 E5*09         [12] 4538 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   11D7 95*11         [12] 4539 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   11D9 50 12         [24] 4540 	jnc	00105$
                           4541 ;	../src/uart/src/uart_configure_auto_baud_calc.c:105: uart_configure_manual_baud_calc(((uart_config_options & ~UART_CONFIG_OPTION_BIT_SMOD_MASK) | UART_CONFIG_OPTION_BIT_SMOD_CLEAR),
   11DB 8F 06         [24] 4542 	mov	ar6,r7
   11DD 53 06 FB      [24] 4543 	anl	ar6,#0xFB
                           4544 ;	../src/uart/src/uart_configure_auto_baud_calc.c:106: (uint16_t)th1_with_smod_cleared);
   11E0 90r00r63      [24] 4545 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   11E3 EA            [12] 4546 	mov	a,r2
   11E4 F0            [24] 4547 	movx	@dptr,a
   11E5 E4            [12] 4548 	clr	a
   11E6 A3            [24] 4549 	inc	dptr
   11E7 F0            [24] 4550 	movx	@dptr,a
   11E8 8E 82         [24] 4551 	mov	dpl,r6
   11EA 02r0BrB4      [24] 4552 	ljmp	_uart_configure_manual_baud_calc
   11ED                    4553 00105$:
                           4554 ;	../src/uart/src/uart_configure_auto_baud_calc.c:110: uart_configure_manual_baud_calc(((uart_config_options & ~UART_CONFIG_OPTION_BIT_SMOD_MASK) | UART_CONFIG_OPTION_BIT_SMOD_SET),
   11ED 74 FB         [12] 4555 	mov	a,#0xFB
   11EF 5F            [12] 4556 	anl	a,r7
   11F0 44 04         [12] 4557 	orl	a,#0x04
   11F2 FF            [12] 4558 	mov	r7,a
                           4559 ;	../src/uart/src/uart_configure_auto_baud_calc.c:111: (uint16_t)th1_with_smod_set);
   11F3 90r00r63      [24] 4560 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   11F6 E9            [12] 4561 	mov	a,r1
   11F7 F0            [24] 4562 	movx	@dptr,a
   11F8 E4            [12] 4563 	clr	a
   11F9 A3            [24] 4564 	inc	dptr
   11FA F0            [24] 4565 	movx	@dptr,a
   11FB 8F 82         [24] 4566 	mov	dpl,r7
   11FD 02r0BrB4      [24] 4567 	ljmp	_uart_configure_manual_baud_calc
                           4568 ;------------------------------------------------------------
                           4569 ;Allocation info for local variables in function 'radiobegin'
                           4570 ;------------------------------------------------------------
                           4571 ;setup                     Allocated with name '_radiobegin_setup_1_227'
                           4572 ;------------------------------------------------------------
                           4573 ;	../nRFLE.c:22: void radiobegin() {
                           4574 ;	-----------------------------------------
                           4575 ;	 function radiobegin
                           4576 ;	-----------------------------------------
   1200                    4577 _radiobegin:
                           4578 ;	../nRFLE.c:26: rf_spi_configure_enable();
   1200 12r00rF9      [24] 4579 	lcall	_rf_spi_configure_enable
                           4580 ;	../nRFLE.c:28: setup = 255; // setup_retr setRetries 15*16+15
   1203 90r00r7A      [24] 4581 	mov	dptr,#_radiobegin_setup_1_227
   1206 74 FF         [12] 4582 	mov	a,#0xFF
   1208 F0            [24] 4583 	movx	@dptr,a
                           4584 ;	../nRFLE.c:29: rf_write_register(RF_SETUP_RETR, &setup, 1);
   1209 90r00r08      [24] 4585 	mov	dptr,#_rf_write_register_PARM_2
   120C 74r7A         [12] 4586 	mov	a,#_radiobegin_setup_1_227
   120E F0            [24] 4587 	movx	@dptr,a
   120F 74s00         [12] 4588 	mov	a,#(_radiobegin_setup_1_227 >> 8)
   1211 A3            [24] 4589 	inc	dptr
   1212 F0            [24] 4590 	movx	@dptr,a
   1213 E4            [12] 4591 	clr	a
   1214 A3            [24] 4592 	inc	dptr
   1215 F0            [24] 4593 	movx	@dptr,a
   1216 90r00r0B      [24] 4594 	mov	dptr,#_rf_write_register_PARM_3
   1219 74 01         [12] 4595 	mov	a,#0x01
   121B F0            [24] 4596 	movx	@dptr,a
   121C E4            [12] 4597 	clr	a
   121D A3            [24] 4598 	inc	dptr
   121E F0            [24] 4599 	movx	@dptr,a
   121F 75 82 04      [24] 4600 	mov	dpl,#0x04
   1222 02r00rBC      [24] 4601 	ljmp	_rf_write_register
                           4602 ;------------------------------------------------------------
                           4603 ;Allocation info for local variables in function 'setChannel'
                           4604 ;------------------------------------------------------------
                           4605 ;channel                   Allocated with name '_setChannel_channel_1_228'
                           4606 ;------------------------------------------------------------
                           4607 ;	../nRFLE.c:35: void setChannel(unsigned char channel){
                           4608 ;	-----------------------------------------
                           4609 ;	 function setChannel
                           4610 ;	-----------------------------------------
   1225                    4611 _setChannel:
   1225 E5 82         [12] 4612 	mov	a,dpl
   1227 90r00r7B      [24] 4613 	mov	dptr,#_setChannel_channel_1_228
   122A F0            [24] 4614 	movx	@dptr,a
                           4615 ;	../nRFLE.c:36: rf_write_register(RF_RF_CH, &channel, 1);
   122B 90r00r08      [24] 4616 	mov	dptr,#_rf_write_register_PARM_2
   122E 74r7B         [12] 4617 	mov	a,#_setChannel_channel_1_228
   1230 F0            [24] 4618 	movx	@dptr,a
   1231 74s00         [12] 4619 	mov	a,#(_setChannel_channel_1_228 >> 8)
   1233 A3            [24] 4620 	inc	dptr
   1234 F0            [24] 4621 	movx	@dptr,a
   1235 E4            [12] 4622 	clr	a
   1236 A3            [24] 4623 	inc	dptr
   1237 F0            [24] 4624 	movx	@dptr,a
   1238 90r00r0B      [24] 4625 	mov	dptr,#_rf_write_register_PARM_3
   123B 74 01         [12] 4626 	mov	a,#0x01
   123D F0            [24] 4627 	movx	@dptr,a
   123E E4            [12] 4628 	clr	a
   123F A3            [24] 4629 	inc	dptr
   1240 F0            [24] 4630 	movx	@dptr,a
   1241 75 82 05      [24] 4631 	mov	dpl,#0x05
   1244 02r00rBC      [24] 4632 	ljmp	_rf_write_register
                           4633 ;------------------------------------------------------------
                           4634 ;Allocation info for local variables in function 'setDataRate'
                           4635 ;------------------------------------------------------------
                           4636 ;speed                     Allocated with name '_setDataRate_speed_1_230'
                           4637 ;buffer                    Allocated with name '_setDataRate_buffer_1_231'
                           4638 ;------------------------------------------------------------
                           4639 ;	../nRFLE.c:41: void setDataRate(unsigned char speed){
                           4640 ;	-----------------------------------------
                           4641 ;	 function setDataRate
                           4642 ;	-----------------------------------------
   1247                    4643 _setDataRate:
   1247 E5 82         [12] 4644 	mov	a,dpl
   1249 90r00r7C      [24] 4645 	mov	dptr,#_setDataRate_speed_1_230
   124C F0            [24] 4646 	movx	@dptr,a
                           4647 ;	../nRFLE.c:43: rf_read_register(RF_RF_SETUP,&buffer,1);
   124D 90r00r28      [24] 4648 	mov	dptr,#_rf_read_register_PARM_2
   1250 74r7D         [12] 4649 	mov	a,#_setDataRate_buffer_1_231
   1252 F0            [24] 4650 	movx	@dptr,a
   1253 74s00         [12] 4651 	mov	a,#(_setDataRate_buffer_1_231 >> 8)
   1255 A3            [24] 4652 	inc	dptr
   1256 F0            [24] 4653 	movx	@dptr,a
   1257 E4            [12] 4654 	clr	a
   1258 A3            [24] 4655 	inc	dptr
   1259 F0            [24] 4656 	movx	@dptr,a
   125A 90r00r2B      [24] 4657 	mov	dptr,#_rf_read_register_PARM_3
   125D 74 01         [12] 4658 	mov	a,#0x01
   125F F0            [24] 4659 	movx	@dptr,a
   1260 E4            [12] 4660 	clr	a
   1261 A3            [24] 4661 	inc	dptr
   1262 F0            [24] 4662 	movx	@dptr,a
   1263 75 82 06      [24] 4663 	mov	dpl,#0x06
   1266 12r03r70      [24] 4664 	lcall	_rf_read_register
                           4665 ;	../nRFLE.c:45: buffer &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   1269 90r00r7D      [24] 4666 	mov	dptr,#_setDataRate_buffer_1_231
   126C E0            [24] 4667 	movx	a,@dptr
   126D 54 D7         [12] 4668 	anl	a,#0xD7
   126F F0            [24] 4669 	movx	@dptr,a
                           4670 ;	../nRFLE.c:47: if( speed == 1 )	 buffer |= _BV(RF_DR_LOW);
   1270 90r00r7C      [24] 4671 	mov	dptr,#_setDataRate_speed_1_230
   1273 E0            [24] 4672 	movx	a,@dptr
   1274 FF            [12] 4673 	mov	r7,a
   1275 BF 01 0A      [24] 4674 	cjne	r7,#0x01,00104$
   1278 90r00r7D      [24] 4675 	mov	dptr,#_setDataRate_buffer_1_231
   127B E0            [24] 4676 	movx	a,@dptr
   127C FE            [12] 4677 	mov	r6,a
   127D 44 20         [12] 4678 	orl	a,#0x20
   127F F0            [24] 4679 	movx	@dptr,a
   1280 80 0B         [24] 4680 	sjmp	00105$
   1282                    4681 00104$:
                           4682 ;	../nRFLE.c:49: else if ( speed == 3 ) buffer |= _BV(RF_DR_HIGH);
   1282 BF 03 08      [24] 4683 	cjne	r7,#0x03,00105$
   1285 90r00r7D      [24] 4684 	mov	dptr,#_setDataRate_buffer_1_231
   1288 E0            [24] 4685 	movx	a,@dptr
   1289 FF            [12] 4686 	mov	r7,a
   128A 44 08         [12] 4687 	orl	a,#0x08
   128C F0            [24] 4688 	movx	@dptr,a
   128D                    4689 00105$:
                           4690 ;	../nRFLE.c:51: rf_write_register(RF_RF_SETUP,&buffer,1 ) ;
   128D 90r00r08      [24] 4691 	mov	dptr,#_rf_write_register_PARM_2
   1290 74r7D         [12] 4692 	mov	a,#_setDataRate_buffer_1_231
   1292 F0            [24] 4693 	movx	@dptr,a
   1293 74s00         [12] 4694 	mov	a,#(_setDataRate_buffer_1_231 >> 8)
   1295 A3            [24] 4695 	inc	dptr
   1296 F0            [24] 4696 	movx	@dptr,a
   1297 E4            [12] 4697 	clr	a
   1298 A3            [24] 4698 	inc	dptr
   1299 F0            [24] 4699 	movx	@dptr,a
   129A 90r00r0B      [24] 4700 	mov	dptr,#_rf_write_register_PARM_3
   129D 74 01         [12] 4701 	mov	a,#0x01
   129F F0            [24] 4702 	movx	@dptr,a
   12A0 E4            [12] 4703 	clr	a
   12A1 A3            [24] 4704 	inc	dptr
   12A2 F0            [24] 4705 	movx	@dptr,a
   12A3 75 82 06      [24] 4706 	mov	dpl,#0x06
   12A6 02r00rBC      [24] 4707 	ljmp	_rf_write_register
                           4708 ;------------------------------------------------------------
                           4709 ;Allocation info for local variables in function 'setAutoAck'
                           4710 ;------------------------------------------------------------
                           4711 ;enable                    Allocated with name '_setAutoAck_enable_1_232'
                           4712 ;buffer                    Allocated with name '_setAutoAck_buffer_1_233'
                           4713 ;------------------------------------------------------------
                           4714 ;	../nRFLE.c:56: void setAutoAck(unsigned char enable)
                           4715 ;	-----------------------------------------
                           4716 ;	 function setAutoAck
                           4717 ;	-----------------------------------------
   12A9                    4718 _setAutoAck:
   12A9 E5 82         [12] 4719 	mov	a,dpl
                           4720 ;	../nRFLE.c:60: if (enable==1) buffer=63;
   12AB 90r00r7E      [24] 4721 	mov	dptr,#_setAutoAck_enable_1_232
   12AE F0            [24] 4722 	movx	@dptr,a
   12AF FF            [12] 4723 	mov	r7,a
   12B0 BF 01 08      [24] 4724 	cjne	r7,#0x01,00102$
   12B3 90r00r7F      [24] 4725 	mov	dptr,#_setAutoAck_buffer_1_233
   12B6 74 3F         [12] 4726 	mov	a,#0x3F
   12B8 F0            [24] 4727 	movx	@dptr,a
   12B9 80 05         [24] 4728 	sjmp	00103$
   12BB                    4729 00102$:
                           4730 ;	../nRFLE.c:61: else        buffer=0;
   12BB 90r00r7F      [24] 4731 	mov	dptr,#_setAutoAck_buffer_1_233
   12BE E4            [12] 4732 	clr	a
   12BF F0            [24] 4733 	movx	@dptr,a
   12C0                    4734 00103$:
                           4735 ;	../nRFLE.c:62: rf_write_register(RF_EN_AA, &buffer,1);
   12C0 90r00r08      [24] 4736 	mov	dptr,#_rf_write_register_PARM_2
   12C3 74r7F         [12] 4737 	mov	a,#_setAutoAck_buffer_1_233
   12C5 F0            [24] 4738 	movx	@dptr,a
   12C6 74s00         [12] 4739 	mov	a,#(_setAutoAck_buffer_1_233 >> 8)
   12C8 A3            [24] 4740 	inc	dptr
   12C9 F0            [24] 4741 	movx	@dptr,a
   12CA E4            [12] 4742 	clr	a
   12CB A3            [24] 4743 	inc	dptr
   12CC F0            [24] 4744 	movx	@dptr,a
   12CD 90r00r0B      [24] 4745 	mov	dptr,#_rf_write_register_PARM_3
   12D0 74 01         [12] 4746 	mov	a,#0x01
   12D2 F0            [24] 4747 	movx	@dptr,a
   12D3 E4            [12] 4748 	clr	a
   12D4 A3            [24] 4749 	inc	dptr
   12D5 F0            [24] 4750 	movx	@dptr,a
   12D6 75 82 01      [24] 4751 	mov	dpl,#0x01
   12D9 02r00rBC      [24] 4752 	ljmp	_rf_write_register
                           4753 ;------------------------------------------------------------
                           4754 ;Allocation info for local variables in function 'setCRCLength'
                           4755 ;------------------------------------------------------------
                           4756 ;length                    Allocated with name '_setCRCLength_length_1_234'
                           4757 ;buffer                    Allocated with name '_setCRCLength_buffer_1_235'
                           4758 ;------------------------------------------------------------
                           4759 ;	../nRFLE.c:67: void setCRCLength(unsigned char length)
                           4760 ;	-----------------------------------------
                           4761 ;	 function setCRCLength
                           4762 ;	-----------------------------------------
   12DC                    4763 _setCRCLength:
   12DC E5 82         [12] 4764 	mov	a,dpl
   12DE 90r00r80      [24] 4765 	mov	dptr,#_setCRCLength_length_1_234
   12E1 F0            [24] 4766 	movx	@dptr,a
                           4767 ;	../nRFLE.c:71: rf_read_register(RF_CONFIG,&buffer,1);
   12E2 90r00r28      [24] 4768 	mov	dptr,#_rf_read_register_PARM_2
   12E5 74r81         [12] 4769 	mov	a,#_setCRCLength_buffer_1_235
   12E7 F0            [24] 4770 	movx	@dptr,a
   12E8 74s00         [12] 4771 	mov	a,#(_setCRCLength_buffer_1_235 >> 8)
   12EA A3            [24] 4772 	inc	dptr
   12EB F0            [24] 4773 	movx	@dptr,a
   12EC E4            [12] 4774 	clr	a
   12ED A3            [24] 4775 	inc	dptr
   12EE F0            [24] 4776 	movx	@dptr,a
   12EF 90r00r2B      [24] 4777 	mov	dptr,#_rf_read_register_PARM_3
   12F2 74 01         [12] 4778 	mov	a,#0x01
   12F4 F0            [24] 4779 	movx	@dptr,a
   12F5 E4            [12] 4780 	clr	a
   12F6 A3            [24] 4781 	inc	dptr
   12F7 F0            [24] 4782 	movx	@dptr,a
   12F8 75 82 00      [24] 4783 	mov	dpl,#0x00
   12FB 12r03r70      [24] 4784 	lcall	_rf_read_register
                           4785 ;	../nRFLE.c:73: buffer = buffer & ~( _BV(RF_CRCO) | _BV(RF_EN_CRC)) ;
   12FE 90r00r81      [24] 4786 	mov	dptr,#_setCRCLength_buffer_1_235
   1301 E0            [24] 4787 	movx	a,@dptr
   1302 54 F3         [12] 4788 	anl	a,#0xF3
   1304 F0            [24] 4789 	movx	@dptr,a
                           4790 ;	../nRFLE.c:75: if (length==1) buffer |= _BV(RF_EN_CRC);
   1305 90r00r80      [24] 4791 	mov	dptr,#_setCRCLength_length_1_234
   1308 E0            [24] 4792 	movx	a,@dptr
   1309 FF            [12] 4793 	mov	r7,a
   130A BF 01 0A      [24] 4794 	cjne	r7,#0x01,00104$
   130D 90r00r81      [24] 4795 	mov	dptr,#_setCRCLength_buffer_1_235
   1310 E0            [24] 4796 	movx	a,@dptr
   1311 FE            [12] 4797 	mov	r6,a
   1312 44 08         [12] 4798 	orl	a,#0x08
   1314 F0            [24] 4799 	movx	@dptr,a
   1315 80 0B         [24] 4800 	sjmp	00105$
   1317                    4801 00104$:
                           4802 ;	../nRFLE.c:76: else if (length==2) buffer |= _BV(RF_EN_CRC) | _BV( RF_CRCO );
   1317 BF 02 08      [24] 4803 	cjne	r7,#0x02,00105$
   131A 90r00r81      [24] 4804 	mov	dptr,#_setCRCLength_buffer_1_235
   131D E0            [24] 4805 	movx	a,@dptr
   131E FF            [12] 4806 	mov	r7,a
   131F 44 0C         [12] 4807 	orl	a,#0x0C
   1321 F0            [24] 4808 	movx	@dptr,a
   1322                    4809 00105$:
                           4810 ;	../nRFLE.c:78: buffer |=1<<PWR_UP;
   1322 90r00r81      [24] 4811 	mov	dptr,#_setCRCLength_buffer_1_235
   1325 E0            [24] 4812 	movx	a,@dptr
   1326 44 02         [12] 4813 	orl	a,#0x02
   1328 F0            [24] 4814 	movx	@dptr,a
                           4815 ;	../nRFLE.c:80: rf_write_register(RF_CONFIG,&buffer,1 ) ;
   1329 90r00r08      [24] 4816 	mov	dptr,#_rf_write_register_PARM_2
   132C 74r81         [12] 4817 	mov	a,#_setCRCLength_buffer_1_235
   132E F0            [24] 4818 	movx	@dptr,a
   132F 74s00         [12] 4819 	mov	a,#(_setCRCLength_buffer_1_235 >> 8)
   1331 A3            [24] 4820 	inc	dptr
   1332 F0            [24] 4821 	movx	@dptr,a
   1333 E4            [12] 4822 	clr	a
   1334 A3            [24] 4823 	inc	dptr
   1335 F0            [24] 4824 	movx	@dptr,a
   1336 90r00r0B      [24] 4825 	mov	dptr,#_rf_write_register_PARM_3
   1339 74 01         [12] 4826 	mov	a,#0x01
   133B F0            [24] 4827 	movx	@dptr,a
   133C E4            [12] 4828 	clr	a
   133D A3            [24] 4829 	inc	dptr
   133E F0            [24] 4830 	movx	@dptr,a
   133F 75 82 00      [24] 4831 	mov	dpl,#0x00
   1342 02r00rBC      [24] 4832 	ljmp	_rf_write_register
                           4833 ;------------------------------------------------------------
                           4834 ;Allocation info for local variables in function 'setPALevel'
                           4835 ;------------------------------------------------------------
                           4836 ;level                     Allocated with name '_setPALevel_level_1_236'
                           4837 ;setup                     Allocated with name '_setPALevel_setup_1_237'
                           4838 ;------------------------------------------------------------
                           4839 ;	../nRFLE.c:84: void setPALevel(unsigned char level)
                           4840 ;	-----------------------------------------
                           4841 ;	 function setPALevel
                           4842 ;	-----------------------------------------
   1345                    4843 _setPALevel:
                           4844 ;	../nRFLE.c:88: rf_read_register(RF_RF_SETUP,&setup,1) ;
   1345 90r00r28      [24] 4845 	mov	dptr,#_rf_read_register_PARM_2
   1348 74r82         [12] 4846 	mov	a,#_setPALevel_setup_1_237
   134A F0            [24] 4847 	movx	@dptr,a
   134B 74s00         [12] 4848 	mov	a,#(_setPALevel_setup_1_237 >> 8)
   134D A3            [24] 4849 	inc	dptr
   134E F0            [24] 4850 	movx	@dptr,a
   134F E4            [12] 4851 	clr	a
   1350 A3            [24] 4852 	inc	dptr
   1351 F0            [24] 4853 	movx	@dptr,a
   1352 90r00r2B      [24] 4854 	mov	dptr,#_rf_read_register_PARM_3
   1355 74 01         [12] 4855 	mov	a,#0x01
   1357 F0            [24] 4856 	movx	@dptr,a
   1358 E4            [12] 4857 	clr	a
   1359 A3            [24] 4858 	inc	dptr
   135A F0            [24] 4859 	movx	@dptr,a
   135B 75 82 06      [24] 4860 	mov	dpl,#0x06
   135E 12r03r70      [24] 4861 	lcall	_rf_read_register
                           4862 ;	../nRFLE.c:90: setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
   1361 90r00r82      [24] 4863 	mov	dptr,#_setPALevel_setup_1_237
   1364 E0            [24] 4864 	movx	a,@dptr
   1365 54 F9         [12] 4865 	anl	a,#0xF9
   1367 F0            [24] 4866 	movx	@dptr,a
                           4867 ;	../nRFLE.c:93: rf_write_register(RF_RF_SETUP,&setup,1);
   1368 90r00r08      [24] 4868 	mov	dptr,#_rf_write_register_PARM_2
   136B 74r82         [12] 4869 	mov	a,#_setPALevel_setup_1_237
   136D F0            [24] 4870 	movx	@dptr,a
   136E 74s00         [12] 4871 	mov	a,#(_setPALevel_setup_1_237 >> 8)
   1370 A3            [24] 4872 	inc	dptr
   1371 F0            [24] 4873 	movx	@dptr,a
   1372 E4            [12] 4874 	clr	a
   1373 A3            [24] 4875 	inc	dptr
   1374 F0            [24] 4876 	movx	@dptr,a
   1375 90r00r0B      [24] 4877 	mov	dptr,#_rf_write_register_PARM_3
   1378 74 01         [12] 4878 	mov	a,#0x01
   137A F0            [24] 4879 	movx	@dptr,a
   137B E4            [12] 4880 	clr	a
   137C A3            [24] 4881 	inc	dptr
   137D F0            [24] 4882 	movx	@dptr,a
   137E 75 82 06      [24] 4883 	mov	dpl,#0x06
   1381 02r00rBC      [24] 4884 	ljmp	_rf_write_register
                           4885 ;------------------------------------------------------------
                           4886 ;Allocation info for local variables in function 'openAllPipe'
                           4887 ;------------------------------------------------------------
                           4888 ;buffer                    Allocated with name '_openAllPipe_buffer_1_238'
                           4889 ;setup                     Allocated with name '_openAllPipe_setup_1_238'
                           4890 ;------------------------------------------------------------
                           4891 ;	../nRFLE.c:101: void openAllPipe()
                           4892 ;	-----------------------------------------
                           4893 ;	 function openAllPipe
                           4894 ;	-----------------------------------------
   1384                    4895 _openAllPipe:
                           4896 ;	../nRFLE.c:106: buffer[1]=adr1;
   1384 90r00r84      [24] 4897 	mov	dptr,#(_openAllPipe_buffer_1_238 + 0x0001)
   1387 74 F0         [12] 4898 	mov	a,#0xF0
   1389 F0            [24] 4899 	movx	@dptr,a
                           4900 ;	../nRFLE.c:107: buffer[2]=adr2;
   138A 90r00r85      [24] 4901 	mov	dptr,#(_openAllPipe_buffer_1_238 + 0x0002)
   138D 74 F0         [12] 4902 	mov	a,#0xF0
   138F F0            [24] 4903 	movx	@dptr,a
                           4904 ;	../nRFLE.c:108: buffer[3]=adr3;
   1390 90r00r86      [24] 4905 	mov	dptr,#(_openAllPipe_buffer_1_238 + 0x0003)
   1393 74 F0         [12] 4906 	mov	a,#0xF0
   1395 F0            [24] 4907 	movx	@dptr,a
                           4908 ;	../nRFLE.c:109: buffer[4]=adr4;
   1396 90r00r87      [24] 4909 	mov	dptr,#(_openAllPipe_buffer_1_238 + 0x0004)
   1399 74 F0         [12] 4910 	mov	a,#0xF0
   139B F0            [24] 4911 	movx	@dptr,a
                           4912 ;	../nRFLE.c:111: setup = 2; // en_rxaddr ,биты включения каналов B00000010 на прием
   139C 90r00r88      [24] 4913 	mov	dptr,#_openAllPipe_setup_1_238
   139F 74 02         [12] 4914 	mov	a,#0x02
   13A1 F0            [24] 4915 	movx	@dptr,a
                           4916 ;	../nRFLE.c:112: rf_write_register(RF_EN_RXADDR, &setup, 1);
   13A2 90r00r08      [24] 4917 	mov	dptr,#_rf_write_register_PARM_2
   13A5 74r88         [12] 4918 	mov	a,#_openAllPipe_setup_1_238
   13A7 F0            [24] 4919 	movx	@dptr,a
   13A8 74s00         [12] 4920 	mov	a,#(_openAllPipe_setup_1_238 >> 8)
   13AA A3            [24] 4921 	inc	dptr
   13AB F0            [24] 4922 	movx	@dptr,a
   13AC E4            [12] 4923 	clr	a
   13AD A3            [24] 4924 	inc	dptr
   13AE F0            [24] 4925 	movx	@dptr,a
   13AF 90r00r0B      [24] 4926 	mov	dptr,#_rf_write_register_PARM_3
   13B2 74 01         [12] 4927 	mov	a,#0x01
   13B4 F0            [24] 4928 	movx	@dptr,a
   13B5 E4            [12] 4929 	clr	a
   13B6 A3            [24] 4930 	inc	dptr
   13B7 F0            [24] 4931 	movx	@dptr,a
   13B8 75 82 02      [24] 4932 	mov	dpl,#0x02
   13BB 12r00rBC      [24] 4933 	lcall	_rf_write_register
                           4934 ;	../nRFLE.c:115: buffer[0]=0xD2;
   13BE 90r00r83      [24] 4935 	mov	dptr,#_openAllPipe_buffer_1_238
   13C1 74 D2         [12] 4936 	mov	a,#0xD2
   13C3 F0            [24] 4937 	movx	@dptr,a
                           4938 ;	../nRFLE.c:117: rf_write_register(RF_RX_ADDR_P0,buffer,5);
   13C4 90r00r08      [24] 4939 	mov	dptr,#_rf_write_register_PARM_2
   13C7 74r83         [12] 4940 	mov	a,#_openAllPipe_buffer_1_238
   13C9 F0            [24] 4941 	movx	@dptr,a
   13CA 74s00         [12] 4942 	mov	a,#(_openAllPipe_buffer_1_238 >> 8)
   13CC A3            [24] 4943 	inc	dptr
   13CD F0            [24] 4944 	movx	@dptr,a
   13CE E4            [12] 4945 	clr	a
   13CF A3            [24] 4946 	inc	dptr
   13D0 F0            [24] 4947 	movx	@dptr,a
   13D1 90r00r0B      [24] 4948 	mov	dptr,#_rf_write_register_PARM_3
   13D4 74 05         [12] 4949 	mov	a,#0x05
   13D6 F0            [24] 4950 	movx	@dptr,a
   13D7 E4            [12] 4951 	clr	a
   13D8 A3            [24] 4952 	inc	dptr
   13D9 F0            [24] 4953 	movx	@dptr,a
   13DA 75 82 0A      [24] 4954 	mov	dpl,#0x0A
   13DD 12r00rBC      [24] 4955 	lcall	_rf_write_register
                           4956 ;	../nRFLE.c:118: rf_write_register(RF_TX_ADDR,buffer,5);
   13E0 90r00r08      [24] 4957 	mov	dptr,#_rf_write_register_PARM_2
   13E3 74r83         [12] 4958 	mov	a,#_openAllPipe_buffer_1_238
   13E5 F0            [24] 4959 	movx	@dptr,a
   13E6 74s00         [12] 4960 	mov	a,#(_openAllPipe_buffer_1_238 >> 8)
   13E8 A3            [24] 4961 	inc	dptr
   13E9 F0            [24] 4962 	movx	@dptr,a
   13EA E4            [12] 4963 	clr	a
   13EB A3            [24] 4964 	inc	dptr
   13EC F0            [24] 4965 	movx	@dptr,a
   13ED 90r00r0B      [24] 4966 	mov	dptr,#_rf_write_register_PARM_3
   13F0 74 05         [12] 4967 	mov	a,#0x05
   13F2 F0            [24] 4968 	movx	@dptr,a
   13F3 E4            [12] 4969 	clr	a
   13F4 A3            [24] 4970 	inc	dptr
   13F5 F0            [24] 4971 	movx	@dptr,a
   13F6 75 82 10      [24] 4972 	mov	dpl,#0x10
   13F9 12r00rBC      [24] 4973 	lcall	_rf_write_register
                           4974 ;	../nRFLE.c:122: buffer[0]=0xE1;
   13FC 90r00r83      [24] 4975 	mov	dptr,#_openAllPipe_buffer_1_238
   13FF 74 E1         [12] 4976 	mov	a,#0xE1
   1401 F0            [24] 4977 	movx	@dptr,a
                           4978 ;	../nRFLE.c:124: rf_write_register(RF_RX_ADDR_P0+1,buffer,5);
   1402 90r00r08      [24] 4979 	mov	dptr,#_rf_write_register_PARM_2
   1405 74r83         [12] 4980 	mov	a,#_openAllPipe_buffer_1_238
   1407 F0            [24] 4981 	movx	@dptr,a
   1408 74s00         [12] 4982 	mov	a,#(_openAllPipe_buffer_1_238 >> 8)
   140A A3            [24] 4983 	inc	dptr
   140B F0            [24] 4984 	movx	@dptr,a
   140C E4            [12] 4985 	clr	a
   140D A3            [24] 4986 	inc	dptr
   140E F0            [24] 4987 	movx	@dptr,a
   140F 90r00r0B      [24] 4988 	mov	dptr,#_rf_write_register_PARM_3
   1412 74 05         [12] 4989 	mov	a,#0x05
   1414 F0            [24] 4990 	movx	@dptr,a
   1415 E4            [12] 4991 	clr	a
   1416 A3            [24] 4992 	inc	dptr
   1417 F0            [24] 4993 	movx	@dptr,a
   1418 75 82 0B      [24] 4994 	mov	dpl,#0x0B
   141B 12r00rBC      [24] 4995 	lcall	_rf_write_register
                           4996 ;	../nRFLE.c:126: setup=32; //
   141E 90r00r88      [24] 4997 	mov	dptr,#_openAllPipe_setup_1_238
   1421 74 20         [12] 4998 	mov	a,#0x20
   1423 F0            [24] 4999 	movx	@dptr,a
                           5000 ;	../nRFLE.c:127: rf_write_register(RF_RX_PW_P0+1,&setup,1);
   1424 90r00r08      [24] 5001 	mov	dptr,#_rf_write_register_PARM_2
   1427 74r88         [12] 5002 	mov	a,#_openAllPipe_setup_1_238
   1429 F0            [24] 5003 	movx	@dptr,a
   142A 74s00         [12] 5004 	mov	a,#(_openAllPipe_setup_1_238 >> 8)
   142C A3            [24] 5005 	inc	dptr
   142D F0            [24] 5006 	movx	@dptr,a
   142E E4            [12] 5007 	clr	a
   142F A3            [24] 5008 	inc	dptr
   1430 F0            [24] 5009 	movx	@dptr,a
   1431 90r00r0B      [24] 5010 	mov	dptr,#_rf_write_register_PARM_3
   1434 74 01         [12] 5011 	mov	a,#0x01
   1436 F0            [24] 5012 	movx	@dptr,a
   1437 E4            [12] 5013 	clr	a
   1438 A3            [24] 5014 	inc	dptr
   1439 F0            [24] 5015 	movx	@dptr,a
   143A 75 82 12      [24] 5016 	mov	dpl,#0x12
   143D 02r00rBC      [24] 5017 	ljmp	_rf_write_register
                           5018 ;------------------------------------------------------------
                           5019 ;Allocation info for local variables in function 'isr_ifp'
                           5020 ;------------------------------------------------------------
                           5021 ;	main.c:46: interrupt_isr_ifp()
                           5022 ;	-----------------------------------------
                           5023 ;	 function isr_ifp
                           5024 ;	-----------------------------------------
   1440                    5025 _isr_ifp:
   1440 C0*00         [24] 5026 	push	bits
   1442 C0 E0         [24] 5027 	push	acc
   1444 C0 F0         [24] 5028 	push	b
   1446 C0 82         [24] 5029 	push	dpl
   1448 C0 83         [24] 5030 	push	dph
   144A C0 07         [24] 5031 	push	(0+7)
   144C C0 06         [24] 5032 	push	(0+6)
   144E C0 05         [24] 5033 	push	(0+5)
   1450 C0 04         [24] 5034 	push	(0+4)
   1452 C0 03         [24] 5035 	push	(0+3)
   1454 C0 02         [24] 5036 	push	(0+2)
   1456 C0 01         [24] 5037 	push	(0+1)
   1458 C0 00         [24] 5038 	push	(0+0)
   145A C0 D0         [24] 5039 	push	psw
   145C 75 D0 00      [24] 5040 	mov	psw,#0x00
                           5041 ;	main.c:48: timer1_stop();
   145F C2 8E         [12] 5042 	clr _TCON_SB_TR1 
                           5043 ;	main.c:49: if(clientnf.countPWM !=0) {
   1461 90r00r8A      [24] 5044 	mov	dptr,#(_clientnf + 0x0001)
   1464 E0            [24] 5045 	movx	a,@dptr
   1465 FE            [12] 5046 	mov	r6,a
   1466 A3            [24] 5047 	inc	dptr
   1467 E0            [24] 5048 	movx	a,@dptr
   1468 FF            [12] 5049 	mov	r7,a
   1469 4E            [12] 5050 	orl	a,r6
   146A 60 3F         [24] 5051 	jz	00102$
                           5052 ;	main.c:51: timer1_set_t1_val(65535-DIMSTART*(DIMMERSTEP-clientnf.countPWM) );
   146C 74 64         [12] 5053 	mov	a,#0x64
   146E C3            [12] 5054 	clr	c
   146F 9E            [12] 5055 	subb	a,r6
   1470 FE            [12] 5056 	mov	r6,a
   1471 E4            [12] 5057 	clr	a
   1472 9F            [12] 5058 	subb	a,r7
   1473 FF            [12] 5059 	mov	r7,a
   1474 90r00r00      [24] 5060 	mov	dptr,#__mullong_PARM_2
   1477 EE            [12] 5061 	mov	a,r6
   1478 F0            [24] 5062 	movx	@dptr,a
   1479 EF            [12] 5063 	mov	a,r7
   147A A3            [24] 5064 	inc	dptr
   147B F0            [24] 5065 	movx	@dptr,a
   147C EF            [12] 5066 	mov	a,r7
   147D 33            [12] 5067 	rlc	a
   147E 95 E0         [12] 5068 	subb	a,acc
   1480 A3            [24] 5069 	inc	dptr
   1481 F0            [24] 5070 	movx	@dptr,a
   1482 A3            [24] 5071 	inc	dptr
   1483 F0            [24] 5072 	movx	@dptr,a
   1484 90 00 85      [24] 5073 	mov	dptr,#(0x85&0x00ff)
   1487 E4            [12] 5074 	clr	a
   1488 F5 F0         [12] 5075 	mov	b,a
   148A 12r00r00      [24] 5076 	lcall	__mullong
   148D AC 82         [24] 5077 	mov	r4,dpl
   148F AD 83         [24] 5078 	mov	r5,dph
   1491 AE F0         [24] 5079 	mov	r6,b
   1493 FF            [12] 5080 	mov	r7,a
   1494 74 FF         [12] 5081 	mov	a,#0xFF
   1496 C3            [12] 5082 	clr	c
   1497 9C            [12] 5083 	subb	a,r4
   1498 FC            [12] 5084 	mov	r4,a
   1499 74 FF         [12] 5085 	mov	a,#0xFF
   149B 9D            [12] 5086 	subb	a,r5
   149C FD            [12] 5087 	mov	r5,a
   149D E4            [12] 5088 	clr	a
   149E 9E            [12] 5089 	subb	a,r6
   149F FE            [12] 5090 	mov	r6,a
   14A0 E4            [12] 5091 	clr	a
   14A1 9F            [12] 5092 	subb	a,r7
   14A2 FF            [12] 5093 	mov	r7,a
   14A3 8C 8B         [24] 5094 	mov	((_T1 >> 0) & 0xFF),r4
   14A5 8D 8D         [24] 5095 	mov	((_T1 >> 8) & 0xFF),r5
                           5096 ;	main.c:53: timer1_run();
   14A7 D2 8E         [12] 5097 	setb _TCON_SB_TR1 
   14A9 80 06         [24] 5098 	sjmp	00103$
   14AB                    5099 00102$:
                           5100 ;	main.c:55: else gpio_pin_val_clear(DIMMPIN);
   14AB 75 82 02      [24] 5101 	mov	dpl,#0x02
   14AE 12r07r51      [24] 5102 	lcall	_gpio_pin_val_clear
   14B1                    5103 00103$:
                           5104 ;	main.c:56: stdimm=1;
   14B1 90r00r9B      [24] 5105 	mov	dptr,#_stdimm
   14B4 74 01         [12] 5106 	mov	a,#0x01
   14B6 F0            [24] 5107 	movx	@dptr,a
   14B7 D0 D0         [24] 5108 	pop	psw
   14B9 D0 00         [24] 5109 	pop	(0+0)
   14BB D0 01         [24] 5110 	pop	(0+1)
   14BD D0 02         [24] 5111 	pop	(0+2)
   14BF D0 03         [24] 5112 	pop	(0+3)
   14C1 D0 04         [24] 5113 	pop	(0+4)
   14C3 D0 05         [24] 5114 	pop	(0+5)
   14C5 D0 06         [24] 5115 	pop	(0+6)
   14C7 D0 07         [24] 5116 	pop	(0+7)
   14C9 D0 83         [24] 5117 	pop	dph
   14CB D0 82         [24] 5118 	pop	dpl
   14CD D0 F0         [24] 5119 	pop	b
   14CF D0 E0         [24] 5120 	pop	acc
   14D1 D0*00         [24] 5121 	pop	bits
   14D3 32            [24] 5122 	reti
                           5123 ;------------------------------------------------------------
                           5124 ;Allocation info for local variables in function 'isr_t1'
                           5125 ;------------------------------------------------------------
                           5126 ;	main.c:60: interrupt_isr_t1() {
                           5127 ;	-----------------------------------------
                           5128 ;	 function isr_t1
                           5129 ;	-----------------------------------------
   14D4                    5130 _isr_t1:
   14D4 C0*00         [24] 5131 	push	bits
   14D6 C0 E0         [24] 5132 	push	acc
   14D8 C0 F0         [24] 5133 	push	b
   14DA C0 82         [24] 5134 	push	dpl
   14DC C0 83         [24] 5135 	push	dph
   14DE C0 07         [24] 5136 	push	(0+7)
   14E0 C0 06         [24] 5137 	push	(0+6)
   14E2 C0 05         [24] 5138 	push	(0+5)
   14E4 C0 04         [24] 5139 	push	(0+4)
   14E6 C0 03         [24] 5140 	push	(0+3)
   14E8 C0 02         [24] 5141 	push	(0+2)
   14EA C0 01         [24] 5142 	push	(0+1)
   14EC C0 00         [24] 5143 	push	(0+0)
   14EE C0 D0         [24] 5144 	push	psw
   14F0 75 D0 00      [24] 5145 	mov	psw,#0x00
                           5146 ;	main.c:62: if (stdimm) {
   14F3 90r00r9B      [24] 5147 	mov	dptr,#_stdimm
   14F6 E0            [24] 5148 	movx	a,@dptr
   14F7 FF            [12] 5149 	mov	r7,a
   14F8 60 13         [24] 5150 	jz	00102$
                           5151 ;	main.c:63: gpio_pin_val_set(DIMMPIN); 
   14FA 75 82 02      [24] 5152 	mov	dpl,#0x02
   14FD 12r07rBC      [24] 5153 	lcall	_gpio_pin_val_set
                           5154 ;	main.c:64: timer1_set_t1_val(65535-100);
   1500 75 8B 9B      [24] 5155 	mov	((_T1 >> 0) & 0xFF),#0x9B
   1503 75 8D FF      [24] 5156 	mov	((_T1 >> 8) & 0xFF),#0xFF
                           5157 ;	main.c:65: stdimm=0;
   1506 90r00r9B      [24] 5158 	mov	dptr,#_stdimm
   1509 E4            [12] 5159 	clr	a
   150A F0            [24] 5160 	movx	@dptr,a
   150B 80 06         [24] 5161 	sjmp	00104$
   150D                    5162 00102$:
                           5163 ;	main.c:67: gpio_pin_val_clear(DIMMPIN);
   150D 75 82 02      [24] 5164 	mov	dpl,#0x02
   1510 12r07r51      [24] 5165 	lcall	_gpio_pin_val_clear
   1513                    5166 00104$:
   1513 D0 D0         [24] 5167 	pop	psw
   1515 D0 00         [24] 5168 	pop	(0+0)
   1517 D0 01         [24] 5169 	pop	(0+1)
   1519 D0 02         [24] 5170 	pop	(0+2)
   151B D0 03         [24] 5171 	pop	(0+3)
   151D D0 04         [24] 5172 	pop	(0+4)
   151F D0 05         [24] 5173 	pop	(0+5)
   1521 D0 06         [24] 5174 	pop	(0+6)
   1523 D0 07         [24] 5175 	pop	(0+7)
   1525 D0 83         [24] 5176 	pop	dph
   1527 D0 82         [24] 5177 	pop	dpl
   1529 D0 F0         [24] 5178 	pop	b
   152B D0 E0         [24] 5179 	pop	acc
   152D D0*00         [24] 5180 	pop	bits
   152F 32            [24] 5181 	reti
                           5182 ;------------------------------------------------------------
                           5183 ;Allocation info for local variables in function 'dimmon'
                           5184 ;------------------------------------------------------------
                           5185 ;mode                      Allocated with name '_dimmon_mode_1_243'
                           5186 ;------------------------------------------------------------
                           5187 ;	main.c:70: void dimmon(uint8_t mode)
                           5188 ;	-----------------------------------------
                           5189 ;	 function dimmon
                           5190 ;	-----------------------------------------
   1530                    5191 _dimmon:
   1530 E5 82         [12] 5192 	mov	a,dpl
                           5193 ;	main.c:72: if (mode) interrupt_control_ifp_enable();
   1532 90r00r9C      [24] 5194 	mov	dptr,#_dimmon_mode_1_243
   1535 F0            [24] 5195 	movx	@dptr,a
   1536 FF            [12] 5196 	mov	r7,a
   1537 60 04         [24] 5197 	jz	00102$
   1539 D2 A8         [12] 5198 	setb _IEN0_SB_IFP 
   153B 80 0C         [24] 5199 	sjmp	00103$
   153D                    5200 00102$:
                           5201 ;	main.c:74: interrupt_control_ifp_disable();
   153D C2 A8         [12] 5202 	clr _IEN0_SB_IFP 
                           5203 ;	main.c:75: gpio_pin_val_clear(DIMMPIN);
   153F 75 82 02      [24] 5204 	mov	dpl,#0x02
   1542 C0 07         [24] 5205 	push	ar7
   1544 12r07r51      [24] 5206 	lcall	_gpio_pin_val_clear
   1547 D0 07         [24] 5207 	pop	ar7
   1549                    5208 00103$:
                           5209 ;	main.c:77: clientnf.test_data=mode;
   1549 90r00r8C      [24] 5210 	mov	dptr,#(_clientnf + 0x0003)
   154C EF            [12] 5211 	mov	a,r7
   154D F0            [24] 5212 	movx	@dptr,a
   154E 22            [24] 5213 	ret
                           5214 ;------------------------------------------------------------
                           5215 ;Allocation info for local variables in function 'main'
                           5216 ;------------------------------------------------------------
                           5217 ;state                     Allocated with name '_main_state_1_246'
                           5218 ;count                     Allocated with name '_main_count_1_246'
                           5219 ;------------------------------------------------------------
                           5220 ;	main.c:85: void main()
                           5221 ;	-----------------------------------------
                           5222 ;	 function main
                           5223 ;	-----------------------------------------
   154F                    5224 _main:
                           5225 ;	main.c:93: gpio_pin_configure(DIMMPIN,GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT);
   154F 90r00r38      [24] 5226 	mov	dptr,#_gpio_pin_configure_PARM_2
   1552 74 01         [12] 5227 	mov	a,#0x01
   1554 F0            [24] 5228 	movx	@dptr,a
   1555 75 82 02      [24] 5229 	mov	dpl,#0x02
   1558 12r04rC2      [24] 5230 	lcall	_gpio_pin_configure
                           5231 ;	main.c:94: gpio_pin_val_set(DIMMPIN);
   155B 75 82 02      [24] 5232 	mov	dpl,#0x02
   155E 12r07rBC      [24] 5233 	lcall	_gpio_pin_val_set
                           5234 ;	main.c:95: delay_ms(500); 
   1561 90 01 F4      [24] 5235 	mov	dptr,#0x01F4
   1564 12r08rBF      [24] 5236 	lcall	_delay_ms
                           5237 ;	main.c:96: gpio_pin_val_clear(DIMMPIN);
   1567 75 82 02      [24] 5238 	mov	dpl,#0x02
   156A 12r07r51      [24] 5239 	lcall	_gpio_pin_val_clear
                           5240 ;	main.c:97: delay_ms(500); 
   156D 90 01 F4      [24] 5241 	mov	dptr,#0x01F4
   1570 12r08rBF      [24] 5242 	lcall	_delay_ms
                           5243 ;	main.c:100: radiobegin(); //
   1573 12r12r00      [24] 5244 	lcall	_radiobegin
                           5245 ;	main.c:101: openAllPipe(); // открываем прием/передачу
   1576 12r13r84      [24] 5246 	lcall	_openAllPipe
                           5247 ;	main.c:103: setChannel(100);
   1579 75 82 64      [24] 5248 	mov	dpl,#0x64
   157C 12r12r25      [24] 5249 	lcall	_setChannel
                           5250 ;	main.c:104: setDataRate(2); // 1 - 250кб , 2 - 1 мб , 3 -2 мб.
   157F 75 82 02      [24] 5251 	mov	dpl,#0x02
   1582 12r12r47      [24] 5252 	lcall	_setDataRate
                           5253 ;	main.c:105: setAutoAck(false);
   1585 75 82 00      [24] 5254 	mov	dpl,#0x00
   1588 12r12rA9      [24] 5255 	lcall	_setAutoAck
                           5256 ;	main.c:106: setCRCLength(2); // 0 - crc off ,1 - 8bit ,2 - 16bit
   158B 75 82 02      [24] 5257 	mov	dpl,#0x02
   158E 12r12rDC      [24] 5258 	lcall	_setCRCLength
                           5259 ;	main.c:107: setPALevel(3) ; // мощность 0..3
   1591 75 82 03      [24] 5260 	mov	dpl,#0x03
   1594 12r13r45      [24] 5261 	lcall	_setPALevel
                           5262 ;	main.c:110: clientnf.identifier=chclient;
   1597 90r00r89      [24] 5263 	mov	dptr,#_clientnf
   159A 74 01         [12] 5264 	mov	a,#0x01
   159C F0            [24] 5265 	movx	@dptr,a
                           5266 ;	main.c:111: clientnf.countPWM=10;
   159D 90r00r8A      [24] 5267 	mov	dptr,#(_clientnf + 0x0001)
   15A0 74 0A         [12] 5268 	mov	a,#0x0A
   15A2 F0            [24] 5269 	movx	@dptr,a
   15A3 E4            [12] 5270 	clr	a
   15A4 A3            [24] 5271 	inc	dptr
   15A5 F0            [24] 5272 	movx	@dptr,a
                           5273 ;	main.c:113: sti();
   15A6 D2 AF         [12] 5274 	setb _IEN0_SB_GLOBAL 
                           5275 ;	main.c:114: interrupt_configure_ifp(INTERRUPT_IFP_INPUT_GPINT0,INTERRUPT_IFP_CONFIG_OPTION_ENABLE | INTERRUPT_IFP_CONFIG_OPTION_TYPE_FALLING_EDGE);
   15A8 90r00r56      [24] 5276 	mov	dptr,#_interrupt_configure_ifp_PARM_2
   15AB 74 81         [12] 5277 	mov	a,#0x81
   15AD F0            [24] 5278 	movx	@dptr,a
   15AE 75 82 08      [24] 5279 	mov	dpl,#0x08
   15B1 12r0Ar6E      [24] 5280 	lcall	_interrupt_configure_ifp
                           5281 ;	main.c:115: interrupt_control_ifp_enable();
   15B4 D2 A8         [12] 5282 	setb _IEN0_SB_IFP 
                           5283 ;	main.c:117: interrupt_control_t1_enable()	;
   15B6 D2 AB         [12] 5284 	setb _IEN0_SB_T1 
                           5285 ;	main.c:118: timer1_configure(TIMER1_CONFIG_OPTION_MODE_1_16_BIT_CTR_TMR,0);
   15B8 90r00r60      [24] 5286 	mov	dptr,#_timer1_configure_PARM_2
   15BB E4            [12] 5287 	clr	a
   15BC F0            [24] 5288 	movx	@dptr,a
   15BD E4            [12] 5289 	clr	a
   15BE A3            [24] 5290 	inc	dptr
   15BF F0            [24] 5291 	movx	@dptr,a
   15C0 75 82 10      [24] 5292 	mov	dpl,#0x10
   15C3 12r0Br81      [24] 5293 	lcall	_timer1_configure
                           5294 ;	main.c:119: timer1_run();
   15C6 D2 8E         [12] 5295 	setb _TCON_SB_TR1 
                           5296 ;	main.c:124: while(1)
   15C8                    5297 00121$:
                           5298 ;	main.c:132: rf_write_tx_payload((const uint8_t*)&clientnf, 32, true); //transmit received char over RF
   15C8 7Er89         [12] 5299 	mov	r6,#_clientnf
   15CA 7Fs00         [12] 5300 	mov	r7,#(_clientnf >> 8)
   15CC 7D 00         [12] 5301 	mov	r5,#0x00
   15CE 90r00r0E      [24] 5302 	mov	dptr,#_rf_write_tx_payload_PARM_2
   15D1 74 20         [12] 5303 	mov	a,#0x20
   15D3 F0            [24] 5304 	movx	@dptr,a
   15D4 E4            [12] 5305 	clr	a
   15D5 A3            [24] 5306 	inc	dptr
   15D6 F0            [24] 5307 	movx	@dptr,a
   15D7 90r00r10      [24] 5308 	mov	dptr,#_rf_write_tx_payload_PARM_3
   15DA 74 01         [12] 5309 	mov	a,#0x01
   15DC F0            [24] 5310 	movx	@dptr,a
   15DD 8E 82         [24] 5311 	mov	dpl,r6
   15DF 8F 83         [24] 5312 	mov	dph,r7
   15E1 8D F0         [24] 5313 	mov	b,r5
   15E3 12r01r00      [24] 5314 	lcall	_rf_write_tx_payload
                           5315 ;	main.c:135: while(!(rf_irq_pin_active() && rf_irq_tx_ds_active()));
   15E6                    5316 00102$:
   15E6 30 C1 FD      [24] 5317 	jnb	_IRCON_SB_RFIRQ,00102$
   15E9 90r00r18      [24] 5318 	mov	dptr,#_rf_spi_execute_command_PARM_2
   15EC E4            [12] 5319 	clr	a
   15ED F0            [24] 5320 	movx	@dptr,a
   15EE E4            [12] 5321 	clr	a
   15EF A3            [24] 5322 	inc	dptr
   15F0 F0            [24] 5323 	movx	@dptr,a
   15F1 E4            [12] 5324 	clr	a
   15F2 A3            [24] 5325 	inc	dptr
   15F3 F0            [24] 5326 	movx	@dptr,a
   15F4 90r00r1B      [24] 5327 	mov	dptr,#_rf_spi_execute_command_PARM_3
   15F7 E4            [12] 5328 	clr	a
   15F8 F0            [24] 5329 	movx	@dptr,a
   15F9 E4            [12] 5330 	clr	a
   15FA A3            [24] 5331 	inc	dptr
   15FB F0            [24] 5332 	movx	@dptr,a
   15FC 90r00r1D      [24] 5333 	mov	dptr,#_rf_spi_execute_command_PARM_4
   15FF 74 01         [12] 5334 	mov	a,#0x01
   1601 F0            [24] 5335 	movx	@dptr,a
   1602 75 82 FF      [24] 5336 	mov	dpl,#0xFF
   1605 12r02r35      [24] 5337 	lcall	_rf_spi_execute_command
   1608 E5 82         [12] 5338 	mov	a,dpl
   160A 30 E5 D9      [24] 5339 	jnb	acc.5,00102$
                           5340 ;	main.c:137: rf_irq_clear_all(); //clear all interrupts in the 24L01
   160D 12r01rC6      [24] 5341 	lcall	_rf_irq_clear_all
                           5342 ;	main.c:138: rf_set_as_rx(true); //change the device to an RX to get the character back from the other 24L01
   1610 75 82 01      [24] 5343 	mov	dpl,#0x01
   1613 12r01r66      [24] 5344 	lcall	_rf_set_as_rx
                           5345 ;	main.c:142: for(count = 0; count < 25000; count++)
   1616 7E 00         [12] 5346 	mov	r6,#0x00
   1618 7F 00         [12] 5347 	mov	r7,#0x00
   161A                    5348 00123$:
                           5349 ;	main.c:145: if((rf_irq_pin_active() && rf_irq_rx_dr_active()))
   161A 20 C1 03      [24] 5350 	jb	_IRCON_SB_RFIRQ,00165$
   161D 02r16rAE      [24] 5351 	ljmp	00109$
   1620                    5352 00165$:
   1620 90r00r18      [24] 5353 	mov	dptr,#_rf_spi_execute_command_PARM_2
   1623 E4            [12] 5354 	clr	a
   1624 F0            [24] 5355 	movx	@dptr,a
   1625 E4            [12] 5356 	clr	a
   1626 A3            [24] 5357 	inc	dptr
   1627 F0            [24] 5358 	movx	@dptr,a
   1628 E4            [12] 5359 	clr	a
   1629 A3            [24] 5360 	inc	dptr
   162A F0            [24] 5361 	movx	@dptr,a
   162B 90r00r1B      [24] 5362 	mov	dptr,#_rf_spi_execute_command_PARM_3
   162E E4            [12] 5363 	clr	a
   162F F0            [24] 5364 	movx	@dptr,a
   1630 E4            [12] 5365 	clr	a
   1631 A3            [24] 5366 	inc	dptr
   1632 F0            [24] 5367 	movx	@dptr,a
   1633 90r00r1D      [24] 5368 	mov	dptr,#_rf_spi_execute_command_PARM_4
   1636 74 01         [12] 5369 	mov	a,#0x01
   1638 F0            [24] 5370 	movx	@dptr,a
   1639 75 82 FF      [24] 5371 	mov	dpl,#0xFF
   163C C0 07         [24] 5372 	push	ar7
   163E C0 06         [24] 5373 	push	ar6
   1640 12r02r35      [24] 5374 	lcall	_rf_spi_execute_command
   1643 E5 82         [12] 5375 	mov	a,dpl
   1645 D0 06         [24] 5376 	pop	ar6
   1647 D0 07         [24] 5377 	pop	ar7
   1649 30 E6 62      [24] 5378 	jnb	acc.6,00109$
                           5379 ;	main.c:148: if (clientnf.count <= 2147483646) clientnf.count++;      /// счетчик передач для контроля качества канала
   164C 90r00r8F      [24] 5380 	mov	dptr,#(_clientnf + 0x0006)
   164F E0            [24] 5381 	movx	a,@dptr
   1650 FA            [12] 5382 	mov	r2,a
   1651 A3            [24] 5383 	inc	dptr
   1652 E0            [24] 5384 	movx	a,@dptr
   1653 FB            [12] 5385 	mov	r3,a
   1654 A3            [24] 5386 	inc	dptr
   1655 E0            [24] 5387 	movx	a,@dptr
   1656 FC            [12] 5388 	mov	r4,a
   1657 A3            [24] 5389 	inc	dptr
   1658 E0            [24] 5390 	movx	a,@dptr
   1659 FD            [12] 5391 	mov	r5,a
   165A C3            [12] 5392 	clr	c
   165B 74 FE         [12] 5393 	mov	a,#0xFE
   165D 9A            [12] 5394 	subb	a,r2
   165E 74 FF         [12] 5395 	mov	a,#0xFF
   1660 9B            [12] 5396 	subb	a,r3
   1661 74 FF         [12] 5397 	mov	a,#0xFF
   1663 9C            [12] 5398 	subb	a,r4
   1664 74 FF         [12] 5399 	mov	a,#(0x7F ^ 0x80)
   1666 8D F0         [24] 5400 	mov	b,r5
   1668 63 F0 80      [24] 5401 	xrl	b,#0x80
   166B 95 F0         [12] 5402 	subb	a,b
   166D 40 1D         [24] 5403 	jc	00106$
   166F 0A            [12] 5404 	inc	r2
   1670 BA 00 09      [24] 5405 	cjne	r2,#0x00,00168$
   1673 0B            [12] 5406 	inc	r3
   1674 BB 00 05      [24] 5407 	cjne	r3,#0x00,00168$
   1677 0C            [12] 5408 	inc	r4
   1678 BC 00 01      [24] 5409 	cjne	r4,#0x00,00168$
   167B 0D            [12] 5410 	inc	r5
   167C                    5411 00168$:
   167C 90r00r8F      [24] 5412 	mov	dptr,#(_clientnf + 0x0006)
   167F EA            [12] 5413 	mov	a,r2
   1680 F0            [24] 5414 	movx	@dptr,a
   1681 EB            [12] 5415 	mov	a,r3
   1682 A3            [24] 5416 	inc	dptr
   1683 F0            [24] 5417 	movx	@dptr,a
   1684 EC            [12] 5418 	mov	a,r4
   1685 A3            [24] 5419 	inc	dptr
   1686 F0            [24] 5420 	movx	@dptr,a
   1687 ED            [12] 5421 	mov	a,r5
   1688 A3            [24] 5422 	inc	dptr
   1689 F0            [24] 5423 	movx	@dptr,a
   168A 80 0E         [24] 5424 	sjmp	00107$
   168C                    5425 00106$:
                           5426 ;	main.c:149: else clientnf.count = 0;
   168C 90r00r8F      [24] 5427 	mov	dptr,#(_clientnf + 0x0006)
   168F E4            [12] 5428 	clr	a
   1690 F0            [24] 5429 	movx	@dptr,a
   1691 E4            [12] 5430 	clr	a
   1692 A3            [24] 5431 	inc	dptr
   1693 F0            [24] 5432 	movx	@dptr,a
   1694 E4            [12] 5433 	clr	a
   1695 A3            [24] 5434 	inc	dptr
   1696 F0            [24] 5435 	movx	@dptr,a
   1697 E4            [12] 5436 	clr	a
   1698 A3            [24] 5437 	inc	dptr
   1699 F0            [24] 5438 	movx	@dptr,a
   169A                    5439 00107$:
                           5440 ;	main.c:151: rf_read_rx_payload((const uint8_t*)&servernf, 32); //get the payload into data
   169A 90r00r00      [24] 5441 	mov	dptr,#_rf_read_rx_payload_PARM_2
   169D 74 20         [12] 5442 	mov	a,#0x20
   169F F0            [24] 5443 	movx	@dptr,a
   16A0 E4            [12] 5444 	clr	a
   16A1 A3            [24] 5445 	inc	dptr
   16A2 F0            [24] 5446 	movx	@dptr,a
   16A3 90r00r9D      [24] 5447 	mov	dptr,#_servernf
   16A6 75 F0 00      [24] 5448 	mov	b,#0x00
   16A9 12r00r00      [24] 5449 	lcall	_rf_read_rx_payload
                           5450 ;	main.c:152: break;
   16AC 80 2C         [24] 5451 	sjmp	00113$
   16AE                    5452 00109$:
                           5453 ;	main.c:159: if(count == 24999) clientnf.Error_Message++;
   16AE BE A7 18      [24] 5454 	cjne	r6,#0xA7,00124$
   16B1 BF 61 15      [24] 5455 	cjne	r7,#0x61,00124$
   16B4 90r00r8D      [24] 5456 	mov	dptr,#(_clientnf + 0x0004)
   16B7 E0            [24] 5457 	movx	a,@dptr
   16B8 FC            [12] 5458 	mov	r4,a
   16B9 A3            [24] 5459 	inc	dptr
   16BA E0            [24] 5460 	movx	a,@dptr
   16BB FD            [12] 5461 	mov	r5,a
   16BC 0C            [12] 5462 	inc	r4
   16BD BC 00 01      [24] 5463 	cjne	r4,#0x00,00171$
   16C0 0D            [12] 5464 	inc	r5
   16C1                    5465 00171$:
   16C1 90r00r8D      [24] 5466 	mov	dptr,#(_clientnf + 0x0004)
   16C4 EC            [12] 5467 	mov	a,r4
   16C5 F0            [24] 5468 	movx	@dptr,a
   16C6 ED            [12] 5469 	mov	a,r5
   16C7 A3            [24] 5470 	inc	dptr
   16C8 F0            [24] 5471 	movx	@dptr,a
   16C9                    5472 00124$:
                           5473 ;	main.c:142: for(count = 0; count < 25000; count++)
   16C9 0E            [12] 5474 	inc	r6
   16CA BE 00 01      [24] 5475 	cjne	r6,#0x00,00172$
   16CD 0F            [12] 5476 	inc	r7
   16CE                    5477 00172$:
   16CE C3            [12] 5478 	clr	c
   16CF EE            [12] 5479 	mov	a,r6
   16D0 94 A8         [12] 5480 	subb	a,#0xA8
   16D2 EF            [12] 5481 	mov	a,r7
   16D3 94 61         [12] 5482 	subb	a,#0x61
   16D5 50 03         [24] 5483 	jnc	00173$
   16D7 02r16r1A      [24] 5484 	ljmp	00123$
   16DA                    5485 00173$:
   16DA                    5486 00113$:
                           5487 ;	main.c:164: rf_irq_clear_all(); //clear interrupts again
   16DA 12r01rC6      [24] 5488 	lcall	_rf_irq_clear_all
                           5489 ;	main.c:166: rf_set_as_tx(); //resume normal operation as a TX
   16DD 12r01rEB      [24] 5490 	lcall	_rf_set_as_tx
                           5491 ;	main.c:169: if (servernf[0]==chclient){	
   16E0 90r00r9D      [24] 5492 	mov	dptr,#_servernf
   16E3 E0            [24] 5493 	movx	a,@dptr
   16E4 FF            [12] 5494 	mov	r7,a
   16E5 BF 01 28      [24] 5495 	cjne	r7,#0x01,00119$
                           5496 ;	main.c:172: if (servernf[1]==10) {
   16E8 90r00r9E      [24] 5497 	mov	dptr,#(_servernf + 0x0001)
   16EB E0            [24] 5498 	movx	a,@dptr
   16EC FF            [12] 5499 	mov	r7,a
   16ED BF 0A 09      [24] 5500 	cjne	r7,#0x0A,00115$
                           5501 ;	main.c:174: dimmon(servernf[3]);
   16F0 90r00rA0      [24] 5502 	mov	dptr,#(_servernf + 0x0003)
   16F3 E0            [24] 5503 	movx	a,@dptr
   16F4 F5 82         [12] 5504 	mov	dpl,a
   16F6 12r15r30      [24] 5505 	lcall	_dimmon
   16F9                    5506 00115$:
                           5507 ;	main.c:177: if (servernf[1]==11) clientnf.countPWM=servernf[3];
   16F9 90r00r9E      [24] 5508 	mov	dptr,#(_servernf + 0x0001)
   16FC E0            [24] 5509 	movx	a,@dptr
   16FD FF            [12] 5510 	mov	r7,a
   16FE BF 0B 0F      [24] 5511 	cjne	r7,#0x0B,00119$
   1701 90r00rA0      [24] 5512 	mov	dptr,#(_servernf + 0x0003)
   1704 E0            [24] 5513 	movx	a,@dptr
   1705 FF            [12] 5514 	mov	r7,a
   1706 7E 00         [12] 5515 	mov	r6,#0x00
   1708 90r00r8A      [24] 5516 	mov	dptr,#(_clientnf + 0x0001)
   170B EF            [12] 5517 	mov	a,r7
   170C F0            [24] 5518 	movx	@dptr,a
   170D EE            [12] 5519 	mov	a,r6
   170E A3            [24] 5520 	inc	dptr
   170F F0            [24] 5521 	movx	@dptr,a
   1710                    5522 00119$:
                           5523 ;	main.c:181: delay_ms(timesend);
   1710 90 01 2C      [24] 5524 	mov	dptr,#0x012C
   1713 12r08rBF      [24] 5525 	lcall	_delay_ms
   1716 02r15rC8      [24] 5526 	ljmp	00121$
                           5527 	.area CSEG    (CODE)
                           5528 	.area CONST   (CODE)
                           5529 	.area XINIT   (CODE)
                           5530 	.area CABS    (ABS,CODE)
