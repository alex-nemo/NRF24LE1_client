                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Sat Jun 14 09:22:02 2014
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _isr_rtc2
                             14 	.globl _dimmon
                             15 	.globl _isr_t1
                             16 	.globl _isr_ifp
                             17 	.globl _openAllPipe
                             18 	.globl _setPALevel
                             19 	.globl _setCRCLength
                             20 	.globl _setAutoAck
                             21 	.globl _setDataRate
                             22 	.globl _setChannel
                             23 	.globl _radiobegin
                             24 	.globl _watchdog_start_and_set_timeout_in_ms
                             25 	.globl _watchdog_set_wdsv_count
                             26 	.globl _gpio_pin_val_write
                             27 	.globl _gpio_pin_val_set
                             28 	.globl _gpio_pin_val_clear
                             29 	.globl _gpio_pin_val_read
                             30 	.globl _FSR_SB_ENDBG
                             31 	.globl _FSR_SB_STP
                             32 	.globl _FSR_SB_WEN
                             33 	.globl _FSR_SB_RDYN
                             34 	.globl _FSR_SB_INFEN
                             35 	.globl _FSR_SB_RDISMB
                             36 	.globl _RFCON_SB_RFCKEN
                             37 	.globl _RFCON_SB_RFCSN
                             38 	.globl _RFCON_SB_RFCE
                             39 	.globl _ADCON_SB_BD
                             40 	.globl _PSW_SB_P
                             41 	.globl _PSW_SB_F1
                             42 	.globl _PSW_SB_OV
                             43 	.globl _PSW_SB_RS0
                             44 	.globl _PSW_SB_RS1
                             45 	.globl _PSW_SB_F0
                             46 	.globl _PSW_SB_AC
                             47 	.globl _PSW_SB_CY
                             48 	.globl _T2CON_SB_T2PS
                             49 	.globl _T2CON_SB_I3FR
                             50 	.globl _T2CON_SB_I2FR
                             51 	.globl _T2CON_SB_T2R1
                             52 	.globl _T2CON_SB_T2R0
                             53 	.globl _T2CON_SB_T2CM
                             54 	.globl _T2CON_SB_T2I1
                             55 	.globl _T2CON_SB_T2I0
                             56 	.globl _IRCON_SB_EXF2
                             57 	.globl _IRCON_SB_TF2
                             58 	.globl _IRCON_SB_TICK
                             59 	.globl _IRCON_SB_MISCIRQ
                             60 	.globl _IRCON_SB_WUOPIRQ
                             61 	.globl _IRCON_SB_SPI_2WIRE
                             62 	.globl _IRCON_SB_RFIRQ
                             63 	.globl _IRCON_SB_RFRDY
                             64 	.globl _IEN1_SB_T2EXTRLD
                             65 	.globl _IEN1_SB_TICK
                             66 	.globl _IEN1_SB_MISCIRQ
                             67 	.globl _IEN1_SB_WUOPIRQ
                             68 	.globl _IEN1_SB_SPI_2WIRE
                             69 	.globl _IEN1_SB_RFIRQ
                             70 	.globl _IEN1_SB_RFRDY
                             71 	.globl _P3_SB_D7
                             72 	.globl _P3_SB_D6
                             73 	.globl _P3_SB_D5
                             74 	.globl _P3_SB_D4
                             75 	.globl _P3_SB_D3
                             76 	.globl _P3_SB_D2
                             77 	.globl _P3_SB_D1
                             78 	.globl _P3_SB_D0
                             79 	.globl _IEN0_SB_GLOBAL
                             80 	.globl _IEN0_SB_T2
                             81 	.globl _IEN0_SB_UART
                             82 	.globl _IEN0_SB_T1
                             83 	.globl _IEN0_SB_POFIRQ
                             84 	.globl _IEN0_SB_T0
                             85 	.globl _IEN0_SB_IFP
                             86 	.globl _P2_SB_D7
                             87 	.globl _P2_SB_D6
                             88 	.globl _P2_SB_D5
                             89 	.globl _P2_SB_D4
                             90 	.globl _P2_SB_D3
                             91 	.globl _P2_SB_D2
                             92 	.globl _P2_SB_D1
                             93 	.globl _P2_SB_D0
                             94 	.globl _S0CON_SB_SM0
                             95 	.globl _S0CON_SB_SM1
                             96 	.globl _S0CON_SB_SM20
                             97 	.globl _S0CON_SB_REN0
                             98 	.globl _S0CON_SB_TB80
                             99 	.globl _S0CON_SB_RB80
                            100 	.globl _S0CON_SB_TI0
                            101 	.globl _S0CON_SB_RI0
                            102 	.globl _P1_SB_D7
                            103 	.globl _P1_SB_D6
                            104 	.globl _P1_SB_D5
                            105 	.globl _P1_SB_D4
                            106 	.globl _P1_SB_D3
                            107 	.globl _P1_SB_D2
                            108 	.globl _P1_SB_D1
                            109 	.globl _P1_SB_D0
                            110 	.globl _TCON_SB_TF1
                            111 	.globl _TCON_SB_TR1
                            112 	.globl _TCON_SB_TF0
                            113 	.globl _TCON_SB_TR0
                            114 	.globl _TCON_SB_IE1
                            115 	.globl _TCON_SB_IT1
                            116 	.globl _TCON_SB_IE0
                            117 	.globl _TCON_SB_IT0
                            118 	.globl _P0_SB_D7
                            119 	.globl _P0_SB_D6
                            120 	.globl _P0_SB_D5
                            121 	.globl _P0_SB_D4
                            122 	.globl _P0_SB_D3
                            123 	.globl _P0_SB_D2
                            124 	.globl _P0_SB_D1
                            125 	.globl _P0_SB_D0
                            126 	.globl _ADCDAT
                            127 	.globl _S0REL
                            128 	.globl _T2
                            129 	.globl _T1
                            130 	.globl _T0
                            131 	.globl _CRC
                            132 	.globl _CC3
                            133 	.globl _CC2
                            134 	.globl _CC1
                            135 	.globl _SPIMDAT
                            136 	.globl _SPIMSTAT
                            137 	.globl _SPIMCON1
                            138 	.globl _SPIMCON0
                            139 	.globl _FCR
                            140 	.globl _FPCR
                            141 	.globl _FSR
                            142 	.globl _B
                            143 	.globl _ARCON
                            144 	.globl _MD5
                            145 	.globl _MD4
                            146 	.globl _MD3
                            147 	.globl _MD2
                            148 	.globl _MD1
                            149 	.globl _MD0
                            150 	.globl _RFCON
                            151 	.globl _SPIRDAT
                            152 	.globl _SPIRSTAT
                            153 	.globl _SPIRCON1
                            154 	.globl _SPIRCON0
                            155 	.globl _W2CON0
                            156 	.globl _W2CON1
                            157 	.globl _ACC
                            158 	.globl _CCPDATO
                            159 	.globl _CCPDATIB
                            160 	.globl _CCPDATIA
                            161 	.globl _POFCON
                            162 	.globl _COMPCON
                            163 	.globl _W2DAT
                            164 	.globl _W2SADR
                            165 	.globl _ADCON
                            166 	.globl _RNGDAT
                            167 	.globl _RNGCTL
                            168 	.globl _ADCDATL
                            169 	.globl _ADCDATH
                            170 	.globl _ADCCON1
                            171 	.globl _ADCCON2
                            172 	.globl _ADCCON3
                            173 	.globl _PSW
                            174 	.globl _WUOPC0
                            175 	.globl _WUOPC1
                            176 	.globl _TH2
                            177 	.globl _TL2
                            178 	.globl _CRCH
                            179 	.globl _CRCL
                            180 	.globl __XPAGE
                            181 	.globl _MPAGE
                            182 	.globl _T2CON
                            183 	.globl _CCH3
                            184 	.globl _CCL3
                            185 	.globl _CCH2
                            186 	.globl _CCL2
                            187 	.globl _CCH1
                            188 	.globl _CCL1
                            189 	.globl _CCEN
                            190 	.globl _IRCON
                            191 	.globl _SPISDAT
                            192 	.globl _SPISSTAT
                            193 	.globl _SPISCON1
                            194 	.globl _SPISCON0
                            195 	.globl _S0RELH
                            196 	.globl _IP1
                            197 	.globl _IEN1
                            198 	.globl _SPISRDSZ
                            199 	.globl _RTC2CPT00
                            200 	.globl _RTC2CMP1
                            201 	.globl _RTC2CMP0
                            202 	.globl _RTC2CON
                            203 	.globl _PWMCON
                            204 	.globl _RSTREAS
                            205 	.globl _P3
                            206 	.globl _WDSV
                            207 	.globl _OPMCON
                            208 	.globl _CLKLFCTRL
                            209 	.globl _RTC2CPT10
                            210 	.globl _RTC2CPT01
                            211 	.globl _S0RELL
                            212 	.globl _IP0
                            213 	.globl _IEN0
                            214 	.globl _MEMCON
                            215 	.globl _INTEXP
                            216 	.globl _WUCON
                            217 	.globl _PWRDWN
                            218 	.globl _CLKCTRL
                            219 	.globl _PWMDC1
                            220 	.globl _PWMDC0
                            221 	.globl _P2
                            222 	.globl _P1CON
                            223 	.globl _P0CON
                            224 	.globl _S0BUF
                            225 	.globl _S0CON
                            226 	.globl _P2CON
                            227 	.globl _P3DIR
                            228 	.globl _P2DIR
                            229 	.globl _P1DIR
                            230 	.globl _P0DIR
                            231 	.globl _DPS
                            232 	.globl _P1
                            233 	.globl _P3CON
                            234 	.globl _TH1
                            235 	.globl _TH0
                            236 	.globl _TL1
                            237 	.globl _TL0
                            238 	.globl _TMOD
                            239 	.globl _TCON
                            240 	.globl _PCON
                            241 	.globl _DPH1
                            242 	.globl _DPL1
                            243 	.globl _DPH
                            244 	.globl _DPL
                            245 	.globl _SP
                            246 	.globl _P0
                            247 	.globl _countrtc
                            248 	.globl _servernf
                            249 	.globl _stdimm
                            250 	.globl _clientnf
                            251 	.globl _rtc2_configure_PARM_2
                            252 	.globl _uart_configure_auto_baud_calc_PARM_2
                            253 	.globl _uart_calc_th1_value_PARM_2
                            254 	.globl _uart_calc_s0rel_value_PARM_2
                            255 	.globl _uart_calc_actual_baud_rate_from_th1_PARM_2
                            256 	.globl _uart_calc_actual_baud_rate_from_s0rel_PARM_2
                            257 	.globl _uart_configure_manual_baud_calc_PARM_2
                            258 	.globl _timer1_configure_PARM_2
                            259 	.globl _timer0_configure_PARM_2
                            260 	.globl _interrupt_configure_ifp_PARM_2
                            261 	.globl _pwr_clk_mgmt_wakeup_configure_PARM_2
                            262 	.globl _pwm_start_PARM_2
                            263 	.globl _gpio_pin_val_write_PARM_2
                            264 	.globl _gpio_pin_configure_PARM_2
                            265 	.globl _rf_set_rx_addr_PARM_3
                            266 	.globl _rf_set_rx_addr_PARM_2
                            267 	.globl _rf_read_register_PARM_3
                            268 	.globl _rf_read_register_PARM_2
                            269 	.globl _rf_power_up_param_PARM_2
                            270 	.globl _rf_spi_send_read_PARM_3
                            271 	.globl _rf_spi_send_read_PARM_2
                            272 	.globl _rf_spi_execute_command_PARM_4
                            273 	.globl _rf_spi_execute_command_PARM_3
                            274 	.globl _rf_spi_execute_command_PARM_2
                            275 	.globl _rf_write_tx_payload_PARM_3
                            276 	.globl _rf_write_tx_payload_PARM_2
                            277 	.globl _rf_write_register_PARM_3
                            278 	.globl _rf_write_register_PARM_2
                            279 	.globl _rf_configure_debug_lite_PARM_2
                            280 	.globl _rf_read_rx_payload_PARM_2
                            281 	.globl _rf_read_rx_payload
                            282 	.globl _rf_configure_debug_lite
                            283 	.globl _rf_write_register
                            284 	.globl _rf_spi_configure_enable
                            285 	.globl _rf_write_tx_payload
                            286 	.globl _rf_transmit
                            287 	.globl _rf_set_as_rx
                            288 	.globl _rf_irq_clear_all
                            289 	.globl _rf_set_as_tx
                            290 	.globl _rf_spi_execute_command
                            291 	.globl _rf_spi_send_read
                            292 	.globl _rf_power_up_param
                            293 	.globl _rf_read_register
                            294 	.globl _rf_spi_send_read_byte
                            295 	.globl _rf_set_rx_addr
                            296 	.globl _rf_power_down
                            297 	.globl _rf_power_up
                            298 	.globl _gpio_pin_configure
                            299 	.globl _delay_us
                            300 	.globl _delay_s
                            301 	.globl _delay_ms
                            302 	.globl _pwm_configure
                            303 	.globl _pwm_start
                            304 	.globl _pwr_clk_mgmt_clklf_configure
                            305 	.globl _pwr_clk_mgmt_get_cclk_freq_in_hz
                            306 	.globl _pwr_clk_mgmt_wakeup_configure
                            307 	.globl _interrupt_configure_ifp
                            308 	.globl _adc_configure
                            309 	.globl _adc_set_input_channel
                            310 	.globl _adc_start_single_conversion
                            311 	.globl _adc_start_single_conversion_get_value
                            312 	.globl _timer0_configure
                            313 	.globl _timer1_configure
                            314 	.globl _uart_configure_manual_baud_calc
                            315 	.globl _uart_calc_actual_baud_rate_from_s0rel
                            316 	.globl _uart_calc_actual_baud_rate_from_th1
                            317 	.globl _uart_calc_s0rel_value
                            318 	.globl _uart_calc_th1_value
                            319 	.globl _uart_configure_auto_baud_calc
                            320 	.globl _rtc2_configure
                            321 ;--------------------------------------------------------
                            322 ; special function registers
                            323 ;--------------------------------------------------------
                            324 	.area RSEG    (ABS,DATA)
   0000                     325 	.org 0x0000
                     0080   326 _P0	=	0x0080
                     0081   327 _SP	=	0x0081
                     0082   328 _DPL	=	0x0082
                     0083   329 _DPH	=	0x0083
                     0084   330 _DPL1	=	0x0084
                     0085   331 _DPH1	=	0x0085
                     0087   332 _PCON	=	0x0087
                     0088   333 _TCON	=	0x0088
                     0089   334 _TMOD	=	0x0089
                     008A   335 _TL0	=	0x008a
                     008B   336 _TL1	=	0x008b
                     008C   337 _TH0	=	0x008c
                     008D   338 _TH1	=	0x008d
                     008F   339 _P3CON	=	0x008f
                     0090   340 _P1	=	0x0090
                     0092   341 _DPS	=	0x0092
                     0093   342 _P0DIR	=	0x0093
                     0094   343 _P1DIR	=	0x0094
                     0095   344 _P2DIR	=	0x0095
                     0096   345 _P3DIR	=	0x0096
                     0097   346 _P2CON	=	0x0097
                     0098   347 _S0CON	=	0x0098
                     0099   348 _S0BUF	=	0x0099
                     009E   349 _P0CON	=	0x009e
                     009F   350 _P1CON	=	0x009f
                     00A0   351 _P2	=	0x00a0
                     00A1   352 _PWMDC0	=	0x00a1
                     00A2   353 _PWMDC1	=	0x00a2
                     00A3   354 _CLKCTRL	=	0x00a3
                     00A4   355 _PWRDWN	=	0x00a4
                     00A5   356 _WUCON	=	0x00a5
                     00A6   357 _INTEXP	=	0x00a6
                     00A7   358 _MEMCON	=	0x00a7
                     00A8   359 _IEN0	=	0x00a8
                     00A9   360 _IP0	=	0x00a9
                     00AA   361 _S0RELL	=	0x00aa
                     00AB   362 _RTC2CPT01	=	0x00ab
                     00AC   363 _RTC2CPT10	=	0x00ac
                     00AD   364 _CLKLFCTRL	=	0x00ad
                     00AE   365 _OPMCON	=	0x00ae
                     00AF   366 _WDSV	=	0x00af
                     00B0   367 _P3	=	0x00b0
                     00B1   368 _RSTREAS	=	0x00b1
                     00B2   369 _PWMCON	=	0x00b2
                     00B3   370 _RTC2CON	=	0x00b3
                     00B4   371 _RTC2CMP0	=	0x00b4
                     00B5   372 _RTC2CMP1	=	0x00b5
                     00B6   373 _RTC2CPT00	=	0x00b6
                     00B7   374 _SPISRDSZ	=	0x00b7
                     00B8   375 _IEN1	=	0x00b8
                     00B9   376 _IP1	=	0x00b9
                     00BA   377 _S0RELH	=	0x00ba
                     00BC   378 _SPISCON0	=	0x00bc
                     00BD   379 _SPISCON1	=	0x00bd
                     00BE   380 _SPISSTAT	=	0x00be
                     00BF   381 _SPISDAT	=	0x00bf
                     00C0   382 _IRCON	=	0x00c0
                     00C1   383 _CCEN	=	0x00c1
                     00C2   384 _CCL1	=	0x00c2
                     00C3   385 _CCH1	=	0x00c3
                     00C4   386 _CCL2	=	0x00c4
                     00C5   387 _CCH2	=	0x00c5
                     00C6   388 _CCL3	=	0x00c6
                     00C7   389 _CCH3	=	0x00c7
                     00C8   390 _T2CON	=	0x00c8
                     00C9   391 _MPAGE	=	0x00c9
                     00C9   392 __XPAGE	=	0x00c9
                     00CA   393 _CRCL	=	0x00ca
                     00CB   394 _CRCH	=	0x00cb
                     00CC   395 _TL2	=	0x00cc
                     00CD   396 _TH2	=	0x00cd
                     00CE   397 _WUOPC1	=	0x00ce
                     00CF   398 _WUOPC0	=	0x00cf
                     00D0   399 _PSW	=	0x00d0
                     00D1   400 _ADCCON3	=	0x00d1
                     00D2   401 _ADCCON2	=	0x00d2
                     00D3   402 _ADCCON1	=	0x00d3
                     00D4   403 _ADCDATH	=	0x00d4
                     00D5   404 _ADCDATL	=	0x00d5
                     00D6   405 _RNGCTL	=	0x00d6
                     00D7   406 _RNGDAT	=	0x00d7
                     00D8   407 _ADCON	=	0x00d8
                     00D9   408 _W2SADR	=	0x00d9
                     00DA   409 _W2DAT	=	0x00da
                     00DB   410 _COMPCON	=	0x00db
                     00DC   411 _POFCON	=	0x00dc
                     00DD   412 _CCPDATIA	=	0x00dd
                     00DE   413 _CCPDATIB	=	0x00de
                     00DF   414 _CCPDATO	=	0x00df
                     00E0   415 _ACC	=	0x00e0
                     00E1   416 _W2CON1	=	0x00e1
                     00E2   417 _W2CON0	=	0x00e2
                     00E4   418 _SPIRCON0	=	0x00e4
                     00E5   419 _SPIRCON1	=	0x00e5
                     00E6   420 _SPIRSTAT	=	0x00e6
                     00E7   421 _SPIRDAT	=	0x00e7
                     00E8   422 _RFCON	=	0x00e8
                     00E9   423 _MD0	=	0x00e9
                     00EA   424 _MD1	=	0x00ea
                     00EB   425 _MD2	=	0x00eb
                     00EC   426 _MD3	=	0x00ec
                     00ED   427 _MD4	=	0x00ed
                     00EE   428 _MD5	=	0x00ee
                     00EF   429 _ARCON	=	0x00ef
                     00F0   430 _B	=	0x00f0
                     00F8   431 _FSR	=	0x00f8
                     00F9   432 _FPCR	=	0x00f9
                     00FA   433 _FCR	=	0x00fa
                     00FC   434 _SPIMCON0	=	0x00fc
                     00FD   435 _SPIMCON1	=	0x00fd
                     00FE   436 _SPIMSTAT	=	0x00fe
                     00FF   437 _SPIMDAT	=	0x00ff
                     C3C2   438 _CC1	=	0xc3c2
                     C5C4   439 _CC2	=	0xc5c4
                     C7C6   440 _CC3	=	0xc7c6
                     CBCA   441 _CRC	=	0xcbca
                     8C8A   442 _T0	=	0x8c8a
                     8D8B   443 _T1	=	0x8d8b
                     CDCC   444 _T2	=	0xcdcc
                     BAAA   445 _S0REL	=	0xbaaa
                     D4D5   446 _ADCDAT	=	0xd4d5
                            447 ;--------------------------------------------------------
                            448 ; special function bits
                            449 ;--------------------------------------------------------
                            450 	.area RSEG    (ABS,DATA)
   0000                     451 	.org 0x0000
                     0080   452 _P0_SB_D0	=	0x0080
                     0081   453 _P0_SB_D1	=	0x0081
                     0082   454 _P0_SB_D2	=	0x0082
                     0083   455 _P0_SB_D3	=	0x0083
                     0084   456 _P0_SB_D4	=	0x0084
                     0085   457 _P0_SB_D5	=	0x0085
                     0086   458 _P0_SB_D6	=	0x0086
                     0087   459 _P0_SB_D7	=	0x0087
                     0088   460 _TCON_SB_IT0	=	0x0088
                     0089   461 _TCON_SB_IE0	=	0x0089
                     008A   462 _TCON_SB_IT1	=	0x008a
                     008B   463 _TCON_SB_IE1	=	0x008b
                     008C   464 _TCON_SB_TR0	=	0x008c
                     008D   465 _TCON_SB_TF0	=	0x008d
                     008E   466 _TCON_SB_TR1	=	0x008e
                     008F   467 _TCON_SB_TF1	=	0x008f
                     0090   468 _P1_SB_D0	=	0x0090
                     0091   469 _P1_SB_D1	=	0x0091
                     0092   470 _P1_SB_D2	=	0x0092
                     0093   471 _P1_SB_D3	=	0x0093
                     0094   472 _P1_SB_D4	=	0x0094
                     0095   473 _P1_SB_D5	=	0x0095
                     0096   474 _P1_SB_D6	=	0x0096
                     0097   475 _P1_SB_D7	=	0x0097
                     0098   476 _S0CON_SB_RI0	=	0x0098
                     0099   477 _S0CON_SB_TI0	=	0x0099
                     009A   478 _S0CON_SB_RB80	=	0x009a
                     009B   479 _S0CON_SB_TB80	=	0x009b
                     009C   480 _S0CON_SB_REN0	=	0x009c
                     009D   481 _S0CON_SB_SM20	=	0x009d
                     009E   482 _S0CON_SB_SM1	=	0x009e
                     009F   483 _S0CON_SB_SM0	=	0x009f
                     00A0   484 _P2_SB_D0	=	0x00a0
                     00A1   485 _P2_SB_D1	=	0x00a1
                     00A2   486 _P2_SB_D2	=	0x00a2
                     00A3   487 _P2_SB_D3	=	0x00a3
                     00A4   488 _P2_SB_D4	=	0x00a4
                     00A5   489 _P2_SB_D5	=	0x00a5
                     00A6   490 _P2_SB_D6	=	0x00a6
                     00A7   491 _P2_SB_D7	=	0x00a7
                     00A8   492 _IEN0_SB_IFP	=	0x00a8
                     00A9   493 _IEN0_SB_T0	=	0x00a9
                     00AA   494 _IEN0_SB_POFIRQ	=	0x00aa
                     00AB   495 _IEN0_SB_T1	=	0x00ab
                     00AC   496 _IEN0_SB_UART	=	0x00ac
                     00AD   497 _IEN0_SB_T2	=	0x00ad
                     00AF   498 _IEN0_SB_GLOBAL	=	0x00af
                     00B0   499 _P3_SB_D0	=	0x00b0
                     00B1   500 _P3_SB_D1	=	0x00b1
                     00B2   501 _P3_SB_D2	=	0x00b2
                     00B3   502 _P3_SB_D3	=	0x00b3
                     00B4   503 _P3_SB_D4	=	0x00b4
                     00B5   504 _P3_SB_D5	=	0x00b5
                     00B6   505 _P3_SB_D6	=	0x00b6
                     00B7   506 _P3_SB_D7	=	0x00b7
                     00B8   507 _IEN1_SB_RFRDY	=	0x00b8
                     00B9   508 _IEN1_SB_RFIRQ	=	0x00b9
                     00BA   509 _IEN1_SB_SPI_2WIRE	=	0x00ba
                     00BB   510 _IEN1_SB_WUOPIRQ	=	0x00bb
                     00BC   511 _IEN1_SB_MISCIRQ	=	0x00bc
                     00BD   512 _IEN1_SB_TICK	=	0x00bd
                     00BF   513 _IEN1_SB_T2EXTRLD	=	0x00bf
                     00C0   514 _IRCON_SB_RFRDY	=	0x00c0
                     00C1   515 _IRCON_SB_RFIRQ	=	0x00c1
                     00C2   516 _IRCON_SB_SPI_2WIRE	=	0x00c2
                     00C3   517 _IRCON_SB_WUOPIRQ	=	0x00c3
                     00C4   518 _IRCON_SB_MISCIRQ	=	0x00c4
                     00C5   519 _IRCON_SB_TICK	=	0x00c5
                     00C6   520 _IRCON_SB_TF2	=	0x00c6
                     00C7   521 _IRCON_SB_EXF2	=	0x00c7
                     00C8   522 _T2CON_SB_T2I0	=	0x00c8
                     00C9   523 _T2CON_SB_T2I1	=	0x00c9
                     00CA   524 _T2CON_SB_T2CM	=	0x00ca
                     00CB   525 _T2CON_SB_T2R0	=	0x00cb
                     00CC   526 _T2CON_SB_T2R1	=	0x00cc
                     00CD   527 _T2CON_SB_I2FR	=	0x00cd
                     00CE   528 _T2CON_SB_I3FR	=	0x00ce
                     00CF   529 _T2CON_SB_T2PS	=	0x00cf
                     00D7   530 _PSW_SB_CY	=	0x00d7
                     00D6   531 _PSW_SB_AC	=	0x00d6
                     00D5   532 _PSW_SB_F0	=	0x00d5
                     00D4   533 _PSW_SB_RS1	=	0x00d4
                     00D3   534 _PSW_SB_RS0	=	0x00d3
                     00D2   535 _PSW_SB_OV	=	0x00d2
                     00D1   536 _PSW_SB_F1	=	0x00d1
                     00D0   537 _PSW_SB_P	=	0x00d0
                     00DF   538 _ADCON_SB_BD	=	0x00df
                     00E8   539 _RFCON_SB_RFCE	=	0x00e8
                     00E9   540 _RFCON_SB_RFCSN	=	0x00e9
                     00EA   541 _RFCON_SB_RFCKEN	=	0x00ea
                     00FA   542 _FSR_SB_RDISMB	=	0x00fa
                     00FB   543 _FSR_SB_INFEN	=	0x00fb
                     00FC   544 _FSR_SB_RDYN	=	0x00fc
                     00FD   545 _FSR_SB_WEN	=	0x00fd
                     00FE   546 _FSR_SB_STP	=	0x00fe
                     00FF   547 _FSR_SB_ENDBG	=	0x00ff
                            548 ;--------------------------------------------------------
                            549 ; overlayable register banks
                            550 ;--------------------------------------------------------
                            551 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     552 	.ds 8
                            553 ;--------------------------------------------------------
                            554 ; overlayable bit register bank
                            555 ;--------------------------------------------------------
                            556 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     557 bits:
   0000                     558 	.ds 1
                     8000   559 	b0 = bits[0]
                     8100   560 	b1 = bits[1]
                     8200   561 	b2 = bits[2]
                     8300   562 	b3 = bits[3]
                     8400   563 	b4 = bits[4]
                     8500   564 	b5 = bits[5]
                     8600   565 	b6 = bits[6]
                     8700   566 	b7 = bits[7]
                            567 ;--------------------------------------------------------
                            568 ; internal ram data
                            569 ;--------------------------------------------------------
                            570 	.area DSEG    (DATA)
   0000                     571 _rf_spi_send_read_sloc0_1_0:
   0000                     572 	.ds 3
   0003                     573 _rf_spi_send_read_sloc1_1_0:
   0003                     574 	.ds 1
   0004                     575 _uart_configure_auto_baud_calc_sloc0_1_0:
   0004                     576 	.ds 2
   0006                     577 _uart_configure_auto_baud_calc_sloc1_1_0:
   0006                     578 	.ds 4
   000A                     579 _uart_configure_auto_baud_calc_sloc2_1_0:
   000A                     580 	.ds 4
   000E                     581 _uart_configure_auto_baud_calc_sloc3_1_0:
   000E                     582 	.ds 4
                            583 ;--------------------------------------------------------
                            584 ; overlayable items in internal ram 
                            585 ;--------------------------------------------------------
                            586 ;--------------------------------------------------------
                            587 ; Stack segment in internal ram 
                            588 ;--------------------------------------------------------
                            589 	.area	SSEG	(DATA)
   0000                     590 __start__stack:
   0000                     591 	.ds	1
                            592 
                            593 ;--------------------------------------------------------
                            594 ; indirectly addressable internal ram data
                            595 ;--------------------------------------------------------
                            596 	.area ISEG    (DATA)
                            597 ;--------------------------------------------------------
                            598 ; absolute internal ram data
                            599 ;--------------------------------------------------------
                            600 	.area IABS    (ABS,DATA)
                            601 	.area IABS    (ABS,DATA)
                            602 ;--------------------------------------------------------
                            603 ; bit data
                            604 ;--------------------------------------------------------
                            605 	.area BSEG    (BIT)
                            606 ;--------------------------------------------------------
                            607 ; paged external ram data
                            608 ;--------------------------------------------------------
                            609 	.area PSEG    (PAG,XDATA)
                            610 ;--------------------------------------------------------
                            611 ; external ram data
                            612 ;--------------------------------------------------------
                            613 	.area XSEG    (XDATA)
   0000                     614 _rf_read_rx_payload_PARM_2:
   0000                     615 	.ds 2
   0002                     616 _rf_read_rx_payload_dataptr_1_37:
   0002                     617 	.ds 3
   0005                     618 _rf_configure_debug_lite_PARM_2:
   0005                     619 	.ds 1
   0006                     620 _rf_configure_debug_lite_rx_1_39:
   0006                     621 	.ds 1
   0007                     622 _rf_configure_debug_lite_config_1_40:
   0007                     623 	.ds 1
   0008                     624 _rf_write_register_PARM_2:
   0008                     625 	.ds 3
   000B                     626 _rf_write_register_PARM_3:
   000B                     627 	.ds 2
   000D                     628 _rf_write_register_regnumber_1_42:
   000D                     629 	.ds 1
   000E                     630 _rf_write_tx_payload_PARM_2:
   000E                     631 	.ds 2
   0010                     632 _rf_write_tx_payload_PARM_3:
   0010                     633 	.ds 1
   0011                     634 _rf_write_tx_payload_dataptr_1_45:
   0011                     635 	.ds 3
   0014                     636 _rf_set_as_rx_rx_active_mode_1_49:
   0014                     637 	.ds 1
   0015                     638 _rf_set_as_rx_config_1_50:
   0015                     639 	.ds 1
   0016                     640 _rf_irq_clear_all_dataptr_1_54:
   0016                     641 	.ds 1
   0017                     642 _rf_set_as_tx_config_1_55:
   0017                     643 	.ds 1
   0018                     644 _rf_spi_execute_command_PARM_2:
   0018                     645 	.ds 3
   001B                     646 _rf_spi_execute_command_PARM_3:
   001B                     647 	.ds 2
   001D                     648 _rf_spi_execute_command_PARM_4:
   001D                     649 	.ds 1
   001E                     650 _rf_spi_execute_command_instruction_1_57:
   001E                     651 	.ds 1
   001F                     652 _rf_spi_execute_command_status_1_58:
   001F                     653 	.ds 1
   0020                     654 _rf_spi_send_read_PARM_2:
   0020                     655 	.ds 2
   0022                     656 _rf_spi_send_read_PARM_3:
   0022                     657 	.ds 1
   0023                     658 _rf_spi_send_read_dataptr_1_59:
   0023                     659 	.ds 3
   0026                     660 _rf_power_up_param_PARM_2:
   0026                     661 	.ds 1
   0027                     662 _rf_power_up_param_rx_active_mode_1_63:
   0027                     663 	.ds 1
   0028                     664 _rf_read_register_PARM_2:
   0028                     665 	.ds 3
   002B                     666 _rf_read_register_PARM_3:
   002B                     667 	.ds 2
   002D                     668 _rf_read_register_regnumber_1_69:
   002D                     669 	.ds 1
   002E                     670 _rf_spi_send_read_byte_byte_1_71:
   002E                     671 	.ds 1
   002F                     672 _rf_set_rx_addr_PARM_2:
   002F                     673 	.ds 2
   0031                     674 _rf_set_rx_addr_PARM_3:
   0031                     675 	.ds 1
   0032                     676 _rf_set_rx_addr_address_1_73:
   0032                     677 	.ds 3
   0035                     678 _rf_power_down_config_1_76:
   0035                     679 	.ds 1
   0036                     680 _rf_power_up_rx_active_mode_1_78:
   0036                     681 	.ds 1
   0037                     682 _rf_power_up_config_1_79:
   0037                     683 	.ds 1
   0038                     684 _gpio_pin_configure_PARM_2:
   0038                     685 	.ds 1
   0039                     686 _gpio_pin_configure_gpio_pin_id_1_86:
   0039                     687 	.ds 1
   003A                     688 _gpio_pin_val_read_gpio_pin_id_1_108:
   003A                     689 	.ds 1
   003B                     690 _gpio_pin_val_read_value_1_109:
   003B                     691 	.ds 1
   003C                     692 _gpio_pin_val_clear_gpio_pin_id_1_116:
   003C                     693 	.ds 1
   003D                     694 _gpio_pin_val_set_gpio_pin_id_1_122:
   003D                     695 	.ds 1
   003E                     696 _gpio_pin_val_write_PARM_2:
   003E                     697 	.ds 1
   003F                     698 _gpio_pin_val_write_gpio_pin_id_1_128:
   003F                     699 	.ds 1
   0040                     700 _delay_us_microseconds_1_132:
   0040                     701 	.ds 2
   0042                     702 _delay_s_seconds_1_135:
   0042                     703 	.ds 2
   0044                     704 _delay_ms_milliseconds_1_138:
   0044                     705 	.ds 2
   0046                     706 _pwm_configure_pwm_config_options_1_143:
   0046                     707 	.ds 1
   0047                     708 _pwm_start_PARM_2:
   0047                     709 	.ds 1
   0048                     710 _pwm_start_pwm_channel_1_145:
   0048                     711 	.ds 1
   0049                     712 _pwr_clk_mgmt_clklf_configure_clklf_config_options_1_154:
   0049                     713 	.ds 1
   004A                     714 _pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156:
   004A                     715 	.ds 4
   004E                     716 _pwr_clk_mgmt_wakeup_configure_PARM_2:
   004E                     717 	.ds 2
   0050                     718 _pwr_clk_mgmt_wakeup_configure_wakeup_sources_config_options_1_158:
   0050                     719 	.ds 1
   0051                     720 _watchdog_set_wdsv_count_wdsv_value_1_161:
   0051                     721 	.ds 2
   0053                     722 _watchdog_start_and_set_timeout_in_ms_milliseconds_1_163:
   0053                     723 	.ds 4
   0057                     724 _watchdog_start_and_set_timeout_in_ms_wd_value_1_164:
   0057                     725 	.ds 2
   0059                     726 _interrupt_configure_ifp_PARM_2:
   0059                     727 	.ds 1
   005A                     728 _interrupt_configure_ifp_interrupt_ifp_input_1_167:
   005A                     729 	.ds 1
   005B                     730 _adc_configure_adc_config_options_1_181:
   005B                     731 	.ds 2
   005D                     732 _adc_set_input_channel_adc_channel_1_183:
   005D                     733 	.ds 1
   005E                     734 _adc_start_single_conversion_adc_channel_1_185:
   005E                     735 	.ds 1
   005F                     736 _adc_start_single_conversion_get_value_adc_channel_1_187:
   005F                     737 	.ds 1
   0060                     738 _timer0_configure_PARM_2:
   0060                     739 	.ds 2
   0062                     740 _timer0_configure_timer0_config_options_1_190:
   0062                     741 	.ds 1
   0063                     742 _timer1_configure_PARM_2:
   0063                     743 	.ds 2
   0065                     744 _timer1_configure_timer1_config_options_1_195:
   0065                     745 	.ds 1
   0066                     746 _uart_configure_manual_baud_calc_PARM_2:
   0066                     747 	.ds 2
   0068                     748 _uart_configure_manual_baud_calc_uart_config_options_1_205:
   0068                     749 	.ds 1
   0069                     750 _uart_calc_actual_baud_rate_from_s0rel_PARM_2:
   0069                     751 	.ds 1
   006A                     752 _uart_calc_actual_baud_rate_from_s0rel_s0rel_reg_value_1_212:
   006A                     753 	.ds 2
   006C                     754 _uart_calc_actual_baud_rate_from_th1_PARM_2:
   006C                     755 	.ds 1
   006D                     756 _uart_calc_actual_baud_rate_from_th1_th1_reg_value_1_214:
   006D                     757 	.ds 1
   006E                     758 _uart_calc_s0rel_value_PARM_2:
   006E                     759 	.ds 1
   006F                     760 _uart_calc_s0rel_value_desired_baud_rate_1_216:
   006F                     761 	.ds 4
   0073                     762 _uart_calc_th1_value_PARM_2:
   0073                     763 	.ds 1
   0074                     764 _uart_calc_th1_value_desired_baud_rate_1_218:
   0074                     765 	.ds 4
   0078                     766 _uart_configure_auto_baud_calc_PARM_2:
   0078                     767 	.ds 4
   007C                     768 _uart_configure_auto_baud_calc_uart_config_options_1_220:
   007C                     769 	.ds 1
   007D                     770 _rtc2_configure_PARM_2:
   007D                     771 	.ds 2
   007F                     772 _rtc2_configure_rtc2_config_options_1_230:
   007F                     773 	.ds 1
   0080                     774 _radiobegin_setup_1_233:
   0080                     775 	.ds 1
   0081                     776 _setChannel_channel_1_234:
   0081                     777 	.ds 1
   0082                     778 _setDataRate_speed_1_236:
   0082                     779 	.ds 1
   0083                     780 _setDataRate_buffer_1_237:
   0083                     781 	.ds 1
   0084                     782 _setAutoAck_enable_1_238:
   0084                     783 	.ds 1
   0085                     784 _setAutoAck_buffer_1_239:
   0085                     785 	.ds 1
   0086                     786 _setCRCLength_length_1_240:
   0086                     787 	.ds 1
   0087                     788 _setCRCLength_buffer_1_241:
   0087                     789 	.ds 1
   0088                     790 _setPALevel_setup_1_243:
   0088                     791 	.ds 1
   0089                     792 _openAllPipe_buffer_1_244:
   0089                     793 	.ds 5
   008E                     794 _openAllPipe_setup_1_244:
   008E                     795 	.ds 1
   008F                     796 _clientnf::
   008F                     797 	.ds 18
   00A1                     798 _stdimm::
   00A1                     799 	.ds 1
   00A2                     800 _dimmon_mode_1_249:
   00A2                     801 	.ds 1
   00A3                     802 _servernf::
   00A3                     803 	.ds 32
                            804 ;--------------------------------------------------------
                            805 ; absolute external ram data
                            806 ;--------------------------------------------------------
                            807 	.area XABS    (ABS,XDATA)
                            808 ;--------------------------------------------------------
                            809 ; external initialized ram data
                            810 ;--------------------------------------------------------
                            811 	.area XISEG   (XDATA)
   0000                     812 _countrtc::
   0000                     813 	.ds 4
                            814 	.area HOME    (CODE)
                            815 	.area GSINIT0 (CODE)
                            816 	.area GSINIT1 (CODE)
                            817 	.area GSINIT2 (CODE)
                            818 	.area GSINIT3 (CODE)
                            819 	.area GSINIT4 (CODE)
                            820 	.area GSINIT5 (CODE)
                            821 	.area GSINIT  (CODE)
                            822 	.area GSFINAL (CODE)
                            823 	.area CSEG    (CODE)
                            824 ;--------------------------------------------------------
                            825 ; interrupt vector 
                            826 ;--------------------------------------------------------
                            827 	.area HOME    (CODE)
   0000                     828 __interrupt_vect:
   0000 02r00r00      [24]  829 	ljmp	__sdcc_gsinit_startup
   0003 02r14r89      [24]  830 	ljmp	_isr_ifp
   0006                     831 	.ds	5
   000B 32            [24]  832 	reti
   000C                     833 	.ds	7
   0013 32            [24]  834 	reti
   0014                     835 	.ds	7
   001B 02r15r1D      [24]  836 	ljmp	_isr_t1
   001E                     837 	.ds	5
   0023 32            [24]  838 	reti
   0024                     839 	.ds	7
   002B 32            [24]  840 	reti
   002C                     841 	.ds	7
   0033 32            [24]  842 	reti
   0034                     843 	.ds	7
   003B 32            [24]  844 	reti
   003C                     845 	.ds	7
   0043 32            [24]  846 	reti
   0044                     847 	.ds	7
   004B 32            [24]  848 	reti
   004C                     849 	.ds	7
   0053 32            [24]  850 	reti
   0054                     851 	.ds	7
   005B 32            [24]  852 	reti
   005C                     853 	.ds	7
   0063 32            [24]  854 	reti
   0064                     855 	.ds	7
   006B 02r15r9A      [24]  856 	ljmp	_isr_rtc2
                            857 ;--------------------------------------------------------
                            858 ; global & static initialisations
                            859 ;--------------------------------------------------------
                            860 	.area HOME    (CODE)
                            861 	.area GSINIT  (CODE)
                            862 	.area GSFINAL (CODE)
                            863 	.area GSINIT  (CODE)
                            864 	.globl __sdcc_gsinit_startup
                            865 	.globl __sdcc_program_startup
                            866 	.globl __start__stack
                            867 	.globl __mcs51_genXINIT
                            868 	.globl __mcs51_genXRAMCLEAR
                            869 	.globl __mcs51_genRAMCLEAR
                            870 	.area GSFINAL (CODE)
   0000 02r00r6E      [24]  871 	ljmp	__sdcc_program_startup
                            872 ;--------------------------------------------------------
                            873 ; Home
                            874 ;--------------------------------------------------------
                            875 	.area HOME    (CODE)
                            876 	.area HOME    (CODE)
   006E                     877 __sdcc_program_startup:
   006E 02r15rC1      [24]  878 	ljmp	_main
                            879 ;	return from main will return to caller
                            880 ;--------------------------------------------------------
                            881 ; code
                            882 ;--------------------------------------------------------
                            883 	.area CSEG    (CODE)
                            884 ;------------------------------------------------------------
                            885 ;Allocation info for local variables in function 'rf_read_rx_payload'
                            886 ;------------------------------------------------------------
                            887 ;len                       Allocated with name '_rf_read_rx_payload_PARM_2'
                            888 ;dataptr                   Allocated with name '_rf_read_rx_payload_dataptr_1_37'
                            889 ;status                    Allocated with name '_rf_read_rx_payload_status_1_38'
                            890 ;------------------------------------------------------------
                            891 ;	../src/rf/src/rf_read_rx_payload.c:48: unsigned char rf_read_rx_payload(unsigned char * dataptr, unsigned int len)
                            892 ;	-----------------------------------------
                            893 ;	 function rf_read_rx_payload
                            894 ;	-----------------------------------------
   0000                     895 _rf_read_rx_payload:
                     0007   896 	ar7 = 0x07
                     0006   897 	ar6 = 0x06
                     0005   898 	ar5 = 0x05
                     0004   899 	ar4 = 0x04
                     0003   900 	ar3 = 0x03
                     0002   901 	ar2 = 0x02
                     0001   902 	ar1 = 0x01
                     0000   903 	ar0 = 0x00
   0000 AF F0         [24]  904 	mov	r7,b
   0002 AE 83         [24]  905 	mov	r6,dph
   0004 E5 82         [12]  906 	mov	a,dpl
   0006 90r00r02      [24]  907 	mov	dptr,#_rf_read_rx_payload_dataptr_1_37
   0009 F0            [24]  908 	movx	@dptr,a
   000A EE            [12]  909 	mov	a,r6
   000B A3            [24]  910 	inc	dptr
   000C F0            [24]  911 	movx	@dptr,a
   000D EF            [12]  912 	mov	a,r7
   000E A3            [24]  913 	inc	dptr
   000F F0            [24]  914 	movx	@dptr,a
                            915 ;	../src/rf/src/rf_read_rx_payload.c:53: rf_clear_ce();
   0010 C2 E8         [12]  916 	clr _RFCON_SB_RFCE 
                            917 ;	../src/rf/src/rf_read_rx_payload.c:54: status = rf_spi_execute_command(RF_R_RX_PAYLOAD, dataptr, len, true);
   0012 90r00r02      [24]  918 	mov	dptr,#_rf_read_rx_payload_dataptr_1_37
   0015 E0            [24]  919 	movx	a,@dptr
   0016 FD            [12]  920 	mov	r5,a
   0017 A3            [24]  921 	inc	dptr
   0018 E0            [24]  922 	movx	a,@dptr
   0019 FE            [12]  923 	mov	r6,a
   001A A3            [24]  924 	inc	dptr
   001B E0            [24]  925 	movx	a,@dptr
   001C FF            [12]  926 	mov	r7,a
   001D 90r00r00      [24]  927 	mov	dptr,#_rf_read_rx_payload_PARM_2
   0020 E0            [24]  928 	movx	a,@dptr
   0021 FB            [12]  929 	mov	r3,a
   0022 A3            [24]  930 	inc	dptr
   0023 E0            [24]  931 	movx	a,@dptr
   0024 FC            [12]  932 	mov	r4,a
   0025 90r00r18      [24]  933 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0028 ED            [12]  934 	mov	a,r5
   0029 F0            [24]  935 	movx	@dptr,a
   002A EE            [12]  936 	mov	a,r6
   002B A3            [24]  937 	inc	dptr
   002C F0            [24]  938 	movx	@dptr,a
   002D EF            [12]  939 	mov	a,r7
   002E A3            [24]  940 	inc	dptr
   002F F0            [24]  941 	movx	@dptr,a
   0030 90r00r1B      [24]  942 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0033 EB            [12]  943 	mov	a,r3
   0034 F0            [24]  944 	movx	@dptr,a
   0035 EC            [12]  945 	mov	a,r4
   0036 A3            [24]  946 	inc	dptr
   0037 F0            [24]  947 	movx	@dptr,a
   0038 90r00r1D      [24]  948 	mov	dptr,#_rf_spi_execute_command_PARM_4
   003B 74 01         [12]  949 	mov	a,#0x01
   003D F0            [24]  950 	movx	@dptr,a
   003E 75 82 61      [24]  951 	mov	dpl,#0x61
   0041 12r02r35      [24]  952 	lcall	_rf_spi_execute_command
   0044 AF 82         [24]  953 	mov	r7,dpl
                            954 ;	../src/rf/src/rf_read_rx_payload.c:55: rf_set_ce();
   0046 D2 E8         [12]  955 	setb _RFCON_SB_RFCE 
   0048 90 00 04      [24]  956 	mov	dptr,#0x0004
   004B C0 07         [24]  957 	push	ar7
   004D 12r08r42      [24]  958 	lcall	_delay_us
   0050 D0 07         [24]  959 	pop	ar7
                            960 ;	../src/rf/src/rf_read_rx_payload.c:57: return status; //Return the STATUS register value
   0052 8F 82         [24]  961 	mov	dpl,r7
   0054 22            [24]  962 	ret
                            963 ;------------------------------------------------------------
                            964 ;Allocation info for local variables in function 'rf_configure_debug_lite'
                            965 ;------------------------------------------------------------
                            966 ;p0_payload_width          Allocated with name '_rf_configure_debug_lite_PARM_2'
                            967 ;rx                        Allocated with name '_rf_configure_debug_lite_rx_1_39'
                            968 ;config                    Allocated with name '_rf_configure_debug_lite_config_1_40'
                            969 ;------------------------------------------------------------
                            970 ;	../src/rf/src/rf_configure_debug_lite.c:48: void rf_configure_debug_lite(bool rx, unsigned char p0_payload_width)
                            971 ;	-----------------------------------------
                            972 ;	 function rf_configure_debug_lite
                            973 ;	-----------------------------------------
   0055                     974 _rf_configure_debug_lite:
   0055 E5 82         [12]  975 	mov	a,dpl
   0057 90r00r06      [24]  976 	mov	dptr,#_rf_configure_debug_lite_rx_1_39
   005A F0            [24]  977 	movx	@dptr,a
                            978 ;	../src/rf/src/rf_configure_debug_lite.c:52: rf_spi_configure_enable(); //Enable RF SPI
   005B 12r00rF9      [24]  979 	lcall	_rf_spi_configure_enable
                            980 ;	../src/rf/src/rf_configure_debug_lite.c:55: config = 0;
   005E 90r00r07      [24]  981 	mov	dptr,#_rf_configure_debug_lite_config_1_40
   0061 E4            [12]  982 	clr	a
   0062 F0            [24]  983 	movx	@dptr,a
                            984 ;	../src/rf/src/rf_configure_debug_lite.c:56: rf_write_register(RF_EN_AA, &config, 1); //Turn auto-acknowledge off
   0063 90r00r08      [24]  985 	mov	dptr,#_rf_write_register_PARM_2
   0066 74r07         [12]  986 	mov	a,#_rf_configure_debug_lite_config_1_40
   0068 F0            [24]  987 	movx	@dptr,a
   0069 74s00         [12]  988 	mov	a,#(_rf_configure_debug_lite_config_1_40 >> 8)
   006B A3            [24]  989 	inc	dptr
   006C F0            [24]  990 	movx	@dptr,a
   006D E4            [12]  991 	clr	a
   006E A3            [24]  992 	inc	dptr
   006F F0            [24]  993 	movx	@dptr,a
   0070 90r00r0B      [24]  994 	mov	dptr,#_rf_write_register_PARM_3
   0073 74 01         [12]  995 	mov	a,#0x01
   0075 F0            [24]  996 	movx	@dptr,a
   0076 E4            [12]  997 	clr	a
   0077 A3            [24]  998 	inc	dptr
   0078 F0            [24]  999 	movx	@dptr,a
   0079 75 82 01      [24] 1000 	mov	dpl,#0x01
   007C 12r00rBC      [24] 1001 	lcall	_rf_write_register
                           1002 ;	../src/rf/src/rf_configure_debug_lite.c:59: config = RF_CONFIG_DEFAULT_VAL; //Set config to the default value of the CONFIG register
   007F 90r00r07      [24] 1003 	mov	dptr,#_rf_configure_debug_lite_config_1_40
   0082 74 08         [12] 1004 	mov	a,#0x08
   0084 F0            [24] 1005 	movx	@dptr,a
                           1006 ;	../src/rf/src/rf_configure_debug_lite.c:62: rf_write_register(RF_RX_PW_P0, &p0_payload_width, 1);
   0085 90r00r08      [24] 1007 	mov	dptr,#_rf_write_register_PARM_2
   0088 74r05         [12] 1008 	mov	a,#_rf_configure_debug_lite_PARM_2
   008A F0            [24] 1009 	movx	@dptr,a
   008B 74s00         [12] 1010 	mov	a,#(_rf_configure_debug_lite_PARM_2 >> 8)
   008D A3            [24] 1011 	inc	dptr
   008E F0            [24] 1012 	movx	@dptr,a
   008F E4            [12] 1013 	clr	a
   0090 A3            [24] 1014 	inc	dptr
   0091 F0            [24] 1015 	movx	@dptr,a
   0092 90r00r0B      [24] 1016 	mov	dptr,#_rf_write_register_PARM_3
   0095 74 01         [12] 1017 	mov	a,#0x01
   0097 F0            [24] 1018 	movx	@dptr,a
   0098 E4            [12] 1019 	clr	a
   0099 A3            [24] 1020 	inc	dptr
   009A F0            [24] 1021 	movx	@dptr,a
   009B 75 82 11      [24] 1022 	mov	dpl,#0x11
   009E 12r00rBC      [24] 1023 	lcall	_rf_write_register
                           1024 ;	../src/rf/src/rf_configure_debug_lite.c:65: if(rx != false)
   00A1 90r00r06      [24] 1025 	mov	dptr,#_rf_configure_debug_lite_rx_1_39
   00A4 E0            [24] 1026 	movx	a,@dptr
   00A5 FF            [12] 1027 	mov	r7,a
   00A6 60 06         [24] 1028 	jz	00102$
                           1029 ;	../src/rf/src/rf_configure_debug_lite.c:67: config |= RF_CONFIG_PRIM_RX;
   00A8 90r00r07      [24] 1030 	mov	dptr,#_rf_configure_debug_lite_config_1_40
   00AB 74 09         [12] 1031 	mov	a,#0x09
   00AD F0            [24] 1032 	movx	@dptr,a
   00AE                    1033 00102$:
                           1034 ;	../src/rf/src/rf_configure_debug_lite.c:70: rf_power_up_param(true, config);
   00AE 90r00r07      [24] 1035 	mov	dptr,#_rf_configure_debug_lite_config_1_40
   00B1 E0            [24] 1036 	movx	a,@dptr
   00B2 90r00r26      [24] 1037 	mov	dptr,#_rf_power_up_param_PARM_2
   00B5 F0            [24] 1038 	movx	@dptr,a
   00B6 75 82 01      [24] 1039 	mov	dpl,#0x01
   00B9 02r03r24      [24] 1040 	ljmp	_rf_power_up_param
                           1041 ;------------------------------------------------------------
                           1042 ;Allocation info for local variables in function 'rf_write_register'
                           1043 ;------------------------------------------------------------
                           1044 ;dataptr                   Allocated with name '_rf_write_register_PARM_2'
                           1045 ;len                       Allocated with name '_rf_write_register_PARM_3'
                           1046 ;regnumber                 Allocated with name '_rf_write_register_regnumber_1_42'
                           1047 ;------------------------------------------------------------
                           1048 ;	../src/rf/src/rf_write_register.c:49: unsigned char rf_write_register(unsigned char regnumber, unsigned char * dataptr, unsigned int len)
                           1049 ;	-----------------------------------------
                           1050 ;	 function rf_write_register
                           1051 ;	-----------------------------------------
   00BC                    1052 _rf_write_register:
   00BC E5 82         [12] 1053 	mov	a,dpl
                           1054 ;	../src/rf/src/rf_write_register.c:52: return rf_spi_execute_command(RF_W_REGISTER | (regnumber & RF_W_REGISTER_DATA), dataptr, len, false);
   00BE 90r00r0D      [24] 1055 	mov	dptr,#_rf_write_register_regnumber_1_42
   00C1 F0            [24] 1056 	movx	@dptr,a
   00C2 FF            [12] 1057 	mov	r7,a
   00C3 74 1F         [12] 1058 	mov	a,#0x1F
   00C5 5F            [12] 1059 	anl	a,r7
   00C6 44 20         [12] 1060 	orl	a,#0x20
   00C8 FF            [12] 1061 	mov	r7,a
   00C9 90r00r08      [24] 1062 	mov	dptr,#_rf_write_register_PARM_2
   00CC E0            [24] 1063 	movx	a,@dptr
   00CD FC            [12] 1064 	mov	r4,a
   00CE A3            [24] 1065 	inc	dptr
   00CF E0            [24] 1066 	movx	a,@dptr
   00D0 FD            [12] 1067 	mov	r5,a
   00D1 A3            [24] 1068 	inc	dptr
   00D2 E0            [24] 1069 	movx	a,@dptr
   00D3 FE            [12] 1070 	mov	r6,a
   00D4 90r00r0B      [24] 1071 	mov	dptr,#_rf_write_register_PARM_3
   00D7 E0            [24] 1072 	movx	a,@dptr
   00D8 FA            [12] 1073 	mov	r2,a
   00D9 A3            [24] 1074 	inc	dptr
   00DA E0            [24] 1075 	movx	a,@dptr
   00DB FB            [12] 1076 	mov	r3,a
   00DC 90r00r18      [24] 1077 	mov	dptr,#_rf_spi_execute_command_PARM_2
   00DF EC            [12] 1078 	mov	a,r4
   00E0 F0            [24] 1079 	movx	@dptr,a
   00E1 ED            [12] 1080 	mov	a,r5
   00E2 A3            [24] 1081 	inc	dptr
   00E3 F0            [24] 1082 	movx	@dptr,a
   00E4 EE            [12] 1083 	mov	a,r6
   00E5 A3            [24] 1084 	inc	dptr
   00E6 F0            [24] 1085 	movx	@dptr,a
   00E7 90r00r1B      [24] 1086 	mov	dptr,#_rf_spi_execute_command_PARM_3
   00EA EA            [12] 1087 	mov	a,r2
   00EB F0            [24] 1088 	movx	@dptr,a
   00EC EB            [12] 1089 	mov	a,r3
   00ED A3            [24] 1090 	inc	dptr
   00EE F0            [24] 1091 	movx	@dptr,a
   00EF 90r00r1D      [24] 1092 	mov	dptr,#_rf_spi_execute_command_PARM_4
   00F2 E4            [12] 1093 	clr	a
   00F3 F0            [24] 1094 	movx	@dptr,a
   00F4 8F 82         [24] 1095 	mov	dpl,r7
   00F6 02r02r35      [24] 1096 	ljmp	_rf_spi_execute_command
                           1097 ;------------------------------------------------------------
                           1098 ;Allocation info for local variables in function 'rf_spi_configure_enable'
                           1099 ;------------------------------------------------------------
                           1100 ;	../src/rf/src/rf_spi_configure_enable.c:47: void rf_spi_configure_enable()
                           1101 ;	-----------------------------------------
                           1102 ;	 function rf_spi_configure_enable
                           1103 ;	-----------------------------------------
   00F9                    1104 _rf_spi_configure_enable:
                           1105 ;	../src/rf/src/rf_spi_configure_enable.c:50: RFCON = 0x02;
   00F9 75 E8 02      [24] 1106 	mov	_RFCON,#0x02
                           1107 ;	../src/rf/src/rf_spi_configure_enable.c:51: RFCON = RFCON_RFCKEN;
   00FC 75 E8 04      [24] 1108 	mov	_RFCON,#0x04
   00FF 22            [24] 1109 	ret
                           1110 ;------------------------------------------------------------
                           1111 ;Allocation info for local variables in function 'rf_write_tx_payload'
                           1112 ;------------------------------------------------------------
                           1113 ;len                       Allocated with name '_rf_write_tx_payload_PARM_2'
                           1114 ;transmit                  Allocated with name '_rf_write_tx_payload_PARM_3'
                           1115 ;dataptr                   Allocated with name '_rf_write_tx_payload_dataptr_1_45'
                           1116 ;status                    Allocated with name '_rf_write_tx_payload_status_1_46'
                           1117 ;------------------------------------------------------------
                           1118 ;	../src/rf/src/rf_write_tx_payload.c:49: unsigned char rf_write_tx_payload(unsigned char * dataptr, unsigned int len, bool transmit)
                           1119 ;	-----------------------------------------
                           1120 ;	 function rf_write_tx_payload
                           1121 ;	-----------------------------------------
   0100                    1122 _rf_write_tx_payload:
   0100 AF F0         [24] 1123 	mov	r7,b
   0102 AE 83         [24] 1124 	mov	r6,dph
   0104 E5 82         [12] 1125 	mov	a,dpl
   0106 90r00r11      [24] 1126 	mov	dptr,#_rf_write_tx_payload_dataptr_1_45
   0109 F0            [24] 1127 	movx	@dptr,a
   010A EE            [12] 1128 	mov	a,r6
   010B A3            [24] 1129 	inc	dptr
   010C F0            [24] 1130 	movx	@dptr,a
   010D EF            [12] 1131 	mov	a,r7
   010E A3            [24] 1132 	inc	dptr
   010F F0            [24] 1133 	movx	@dptr,a
                           1134 ;	../src/rf/src/rf_write_tx_payload.c:53: status = rf_spi_execute_command(RF_W_TX_PAYLOAD, dataptr, len, false); //Write the payload
   0110 90r00r11      [24] 1135 	mov	dptr,#_rf_write_tx_payload_dataptr_1_45
   0113 E0            [24] 1136 	movx	a,@dptr
   0114 FD            [12] 1137 	mov	r5,a
   0115 A3            [24] 1138 	inc	dptr
   0116 E0            [24] 1139 	movx	a,@dptr
   0117 FE            [12] 1140 	mov	r6,a
   0118 A3            [24] 1141 	inc	dptr
   0119 E0            [24] 1142 	movx	a,@dptr
   011A FF            [12] 1143 	mov	r7,a
   011B 90r00r0E      [24] 1144 	mov	dptr,#_rf_write_tx_payload_PARM_2
   011E E0            [24] 1145 	movx	a,@dptr
   011F FB            [12] 1146 	mov	r3,a
   0120 A3            [24] 1147 	inc	dptr
   0121 E0            [24] 1148 	movx	a,@dptr
   0122 FC            [12] 1149 	mov	r4,a
   0123 90r00r18      [24] 1150 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0126 ED            [12] 1151 	mov	a,r5
   0127 F0            [24] 1152 	movx	@dptr,a
   0128 EE            [12] 1153 	mov	a,r6
   0129 A3            [24] 1154 	inc	dptr
   012A F0            [24] 1155 	movx	@dptr,a
   012B EF            [12] 1156 	mov	a,r7
   012C A3            [24] 1157 	inc	dptr
   012D F0            [24] 1158 	movx	@dptr,a
   012E 90r00r1B      [24] 1159 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0131 EB            [12] 1160 	mov	a,r3
   0132 F0            [24] 1161 	movx	@dptr,a
   0133 EC            [12] 1162 	mov	a,r4
   0134 A3            [24] 1163 	inc	dptr
   0135 F0            [24] 1164 	movx	@dptr,a
   0136 90r00r1D      [24] 1165 	mov	dptr,#_rf_spi_execute_command_PARM_4
   0139 E4            [12] 1166 	clr	a
   013A F0            [24] 1167 	movx	@dptr,a
   013B 75 82 A0      [24] 1168 	mov	dpl,#0xA0
   013E 12r02r35      [24] 1169 	lcall	_rf_spi_execute_command
   0141 AF 82         [24] 1170 	mov	r7,dpl
                           1171 ;	../src/rf/src/rf_write_tx_payload.c:56: if(transmit == true)
   0143 90r00r10      [24] 1172 	mov	dptr,#_rf_write_tx_payload_PARM_3
   0146 E0            [24] 1173 	movx	a,@dptr
   0147 FE            [12] 1174 	mov	r6,a
   0148 BE 01 07      [24] 1175 	cjne	r6,#0x01,00102$
                           1176 ;	../src/rf/src/rf_write_tx_payload.c:58: rf_transmit();
   014B C0 07         [24] 1177 	push	ar7
   014D 12r01r55      [24] 1178 	lcall	_rf_transmit
   0150 D0 07         [24] 1179 	pop	ar7
   0152                    1180 00102$:
                           1181 ;	../src/rf/src/rf_write_tx_payload.c:61: return status; //Return the value of STATUS
   0152 8F 82         [24] 1182 	mov	dpl,r7
   0154 22            [24] 1183 	ret
                           1184 ;------------------------------------------------------------
                           1185 ;Allocation info for local variables in function 'rf_transmit'
                           1186 ;------------------------------------------------------------
                           1187 ;	../src/rf/src/rf_transmit.c:47: void rf_transmit()
                           1188 ;	-----------------------------------------
                           1189 ;	 function rf_transmit
                           1190 ;	-----------------------------------------
   0155                    1191 _rf_transmit:
                           1192 ;	../src/rf/src/rf_transmit.c:50: rf_set_ce();
   0155 D2 E8         [12] 1193 	setb _RFCON_SB_RFCE 
   0157 90 00 04      [24] 1194 	mov	dptr,#0x0004
   015A 12r08r42      [24] 1195 	lcall	_delay_us
                           1196 ;	../src/rf/src/rf_transmit.c:51: delay_us(10);
   015D 90 00 0A      [24] 1197 	mov	dptr,#0x000A
   0160 12r08r42      [24] 1198 	lcall	_delay_us
                           1199 ;	../src/rf/src/rf_transmit.c:52: rf_clear_ce();
   0163 C2 E8         [12] 1200 	clr _RFCON_SB_RFCE 
   0165 22            [24] 1201 	ret
                           1202 ;------------------------------------------------------------
                           1203 ;Allocation info for local variables in function 'rf_set_as_rx'
                           1204 ;------------------------------------------------------------
                           1205 ;rx_active_mode            Allocated with name '_rf_set_as_rx_rx_active_mode_1_49'
                           1206 ;config                    Allocated with name '_rf_set_as_rx_config_1_50'
                           1207 ;------------------------------------------------------------
                           1208 ;	../src/rf/src/rf_set_as_rx.c:47: void rf_set_as_rx(bool rx_active_mode)
                           1209 ;	-----------------------------------------
                           1210 ;	 function rf_set_as_rx
                           1211 ;	-----------------------------------------
   0166                    1212 _rf_set_as_rx:
   0166 E5 82         [12] 1213 	mov	a,dpl
   0168 90r00r14      [24] 1214 	mov	dptr,#_rf_set_as_rx_rx_active_mode_1_49
   016B F0            [24] 1215 	movx	@dptr,a
                           1216 ;	../src/rf/src/rf_set_as_rx.c:51: rf_read_register(RF_CONFIG, &config, 1); //Read the current CONFIG value
   016C 90r00r28      [24] 1217 	mov	dptr,#_rf_read_register_PARM_2
   016F 74r15         [12] 1218 	mov	a,#_rf_set_as_rx_config_1_50
   0171 F0            [24] 1219 	movx	@dptr,a
   0172 74s00         [12] 1220 	mov	a,#(_rf_set_as_rx_config_1_50 >> 8)
   0174 A3            [24] 1221 	inc	dptr
   0175 F0            [24] 1222 	movx	@dptr,a
   0176 E4            [12] 1223 	clr	a
   0177 A3            [24] 1224 	inc	dptr
   0178 F0            [24] 1225 	movx	@dptr,a
   0179 90r00r2B      [24] 1226 	mov	dptr,#_rf_read_register_PARM_3
   017C 74 01         [12] 1227 	mov	a,#0x01
   017E F0            [24] 1228 	movx	@dptr,a
   017F E4            [12] 1229 	clr	a
   0180 A3            [24] 1230 	inc	dptr
   0181 F0            [24] 1231 	movx	@dptr,a
   0182 75 82 00      [24] 1232 	mov	dpl,#0x00
   0185 12r03r70      [24] 1233 	lcall	_rf_read_register
                           1234 ;	../src/rf/src/rf_set_as_rx.c:54: if((config & RF_CONFIG_PRIM_RX) != 0)
   0188 90r00r15      [24] 1235 	mov	dptr,#_rf_set_as_rx_config_1_50
   018B E0            [24] 1236 	movx	a,@dptr
   018C FF            [12] 1237 	mov	r7,a
   018D 30 E0 01      [24] 1238 	jnb	acc.0,00102$
                           1239 ;	../src/rf/src/rf_set_as_rx.c:56: return;
   0190 22            [24] 1240 	ret
   0191                    1241 00102$:
                           1242 ;	../src/rf/src/rf_set_as_rx.c:60: config |= RF_CONFIG_PRIM_RX;
   0191 90r00r15      [24] 1243 	mov	dptr,#_rf_set_as_rx_config_1_50
   0194 74 01         [12] 1244 	mov	a,#0x01
   0196 4F            [12] 1245 	orl	a,r7
   0197 F0            [24] 1246 	movx	@dptr,a
                           1247 ;	../src/rf/src/rf_set_as_rx.c:61: rf_write_register(RF_CONFIG, &config, 1);
   0198 90r00r08      [24] 1248 	mov	dptr,#_rf_write_register_PARM_2
   019B 74r15         [12] 1249 	mov	a,#_rf_set_as_rx_config_1_50
   019D F0            [24] 1250 	movx	@dptr,a
   019E 74s00         [12] 1251 	mov	a,#(_rf_set_as_rx_config_1_50 >> 8)
   01A0 A3            [24] 1252 	inc	dptr
   01A1 F0            [24] 1253 	movx	@dptr,a
   01A2 E4            [12] 1254 	clr	a
   01A3 A3            [24] 1255 	inc	dptr
   01A4 F0            [24] 1256 	movx	@dptr,a
   01A5 90r00r0B      [24] 1257 	mov	dptr,#_rf_write_register_PARM_3
   01A8 74 01         [12] 1258 	mov	a,#0x01
   01AA F0            [24] 1259 	movx	@dptr,a
   01AB E4            [12] 1260 	clr	a
   01AC A3            [24] 1261 	inc	dptr
   01AD F0            [24] 1262 	movx	@dptr,a
   01AE 75 82 00      [24] 1263 	mov	dpl,#0x00
   01B1 12r00rBC      [24] 1264 	lcall	_rf_write_register
                           1265 ;	../src/rf/src/rf_set_as_rx.c:64: if(rx_active_mode != false)
   01B4 90r00r14      [24] 1266 	mov	dptr,#_rf_set_as_rx_rx_active_mode_1_49
   01B7 E0            [24] 1267 	movx	a,@dptr
   01B8 FF            [12] 1268 	mov	r7,a
   01B9 60 08         [24] 1269 	jz	00104$
                           1270 ;	../src/rf/src/rf_set_as_rx.c:66: rf_set_ce();
   01BB D2 E8         [12] 1271 	setb _RFCON_SB_RFCE 
   01BD 90 00 04      [24] 1272 	mov	dptr,#0x0004
   01C0 02r08r42      [24] 1273 	ljmp	_delay_us
   01C3                    1274 00104$:
                           1275 ;	../src/rf/src/rf_set_as_rx.c:70: rf_clear_ce();
   01C3 C2 E8         [12] 1276 	clr _RFCON_SB_RFCE 
   01C5 22            [24] 1277 	ret
                           1278 ;------------------------------------------------------------
                           1279 ;Allocation info for local variables in function 'rf_irq_clear_all'
                           1280 ;------------------------------------------------------------
                           1281 ;dataptr                   Allocated with name '_rf_irq_clear_all_dataptr_1_54'
                           1282 ;------------------------------------------------------------
                           1283 ;	../src/rf/src/rf_irq_clear_all.c:47: void rf_irq_clear_all()
                           1284 ;	-----------------------------------------
                           1285 ;	 function rf_irq_clear_all
                           1286 ;	-----------------------------------------
   01C6                    1287 _rf_irq_clear_all:
                           1288 ;	../src/rf/src/rf_irq_clear_all.c:50: unsigned char dataptr = RF_STATUS_RX_DR | RF_STATUS_TX_DS | RF_STATUS_MAX_RT;
   01C6 90r00r16      [24] 1289 	mov	dptr,#_rf_irq_clear_all_dataptr_1_54
   01C9 74 70         [12] 1290 	mov	a,#0x70
   01CB F0            [24] 1291 	movx	@dptr,a
                           1292 ;	../src/rf/src/rf_irq_clear_all.c:52: rf_write_register(RF_STATUS, &dataptr, 1);
   01CC 90r00r08      [24] 1293 	mov	dptr,#_rf_write_register_PARM_2
   01CF 74r16         [12] 1294 	mov	a,#_rf_irq_clear_all_dataptr_1_54
   01D1 F0            [24] 1295 	movx	@dptr,a
   01D2 74s00         [12] 1296 	mov	a,#(_rf_irq_clear_all_dataptr_1_54 >> 8)
   01D4 A3            [24] 1297 	inc	dptr
   01D5 F0            [24] 1298 	movx	@dptr,a
   01D6 E4            [12] 1299 	clr	a
   01D7 A3            [24] 1300 	inc	dptr
   01D8 F0            [24] 1301 	movx	@dptr,a
   01D9 90r00r0B      [24] 1302 	mov	dptr,#_rf_write_register_PARM_3
   01DC 74 01         [12] 1303 	mov	a,#0x01
   01DE F0            [24] 1304 	movx	@dptr,a
   01DF E4            [12] 1305 	clr	a
   01E0 A3            [24] 1306 	inc	dptr
   01E1 F0            [24] 1307 	movx	@dptr,a
   01E2 75 82 07      [24] 1308 	mov	dpl,#0x07
   01E5 12r00rBC      [24] 1309 	lcall	_rf_write_register
                           1310 ;	../src/rf/src/rf_irq_clear_all.c:54: sbit_clear(IRCON_SB_RFIRQ); //Clear the master interrupt
   01E8 C2 C1         [12] 1311 	clr _IRCON_SB_RFIRQ 
   01EA 22            [24] 1312 	ret
                           1313 ;------------------------------------------------------------
                           1314 ;Allocation info for local variables in function 'rf_set_as_tx'
                           1315 ;------------------------------------------------------------
                           1316 ;config                    Allocated with name '_rf_set_as_tx_config_1_55'
                           1317 ;------------------------------------------------------------
                           1318 ;	../src/rf/src/rf_set_as_tx.c:47: void rf_set_as_tx()
                           1319 ;	-----------------------------------------
                           1320 ;	 function rf_set_as_tx
                           1321 ;	-----------------------------------------
   01EB                    1322 _rf_set_as_tx:
                           1323 ;	../src/rf/src/rf_set_as_tx.c:51: rf_read_register(RF_CONFIG, &config, 1); //Read the current CONFIG value
   01EB 90r00r28      [24] 1324 	mov	dptr,#_rf_read_register_PARM_2
   01EE 74r17         [12] 1325 	mov	a,#_rf_set_as_tx_config_1_55
   01F0 F0            [24] 1326 	movx	@dptr,a
   01F1 74s00         [12] 1327 	mov	a,#(_rf_set_as_tx_config_1_55 >> 8)
   01F3 A3            [24] 1328 	inc	dptr
   01F4 F0            [24] 1329 	movx	@dptr,a
   01F5 E4            [12] 1330 	clr	a
   01F6 A3            [24] 1331 	inc	dptr
   01F7 F0            [24] 1332 	movx	@dptr,a
   01F8 90r00r2B      [24] 1333 	mov	dptr,#_rf_read_register_PARM_3
   01FB 74 01         [12] 1334 	mov	a,#0x01
   01FD F0            [24] 1335 	movx	@dptr,a
   01FE E4            [12] 1336 	clr	a
   01FF A3            [24] 1337 	inc	dptr
   0200 F0            [24] 1338 	movx	@dptr,a
   0201 75 82 00      [24] 1339 	mov	dpl,#0x00
   0204 12r03r70      [24] 1340 	lcall	_rf_read_register
                           1341 ;	../src/rf/src/rf_set_as_tx.c:54: if((config & RF_CONFIG_PRIM_RX) == 0)
   0207 90r00r17      [24] 1342 	mov	dptr,#_rf_set_as_tx_config_1_55
   020A E0            [24] 1343 	movx	a,@dptr
   020B FF            [12] 1344 	mov	r7,a
   020C 20 E0 01      [24] 1345 	jb	acc.0,00102$
                           1346 ;	../src/rf/src/rf_set_as_tx.c:56: return;
   020F 22            [24] 1347 	ret
   0210                    1348 00102$:
                           1349 ;	../src/rf/src/rf_set_as_tx.c:59: rf_clear_ce(); //Clear the CE pin
   0210 C2 E8         [12] 1350 	clr _RFCON_SB_RFCE 
                           1351 ;	../src/rf/src/rf_set_as_tx.c:62: config &= (~RF_CONFIG_PRIM_RX);
   0212 90r00r17      [24] 1352 	mov	dptr,#_rf_set_as_tx_config_1_55
   0215 74 FE         [12] 1353 	mov	a,#0xFE
   0217 5F            [12] 1354 	anl	a,r7
   0218 F0            [24] 1355 	movx	@dptr,a
                           1356 ;	../src/rf/src/rf_set_as_tx.c:63: rf_write_register(RF_CONFIG, &config, 1);
   0219 90r00r08      [24] 1357 	mov	dptr,#_rf_write_register_PARM_2
   021C 74r17         [12] 1358 	mov	a,#_rf_set_as_tx_config_1_55
   021E F0            [24] 1359 	movx	@dptr,a
   021F 74s00         [12] 1360 	mov	a,#(_rf_set_as_tx_config_1_55 >> 8)
   0221 A3            [24] 1361 	inc	dptr
   0222 F0            [24] 1362 	movx	@dptr,a
   0223 E4            [12] 1363 	clr	a
   0224 A3            [24] 1364 	inc	dptr
   0225 F0            [24] 1365 	movx	@dptr,a
   0226 90r00r0B      [24] 1366 	mov	dptr,#_rf_write_register_PARM_3
   0229 74 01         [12] 1367 	mov	a,#0x01
   022B F0            [24] 1368 	movx	@dptr,a
   022C E4            [12] 1369 	clr	a
   022D A3            [24] 1370 	inc	dptr
   022E F0            [24] 1371 	movx	@dptr,a
   022F 75 82 00      [24] 1372 	mov	dpl,#0x00
   0232 02r00rBC      [24] 1373 	ljmp	_rf_write_register
                           1374 ;------------------------------------------------------------
                           1375 ;Allocation info for local variables in function 'rf_spi_execute_command'
                           1376 ;------------------------------------------------------------
                           1377 ;dataptr                   Allocated with name '_rf_spi_execute_command_PARM_2'
                           1378 ;len                       Allocated with name '_rf_spi_execute_command_PARM_3'
                           1379 ;copydata                  Allocated with name '_rf_spi_execute_command_PARM_4'
                           1380 ;instruction               Allocated with name '_rf_spi_execute_command_instruction_1_57'
                           1381 ;status                    Allocated with name '_rf_spi_execute_command_status_1_58'
                           1382 ;------------------------------------------------------------
                           1383 ;	../src/rf/src/rf_spi_execute_command.c:50: unsigned char rf_spi_execute_command(unsigned char instruction, unsigned char * dataptr, unsigned int len, bool copydata)
                           1384 ;	-----------------------------------------
                           1385 ;	 function rf_spi_execute_command
                           1386 ;	-----------------------------------------
   0235                    1387 _rf_spi_execute_command:
   0235 E5 82         [12] 1388 	mov	a,dpl
                           1389 ;	../src/rf/src/rf_spi_execute_command.c:52: unsigned char status = instruction; //status writes the instruction, then reads the current STATUS value
   0237 90r00r1E      [24] 1390 	mov	dptr,#_rf_spi_execute_command_instruction_1_57
   023A F0            [24] 1391 	movx	@dptr,a
   023B FF            [12] 1392 	mov	r7,a
   023C 90r00r1F      [24] 1393 	mov	dptr,#_rf_spi_execute_command_status_1_58
   023F F0            [24] 1394 	movx	@dptr,a
                           1395 ;	../src/rf/src/rf_spi_execute_command.c:54: rf_clear_csn(); //Clear CSN to start the transaction
   0240 C2 E9         [12] 1396 	clr _RFCON_SB_RFCSN 
                           1397 ;	../src/rf/src/rf_spi_execute_command.c:57: rf_spi_send_read(&status, 1, true);
   0242 90r00r20      [24] 1398 	mov	dptr,#_rf_spi_send_read_PARM_2
   0245 74 01         [12] 1399 	mov	a,#0x01
   0247 F0            [24] 1400 	movx	@dptr,a
   0248 E4            [12] 1401 	clr	a
   0249 A3            [24] 1402 	inc	dptr
   024A F0            [24] 1403 	movx	@dptr,a
   024B 90r00r22      [24] 1404 	mov	dptr,#_rf_spi_send_read_PARM_3
   024E 74 01         [12] 1405 	mov	a,#0x01
   0250 F0            [24] 1406 	movx	@dptr,a
   0251 90r00r1F      [24] 1407 	mov	dptr,#_rf_spi_execute_command_status_1_58
   0254 75 F0 00      [24] 1408 	mov	b,#0x00
   0257 12r02r91      [24] 1409 	lcall	_rf_spi_send_read
                           1410 ;	../src/rf/src/rf_spi_execute_command.c:58: rf_spi_send_read(dataptr, len, copydata);
   025A 90r00r18      [24] 1411 	mov	dptr,#_rf_spi_execute_command_PARM_2
   025D E0            [24] 1412 	movx	a,@dptr
   025E FD            [12] 1413 	mov	r5,a
   025F A3            [24] 1414 	inc	dptr
   0260 E0            [24] 1415 	movx	a,@dptr
   0261 FE            [12] 1416 	mov	r6,a
   0262 A3            [24] 1417 	inc	dptr
   0263 E0            [24] 1418 	movx	a,@dptr
   0264 FF            [12] 1419 	mov	r7,a
   0265 90r00r1B      [24] 1420 	mov	dptr,#_rf_spi_execute_command_PARM_3
   0268 E0            [24] 1421 	movx	a,@dptr
   0269 FB            [12] 1422 	mov	r3,a
   026A A3            [24] 1423 	inc	dptr
   026B E0            [24] 1424 	movx	a,@dptr
   026C FC            [12] 1425 	mov	r4,a
   026D 90r00r1D      [24] 1426 	mov	dptr,#_rf_spi_execute_command_PARM_4
   0270 E0            [24] 1427 	movx	a,@dptr
   0271 FA            [12] 1428 	mov	r2,a
   0272 90r00r20      [24] 1429 	mov	dptr,#_rf_spi_send_read_PARM_2
   0275 EB            [12] 1430 	mov	a,r3
   0276 F0            [24] 1431 	movx	@dptr,a
   0277 EC            [12] 1432 	mov	a,r4
   0278 A3            [24] 1433 	inc	dptr
   0279 F0            [24] 1434 	movx	@dptr,a
   027A 90r00r22      [24] 1435 	mov	dptr,#_rf_spi_send_read_PARM_3
   027D EA            [12] 1436 	mov	a,r2
   027E F0            [24] 1437 	movx	@dptr,a
   027F 8D 82         [24] 1438 	mov	dpl,r5
   0281 8E 83         [24] 1439 	mov	dph,r6
   0283 8F F0         [24] 1440 	mov	b,r7
   0285 12r02r91      [24] 1441 	lcall	_rf_spi_send_read
                           1442 ;	../src/rf/src/rf_spi_execute_command.c:60: rf_set_csn(); //Set CSN to end the transaction
   0288 D2 E9         [12] 1443 	setb _RFCON_SB_RFCSN 
                           1444 ;	../src/rf/src/rf_spi_execute_command.c:62: return status; //Return the value of STATUS
   028A 90r00r1F      [24] 1445 	mov	dptr,#_rf_spi_execute_command_status_1_58
   028D E0            [24] 1446 	movx	a,@dptr
   028E F5 82         [12] 1447 	mov	dpl,a
   0290 22            [24] 1448 	ret
                           1449 ;------------------------------------------------------------
                           1450 ;Allocation info for local variables in function 'rf_spi_send_read'
                           1451 ;------------------------------------------------------------
                           1452 ;sloc0                     Allocated with name '_rf_spi_send_read_sloc0_1_0'
                           1453 ;sloc1                     Allocated with name '_rf_spi_send_read_sloc1_1_0'
                           1454 ;len                       Allocated with name '_rf_spi_send_read_PARM_2'
                           1455 ;copydata                  Allocated with name '_rf_spi_send_read_PARM_3'
                           1456 ;dataptr                   Allocated with name '_rf_spi_send_read_dataptr_1_59'
                           1457 ;i                         Allocated with name '_rf_spi_send_read_i_1_60'
                           1458 ;tempbyte                  Allocated with name '_rf_spi_send_read_tempbyte_1_60'
                           1459 ;------------------------------------------------------------
                           1460 ;	../src/rf/src/rf_spi_send_read.c:49: void rf_spi_send_read(unsigned char * dataptr, unsigned int len, bool copydata)
                           1461 ;	-----------------------------------------
                           1462 ;	 function rf_spi_send_read
                           1463 ;	-----------------------------------------
   0291                    1464 _rf_spi_send_read:
   0291 AF F0         [24] 1465 	mov	r7,b
   0293 AE 83         [24] 1466 	mov	r6,dph
   0295 E5 82         [12] 1467 	mov	a,dpl
   0297 90r00r23      [24] 1468 	mov	dptr,#_rf_spi_send_read_dataptr_1_59
   029A F0            [24] 1469 	movx	@dptr,a
   029B EE            [12] 1470 	mov	a,r6
   029C A3            [24] 1471 	inc	dptr
   029D F0            [24] 1472 	movx	@dptr,a
   029E EF            [12] 1473 	mov	a,r7
   029F A3            [24] 1474 	inc	dptr
   02A0 F0            [24] 1475 	movx	@dptr,a
                           1476 ;	../src/rf/src/rf_spi_send_read.c:55: for(i = 0; i < len; i++)
   02A1 90r00r23      [24] 1477 	mov	dptr,#_rf_spi_send_read_dataptr_1_59
   02A4 E0            [24] 1478 	movx	a,@dptr
   02A5 FD            [12] 1479 	mov	r5,a
   02A6 A3            [24] 1480 	inc	dptr
   02A7 E0            [24] 1481 	movx	a,@dptr
   02A8 FE            [12] 1482 	mov	r6,a
   02A9 A3            [24] 1483 	inc	dptr
   02AA E0            [24] 1484 	movx	a,@dptr
   02AB FF            [12] 1485 	mov	r7,a
   02AC 90r00r22      [24] 1486 	mov	dptr,#_rf_spi_send_read_PARM_3
   02AF E0            [24] 1487 	movx	a,@dptr
   02B0 FC            [12] 1488 	mov	r4,a
   02B1 90r00r20      [24] 1489 	mov	dptr,#_rf_spi_send_read_PARM_2
   02B4 E0            [24] 1490 	movx	a,@dptr
   02B5 FA            [12] 1491 	mov	r2,a
   02B6 A3            [24] 1492 	inc	dptr
   02B7 E0            [24] 1493 	movx	a,@dptr
   02B8 FB            [12] 1494 	mov	r3,a
   02B9 78 00         [12] 1495 	mov	r0,#0x00
   02BB 79 00         [12] 1496 	mov	r1,#0x00
   02BD                    1497 00105$:
   02BD C3            [12] 1498 	clr	c
   02BE E8            [12] 1499 	mov	a,r0
   02BF 9A            [12] 1500 	subb	a,r2
   02C0 E9            [12] 1501 	mov	a,r1
   02C1 9B            [12] 1502 	subb	a,r3
   02C2 50 5F         [24] 1503 	jnc	00107$
                           1504 ;	../src/rf/src/rf_spi_send_read.c:57: tempbyte = rf_spi_send_read_byte(dataptr[i]); //Send the value, and then save the received value
   02C4 C0 02         [24] 1505 	push	ar2
   02C6 C0 03         [24] 1506 	push	ar3
   02C8 E8            [12] 1507 	mov	a,r0
   02C9 2D            [12] 1508 	add	a,r5
   02CA F5*00         [12] 1509 	mov	_rf_spi_send_read_sloc0_1_0,a
   02CC E9            [12] 1510 	mov	a,r1
   02CD 3E            [12] 1511 	addc	a,r6
   02CE F5*01         [12] 1512 	mov	(_rf_spi_send_read_sloc0_1_0 + 1),a
   02D0 8F*02         [24] 1513 	mov	(_rf_spi_send_read_sloc0_1_0 + 2),r7
   02D2 85*00 82      [24] 1514 	mov	dpl,_rf_spi_send_read_sloc0_1_0
   02D5 85*01 83      [24] 1515 	mov	dph,(_rf_spi_send_read_sloc0_1_0 + 1)
   02D8 85*02 F0      [24] 1516 	mov	b,(_rf_spi_send_read_sloc0_1_0 + 2)
   02DB 12r00r00      [24] 1517 	lcall	__gptrget
   02DE FB            [12] 1518 	mov	r3,a
   02DF F5 82         [12] 1519 	mov	dpl,a
   02E1 C0 07         [24] 1520 	push	ar7
   02E3 C0 06         [24] 1521 	push	ar6
   02E5 C0 05         [24] 1522 	push	ar5
   02E7 C0 04         [24] 1523 	push	ar4
   02E9 C0 03         [24] 1524 	push	ar3
   02EB C0 02         [24] 1525 	push	ar2
   02ED C0 01         [24] 1526 	push	ar1
   02EF C0 00         [24] 1527 	push	ar0
   02F1 12r03rAB      [24] 1528 	lcall	_rf_spi_send_read_byte
   02F4 85 82*03      [24] 1529 	mov	_rf_spi_send_read_sloc1_1_0,dpl
   02F7 D0 00         [24] 1530 	pop	ar0
   02F9 D0 01         [24] 1531 	pop	ar1
   02FB D0 02         [24] 1532 	pop	ar2
   02FD D0 03         [24] 1533 	pop	ar3
   02FF D0 04         [24] 1534 	pop	ar4
   0301 D0 05         [24] 1535 	pop	ar5
   0303 D0 06         [24] 1536 	pop	ar6
   0305 D0 07         [24] 1537 	pop	ar7
                           1538 ;	../src/rf/src/rf_spi_send_read.c:60: if(copydata != false)
   0307 D0 03         [24] 1539 	pop	ar3
   0309 D0 02         [24] 1540 	pop	ar2
   030B EC            [12] 1541 	mov	a,r4
   030C 60 0E         [24] 1542 	jz	00106$
                           1543 ;	../src/rf/src/rf_spi_send_read.c:62: dataptr[i] = tempbyte;
   030E 85*00 82      [24] 1544 	mov	dpl,_rf_spi_send_read_sloc0_1_0
   0311 85*01 83      [24] 1545 	mov	dph,(_rf_spi_send_read_sloc0_1_0 + 1)
   0314 85*02 F0      [24] 1546 	mov	b,(_rf_spi_send_read_sloc0_1_0 + 2)
   0317 E5*03         [12] 1547 	mov	a,_rf_spi_send_read_sloc1_1_0
   0319 12r00r00      [24] 1548 	lcall	__gptrput
   031C                    1549 00106$:
                           1550 ;	../src/rf/src/rf_spi_send_read.c:55: for(i = 0; i < len; i++)
   031C 08            [12] 1551 	inc	r0
   031D B8 00 9D      [24] 1552 	cjne	r0,#0x00,00105$
   0320 09            [12] 1553 	inc	r1
   0321 80 9A         [24] 1554 	sjmp	00105$
   0323                    1555 00107$:
   0323 22            [24] 1556 	ret
                           1557 ;------------------------------------------------------------
                           1558 ;Allocation info for local variables in function 'rf_power_up_param'
                           1559 ;------------------------------------------------------------
                           1560 ;config                    Allocated with name '_rf_power_up_param_PARM_2'
                           1561 ;rx_active_mode            Allocated with name '_rf_power_up_param_rx_active_mode_1_63'
                           1562 ;------------------------------------------------------------
                           1563 ;	../src/rf/src/rf_power_up_param.c:49: void rf_power_up_param(bool rx_active_mode, unsigned char config)
                           1564 ;	-----------------------------------------
                           1565 ;	 function rf_power_up_param
                           1566 ;	-----------------------------------------
   0324                    1567 _rf_power_up_param:
   0324 E5 82         [12] 1568 	mov	a,dpl
   0326 90r00r27      [24] 1569 	mov	dptr,#_rf_power_up_param_rx_active_mode_1_63
   0329 F0            [24] 1570 	movx	@dptr,a
                           1571 ;	../src/rf/src/rf_power_up_param.c:52: config |= RF_CONFIG_PWR_UP;
   032A 90r00r26      [24] 1572 	mov	dptr,#_rf_power_up_param_PARM_2
   032D E0            [24] 1573 	movx	a,@dptr
   032E 44 02         [12] 1574 	orl	a,#0x02
   0330 F0            [24] 1575 	movx	@dptr,a
                           1576 ;	../src/rf/src/rf_power_up_param.c:53: rf_write_register(RF_CONFIG, &config, 1);
   0331 90r00r08      [24] 1577 	mov	dptr,#_rf_write_register_PARM_2
   0334 74r26         [12] 1578 	mov	a,#_rf_power_up_param_PARM_2
   0336 F0            [24] 1579 	movx	@dptr,a
   0337 74s00         [12] 1580 	mov	a,#(_rf_power_up_param_PARM_2 >> 8)
   0339 A3            [24] 1581 	inc	dptr
   033A F0            [24] 1582 	movx	@dptr,a
   033B E4            [12] 1583 	clr	a
   033C A3            [24] 1584 	inc	dptr
   033D F0            [24] 1585 	movx	@dptr,a
   033E 90r00r0B      [24] 1586 	mov	dptr,#_rf_write_register_PARM_3
   0341 74 01         [12] 1587 	mov	a,#0x01
   0343 F0            [24] 1588 	movx	@dptr,a
   0344 E4            [12] 1589 	clr	a
   0345 A3            [24] 1590 	inc	dptr
   0346 F0            [24] 1591 	movx	@dptr,a
   0347 75 82 00      [24] 1592 	mov	dpl,#0x00
   034A 12r00rBC      [24] 1593 	lcall	_rf_write_register
                           1594 ;	../src/rf/src/rf_power_up_param.c:55: delay_us(1); //Delay for power up
   034D 90 00 01      [24] 1595 	mov	dptr,#0x0001
   0350 12r08r42      [24] 1596 	lcall	_delay_us
                           1597 ;	../src/rf/src/rf_power_up_param.c:58: if((config & RF_CONFIG_PRIM_RX) == 0)
   0353 90r00r26      [24] 1598 	mov	dptr,#_rf_power_up_param_PARM_2
   0356 E0            [24] 1599 	movx	a,@dptr
   0357 FF            [12] 1600 	mov	r7,a
   0358 20 E0 03      [24] 1601 	jb	acc.0,00105$
                           1602 ;	../src/rf/src/rf_power_up_param.c:60: rf_clear_ce(); //Clear CE for TX mode
   035B C2 E8         [12] 1603 	clr _RFCON_SB_RFCE 
   035D 22            [24] 1604 	ret
   035E                    1605 00105$:
                           1606 ;	../src/rf/src/rf_power_up_param.c:65: if(rx_active_mode != false)
   035E 90r00r27      [24] 1607 	mov	dptr,#_rf_power_up_param_rx_active_mode_1_63
   0361 E0            [24] 1608 	movx	a,@dptr
   0362 FF            [12] 1609 	mov	r7,a
   0363 60 08         [24] 1610 	jz	00102$
                           1611 ;	../src/rf/src/rf_power_up_param.c:67: rf_set_ce();
   0365 D2 E8         [12] 1612 	setb _RFCON_SB_RFCE 
   0367 90 00 04      [24] 1613 	mov	dptr,#0x0004
   036A 02r08r42      [24] 1614 	ljmp	_delay_us
   036D                    1615 00102$:
                           1616 ;	../src/rf/src/rf_power_up_param.c:71: rf_clear_ce();
   036D C2 E8         [12] 1617 	clr _RFCON_SB_RFCE 
   036F 22            [24] 1618 	ret
                           1619 ;------------------------------------------------------------
                           1620 ;Allocation info for local variables in function 'rf_read_register'
                           1621 ;------------------------------------------------------------
                           1622 ;dataptr                   Allocated with name '_rf_read_register_PARM_2'
                           1623 ;len                       Allocated with name '_rf_read_register_PARM_3'
                           1624 ;regnumber                 Allocated with name '_rf_read_register_regnumber_1_69'
                           1625 ;------------------------------------------------------------
                           1626 ;	../src/rf/src/rf_read_register.c:49: unsigned char rf_read_register(unsigned char regnumber, unsigned char * dataptr, unsigned int len)
                           1627 ;	-----------------------------------------
                           1628 ;	 function rf_read_register
                           1629 ;	-----------------------------------------
   0370                    1630 _rf_read_register:
   0370 E5 82         [12] 1631 	mov	a,dpl
                           1632 ;	../src/rf/src/rf_read_register.c:52: return rf_spi_execute_command(regnumber & RF_R_REGISTER_DATA, dataptr, len, true);
   0372 90r00r2D      [24] 1633 	mov	dptr,#_rf_read_register_regnumber_1_69
   0375 F0            [24] 1634 	movx	@dptr,a
   0376 FF            [12] 1635 	mov	r7,a
   0377 53 07 1F      [24] 1636 	anl	ar7,#0x1F
   037A 90r00r28      [24] 1637 	mov	dptr,#_rf_read_register_PARM_2
   037D E0            [24] 1638 	movx	a,@dptr
   037E FC            [12] 1639 	mov	r4,a
   037F A3            [24] 1640 	inc	dptr
   0380 E0            [24] 1641 	movx	a,@dptr
   0381 FD            [12] 1642 	mov	r5,a
   0382 A3            [24] 1643 	inc	dptr
   0383 E0            [24] 1644 	movx	a,@dptr
   0384 FE            [12] 1645 	mov	r6,a
   0385 90r00r2B      [24] 1646 	mov	dptr,#_rf_read_register_PARM_3
   0388 E0            [24] 1647 	movx	a,@dptr
   0389 FA            [12] 1648 	mov	r2,a
   038A A3            [24] 1649 	inc	dptr
   038B E0            [24] 1650 	movx	a,@dptr
   038C FB            [12] 1651 	mov	r3,a
   038D 90r00r18      [24] 1652 	mov	dptr,#_rf_spi_execute_command_PARM_2
   0390 EC            [12] 1653 	mov	a,r4
   0391 F0            [24] 1654 	movx	@dptr,a
   0392 ED            [12] 1655 	mov	a,r5
   0393 A3            [24] 1656 	inc	dptr
   0394 F0            [24] 1657 	movx	@dptr,a
   0395 EE            [12] 1658 	mov	a,r6
   0396 A3            [24] 1659 	inc	dptr
   0397 F0            [24] 1660 	movx	@dptr,a
   0398 90r00r1B      [24] 1661 	mov	dptr,#_rf_spi_execute_command_PARM_3
   039B EA            [12] 1662 	mov	a,r2
   039C F0            [24] 1663 	movx	@dptr,a
   039D EB            [12] 1664 	mov	a,r3
   039E A3            [24] 1665 	inc	dptr
   039F F0            [24] 1666 	movx	@dptr,a
   03A0 90r00r1D      [24] 1667 	mov	dptr,#_rf_spi_execute_command_PARM_4
   03A3 74 01         [12] 1668 	mov	a,#0x01
   03A5 F0            [24] 1669 	movx	@dptr,a
   03A6 8F 82         [24] 1670 	mov	dpl,r7
   03A8 02r02r35      [24] 1671 	ljmp	_rf_spi_execute_command
                           1672 ;------------------------------------------------------------
                           1673 ;Allocation info for local variables in function 'rf_spi_send_read_byte'
                           1674 ;------------------------------------------------------------
                           1675 ;byte                      Allocated with name '_rf_spi_send_read_byte_byte_1_71'
                           1676 ;------------------------------------------------------------
                           1677 ;	../src/rf/src/rf_spi_send_read_byte.c:47: unsigned char rf_spi_send_read_byte(unsigned char byte)
                           1678 ;	-----------------------------------------
                           1679 ;	 function rf_spi_send_read_byte
                           1680 ;	-----------------------------------------
   03AB                    1681 _rf_spi_send_read_byte:
   03AB E5 82         [12] 1682 	mov	a,dpl
                           1683 ;	../src/rf/src/rf_spi_send_read_byte.c:49: SPIRDAT = byte; //Send byte over SPI
   03AD 90r00r2E      [24] 1684 	mov	dptr,#_rf_spi_send_read_byte_byte_1_71
   03B0 F0            [24] 1685 	movx	@dptr,a
   03B1 F5 E7         [12] 1686 	mov	_SPIRDAT,a
                           1687 ;	../src/rf/src/rf_spi_send_read_byte.c:51: while(!(SPIRSTAT & SPIRSTAT_IRQ_RX_FIFO_READY)); //Wait for the transaction to finish
   03B3                    1688 00101$:
   03B3 E5 E6         [12] 1689 	mov	a,_SPIRSTAT
   03B5 30 E2 FB      [24] 1690 	jnb	acc.2,00101$
                           1691 ;	../src/rf/src/rf_spi_send_read_byte.c:53: IRCON_SB_RFRDY = BIT_FALSE; //Clear the IRQ bit
   03B8 C2 C0         [12] 1692 	clr	_IRCON_SB_RFRDY
                           1693 ;	../src/rf/src/rf_spi_send_read_byte.c:55: return SPIRDAT; //Return the received value
   03BA 85 E7 82      [24] 1694 	mov	dpl,_SPIRDAT
   03BD 22            [24] 1695 	ret
                           1696 ;------------------------------------------------------------
                           1697 ;Allocation info for local variables in function 'rf_set_rx_addr'
                           1698 ;------------------------------------------------------------
                           1699 ;len                       Allocated with name '_rf_set_rx_addr_PARM_2'
                           1700 ;rxpipenum                 Allocated with name '_rf_set_rx_addr_PARM_3'
                           1701 ;address                   Allocated with name '_rf_set_rx_addr_address_1_73'
                           1702 ;------------------------------------------------------------
                           1703 ;	../src/rf/src/rf_set_rx_addr.c:49: void rf_set_rx_addr(unsigned char * address, unsigned int len, unsigned char rxpipenum)
                           1704 ;	-----------------------------------------
                           1705 ;	 function rf_set_rx_addr
                           1706 ;	-----------------------------------------
   03BE                    1707 _rf_set_rx_addr:
   03BE AF F0         [24] 1708 	mov	r7,b
   03C0 AE 83         [24] 1709 	mov	r6,dph
   03C2 E5 82         [12] 1710 	mov	a,dpl
   03C4 90r00r32      [24] 1711 	mov	dptr,#_rf_set_rx_addr_address_1_73
   03C7 F0            [24] 1712 	movx	@dptr,a
   03C8 EE            [12] 1713 	mov	a,r6
   03C9 A3            [24] 1714 	inc	dptr
   03CA F0            [24] 1715 	movx	@dptr,a
   03CB EF            [12] 1716 	mov	a,r7
   03CC A3            [24] 1717 	inc	dptr
   03CD F0            [24] 1718 	movx	@dptr,a
                           1719 ;	../src/rf/src/rf_set_rx_addr.c:52: if(rxpipenum > 5)
   03CE 90r00r31      [24] 1720 	mov	dptr,#_rf_set_rx_addr_PARM_3
   03D1 E0            [24] 1721 	movx	a,@dptr
   03D2 FF            [12] 1722 	mov  r7,a
   03D3 24 FA         [12] 1723 	add	a,#0xff - 0x05
   03D5 50 01         [24] 1724 	jnc	00102$
                           1725 ;	../src/rf/src/rf_set_rx_addr.c:54: return;
   03D7 22            [24] 1726 	ret
   03D8                    1727 00102$:
                           1728 ;	../src/rf/src/rf_set_rx_addr.c:57: rf_write_register(RF_RX_ADDR_P0 + rxpipenum, address, len); //Write the requested address to the requested RX pipe
   03D8 74 0A         [12] 1729 	mov	a,#0x0A
   03DA 2F            [12] 1730 	add	a,r7
   03DB FF            [12] 1731 	mov	r7,a
   03DC 90r00r32      [24] 1732 	mov	dptr,#_rf_set_rx_addr_address_1_73
   03DF E0            [24] 1733 	movx	a,@dptr
   03E0 FC            [12] 1734 	mov	r4,a
   03E1 A3            [24] 1735 	inc	dptr
   03E2 E0            [24] 1736 	movx	a,@dptr
   03E3 FD            [12] 1737 	mov	r5,a
   03E4 A3            [24] 1738 	inc	dptr
   03E5 E0            [24] 1739 	movx	a,@dptr
   03E6 FE            [12] 1740 	mov	r6,a
   03E7 90r00r2F      [24] 1741 	mov	dptr,#_rf_set_rx_addr_PARM_2
   03EA E0            [24] 1742 	movx	a,@dptr
   03EB FA            [12] 1743 	mov	r2,a
   03EC A3            [24] 1744 	inc	dptr
   03ED E0            [24] 1745 	movx	a,@dptr
   03EE FB            [12] 1746 	mov	r3,a
   03EF 90r00r08      [24] 1747 	mov	dptr,#_rf_write_register_PARM_2
   03F2 EC            [12] 1748 	mov	a,r4
   03F3 F0            [24] 1749 	movx	@dptr,a
   03F4 ED            [12] 1750 	mov	a,r5
   03F5 A3            [24] 1751 	inc	dptr
   03F6 F0            [24] 1752 	movx	@dptr,a
   03F7 EE            [12] 1753 	mov	a,r6
   03F8 A3            [24] 1754 	inc	dptr
   03F9 F0            [24] 1755 	movx	@dptr,a
   03FA 90r00r0B      [24] 1756 	mov	dptr,#_rf_write_register_PARM_3
   03FD EA            [12] 1757 	mov	a,r2
   03FE F0            [24] 1758 	movx	@dptr,a
   03FF EB            [12] 1759 	mov	a,r3
   0400 A3            [24] 1760 	inc	dptr
   0401 F0            [24] 1761 	movx	@dptr,a
   0402 8F 82         [24] 1762 	mov	dpl,r7
   0404 02r00rBC      [24] 1763 	ljmp	_rf_write_register
                           1764 ;------------------------------------------------------------
                           1765 ;Allocation info for local variables in function 'rf_power_down'
                           1766 ;------------------------------------------------------------
                           1767 ;config                    Allocated with name '_rf_power_down_config_1_76'
                           1768 ;------------------------------------------------------------
                           1769 ;	../src/rf/src/rf_power_down.c:47: void rf_power_down()
                           1770 ;	-----------------------------------------
                           1771 ;	 function rf_power_down
                           1772 ;	-----------------------------------------
   0407                    1773 _rf_power_down:
                           1774 ;	../src/rf/src/rf_power_down.c:51: rf_clear_ce(); //Clear the CE pin
   0407 C2 E8         [12] 1775 	clr _RFCON_SB_RFCE 
                           1776 ;	../src/rf/src/rf_power_down.c:53: rf_read_register(RF_CONFIG, &config, 1); //Read the current value of the CONFIG register
   0409 90r00r28      [24] 1777 	mov	dptr,#_rf_read_register_PARM_2
   040C 74r35         [12] 1778 	mov	a,#_rf_power_down_config_1_76
   040E F0            [24] 1779 	movx	@dptr,a
   040F 74s00         [12] 1780 	mov	a,#(_rf_power_down_config_1_76 >> 8)
   0411 A3            [24] 1781 	inc	dptr
   0412 F0            [24] 1782 	movx	@dptr,a
   0413 E4            [12] 1783 	clr	a
   0414 A3            [24] 1784 	inc	dptr
   0415 F0            [24] 1785 	movx	@dptr,a
   0416 90r00r2B      [24] 1786 	mov	dptr,#_rf_read_register_PARM_3
   0419 74 01         [12] 1787 	mov	a,#0x01
   041B F0            [24] 1788 	movx	@dptr,a
   041C E4            [12] 1789 	clr	a
   041D A3            [24] 1790 	inc	dptr
   041E F0            [24] 1791 	movx	@dptr,a
   041F 75 82 00      [24] 1792 	mov	dpl,#0x00
   0422 12r03r70      [24] 1793 	lcall	_rf_read_register
                           1794 ;	../src/rf/src/rf_power_down.c:56: if((config & RF_CONFIG_PWR_UP) == 0)
   0425 90r00r35      [24] 1795 	mov	dptr,#_rf_power_down_config_1_76
   0428 E0            [24] 1796 	movx	a,@dptr
   0429 FF            [12] 1797 	mov	r7,a
   042A 20 E1 01      [24] 1798 	jb	acc.1,00102$
                           1799 ;	../src/rf/src/rf_power_down.c:58: return;
   042D 22            [24] 1800 	ret
   042E                    1801 00102$:
                           1802 ;	../src/rf/src/rf_power_down.c:62: config &= (~RF_CONFIG_PWR_UP);
   042E 90r00r35      [24] 1803 	mov	dptr,#_rf_power_down_config_1_76
   0431 74 FD         [12] 1804 	mov	a,#0xFD
   0433 5F            [12] 1805 	anl	a,r7
   0434 F0            [24] 1806 	movx	@dptr,a
                           1807 ;	../src/rf/src/rf_power_down.c:63: rf_write_register(RF_CONFIG, &config, 1);
   0435 90r00r08      [24] 1808 	mov	dptr,#_rf_write_register_PARM_2
   0438 74r35         [12] 1809 	mov	a,#_rf_power_down_config_1_76
   043A F0            [24] 1810 	movx	@dptr,a
   043B 74s00         [12] 1811 	mov	a,#(_rf_power_down_config_1_76 >> 8)
   043D A3            [24] 1812 	inc	dptr
   043E F0            [24] 1813 	movx	@dptr,a
   043F E4            [12] 1814 	clr	a
   0440 A3            [24] 1815 	inc	dptr
   0441 F0            [24] 1816 	movx	@dptr,a
   0442 90r00r0B      [24] 1817 	mov	dptr,#_rf_write_register_PARM_3
   0445 74 01         [12] 1818 	mov	a,#0x01
   0447 F0            [24] 1819 	movx	@dptr,a
   0448 E4            [12] 1820 	clr	a
   0449 A3            [24] 1821 	inc	dptr
   044A F0            [24] 1822 	movx	@dptr,a
   044B 75 82 00      [24] 1823 	mov	dpl,#0x00
   044E 02r00rBC      [24] 1824 	ljmp	_rf_write_register
                           1825 ;------------------------------------------------------------
                           1826 ;Allocation info for local variables in function 'rf_power_up'
                           1827 ;------------------------------------------------------------
                           1828 ;rx_active_mode            Allocated with name '_rf_power_up_rx_active_mode_1_78'
                           1829 ;config                    Allocated with name '_rf_power_up_config_1_79'
                           1830 ;------------------------------------------------------------
                           1831 ;	../src/rf/src/rf_power_up.c:47: void rf_power_up(bool rx_active_mode)
                           1832 ;	-----------------------------------------
                           1833 ;	 function rf_power_up
                           1834 ;	-----------------------------------------
   0451                    1835 _rf_power_up:
   0451 E5 82         [12] 1836 	mov	a,dpl
   0453 90r00r36      [24] 1837 	mov	dptr,#_rf_power_up_rx_active_mode_1_78
   0456 F0            [24] 1838 	movx	@dptr,a
                           1839 ;	../src/rf/src/rf_power_up.c:51: rf_read_register(RF_CONFIG, &config, 1); //Get the current value of the CONFIG register
   0457 90r00r28      [24] 1840 	mov	dptr,#_rf_read_register_PARM_2
   045A 74r37         [12] 1841 	mov	a,#_rf_power_up_config_1_79
   045C F0            [24] 1842 	movx	@dptr,a
   045D 74s00         [12] 1843 	mov	a,#(_rf_power_up_config_1_79 >> 8)
   045F A3            [24] 1844 	inc	dptr
   0460 F0            [24] 1845 	movx	@dptr,a
   0461 E4            [12] 1846 	clr	a
   0462 A3            [24] 1847 	inc	dptr
   0463 F0            [24] 1848 	movx	@dptr,a
   0464 90r00r2B      [24] 1849 	mov	dptr,#_rf_read_register_PARM_3
   0467 74 01         [12] 1850 	mov	a,#0x01
   0469 F0            [24] 1851 	movx	@dptr,a
   046A E4            [12] 1852 	clr	a
   046B A3            [24] 1853 	inc	dptr
   046C F0            [24] 1854 	movx	@dptr,a
   046D 75 82 00      [24] 1855 	mov	dpl,#0x00
   0470 12r03r70      [24] 1856 	lcall	_rf_read_register
                           1857 ;	../src/rf/src/rf_power_up.c:54: if((config & RF_CONFIG_PWR_UP) != 0)
   0473 90r00r37      [24] 1858 	mov	dptr,#_rf_power_up_config_1_79
   0476 E0            [24] 1859 	movx	a,@dptr
   0477 FF            [12] 1860 	mov	r7,a
   0478 30 E1 01      [24] 1861 	jnb	acc.1,00102$
                           1862 ;	../src/rf/src/rf_power_up.c:56: return;
   047B 22            [24] 1863 	ret
   047C                    1864 00102$:
                           1865 ;	../src/rf/src/rf_power_up.c:60: config |= RF_CONFIG_PWR_UP;
   047C 90r00r37      [24] 1866 	mov	dptr,#_rf_power_up_config_1_79
   047F 74 02         [12] 1867 	mov	a,#0x02
   0481 4F            [12] 1868 	orl	a,r7
   0482 F0            [24] 1869 	movx	@dptr,a
                           1870 ;	../src/rf/src/rf_power_up.c:61: rf_write_register(RF_CONFIG, &config, 1);
   0483 90r00r08      [24] 1871 	mov	dptr,#_rf_write_register_PARM_2
   0486 74r37         [12] 1872 	mov	a,#_rf_power_up_config_1_79
   0488 F0            [24] 1873 	movx	@dptr,a
   0489 74s00         [12] 1874 	mov	a,#(_rf_power_up_config_1_79 >> 8)
   048B A3            [24] 1875 	inc	dptr
   048C F0            [24] 1876 	movx	@dptr,a
   048D E4            [12] 1877 	clr	a
   048E A3            [24] 1878 	inc	dptr
   048F F0            [24] 1879 	movx	@dptr,a
   0490 90r00r0B      [24] 1880 	mov	dptr,#_rf_write_register_PARM_3
   0493 74 01         [12] 1881 	mov	a,#0x01
   0495 F0            [24] 1882 	movx	@dptr,a
   0496 E4            [12] 1883 	clr	a
   0497 A3            [24] 1884 	inc	dptr
   0498 F0            [24] 1885 	movx	@dptr,a
   0499 75 82 00      [24] 1886 	mov	dpl,#0x00
   049C 12r00rBC      [24] 1887 	lcall	_rf_write_register
                           1888 ;	../src/rf/src/rf_power_up.c:63: delay_us(1); //Delay for power up
   049F 90 00 01      [24] 1889 	mov	dptr,#0x0001
   04A2 12r08r42      [24] 1890 	lcall	_delay_us
                           1891 ;	../src/rf/src/rf_power_up.c:66: if((config & RF_CONFIG_PRIM_RX) == 0)
   04A5 90r00r37      [24] 1892 	mov	dptr,#_rf_power_up_config_1_79
   04A8 E0            [24] 1893 	movx	a,@dptr
   04A9 FF            [12] 1894 	mov	r7,a
   04AA 20 E0 03      [24] 1895 	jb	acc.0,00107$
                           1896 ;	../src/rf/src/rf_power_up.c:68: rf_clear_ce(); //Clear CE for TX mode
   04AD C2 E8         [12] 1897 	clr _RFCON_SB_RFCE 
   04AF 22            [24] 1898 	ret
   04B0                    1899 00107$:
                           1900 ;	../src/rf/src/rf_power_up.c:73: if(rx_active_mode != false)
   04B0 90r00r36      [24] 1901 	mov	dptr,#_rf_power_up_rx_active_mode_1_78
   04B3 E0            [24] 1902 	movx	a,@dptr
   04B4 FF            [12] 1903 	mov	r7,a
   04B5 60 08         [24] 1904 	jz	00104$
                           1905 ;	../src/rf/src/rf_power_up.c:75: rf_set_ce();
   04B7 D2 E8         [12] 1906 	setb _RFCON_SB_RFCE 
   04B9 90 00 04      [24] 1907 	mov	dptr,#0x0004
   04BC 02r08r42      [24] 1908 	ljmp	_delay_us
   04BF                    1909 00104$:
                           1910 ;	../src/rf/src/rf_power_up.c:79: rf_clear_ce();
   04BF C2 E8         [12] 1911 	clr _RFCON_SB_RFCE 
   04C1 22            [24] 1912 	ret
                           1913 ;------------------------------------------------------------
                           1914 ;Allocation info for local variables in function 'gpio_pin_configure'
                           1915 ;------------------------------------------------------------
                           1916 ;gpio_pin_config_options   Allocated with name '_gpio_pin_configure_PARM_2'
                           1917 ;gpio_pin_id               Allocated with name '_gpio_pin_configure_gpio_pin_id_1_86'
                           1918 ;------------------------------------------------------------
                           1919 ;	../src/gpio/src/gpio_pin_configure.c:47: void gpio_pin_configure(gpio_pin_id_t gpio_pin_id, uint8_t gpio_pin_config_options)
                           1920 ;	-----------------------------------------
                           1921 ;	 function gpio_pin_configure
                           1922 ;	-----------------------------------------
   04C2                    1923 _gpio_pin_configure:
   04C2 E5 82         [12] 1924 	mov	a,dpl
                           1925 ;	../src/gpio/src/gpio_pin_configure.c:50: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   04C4 90r00r39      [24] 1926 	mov	dptr,#_gpio_pin_configure_gpio_pin_id_1_86
   04C7 F0            [24] 1927 	movx	@dptr,a
   04C8 FF            [12] 1928 	mov  r7,a
   04C9 24 F8         [12] 1929 	add	a,#0xff - 0x07
   04CB 50 03         [24] 1930 	jnc	00174$
   04CD 02r05r46      [24] 1931 	ljmp	00134$
   04D0                    1932 00174$:
                           1933 ;	../src/gpio/src/gpio_pin_configure.c:53: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   04D0 90r00r38      [24] 1934 	mov	dptr,#_gpio_pin_configure_PARM_2
   04D3 E0            [24] 1935 	movx	a,@dptr
   04D4 FE            [12] 1936 	mov	r6,a
   04D5 FD            [12] 1937 	mov	r5,a
   04D6 ED            [12] 1938 	mov	a,r5
   04D7 30 E0 4C      [24] 1939 	jnb	acc.0,00105$
                           1940 ;	../src/gpio/src/gpio_pin_configure.c:56: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   04DA EE            [12] 1941 	mov	a,r6
   04DB 30 E1 15      [24] 1942 	jnb	acc.1,00102$
                           1943 ;	../src/gpio/src/gpio_pin_configure.c:58: gpio_pins_val_set(P0, (1 << (gpio_pin_id % 8)));
   04DE 74 07         [12] 1944 	mov	a,#0x07
   04E0 5F            [12] 1945 	anl	a,r7
   04E1 F5 F0         [12] 1946 	mov	b,a
   04E3 05 F0         [12] 1947 	inc	b
   04E5 74 01         [12] 1948 	mov	a,#0x01
   04E7 80 02         [24] 1949 	sjmp	00179$
   04E9                    1950 00177$:
   04E9 25 E0         [12] 1951 	add	a,acc
   04EB                    1952 00179$:
   04EB D5 F0 FB      [24] 1953 	djnz	b,00177$
   04EE FD            [12] 1954 	mov	r5,a
   04EF 42 80         [12] 1955 	orl	_P0,a
   04F1 80 14         [24] 1956 	sjmp	00103$
   04F3                    1957 00102$:
                           1958 ;	../src/gpio/src/gpio_pin_configure.c:62: gpio_pins_val_clear(P0, (1 << (gpio_pin_id % 8)));
   04F3 74 07         [12] 1959 	mov	a,#0x07
   04F5 5F            [12] 1960 	anl	a,r7
   04F6 F5 F0         [12] 1961 	mov	b,a
   04F8 05 F0         [12] 1962 	inc	b
   04FA 74 01         [12] 1963 	mov	a,#0x01
   04FC 80 02         [24] 1964 	sjmp	00182$
   04FE                    1965 00180$:
   04FE 25 E0         [12] 1966 	add	a,acc
   0500                    1967 00182$:
   0500 D5 F0 FB      [24] 1968 	djnz	b,00180$
   0503 F4            [12] 1969 	cpl	a
   0504 FD            [12] 1970 	mov	r5,a
   0505 52 80         [12] 1971 	anl	_P0,a
   0507                    1972 00103$:
                           1973 ;	../src/gpio/src/gpio_pin_configure.c:66: P0CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0507 74 07         [12] 1974 	mov	a,#0x07
   0509 5F            [12] 1975 	anl	a,r7
   050A FD            [12] 1976 	mov	r5,a
   050B 74 07         [12] 1977 	mov	a,#0x07
   050D 5D            [12] 1978 	anl	a,r5
   050E FC            [12] 1979 	mov	r4,a
                           1980 ;	../src/gpio/src/gpio_pin_configure.c:67: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   050F 74 E0         [12] 1981 	mov	a,#0xE0
   0511 5E            [12] 1982 	anl	a,r6
   0512 4C            [12] 1983 	orl	a,r4
   0513 F5 9E         [12] 1984 	mov	_P0CON,a
                           1985 ;	../src/gpio/src/gpio_pin_configure.c:70: gpio_pins_dir_output(P0DIR, (1 << (gpio_pin_id % 8)));
   0515 8D F0         [24] 1986 	mov	b,r5
   0517 05 F0         [12] 1987 	inc	b
   0519 74 01         [12] 1988 	mov	a,#0x01
   051B 80 02         [24] 1989 	sjmp	00185$
   051D                    1990 00183$:
   051D 25 E0         [12] 1991 	add	a,acc
   051F                    1992 00185$:
   051F D5 F0 FB      [24] 1993 	djnz	b,00183$
   0522 F4            [12] 1994 	cpl	a
   0523 52 93         [12] 1995 	anl	_P0DIR,a
   0525 22            [24] 1996 	ret
   0526                    1997 00105$:
                           1998 ;	../src/gpio/src/gpio_pin_configure.c:75: P0CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0526 74 07         [12] 1999 	mov	a,#0x07
   0528 5F            [12] 2000 	anl	a,r7
   0529 FD            [12] 2001 	mov	r5,a
   052A 74 07         [12] 2002 	mov	a,#0x07
   052C 5D            [12] 2003 	anl	a,r5
   052D 44 10         [12] 2004 	orl	a,#0x10
   052F FC            [12] 2005 	mov	r4,a
                           2006 ;	../src/gpio/src/gpio_pin_configure.c:77: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   0530 74 E0         [12] 2007 	mov	a,#0xE0
   0532 5E            [12] 2008 	anl	a,r6
   0533 4C            [12] 2009 	orl	a,r4
   0534 F5 9E         [12] 2010 	mov	_P0CON,a
                           2011 ;	../src/gpio/src/gpio_pin_configure.c:80: gpio_pins_dir_input(P0DIR, (1 << (gpio_pin_id % 8)));
   0536 8D F0         [24] 2012 	mov	b,r5
   0538 05 F0         [12] 2013 	inc	b
   053A 74 01         [12] 2014 	mov	a,#0x01
   053C 80 02         [24] 2015 	sjmp	00188$
   053E                    2016 00186$:
   053E 25 E0         [12] 2017 	add	a,acc
   0540                    2018 00188$:
   0540 D5 F0 FB      [24] 2019 	djnz	b,00186$
   0543 42 93         [12] 2020 	orl	_P0DIR,a
   0545 22            [24] 2021 	ret
   0546                    2022 00134$:
                           2023 ;	../src/gpio/src/gpio_pin_configure.c:83: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   0546 EF            [12] 2024 	mov	a,r7
   0547 24 F0         [12] 2025 	add	a,#0xff - 0x0F
   0549 50 03         [24] 2026 	jnc	00189$
   054B 02r05rC4      [24] 2027 	ljmp	00131$
   054E                    2028 00189$:
                           2029 ;	../src/gpio/src/gpio_pin_configure.c:86: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   054E 90r00r38      [24] 2030 	mov	dptr,#_gpio_pin_configure_PARM_2
   0551 E0            [24] 2031 	movx	a,@dptr
   0552 FE            [12] 2032 	mov	r6,a
   0553 FD            [12] 2033 	mov	r5,a
   0554 ED            [12] 2034 	mov	a,r5
   0555 30 E0 4C      [24] 2035 	jnb	acc.0,00111$
                           2036 ;	../src/gpio/src/gpio_pin_configure.c:89: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   0558 EE            [12] 2037 	mov	a,r6
   0559 30 E1 15      [24] 2038 	jnb	acc.1,00108$
                           2039 ;	../src/gpio/src/gpio_pin_configure.c:91: gpio_pins_val_set(P1, (1 << (gpio_pin_id % 8)));
   055C 74 07         [12] 2040 	mov	a,#0x07
   055E 5F            [12] 2041 	anl	a,r7
   055F F5 F0         [12] 2042 	mov	b,a
   0561 05 F0         [12] 2043 	inc	b
   0563 74 01         [12] 2044 	mov	a,#0x01
   0565 80 02         [24] 2045 	sjmp	00194$
   0567                    2046 00192$:
   0567 25 E0         [12] 2047 	add	a,acc
   0569                    2048 00194$:
   0569 D5 F0 FB      [24] 2049 	djnz	b,00192$
   056C FD            [12] 2050 	mov	r5,a
   056D 42 90         [12] 2051 	orl	_P1,a
   056F 80 14         [24] 2052 	sjmp	00109$
   0571                    2053 00108$:
                           2054 ;	../src/gpio/src/gpio_pin_configure.c:95: gpio_pins_val_clear(P1, (1 << (gpio_pin_id % 8)));
   0571 74 07         [12] 2055 	mov	a,#0x07
   0573 5F            [12] 2056 	anl	a,r7
   0574 F5 F0         [12] 2057 	mov	b,a
   0576 05 F0         [12] 2058 	inc	b
   0578 74 01         [12] 2059 	mov	a,#0x01
   057A 80 02         [24] 2060 	sjmp	00197$
   057C                    2061 00195$:
   057C 25 E0         [12] 2062 	add	a,acc
   057E                    2063 00197$:
   057E D5 F0 FB      [24] 2064 	djnz	b,00195$
   0581 F4            [12] 2065 	cpl	a
   0582 FD            [12] 2066 	mov	r5,a
   0583 52 90         [12] 2067 	anl	_P1,a
   0585                    2068 00109$:
                           2069 ;	../src/gpio/src/gpio_pin_configure.c:99: P1CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0585 74 07         [12] 2070 	mov	a,#0x07
   0587 5F            [12] 2071 	anl	a,r7
   0588 FD            [12] 2072 	mov	r5,a
   0589 74 07         [12] 2073 	mov	a,#0x07
   058B 5D            [12] 2074 	anl	a,r5
   058C FC            [12] 2075 	mov	r4,a
                           2076 ;	../src/gpio/src/gpio_pin_configure.c:100: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   058D 74 E0         [12] 2077 	mov	a,#0xE0
   058F 5E            [12] 2078 	anl	a,r6
   0590 4C            [12] 2079 	orl	a,r4
   0591 F5 9F         [12] 2080 	mov	_P1CON,a
                           2081 ;	../src/gpio/src/gpio_pin_configure.c:103: gpio_pins_dir_output(P1DIR, (1 << (gpio_pin_id % 8)));
   0593 8D F0         [24] 2082 	mov	b,r5
   0595 05 F0         [12] 2083 	inc	b
   0597 74 01         [12] 2084 	mov	a,#0x01
   0599 80 02         [24] 2085 	sjmp	00200$
   059B                    2086 00198$:
   059B 25 E0         [12] 2087 	add	a,acc
   059D                    2088 00200$:
   059D D5 F0 FB      [24] 2089 	djnz	b,00198$
   05A0 F4            [12] 2090 	cpl	a
   05A1 52 94         [12] 2091 	anl	_P1DIR,a
   05A3 22            [24] 2092 	ret
   05A4                    2093 00111$:
                           2094 ;	../src/gpio/src/gpio_pin_configure.c:108: P1CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   05A4 74 07         [12] 2095 	mov	a,#0x07
   05A6 5F            [12] 2096 	anl	a,r7
   05A7 FD            [12] 2097 	mov	r5,a
   05A8 74 07         [12] 2098 	mov	a,#0x07
   05AA 5D            [12] 2099 	anl	a,r5
   05AB 44 10         [12] 2100 	orl	a,#0x10
   05AD FC            [12] 2101 	mov	r4,a
                           2102 ;	../src/gpio/src/gpio_pin_configure.c:110: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   05AE 74 E0         [12] 2103 	mov	a,#0xE0
   05B0 5E            [12] 2104 	anl	a,r6
   05B1 4C            [12] 2105 	orl	a,r4
   05B2 F5 9F         [12] 2106 	mov	_P1CON,a
                           2107 ;	../src/gpio/src/gpio_pin_configure.c:113: gpio_pins_dir_input(P1DIR, (1 << (gpio_pin_id % 8)));
   05B4 8D F0         [24] 2108 	mov	b,r5
   05B6 05 F0         [12] 2109 	inc	b
   05B8 74 01         [12] 2110 	mov	a,#0x01
   05BA 80 02         [24] 2111 	sjmp	00203$
   05BC                    2112 00201$:
   05BC 25 E0         [12] 2113 	add	a,acc
   05BE                    2114 00203$:
   05BE D5 F0 FB      [24] 2115 	djnz	b,00201$
   05C1 42 94         [12] 2116 	orl	_P1DIR,a
   05C3 22            [24] 2117 	ret
   05C4                    2118 00131$:
                           2119 ;	../src/gpio/src/gpio_pin_configure.c:116: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   05C4 EF            [12] 2120 	mov	a,r7
   05C5 24 E8         [12] 2121 	add	a,#0xff - 0x17
   05C7 50 03         [24] 2122 	jnc	00204$
   05C9 02r06r42      [24] 2123 	ljmp	00128$
   05CC                    2124 00204$:
                           2125 ;	../src/gpio/src/gpio_pin_configure.c:119: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   05CC 90r00r38      [24] 2126 	mov	dptr,#_gpio_pin_configure_PARM_2
   05CF E0            [24] 2127 	movx	a,@dptr
   05D0 FE            [12] 2128 	mov	r6,a
   05D1 FD            [12] 2129 	mov	r5,a
   05D2 ED            [12] 2130 	mov	a,r5
   05D3 30 E0 4C      [24] 2131 	jnb	acc.0,00117$
                           2132 ;	../src/gpio/src/gpio_pin_configure.c:122: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   05D6 EE            [12] 2133 	mov	a,r6
   05D7 30 E1 15      [24] 2134 	jnb	acc.1,00114$
                           2135 ;	../src/gpio/src/gpio_pin_configure.c:124: gpio_pins_val_set(P2, (1 << (gpio_pin_id % 8)));
   05DA 74 07         [12] 2136 	mov	a,#0x07
   05DC 5F            [12] 2137 	anl	a,r7
   05DD F5 F0         [12] 2138 	mov	b,a
   05DF 05 F0         [12] 2139 	inc	b
   05E1 74 01         [12] 2140 	mov	a,#0x01
   05E3 80 02         [24] 2141 	sjmp	00209$
   05E5                    2142 00207$:
   05E5 25 E0         [12] 2143 	add	a,acc
   05E7                    2144 00209$:
   05E7 D5 F0 FB      [24] 2145 	djnz	b,00207$
   05EA FD            [12] 2146 	mov	r5,a
   05EB 42 A0         [12] 2147 	orl	_P2,a
   05ED 80 14         [24] 2148 	sjmp	00115$
   05EF                    2149 00114$:
                           2150 ;	../src/gpio/src/gpio_pin_configure.c:128: gpio_pins_val_clear(P2, (1 << (gpio_pin_id % 8)));
   05EF 74 07         [12] 2151 	mov	a,#0x07
   05F1 5F            [12] 2152 	anl	a,r7
   05F2 F5 F0         [12] 2153 	mov	b,a
   05F4 05 F0         [12] 2154 	inc	b
   05F6 74 01         [12] 2155 	mov	a,#0x01
   05F8 80 02         [24] 2156 	sjmp	00212$
   05FA                    2157 00210$:
   05FA 25 E0         [12] 2158 	add	a,acc
   05FC                    2159 00212$:
   05FC D5 F0 FB      [24] 2160 	djnz	b,00210$
   05FF F4            [12] 2161 	cpl	a
   0600 FD            [12] 2162 	mov	r5,a
   0601 52 A0         [12] 2163 	anl	_P2,a
   0603                    2164 00115$:
                           2165 ;	../src/gpio/src/gpio_pin_configure.c:132: P2CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0603 74 07         [12] 2166 	mov	a,#0x07
   0605 5F            [12] 2167 	anl	a,r7
   0606 FD            [12] 2168 	mov	r5,a
   0607 74 07         [12] 2169 	mov	a,#0x07
   0609 5D            [12] 2170 	anl	a,r5
   060A FC            [12] 2171 	mov	r4,a
                           2172 ;	../src/gpio/src/gpio_pin_configure.c:133: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   060B 74 E0         [12] 2173 	mov	a,#0xE0
   060D 5E            [12] 2174 	anl	a,r6
   060E 4C            [12] 2175 	orl	a,r4
   060F F5 97         [12] 2176 	mov	_P2CON,a
                           2177 ;	../src/gpio/src/gpio_pin_configure.c:136: gpio_pins_dir_output(P2DIR, (1 << (gpio_pin_id % 8)));
   0611 8D F0         [24] 2178 	mov	b,r5
   0613 05 F0         [12] 2179 	inc	b
   0615 74 01         [12] 2180 	mov	a,#0x01
   0617 80 02         [24] 2181 	sjmp	00215$
   0619                    2182 00213$:
   0619 25 E0         [12] 2183 	add	a,acc
   061B                    2184 00215$:
   061B D5 F0 FB      [24] 2185 	djnz	b,00213$
   061E F4            [12] 2186 	cpl	a
   061F 52 95         [12] 2187 	anl	_P2DIR,a
   0621 22            [24] 2188 	ret
   0622                    2189 00117$:
                           2190 ;	../src/gpio/src/gpio_pin_configure.c:141: P2CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   0622 74 07         [12] 2191 	mov	a,#0x07
   0624 5F            [12] 2192 	anl	a,r7
   0625 FD            [12] 2193 	mov	r5,a
   0626 74 07         [12] 2194 	mov	a,#0x07
   0628 5D            [12] 2195 	anl	a,r5
   0629 44 10         [12] 2196 	orl	a,#0x10
   062B FC            [12] 2197 	mov	r4,a
                           2198 ;	../src/gpio/src/gpio_pin_configure.c:143: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   062C 74 E0         [12] 2199 	mov	a,#0xE0
   062E 5E            [12] 2200 	anl	a,r6
   062F 4C            [12] 2201 	orl	a,r4
   0630 F5 97         [12] 2202 	mov	_P2CON,a
                           2203 ;	../src/gpio/src/gpio_pin_configure.c:146: gpio_pins_dir_input(P2DIR, (1 << (gpio_pin_id % 8)));
   0632 8D F0         [24] 2204 	mov	b,r5
   0634 05 F0         [12] 2205 	inc	b
   0636 74 01         [12] 2206 	mov	a,#0x01
   0638 80 02         [24] 2207 	sjmp	00218$
   063A                    2208 00216$:
   063A 25 E0         [12] 2209 	add	a,acc
   063C                    2210 00218$:
   063C D5 F0 FB      [24] 2211 	djnz	b,00216$
   063F 42 95         [12] 2212 	orl	_P2DIR,a
   0641 22            [24] 2213 	ret
   0642                    2214 00128$:
                           2215 ;	../src/gpio/src/gpio_pin_configure.c:149: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   0642 EF            [12] 2216 	mov	a,r7
   0643 24 E1         [12] 2217 	add	a,#0xff - 0x1E
   0645 40 75         [24] 2218 	jc	00136$
                           2219 ;	../src/gpio/src/gpio_pin_configure.c:152: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT)
   0647 90r00r38      [24] 2220 	mov	dptr,#_gpio_pin_configure_PARM_2
   064A E0            [24] 2221 	movx	a,@dptr
   064B FE            [12] 2222 	mov	r6,a
   064C FD            [12] 2223 	mov	r5,a
   064D ED            [12] 2224 	mov	a,r5
   064E 30 E0 4C      [24] 2225 	jnb	acc.0,00123$
                           2226 ;	../src/gpio/src/gpio_pin_configure.c:155: if(gpio_pin_config_options & GPIO_PIN_CONFIG_OPTION_OUTPUT_VAL_SET)
   0651 EE            [12] 2227 	mov	a,r6
   0652 30 E1 15      [24] 2228 	jnb	acc.1,00120$
                           2229 ;	../src/gpio/src/gpio_pin_configure.c:157: gpio_pins_val_set(P3, (1 << (gpio_pin_id % 8)));
   0655 74 07         [12] 2230 	mov	a,#0x07
   0657 5F            [12] 2231 	anl	a,r7
   0658 F5 F0         [12] 2232 	mov	b,a
   065A 05 F0         [12] 2233 	inc	b
   065C 74 01         [12] 2234 	mov	a,#0x01
   065E 80 02         [24] 2235 	sjmp	00224$
   0660                    2236 00222$:
   0660 25 E0         [12] 2237 	add	a,acc
   0662                    2238 00224$:
   0662 D5 F0 FB      [24] 2239 	djnz	b,00222$
   0665 FD            [12] 2240 	mov	r5,a
   0666 42 B0         [12] 2241 	orl	_P3,a
   0668 80 14         [24] 2242 	sjmp	00121$
   066A                    2243 00120$:
                           2244 ;	../src/gpio/src/gpio_pin_configure.c:161: gpio_pins_val_clear(P3, (1 << (gpio_pin_id % 8)));
   066A 74 07         [12] 2245 	mov	a,#0x07
   066C 5F            [12] 2246 	anl	a,r7
   066D F5 F0         [12] 2247 	mov	b,a
   066F 05 F0         [12] 2248 	inc	b
   0671 74 01         [12] 2249 	mov	a,#0x01
   0673 80 02         [24] 2250 	sjmp	00227$
   0675                    2251 00225$:
   0675 25 E0         [12] 2252 	add	a,acc
   0677                    2253 00227$:
   0677 D5 F0 FB      [24] 2254 	djnz	b,00225$
   067A F4            [12] 2255 	cpl	a
   067B FD            [12] 2256 	mov	r5,a
   067C 52 B0         [12] 2257 	anl	_P3,a
   067E                    2258 00121$:
                           2259 ;	../src/gpio/src/gpio_pin_configure.c:165: P3CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   067E 74 07         [12] 2260 	mov	a,#0x07
   0680 5F            [12] 2261 	anl	a,r7
   0681 FD            [12] 2262 	mov	r5,a
   0682 74 07         [12] 2263 	mov	a,#0x07
   0684 5D            [12] 2264 	anl	a,r5
   0685 FC            [12] 2265 	mov	r4,a
                           2266 ;	../src/gpio/src/gpio_pin_configure.c:166: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   0686 74 E0         [12] 2267 	mov	a,#0xE0
   0688 5E            [12] 2268 	anl	a,r6
   0689 4C            [12] 2269 	orl	a,r4
   068A F5 8F         [12] 2270 	mov	_P3CON,a
                           2271 ;	../src/gpio/src/gpio_pin_configure.c:169: gpio_pins_dir_output(P3DIR, (1 << (gpio_pin_id % 8)));
   068C 8D F0         [24] 2272 	mov	b,r5
   068E 05 F0         [12] 2273 	inc	b
   0690 74 01         [12] 2274 	mov	a,#0x01
   0692 80 02         [24] 2275 	sjmp	00230$
   0694                    2276 00228$:
   0694 25 E0         [12] 2277 	add	a,acc
   0696                    2278 00230$:
   0696 D5 F0 FB      [24] 2279 	djnz	b,00228$
   0699 F4            [12] 2280 	cpl	a
   069A 52 96         [12] 2281 	anl	_P3DIR,a
   069C 22            [24] 2282 	ret
   069D                    2283 00123$:
                           2284 ;	../src/gpio/src/gpio_pin_configure.c:174: P3CON = ((gpio_pin_id % 8) & PXCON_BIT_ADDR_MASK) |
   069D 53 07 07      [24] 2285 	anl	ar7,#0x07
   06A0 74 07         [12] 2286 	mov	a,#0x07
   06A2 5F            [12] 2287 	anl	a,r7
   06A3 44 10         [12] 2288 	orl	a,#0x10
   06A5 FD            [12] 2289 	mov	r5,a
                           2290 ;	../src/gpio/src/gpio_pin_configure.c:176: (gpio_pin_config_options & PXCON_PINMODE_MASK);
   06A6 74 E0         [12] 2291 	mov	a,#0xE0
   06A8 5E            [12] 2292 	anl	a,r6
   06A9 4D            [12] 2293 	orl	a,r5
   06AA F5 8F         [12] 2294 	mov	_P3CON,a
                           2295 ;	../src/gpio/src/gpio_pin_configure.c:179: gpio_pins_dir_input(P3DIR, (1 << (gpio_pin_id % 8)));
   06AC 8F F0         [24] 2296 	mov	b,r7
   06AE 05 F0         [12] 2297 	inc	b
   06B0 74 01         [12] 2298 	mov	a,#0x01
   06B2 80 02         [24] 2299 	sjmp	00233$
   06B4                    2300 00231$:
   06B4 25 E0         [12] 2301 	add	a,acc
   06B6                    2302 00233$:
   06B6 D5 F0 FB      [24] 2303 	djnz	b,00231$
   06B9 FF            [12] 2304 	mov	r7,a
   06BA 42 96         [12] 2305 	orl	_P3DIR,a
   06BC                    2306 00136$:
   06BC 22            [24] 2307 	ret
                           2308 ;------------------------------------------------------------
                           2309 ;Allocation info for local variables in function 'gpio_pin_val_read'
                           2310 ;------------------------------------------------------------
                           2311 ;gpio_pin_id               Allocated with name '_gpio_pin_val_read_gpio_pin_id_1_108'
                           2312 ;value                     Allocated with name '_gpio_pin_val_read_value_1_109'
                           2313 ;------------------------------------------------------------
                           2314 ;	../src/gpio/src/gpio_pin_val_read.c:46: bool gpio_pin_val_read(gpio_pin_id_t gpio_pin_id)
                           2315 ;	-----------------------------------------
                           2316 ;	 function gpio_pin_val_read
                           2317 ;	-----------------------------------------
   06BD                    2318 _gpio_pin_val_read:
   06BD E5 82         [12] 2319 	mov	a,dpl
   06BF 90r00r3A      [24] 2320 	mov	dptr,#_gpio_pin_val_read_gpio_pin_id_1_108
   06C2 F0            [24] 2321 	movx	@dptr,a
                           2322 ;	../src/gpio/src/gpio_pin_val_read.c:48: bool value = false;
   06C3 90r00r3B      [24] 2323 	mov	dptr,#_gpio_pin_val_read_value_1_109
   06C6 E4            [12] 2324 	clr	a
   06C7 F0            [24] 2325 	movx	@dptr,a
                           2326 ;	../src/gpio/src/gpio_pin_val_read.c:51: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   06C8 90r00r3A      [24] 2327 	mov	dptr,#_gpio_pin_val_read_gpio_pin_id_1_108
   06CB E0            [24] 2328 	movx	a,@dptr
   06CC FF            [12] 2329 	mov  r7,a
   06CD 24 F8         [12] 2330 	add	a,#0xff - 0x07
   06CF 40 19         [24] 2331 	jc	00110$
                           2332 ;	../src/gpio/src/gpio_pin_val_read.c:53: value = P0 & (1 << (gpio_pin_id % 8));
   06D1 74 07         [12] 2333 	mov	a,#0x07
   06D3 5F            [12] 2334 	anl	a,r7
   06D4 F5 F0         [12] 2335 	mov	b,a
   06D6 05 F0         [12] 2336 	inc	b
   06D8 74 01         [12] 2337 	mov	a,#0x01
   06DA 80 02         [24] 2338 	sjmp	00135$
   06DC                    2339 00133$:
   06DC 25 E0         [12] 2340 	add	a,acc
   06DE                    2341 00135$:
   06DE D5 F0 FB      [24] 2342 	djnz	b,00133$
   06E1 FE            [12] 2343 	mov	r6,a
   06E2 90r00r3B      [24] 2344 	mov	dptr,#_gpio_pin_val_read_value_1_109
   06E5 55 80         [12] 2345 	anl	a,_P0
   06E7 F0            [24] 2346 	movx	@dptr,a
   06E8 80 58         [24] 2347 	sjmp	00111$
   06EA                    2348 00110$:
                           2349 ;	../src/gpio/src/gpio_pin_val_read.c:55: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   06EA EF            [12] 2350 	mov	a,r7
   06EB 24 F0         [12] 2351 	add	a,#0xff - 0x0F
   06ED 40 19         [24] 2352 	jc	00107$
                           2353 ;	../src/gpio/src/gpio_pin_val_read.c:57: value = P1 & (1 << (gpio_pin_id % 8));
   06EF 74 07         [12] 2354 	mov	a,#0x07
   06F1 5F            [12] 2355 	anl	a,r7
   06F2 F5 F0         [12] 2356 	mov	b,a
   06F4 05 F0         [12] 2357 	inc	b
   06F6 74 01         [12] 2358 	mov	a,#0x01
   06F8 80 02         [24] 2359 	sjmp	00139$
   06FA                    2360 00137$:
   06FA 25 E0         [12] 2361 	add	a,acc
   06FC                    2362 00139$:
   06FC D5 F0 FB      [24] 2363 	djnz	b,00137$
   06FF FE            [12] 2364 	mov	r6,a
   0700 90r00r3B      [24] 2365 	mov	dptr,#_gpio_pin_val_read_value_1_109
   0703 55 90         [12] 2366 	anl	a,_P1
   0705 F0            [24] 2367 	movx	@dptr,a
   0706 80 3A         [24] 2368 	sjmp	00111$
   0708                    2369 00107$:
                           2370 ;	../src/gpio/src/gpio_pin_val_read.c:59: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   0708 EF            [12] 2371 	mov	a,r7
   0709 24 E8         [12] 2372 	add	a,#0xff - 0x17
   070B 40 19         [24] 2373 	jc	00104$
                           2374 ;	../src/gpio/src/gpio_pin_val_read.c:61: value = P2 & (1 << (gpio_pin_id % 8));
   070D 74 07         [12] 2375 	mov	a,#0x07
   070F 5F            [12] 2376 	anl	a,r7
   0710 F5 F0         [12] 2377 	mov	b,a
   0712 05 F0         [12] 2378 	inc	b
   0714 74 01         [12] 2379 	mov	a,#0x01
   0716 80 02         [24] 2380 	sjmp	00143$
   0718                    2381 00141$:
   0718 25 E0         [12] 2382 	add	a,acc
   071A                    2383 00143$:
   071A D5 F0 FB      [24] 2384 	djnz	b,00141$
   071D FE            [12] 2385 	mov	r6,a
   071E 90r00r3B      [24] 2386 	mov	dptr,#_gpio_pin_val_read_value_1_109
   0721 55 A0         [12] 2387 	anl	a,_P2
   0723 F0            [24] 2388 	movx	@dptr,a
   0724 80 1C         [24] 2389 	sjmp	00111$
   0726                    2390 00104$:
                           2391 ;	../src/gpio/src/gpio_pin_val_read.c:63: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   0726 EF            [12] 2392 	mov	a,r7
   0727 24 E1         [12] 2393 	add	a,#0xff - 0x1E
   0729 40 17         [24] 2394 	jc	00111$
                           2395 ;	../src/gpio/src/gpio_pin_val_read.c:65: value = P3 & (1 << (gpio_pin_id % 8));
   072B 74 07         [12] 2396 	mov	a,#0x07
   072D 5F            [12] 2397 	anl	a,r7
   072E F5 F0         [12] 2398 	mov	b,a
   0730 05 F0         [12] 2399 	inc	b
   0732 74 01         [12] 2400 	mov	a,#0x01
   0734 80 02         [24] 2401 	sjmp	00147$
   0736                    2402 00145$:
   0736 25 E0         [12] 2403 	add	a,acc
   0738                    2404 00147$:
   0738 D5 F0 FB      [24] 2405 	djnz	b,00145$
   073B FF            [12] 2406 	mov	r7,a
   073C 90r00r3B      [24] 2407 	mov	dptr,#_gpio_pin_val_read_value_1_109
   073F 55 B0         [12] 2408 	anl	a,_P3
   0741 F0            [24] 2409 	movx	@dptr,a
   0742                    2410 00111$:
                           2411 ;	../src/gpio/src/gpio_pin_val_read.c:68: if(value)
   0742 90r00r3B      [24] 2412 	mov	dptr,#_gpio_pin_val_read_value_1_109
   0745 E0            [24] 2413 	movx	a,@dptr
   0746 FF            [12] 2414 	mov	r7,a
   0747 60 04         [24] 2415 	jz	00113$
                           2416 ;	../src/gpio/src/gpio_pin_val_read.c:70: return true;
   0749 75 82 01      [24] 2417 	mov	dpl,#0x01
   074C 22            [24] 2418 	ret
   074D                    2419 00113$:
                           2420 ;	../src/gpio/src/gpio_pin_val_read.c:74: return false;
   074D 75 82 00      [24] 2421 	mov	dpl,#0x00
   0750 22            [24] 2422 	ret
                           2423 ;------------------------------------------------------------
                           2424 ;Allocation info for local variables in function 'gpio_pin_val_clear'
                           2425 ;------------------------------------------------------------
                           2426 ;gpio_pin_id               Allocated with name '_gpio_pin_val_clear_gpio_pin_id_1_116'
                           2427 ;------------------------------------------------------------
                           2428 ;	../src/gpio/src/gpio_pin_val_clear.c:46: void gpio_pin_val_clear(gpio_pin_id_t gpio_pin_id)
                           2429 ;	-----------------------------------------
                           2430 ;	 function gpio_pin_val_clear
                           2431 ;	-----------------------------------------
   0751                    2432 _gpio_pin_val_clear:
   0751 E5 82         [12] 2433 	mov	a,dpl
                           2434 ;	../src/gpio/src/gpio_pin_val_clear.c:49: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   0753 90r00r3C      [24] 2435 	mov	dptr,#_gpio_pin_val_clear_gpio_pin_id_1_116
   0756 F0            [24] 2436 	movx	@dptr,a
   0757 FF            [12] 2437 	mov  r7,a
   0758 24 F8         [12] 2438 	add	a,#0xff - 0x07
   075A 40 14         [24] 2439 	jc	00110$
                           2440 ;	../src/gpio/src/gpio_pin_val_clear.c:51: gpio_pins_val_clear(P0, (1 << (gpio_pin_id % 8)));
   075C 74 07         [12] 2441 	mov	a,#0x07
   075E 5F            [12] 2442 	anl	a,r7
   075F F5 F0         [12] 2443 	mov	b,a
   0761 05 F0         [12] 2444 	inc	b
   0763 74 01         [12] 2445 	mov	a,#0x01
   0765 80 02         [24] 2446 	sjmp	00129$
   0767                    2447 00127$:
   0767 25 E0         [12] 2448 	add	a,acc
   0769                    2449 00129$:
   0769 D5 F0 FB      [24] 2450 	djnz	b,00127$
   076C F4            [12] 2451 	cpl	a
   076D 52 80         [12] 2452 	anl	_P0,a
   076F 22            [24] 2453 	ret
   0770                    2454 00110$:
                           2455 ;	../src/gpio/src/gpio_pin_val_clear.c:53: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   0770 EF            [12] 2456 	mov	a,r7
   0771 24 F0         [12] 2457 	add	a,#0xff - 0x0F
   0773 40 14         [24] 2458 	jc	00107$
                           2459 ;	../src/gpio/src/gpio_pin_val_clear.c:55: gpio_pins_val_clear(P1, (1 << (gpio_pin_id % 8)));
   0775 74 07         [12] 2460 	mov	a,#0x07
   0777 5F            [12] 2461 	anl	a,r7
   0778 F5 F0         [12] 2462 	mov	b,a
   077A 05 F0         [12] 2463 	inc	b
   077C 74 01         [12] 2464 	mov	a,#0x01
   077E 80 02         [24] 2465 	sjmp	00133$
   0780                    2466 00131$:
   0780 25 E0         [12] 2467 	add	a,acc
   0782                    2468 00133$:
   0782 D5 F0 FB      [24] 2469 	djnz	b,00131$
   0785 F4            [12] 2470 	cpl	a
   0786 52 90         [12] 2471 	anl	_P1,a
   0788 22            [24] 2472 	ret
   0789                    2473 00107$:
                           2474 ;	../src/gpio/src/gpio_pin_val_clear.c:57: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   0789 EF            [12] 2475 	mov	a,r7
   078A 24 E8         [12] 2476 	add	a,#0xff - 0x17
   078C 40 14         [24] 2477 	jc	00104$
                           2478 ;	../src/gpio/src/gpio_pin_val_clear.c:59: gpio_pins_val_clear(P2, (1 << (gpio_pin_id % 8)));
   078E 74 07         [12] 2479 	mov	a,#0x07
   0790 5F            [12] 2480 	anl	a,r7
   0791 F5 F0         [12] 2481 	mov	b,a
   0793 05 F0         [12] 2482 	inc	b
   0795 74 01         [12] 2483 	mov	a,#0x01
   0797 80 02         [24] 2484 	sjmp	00137$
   0799                    2485 00135$:
   0799 25 E0         [12] 2486 	add	a,acc
   079B                    2487 00137$:
   079B D5 F0 FB      [24] 2488 	djnz	b,00135$
   079E F4            [12] 2489 	cpl	a
   079F 52 A0         [12] 2490 	anl	_P2,a
   07A1 22            [24] 2491 	ret
   07A2                    2492 00104$:
                           2493 ;	../src/gpio/src/gpio_pin_val_clear.c:61: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   07A2 EF            [12] 2494 	mov	a,r7
   07A3 24 E1         [12] 2495 	add	a,#0xff - 0x1E
   07A5 40 14         [24] 2496 	jc	00112$
                           2497 ;	../src/gpio/src/gpio_pin_val_clear.c:63: gpio_pins_val_clear(P3, (1 << (gpio_pin_id % 8)));
   07A7 74 07         [12] 2498 	mov	a,#0x07
   07A9 5F            [12] 2499 	anl	a,r7
   07AA F5 F0         [12] 2500 	mov	b,a
   07AC 05 F0         [12] 2501 	inc	b
   07AE 74 01         [12] 2502 	mov	a,#0x01
   07B0 80 02         [24] 2503 	sjmp	00141$
   07B2                    2504 00139$:
   07B2 25 E0         [12] 2505 	add	a,acc
   07B4                    2506 00141$:
   07B4 D5 F0 FB      [24] 2507 	djnz	b,00139$
   07B7 F4            [12] 2508 	cpl	a
   07B8 FF            [12] 2509 	mov	r7,a
   07B9 52 B0         [12] 2510 	anl	_P3,a
   07BB                    2511 00112$:
   07BB 22            [24] 2512 	ret
                           2513 ;------------------------------------------------------------
                           2514 ;Allocation info for local variables in function 'gpio_pin_val_set'
                           2515 ;------------------------------------------------------------
                           2516 ;gpio_pin_id               Allocated with name '_gpio_pin_val_set_gpio_pin_id_1_122'
                           2517 ;------------------------------------------------------------
                           2518 ;	../src/gpio/src/gpio_pin_val_set.c:46: void gpio_pin_val_set(gpio_pin_id_t gpio_pin_id)
                           2519 ;	-----------------------------------------
                           2520 ;	 function gpio_pin_val_set
                           2521 ;	-----------------------------------------
   07BC                    2522 _gpio_pin_val_set:
   07BC E5 82         [12] 2523 	mov	a,dpl
                           2524 ;	../src/gpio/src/gpio_pin_val_set.c:49: if(gpio_pin_id <= GPIO_PIN_ID_P0_7)
   07BE 90r00r3D      [24] 2525 	mov	dptr,#_gpio_pin_val_set_gpio_pin_id_1_122
   07C1 F0            [24] 2526 	movx	@dptr,a
   07C2 FF            [12] 2527 	mov  r7,a
   07C3 24 F8         [12] 2528 	add	a,#0xff - 0x07
   07C5 40 13         [24] 2529 	jc	00110$
                           2530 ;	../src/gpio/src/gpio_pin_val_set.c:51: gpio_pins_val_set(P0, (1 << (gpio_pin_id % 8)));
   07C7 74 07         [12] 2531 	mov	a,#0x07
   07C9 5F            [12] 2532 	anl	a,r7
   07CA F5 F0         [12] 2533 	mov	b,a
   07CC 05 F0         [12] 2534 	inc	b
   07CE 74 01         [12] 2535 	mov	a,#0x01
   07D0 80 02         [24] 2536 	sjmp	00129$
   07D2                    2537 00127$:
   07D2 25 E0         [12] 2538 	add	a,acc
   07D4                    2539 00129$:
   07D4 D5 F0 FB      [24] 2540 	djnz	b,00127$
   07D7 42 80         [12] 2541 	orl	_P0,a
   07D9 22            [24] 2542 	ret
   07DA                    2543 00110$:
                           2544 ;	../src/gpio/src/gpio_pin_val_set.c:53: else if(gpio_pin_id <= GPIO_PIN_ID_P1_7)
   07DA EF            [12] 2545 	mov	a,r7
   07DB 24 F0         [12] 2546 	add	a,#0xff - 0x0F
   07DD 40 13         [24] 2547 	jc	00107$
                           2548 ;	../src/gpio/src/gpio_pin_val_set.c:55: gpio_pins_val_set(P1, (1 << (gpio_pin_id % 8)));
   07DF 74 07         [12] 2549 	mov	a,#0x07
   07E1 5F            [12] 2550 	anl	a,r7
   07E2 F5 F0         [12] 2551 	mov	b,a
   07E4 05 F0         [12] 2552 	inc	b
   07E6 74 01         [12] 2553 	mov	a,#0x01
   07E8 80 02         [24] 2554 	sjmp	00133$
   07EA                    2555 00131$:
   07EA 25 E0         [12] 2556 	add	a,acc
   07EC                    2557 00133$:
   07EC D5 F0 FB      [24] 2558 	djnz	b,00131$
   07EF 42 90         [12] 2559 	orl	_P1,a
   07F1 22            [24] 2560 	ret
   07F2                    2561 00107$:
                           2562 ;	../src/gpio/src/gpio_pin_val_set.c:57: else if(gpio_pin_id <= GPIO_PIN_ID_P2_7)
   07F2 EF            [12] 2563 	mov	a,r7
   07F3 24 E8         [12] 2564 	add	a,#0xff - 0x17
   07F5 40 13         [24] 2565 	jc	00104$
                           2566 ;	../src/gpio/src/gpio_pin_val_set.c:59: gpio_pins_val_set(P2, (1 << (gpio_pin_id % 8)));
   07F7 74 07         [12] 2567 	mov	a,#0x07
   07F9 5F            [12] 2568 	anl	a,r7
   07FA F5 F0         [12] 2569 	mov	b,a
   07FC 05 F0         [12] 2570 	inc	b
   07FE 74 01         [12] 2571 	mov	a,#0x01
   0800 80 02         [24] 2572 	sjmp	00137$
   0802                    2573 00135$:
   0802 25 E0         [12] 2574 	add	a,acc
   0804                    2575 00137$:
   0804 D5 F0 FB      [24] 2576 	djnz	b,00135$
   0807 42 A0         [12] 2577 	orl	_P2,a
   0809 22            [24] 2578 	ret
   080A                    2579 00104$:
                           2580 ;	../src/gpio/src/gpio_pin_val_set.c:61: else if(gpio_pin_id <= GPIO_PIN_ID_P3_6)
   080A EF            [12] 2581 	mov	a,r7
   080B 24 E1         [12] 2582 	add	a,#0xff - 0x1E
   080D 40 13         [24] 2583 	jc	00112$
                           2584 ;	../src/gpio/src/gpio_pin_val_set.c:63: gpio_pins_val_set(P3, (1 << (gpio_pin_id % 8)));
   080F 74 07         [12] 2585 	mov	a,#0x07
   0811 5F            [12] 2586 	anl	a,r7
   0812 F5 F0         [12] 2587 	mov	b,a
   0814 05 F0         [12] 2588 	inc	b
   0816 74 01         [12] 2589 	mov	a,#0x01
   0818 80 02         [24] 2590 	sjmp	00141$
   081A                    2591 00139$:
   081A 25 E0         [12] 2592 	add	a,acc
   081C                    2593 00141$:
   081C D5 F0 FB      [24] 2594 	djnz	b,00139$
   081F FF            [12] 2595 	mov	r7,a
   0820 42 B0         [12] 2596 	orl	_P3,a
   0822                    2597 00112$:
   0822 22            [24] 2598 	ret
                           2599 ;------------------------------------------------------------
                           2600 ;Allocation info for local variables in function 'gpio_pin_val_write'
                           2601 ;------------------------------------------------------------
                           2602 ;value                     Allocated with name '_gpio_pin_val_write_PARM_2'
                           2603 ;gpio_pin_id               Allocated with name '_gpio_pin_val_write_gpio_pin_id_1_128'
                           2604 ;------------------------------------------------------------
                           2605 ;	../src/gpio/src/gpio_pin_val_write.c:47: void gpio_pin_val_write(gpio_pin_id_t gpio_pin_id, bool value)
                           2606 ;	-----------------------------------------
                           2607 ;	 function gpio_pin_val_write
                           2608 ;	-----------------------------------------
   0823                    2609 _gpio_pin_val_write:
   0823 E5 82         [12] 2610 	mov	a,dpl
   0825 90r00r3F      [24] 2611 	mov	dptr,#_gpio_pin_val_write_gpio_pin_id_1_128
   0828 F0            [24] 2612 	movx	@dptr,a
                           2613 ;	../src/gpio/src/gpio_pin_val_write.c:50: if(value)
   0829 90r00r3E      [24] 2614 	mov	dptr,#_gpio_pin_val_write_PARM_2
   082C E0            [24] 2615 	movx	a,@dptr
   082D FF            [12] 2616 	mov	r7,a
   082E 60 09         [24] 2617 	jz	00102$
                           2618 ;	../src/gpio/src/gpio_pin_val_write.c:52: gpio_pin_val_set(gpio_pin_id);
   0830 90r00r3F      [24] 2619 	mov	dptr,#_gpio_pin_val_write_gpio_pin_id_1_128
   0833 E0            [24] 2620 	movx	a,@dptr
   0834 F5 82         [12] 2621 	mov	dpl,a
   0836 02r07rBC      [24] 2622 	ljmp	_gpio_pin_val_set
   0839                    2623 00102$:
                           2624 ;	../src/gpio/src/gpio_pin_val_write.c:56: gpio_pin_val_clear(gpio_pin_id);
   0839 90r00r3F      [24] 2625 	mov	dptr,#_gpio_pin_val_write_gpio_pin_id_1_128
   083C E0            [24] 2626 	movx	a,@dptr
   083D F5 82         [12] 2627 	mov	dpl,a
   083F 02r07r51      [24] 2628 	ljmp	_gpio_pin_val_clear
                           2629 ;------------------------------------------------------------
                           2630 ;Allocation info for local variables in function 'delay_us'
                           2631 ;------------------------------------------------------------
                           2632 ;microseconds              Allocated with name '_delay_us_microseconds_1_132'
                           2633 ;count                     Allocated with name '_delay_us_count_1_133'
                           2634 ;------------------------------------------------------------
                           2635 ;	../src/delay/src/delay_us.c:46: void delay_us(uint16_t microseconds)
                           2636 ;	-----------------------------------------
                           2637 ;	 function delay_us
                           2638 ;	-----------------------------------------
   0842                    2639 _delay_us:
   0842 AF 83         [24] 2640 	mov	r7,dph
   0844 E5 82         [12] 2641 	mov	a,dpl
   0846 90r00r40      [24] 2642 	mov	dptr,#_delay_us_microseconds_1_132
   0849 F0            [24] 2643 	movx	@dptr,a
   084A EF            [12] 2644 	mov	a,r7
   084B A3            [24] 2645 	inc	dptr
   084C F0            [24] 2646 	movx	@dptr,a
                           2647 ;	../src/delay/src/delay_us.c:51: if(microseconds == 0)
   084D 90r00r40      [24] 2648 	mov	dptr,#_delay_us_microseconds_1_132
   0850 E0            [24] 2649 	movx	a,@dptr
   0851 FE            [12] 2650 	mov	r6,a
   0852 A3            [24] 2651 	inc	dptr
   0853 E0            [24] 2652 	movx	a,@dptr
   0854 FF            [12] 2653 	mov	r7,a
   0855 4E            [12] 2654 	orl	a,r6
   0856 70 01         [24] 2655 	jnz	00102$
                           2656 ;	../src/delay/src/delay_us.c:52: return;
   0858 22            [24] 2657 	ret
   0859                    2658 00102$:
                           2659 ;	../src/delay/src/delay_us.c:54: microseconds -= 1;
   0859 1E            [12] 2660 	dec	r6
   085A BE FF 01      [24] 2661 	cjne	r6,#0xFF,00121$
   085D 1F            [12] 2662 	dec	r7
   085E                    2663 00121$:
   085E 90r00r40      [24] 2664 	mov	dptr,#_delay_us_microseconds_1_132
   0861 EE            [12] 2665 	mov	a,r6
   0862 F0            [24] 2666 	movx	@dptr,a
   0863 EF            [12] 2667 	mov	a,r7
   0864 A3            [24] 2668 	inc	dptr
   0865 F0            [24] 2669 	movx	@dptr,a
                           2670 ;	../src/delay/src/delay_us.c:56: for(count = 0; count < microseconds; count++)
   0866 90r00r40      [24] 2671 	mov	dptr,#_delay_us_microseconds_1_132
   0869 E0            [24] 2672 	movx	a,@dptr
   086A FE            [12] 2673 	mov	r6,a
   086B A3            [24] 2674 	inc	dptr
   086C E0            [24] 2675 	movx	a,@dptr
   086D FF            [12] 2676 	mov	r7,a
   086E 7C 00         [12] 2677 	mov	r4,#0x00
   0870 7D 00         [12] 2678 	mov	r5,#0x00
   0872                    2679 00106$:
   0872 C3            [12] 2680 	clr	c
   0873 EC            [12] 2681 	mov	a,r4
   0874 9E            [12] 2682 	subb	a,r6
   0875 ED            [12] 2683 	mov	a,r5
   0876 9F            [12] 2684 	subb	a,r7
   0877 50 09         [24] 2685 	jnc	00108$
                           2686 ;	../src/delay/src/delay_us.c:58: nop();
   0879 00            [12] 2687 	nop 
                           2688 ;	../src/delay/src/delay_us.c:59: nop();
   087A 00            [12] 2689 	nop 
                           2690 ;	../src/delay/src/delay_us.c:56: for(count = 0; count < microseconds; count++)
   087B 0C            [12] 2691 	inc	r4
   087C BC 00 F3      [24] 2692 	cjne	r4,#0x00,00106$
   087F 0D            [12] 2693 	inc	r5
   0880 80 F0         [24] 2694 	sjmp	00106$
   0882                    2695 00108$:
   0882 22            [24] 2696 	ret
                           2697 ;------------------------------------------------------------
                           2698 ;Allocation info for local variables in function 'delay_s'
                           2699 ;------------------------------------------------------------
                           2700 ;seconds                   Allocated with name '_delay_s_seconds_1_135'
                           2701 ;count                     Allocated with name '_delay_s_count_1_136'
                           2702 ;------------------------------------------------------------
                           2703 ;	../src/delay/src/delay_s.c:46: void delay_s(uint16_t seconds)
                           2704 ;	-----------------------------------------
                           2705 ;	 function delay_s
                           2706 ;	-----------------------------------------
   0883                    2707 _delay_s:
   0883 AF 83         [24] 2708 	mov	r7,dph
   0885 E5 82         [12] 2709 	mov	a,dpl
   0887 90r00r42      [24] 2710 	mov	dptr,#_delay_s_seconds_1_135
   088A F0            [24] 2711 	movx	@dptr,a
   088B EF            [12] 2712 	mov	a,r7
   088C A3            [24] 2713 	inc	dptr
   088D F0            [24] 2714 	movx	@dptr,a
                           2715 ;	../src/delay/src/delay_s.c:51: for(count = 0; count < seconds; count++)
   088E 90r00r42      [24] 2716 	mov	dptr,#_delay_s_seconds_1_135
   0891 E0            [24] 2717 	movx	a,@dptr
   0892 FE            [12] 2718 	mov	r6,a
   0893 A3            [24] 2719 	inc	dptr
   0894 E0            [24] 2720 	movx	a,@dptr
   0895 FF            [12] 2721 	mov	r7,a
   0896 7C 00         [12] 2722 	mov	r4,#0x00
   0898 7D 00         [12] 2723 	mov	r5,#0x00
   089A                    2724 00103$:
   089A C3            [12] 2725 	clr	c
   089B EC            [12] 2726 	mov	a,r4
   089C 9E            [12] 2727 	subb	a,r6
   089D ED            [12] 2728 	mov	a,r5
   089E 9F            [12] 2729 	subb	a,r7
   089F 50 1D         [24] 2730 	jnc	00105$
                           2731 ;	../src/delay/src/delay_s.c:53: delay_ms(1000);
   08A1 90 03 E8      [24] 2732 	mov	dptr,#0x03E8
   08A4 C0 07         [24] 2733 	push	ar7
   08A6 C0 06         [24] 2734 	push	ar6
   08A8 C0 05         [24] 2735 	push	ar5
   08AA C0 04         [24] 2736 	push	ar4
   08AC 12r08rBF      [24] 2737 	lcall	_delay_ms
   08AF D0 04         [24] 2738 	pop	ar4
   08B1 D0 05         [24] 2739 	pop	ar5
   08B3 D0 06         [24] 2740 	pop	ar6
   08B5 D0 07         [24] 2741 	pop	ar7
                           2742 ;	../src/delay/src/delay_s.c:51: for(count = 0; count < seconds; count++)
   08B7 0C            [12] 2743 	inc	r4
   08B8 BC 00 DF      [24] 2744 	cjne	r4,#0x00,00103$
   08BB 0D            [12] 2745 	inc	r5
   08BC 80 DC         [24] 2746 	sjmp	00103$
   08BE                    2747 00105$:
   08BE 22            [24] 2748 	ret
                           2749 ;------------------------------------------------------------
                           2750 ;Allocation info for local variables in function 'delay_ms'
                           2751 ;------------------------------------------------------------
                           2752 ;milliseconds              Allocated with name '_delay_ms_milliseconds_1_138'
                           2753 ;count                     Allocated with name '_delay_ms_count_1_139'
                           2754 ;------------------------------------------------------------
                           2755 ;	../src/delay/src/delay_ms.c:46: void delay_ms(uint16_t milliseconds)
                           2756 ;	-----------------------------------------
                           2757 ;	 function delay_ms
                           2758 ;	-----------------------------------------
   08BF                    2759 _delay_ms:
   08BF AF 83         [24] 2760 	mov	r7,dph
   08C1 E5 82         [12] 2761 	mov	a,dpl
   08C3 90r00r44      [24] 2762 	mov	dptr,#_delay_ms_milliseconds_1_138
   08C6 F0            [24] 2763 	movx	@dptr,a
   08C7 EF            [12] 2764 	mov	a,r7
   08C8 A3            [24] 2765 	inc	dptr
   08C9 F0            [24] 2766 	movx	@dptr,a
                           2767 ;	../src/delay/src/delay_ms.c:51: for(count = 0; count < milliseconds; count++)
   08CA 90r00r44      [24] 2768 	mov	dptr,#_delay_ms_milliseconds_1_138
   08CD E0            [24] 2769 	movx	a,@dptr
   08CE FE            [12] 2770 	mov	r6,a
   08CF A3            [24] 2771 	inc	dptr
   08D0 E0            [24] 2772 	movx	a,@dptr
   08D1 FF            [12] 2773 	mov	r7,a
   08D2 7C 00         [12] 2774 	mov	r4,#0x00
   08D4 7D 00         [12] 2775 	mov	r5,#0x00
   08D6                    2776 00103$:
   08D6 C3            [12] 2777 	clr	c
   08D7 EC            [12] 2778 	mov	a,r4
   08D8 9E            [12] 2779 	subb	a,r6
   08D9 ED            [12] 2780 	mov	a,r5
   08DA 9F            [12] 2781 	subb	a,r7
   08DB 50 1D         [24] 2782 	jnc	00105$
                           2783 ;	../src/delay/src/delay_ms.c:53: delay_us(1000);
   08DD 90 03 E8      [24] 2784 	mov	dptr,#0x03E8
   08E0 C0 07         [24] 2785 	push	ar7
   08E2 C0 06         [24] 2786 	push	ar6
   08E4 C0 05         [24] 2787 	push	ar5
   08E6 C0 04         [24] 2788 	push	ar4
   08E8 12r08r42      [24] 2789 	lcall	_delay_us
   08EB D0 04         [24] 2790 	pop	ar4
   08ED D0 05         [24] 2791 	pop	ar5
   08EF D0 06         [24] 2792 	pop	ar6
   08F1 D0 07         [24] 2793 	pop	ar7
                           2794 ;	../src/delay/src/delay_ms.c:51: for(count = 0; count < milliseconds; count++)
   08F3 0C            [12] 2795 	inc	r4
   08F4 BC 00 DF      [24] 2796 	cjne	r4,#0x00,00103$
   08F7 0D            [12] 2797 	inc	r5
   08F8 80 DC         [24] 2798 	sjmp	00103$
   08FA                    2799 00105$:
   08FA 22            [24] 2800 	ret
                           2801 ;------------------------------------------------------------
                           2802 ;Allocation info for local variables in function 'pwm_configure'
                           2803 ;------------------------------------------------------------
                           2804 ;pwm_config_options        Allocated with name '_pwm_configure_pwm_config_options_1_143'
                           2805 ;------------------------------------------------------------
                           2806 ;	../src/pwm/src/pwm_configure.c:52: void pwm_configure(uint8_t pwm_config_options)
                           2807 ;	-----------------------------------------
                           2808 ;	 function pwm_configure
                           2809 ;	-----------------------------------------
   08FB                    2810 _pwm_configure:
   08FB E5 82         [12] 2811 	mov	a,dpl
   08FD 90r00r46      [24] 2812 	mov	dptr,#_pwm_configure_pwm_config_options_1_143
   0900 F0            [24] 2813 	movx	@dptr,a
                           2814 ;	../src/pwm/src/pwm_configure.c:55: PWMCON = (PWMCON & ~PWM_CONFIG_OPTION_PWMCON_MASK) | (pwm_config_options & PWM_CONFIG_OPTION_PWMCON_MASK);
   0901 AF B2         [24] 2815 	mov	r7,_PWMCON
   0903 53 07 03      [24] 2816 	anl	ar7,#0x03
   0906 90r00r46      [24] 2817 	mov	dptr,#_pwm_configure_pwm_config_options_1_143
   0909 E0            [24] 2818 	movx	a,@dptr
   090A 54 FC         [12] 2819 	anl	a,#0xFC
   090C 4F            [12] 2820 	orl	a,r7
   090D F5 B2         [12] 2821 	mov	_PWMCON,a
   090F 22            [24] 2822 	ret
                           2823 ;------------------------------------------------------------
                           2824 ;Allocation info for local variables in function 'pwm_start'
                           2825 ;------------------------------------------------------------
                           2826 ;pwm_duty_cycle            Allocated with name '_pwm_start_PARM_2'
                           2827 ;pwm_channel               Allocated with name '_pwm_start_pwm_channel_1_145'
                           2828 ;------------------------------------------------------------
                           2829 ;	../src/pwm/src/pwm_start.c:47: void pwm_start(pwm_channel_t pwm_channel, uint8_t pwm_duty_cycle)
                           2830 ;	-----------------------------------------
                           2831 ;	 function pwm_start
                           2832 ;	-----------------------------------------
   0910                    2833 _pwm_start:
   0910 E5 82         [12] 2834 	mov	a,dpl
                           2835 ;	../src/pwm/src/pwm_start.c:50: if(pwm_channel == PWM_CHANNEL_0)
   0912 90r00r48      [24] 2836 	mov	dptr,#_pwm_start_pwm_channel_1_145
   0915 F0            [24] 2837 	movx	@dptr,a
   0916 FF            [12] 2838 	mov	r7,a
   0917 70 0A         [24] 2839 	jnz	00102$
                           2840 ;	../src/pwm/src/pwm_start.c:52: PWMDC0 = pwm_duty_cycle;
   0919 90r00r47      [24] 2841 	mov	dptr,#_pwm_start_PARM_2
   091C E0            [24] 2842 	movx	a,@dptr
   091D F5 A1         [12] 2843 	mov	_PWMDC0,a
                           2844 ;	../src/pwm/src/pwm_start.c:53: reg_bits_set(PWMCON, PWMCON_PWM0_ENABLE);
   091F 43 B2 01      [24] 2845 	orl	_PWMCON,#0x01
   0922 22            [24] 2846 	ret
   0923                    2847 00102$:
                           2848 ;	../src/pwm/src/pwm_start.c:57: PWMDC1 = pwm_duty_cycle;
   0923 90r00r47      [24] 2849 	mov	dptr,#_pwm_start_PARM_2
   0926 E0            [24] 2850 	movx	a,@dptr
   0927 F5 A2         [12] 2851 	mov	_PWMDC1,a
                           2852 ;	../src/pwm/src/pwm_start.c:58: reg_bits_set(PWMCON, PWMCON_PWM1_ENABLE);
   0929 43 B2 02      [24] 2853 	orl	_PWMCON,#0x02
   092C 22            [24] 2854 	ret
                           2855 ;------------------------------------------------------------
                           2856 ;Allocation info for local variables in function 'pwr_clk_mgmt_clklf_configure'
                           2857 ;------------------------------------------------------------
                           2858 ;clklf_config_options      Allocated with name '_pwr_clk_mgmt_clklf_configure_clklf_config_options_1_154'
                           2859 ;------------------------------------------------------------
                           2860 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_clklf_configure.c:52: void pwr_clk_mgmt_clklf_configure(uint8_t clklf_config_options)
                           2861 ;	-----------------------------------------
                           2862 ;	 function pwr_clk_mgmt_clklf_configure
                           2863 ;	-----------------------------------------
   092D                    2864 _pwr_clk_mgmt_clklf_configure:
   092D E5 82         [12] 2865 	mov	a,dpl
   092F 90r00r49      [24] 2866 	mov	dptr,#_pwr_clk_mgmt_clklf_configure_clklf_config_options_1_154
   0932 F0            [24] 2867 	movx	@dptr,a
                           2868 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_clklf_configure.c:55: CLKLFCTRL = (CLKLFCTRL & ~PWR_CLK_MGMT_CLKLF_CONFIG_OPTION_CLKLFCTRL_MASK) | (clklf_config_options & PWR_CLK_MGMT_CLKLF_CONFIG_OPTION_CLKLFCTRL_MASK);
   0933 AF AD         [24] 2869 	mov	r7,_CLKLFCTRL
   0935 53 07 F8      [24] 2870 	anl	ar7,#0xF8
   0938 90r00r49      [24] 2871 	mov	dptr,#_pwr_clk_mgmt_clklf_configure_clklf_config_options_1_154
   093B E0            [24] 2872 	movx	a,@dptr
   093C 54 07         [12] 2873 	anl	a,#0x07
   093E 4F            [12] 2874 	orl	a,r7
   093F F5 AD         [12] 2875 	mov	_CLKLFCTRL,a
   0941 22            [24] 2876 	ret
                           2877 ;------------------------------------------------------------
                           2878 ;Allocation info for local variables in function 'pwr_clk_mgmt_get_cclk_freq_in_hz'
                           2879 ;------------------------------------------------------------
                           2880 ;divider                   Allocated with name '_pwr_clk_mgmt_get_cclk_freq_in_hz_divider_1_156'
                           2881 ;i                         Allocated with name '_pwr_clk_mgmt_get_cclk_freq_in_hz_i_1_156'
                           2882 ;cclk_freq_hz              Allocated with name '_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156'
                           2883 ;------------------------------------------------------------
                           2884 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:46: uint32_t pwr_clk_mgmt_get_cclk_freq_in_hz()
                           2885 ;	-----------------------------------------
                           2886 ;	 function pwr_clk_mgmt_get_cclk_freq_in_hz
                           2887 ;	-----------------------------------------
   0942                    2888 _pwr_clk_mgmt_get_cclk_freq_in_hz:
                           2889 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:48: uint8_t divider = (CLKCTRL & CLKCTRL_CLK_FREQ_MASK) >> CLKCTRL_CLK_FREQ_SHIFT;
   0942 74 07         [12] 2890 	mov	a,#0x07
   0944 55 A3         [12] 2891 	anl	a,_CLKCTRL
   0946 FF            [12] 2892 	mov	r7,a
                           2893 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:50: uint32_t cclk_freq_hz = CCLK_MAX_FREQ_HZ;
   0947 90r00r4A      [24] 2894 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156
   094A E4            [12] 2895 	clr	a
   094B F0            [24] 2896 	movx	@dptr,a
   094C 74 24         [12] 2897 	mov	a,#0x24
   094E A3            [24] 2898 	inc	dptr
   094F F0            [24] 2899 	movx	@dptr,a
   0950 74 F4         [12] 2900 	mov	a,#0xF4
   0952 A3            [24] 2901 	inc	dptr
   0953 F0            [24] 2902 	movx	@dptr,a
   0954 E4            [12] 2903 	clr	a
   0955 A3            [24] 2904 	inc	dptr
   0956 F0            [24] 2905 	movx	@dptr,a
                           2906 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:52: for(i = 0; i < divider; i++)
   0957 7E 00         [12] 2907 	mov	r6,#0x00
   0959                    2908 00103$:
   0959 C3            [12] 2909 	clr	c
   095A EE            [12] 2910 	mov	a,r6
   095B 9F            [12] 2911 	subb	a,r7
   095C 50 29         [24] 2912 	jnc	00101$
                           2913 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:54: cclk_freq_hz /= 2;
   095E 90r00r4A      [24] 2914 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156
   0961 E0            [24] 2915 	movx	a,@dptr
   0962 FA            [12] 2916 	mov	r2,a
   0963 A3            [24] 2917 	inc	dptr
   0964 E0            [24] 2918 	movx	a,@dptr
   0965 FB            [12] 2919 	mov	r3,a
   0966 A3            [24] 2920 	inc	dptr
   0967 E0            [24] 2921 	movx	a,@dptr
   0968 FC            [12] 2922 	mov	r4,a
   0969 A3            [24] 2923 	inc	dptr
   096A E0            [24] 2924 	movx	a,@dptr
   096B C3            [12] 2925 	clr	c
   096C 13            [12] 2926 	rrc	a
   096D FD            [12] 2927 	mov	r5,a
   096E EC            [12] 2928 	mov	a,r4
   096F 13            [12] 2929 	rrc	a
   0970 FC            [12] 2930 	mov	r4,a
   0971 EB            [12] 2931 	mov	a,r3
   0972 13            [12] 2932 	rrc	a
   0973 FB            [12] 2933 	mov	r3,a
   0974 EA            [12] 2934 	mov	a,r2
   0975 13            [12] 2935 	rrc	a
   0976 FA            [12] 2936 	mov	r2,a
   0977 90r00r4A      [24] 2937 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156
   097A F0            [24] 2938 	movx	@dptr,a
   097B EB            [12] 2939 	mov	a,r3
   097C A3            [24] 2940 	inc	dptr
   097D F0            [24] 2941 	movx	@dptr,a
   097E EC            [12] 2942 	mov	a,r4
   097F A3            [24] 2943 	inc	dptr
   0980 F0            [24] 2944 	movx	@dptr,a
   0981 ED            [12] 2945 	mov	a,r5
   0982 A3            [24] 2946 	inc	dptr
   0983 F0            [24] 2947 	movx	@dptr,a
                           2948 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:52: for(i = 0; i < divider; i++)
   0984 0E            [12] 2949 	inc	r6
   0985 80 D2         [24] 2950 	sjmp	00103$
   0987                    2951 00101$:
                           2952 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_get_cclk_freq_in_hz.c:57: return cclk_freq_hz;
   0987 90r00r4A      [24] 2953 	mov	dptr,#_pwr_clk_mgmt_get_cclk_freq_in_hz_cclk_freq_hz_1_156
   098A E0            [24] 2954 	movx	a,@dptr
   098B FC            [12] 2955 	mov	r4,a
   098C A3            [24] 2956 	inc	dptr
   098D E0            [24] 2957 	movx	a,@dptr
   098E FD            [12] 2958 	mov	r5,a
   098F A3            [24] 2959 	inc	dptr
   0990 E0            [24] 2960 	movx	a,@dptr
   0991 FE            [12] 2961 	mov	r6,a
   0992 A3            [24] 2962 	inc	dptr
   0993 E0            [24] 2963 	movx	a,@dptr
   0994 8C 82         [24] 2964 	mov	dpl,r4
   0996 8D 83         [24] 2965 	mov	dph,r5
   0998 8E F0         [24] 2966 	mov	b,r6
   099A 22            [24] 2967 	ret
                           2968 ;------------------------------------------------------------
                           2969 ;Allocation info for local variables in function 'pwr_clk_mgmt_wakeup_configure'
                           2970 ;------------------------------------------------------------
                           2971 ;wakeup_on_pin_config_options Allocated with name '_pwr_clk_mgmt_wakeup_configure_PARM_2'
                           2972 ;wakeup_sources_config_options Allocated with name '_pwr_clk_mgmt_wakeup_configure_wakeup_sources_config_options_1_158'
                           2973 ;------------------------------------------------------------
                           2974 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_wakeup_configure.c:47: void pwr_clk_mgmt_wakeup_configure(unsigned char wakeup_sources_config_options, unsigned int wakeup_on_pin_config_options)
                           2975 ;	-----------------------------------------
                           2976 ;	 function pwr_clk_mgmt_wakeup_configure
                           2977 ;	-----------------------------------------
   099B                    2978 _pwr_clk_mgmt_wakeup_configure:
   099B E5 82         [12] 2979 	mov	a,dpl
                           2980 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_wakeup_configure.c:50: WUCON = wakeup_sources_config_options;
   099D 90r00r50      [24] 2981 	mov	dptr,#_pwr_clk_mgmt_wakeup_configure_wakeup_sources_config_options_1_158
   09A0 F0            [24] 2982 	movx	@dptr,a
   09A1 F5 A5         [12] 2983 	mov	_WUCON,a
                           2984 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_wakeup_configure.c:53: WUOPC0 = wakeup_on_pin_config_options & 0xFF;
   09A3 90r00r4E      [24] 2985 	mov	dptr,#_pwr_clk_mgmt_wakeup_configure_PARM_2
   09A6 E0            [24] 2986 	movx	a,@dptr
   09A7 FE            [12] 2987 	mov	r6,a
   09A8 A3            [24] 2988 	inc	dptr
   09A9 E0            [24] 2989 	movx	a,@dptr
   09AA FF            [12] 2990 	mov	r7,a
   09AB 8E 04         [24] 2991 	mov	ar4,r6
   09AD 8C CF         [24] 2992 	mov	_WUOPC0,r4
                           2993 ;	../src/pwr_clk_mgmt/src/pwr_clk_mgmt_wakeup_configure.c:54: WUOPC1 = (wakeup_on_pin_config_options >> 8) & 0xFF;
   09AF 8F 06         [24] 2994 	mov	ar6,r7
   09B1 8E CE         [24] 2995 	mov	_WUOPC1,r6
   09B3 22            [24] 2996 	ret
                           2997 ;------------------------------------------------------------
                           2998 ;Allocation info for local variables in function 'watchdog_set_wdsv_count'
                           2999 ;------------------------------------------------------------
                           3000 ;wdsv_value                Allocated with name '_watchdog_set_wdsv_count_wdsv_value_1_161'
                           3001 ;------------------------------------------------------------
                           3002 ;	../src/watchdog/src/watchdog_set_wdsv_count.c:46: void watchdog_set_wdsv_count(uint16_t wdsv_value)
                           3003 ;	-----------------------------------------
                           3004 ;	 function watchdog_set_wdsv_count
                           3005 ;	-----------------------------------------
   09B4                    3006 _watchdog_set_wdsv_count:
   09B4 AF 83         [24] 3007 	mov	r7,dph
   09B6 E5 82         [12] 3008 	mov	a,dpl
   09B8 90r00r51      [24] 3009 	mov	dptr,#_watchdog_set_wdsv_count_wdsv_value_1_161
   09BB F0            [24] 3010 	movx	@dptr,a
   09BC EF            [12] 3011 	mov	a,r7
   09BD A3            [24] 3012 	inc	dptr
   09BE F0            [24] 3013 	movx	@dptr,a
                           3014 ;	../src/watchdog/src/watchdog_set_wdsv_count.c:49: WDSV = (uint8_t)wdsv_value;
   09BF 90r00r51      [24] 3015 	mov	dptr,#_watchdog_set_wdsv_count_wdsv_value_1_161
   09C2 E0            [24] 3016 	movx	a,@dptr
   09C3 FE            [12] 3017 	mov	r6,a
   09C4 A3            [24] 3018 	inc	dptr
   09C5 E0            [24] 3019 	movx	a,@dptr
   09C6 FF            [12] 3020 	mov	r7,a
   09C7 8E AF         [24] 3021 	mov	_WDSV,r6
                           3022 ;	../src/watchdog/src/watchdog_set_wdsv_count.c:50: WDSV = (uint8_t)(wdsv_value >> 8);
   09C9 8F AF         [24] 3023 	mov	_WDSV,r7
   09CB 22            [24] 3024 	ret
                           3025 ;------------------------------------------------------------
                           3026 ;Allocation info for local variables in function 'watchdog_start_and_set_timeout_in_ms'
                           3027 ;------------------------------------------------------------
                           3028 ;milliseconds              Allocated with name '_watchdog_start_and_set_timeout_in_ms_milliseconds_1_163'
                           3029 ;wd_value                  Allocated with name '_watchdog_start_and_set_timeout_in_ms_wd_value_1_164'
                           3030 ;------------------------------------------------------------
                           3031 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:50: uint16_t watchdog_start_and_set_timeout_in_ms(uint32_t milliseconds)
                           3032 ;	-----------------------------------------
                           3033 ;	 function watchdog_start_and_set_timeout_in_ms
                           3034 ;	-----------------------------------------
   09CC                    3035 _watchdog_start_and_set_timeout_in_ms:
   09CC AF 82         [24] 3036 	mov	r7,dpl
   09CE AE 83         [24] 3037 	mov	r6,dph
   09D0 AD F0         [24] 3038 	mov	r5,b
   09D2 FC            [12] 3039 	mov	r4,a
   09D3 90r00r53      [24] 3040 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_milliseconds_1_163
   09D6 EF            [12] 3041 	mov	a,r7
   09D7 F0            [24] 3042 	movx	@dptr,a
   09D8 EE            [12] 3043 	mov	a,r6
   09D9 A3            [24] 3044 	inc	dptr
   09DA F0            [24] 3045 	movx	@dptr,a
   09DB ED            [12] 3046 	mov	a,r5
   09DC A3            [24] 3047 	inc	dptr
   09DD F0            [24] 3048 	movx	@dptr,a
   09DE EC            [12] 3049 	mov	a,r4
   09DF A3            [24] 3050 	inc	dptr
   09E0 F0            [24] 3051 	movx	@dptr,a
                           3052 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:52: uint16_t wd_value = 0;
   09E1 90r00r57      [24] 3053 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_wd_value_1_164
   09E4 E4            [12] 3054 	clr	a
   09E5 F0            [24] 3055 	movx	@dptr,a
   09E6 E4            [12] 3056 	clr	a
   09E7 A3            [24] 3057 	inc	dptr
   09E8 F0            [24] 3058 	movx	@dptr,a
                           3059 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:55: if(!pwr_clk_mgmt_is_clklf_enabled())
   09E9 74 07         [12] 3060 	mov	a,#0x07
   09EB 55 AD         [12] 3061 	anl	a,_CLKLFCTRL
   09ED FF            [12] 3062 	mov	r7,a
   09EE BF 07 0B      [24] 3063 	cjne	r7,#0x07,00105$
                           3064 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:58: pwr_clk_mgmt_clklf_configure(PWR_CLK_MGMT_CLKLF_CONFIG_OPTION_CLK_SRC_XOSC16M);
   09F1 75 82 02      [24] 3065 	mov	dpl,#0x02
   09F4 12r09r2D      [24] 3066 	lcall	_pwr_clk_mgmt_clklf_configure
                           3067 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:59: pwr_clk_mgmt_wait_until_clklf_is_ready();
   09F7                    3068 00101$:
   09F7 E5 AD         [12] 3069 	mov	a,_CLKLFCTRL
   09F9 30 E6 FB      [24] 3070 	jnb	acc.6,00101$
   09FC                    3071 00105$:
                           3072 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:63: if(milliseconds < 511992)
   09FC 90r00r53      [24] 3073 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_milliseconds_1_163
   09FF E0            [24] 3074 	movx	a,@dptr
   0A00 FC            [12] 3075 	mov	r4,a
   0A01 A3            [24] 3076 	inc	dptr
   0A02 E0            [24] 3077 	movx	a,@dptr
   0A03 FD            [12] 3078 	mov	r5,a
   0A04 A3            [24] 3079 	inc	dptr
   0A05 E0            [24] 3080 	movx	a,@dptr
   0A06 FE            [12] 3081 	mov	r6,a
   0A07 A3            [24] 3082 	inc	dptr
   0A08 E0            [24] 3083 	movx	a,@dptr
   0A09 FF            [12] 3084 	mov	r7,a
   0A0A C3            [12] 3085 	clr	c
   0A0B EC            [12] 3086 	mov	a,r4
   0A0C 94 F8         [12] 3087 	subb	a,#0xF8
   0A0E ED            [12] 3088 	mov	a,r5
   0A0F 94 CF         [12] 3089 	subb	a,#0xCF
   0A11 EE            [12] 3090 	mov	a,r6
   0A12 94 07         [12] 3091 	subb	a,#0x07
   0A14 EF            [12] 3092 	mov	a,r7
   0A15 94 00         [12] 3093 	subb	a,#0x00
   0A17 50 52         [24] 3094 	jnc	00107$
                           3095 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:90: wd_value = (uint16_t)(((uint32_t)(milliseconds * ((uint32_t)128)) + (uint32_t)500) / ((uint32_t)1000));
   0A19 EF            [12] 3096 	mov	a,r7
   0A1A 54 01         [12] 3097 	anl	a,#0x01
   0A1C A2 E0         [12] 3098 	mov	c,acc.0
   0A1E CE            [12] 3099 	xch	a,r6
   0A1F 13            [12] 3100 	rrc	a
   0A20 CE            [12] 3101 	xch	a,r6
   0A21 13            [12] 3102 	rrc	a
   0A22 CE            [12] 3103 	xch	a,r6
   0A23 FF            [12] 3104 	mov	r7,a
   0A24 ED            [12] 3105 	mov	a,r5
   0A25 C3            [12] 3106 	clr	c
   0A26 13            [12] 3107 	rrc	a
   0A27 4E            [12] 3108 	orl	a,r6
   0A28 FE            [12] 3109 	mov	r6,a
   0A29 ED            [12] 3110 	mov	a,r5
   0A2A 54 01         [12] 3111 	anl	a,#0x01
   0A2C A2 E0         [12] 3112 	mov	c,acc.0
   0A2E CC            [12] 3113 	xch	a,r4
   0A2F 13            [12] 3114 	rrc	a
   0A30 CC            [12] 3115 	xch	a,r4
   0A31 13            [12] 3116 	rrc	a
   0A32 CC            [12] 3117 	xch	a,r4
   0A33 FD            [12] 3118 	mov	r5,a
   0A34 74 F4         [12] 3119 	mov	a,#0xF4
   0A36 2C            [12] 3120 	add	a,r4
   0A37 FC            [12] 3121 	mov	r4,a
   0A38 74 01         [12] 3122 	mov	a,#0x01
   0A3A 3D            [12] 3123 	addc	a,r5
   0A3B FD            [12] 3124 	mov	r5,a
   0A3C E4            [12] 3125 	clr	a
   0A3D 3E            [12] 3126 	addc	a,r6
   0A3E FE            [12] 3127 	mov	r6,a
   0A3F E4            [12] 3128 	clr	a
   0A40 3F            [12] 3129 	addc	a,r7
   0A41 FF            [12] 3130 	mov	r7,a
   0A42 90r00r00      [24] 3131 	mov	dptr,#__divulong_PARM_2
   0A45 74 E8         [12] 3132 	mov	a,#0xE8
   0A47 F0            [24] 3133 	movx	@dptr,a
   0A48 74 03         [12] 3134 	mov	a,#0x03
   0A4A A3            [24] 3135 	inc	dptr
   0A4B F0            [24] 3136 	movx	@dptr,a
   0A4C E4            [12] 3137 	clr	a
   0A4D A3            [24] 3138 	inc	dptr
   0A4E F0            [24] 3139 	movx	@dptr,a
   0A4F E4            [12] 3140 	clr	a
   0A50 A3            [24] 3141 	inc	dptr
   0A51 F0            [24] 3142 	movx	@dptr,a
   0A52 8C 82         [24] 3143 	mov	dpl,r4
   0A54 8D 83         [24] 3144 	mov	dph,r5
   0A56 8E F0         [24] 3145 	mov	b,r6
   0A58 EF            [12] 3146 	mov	a,r7
   0A59 12r00r00      [24] 3147 	lcall	__divulong
   0A5C AC 82         [24] 3148 	mov	r4,dpl
   0A5E AD 83         [24] 3149 	mov	r5,dph
   0A60 AE F0         [24] 3150 	mov	r6,b
   0A62 FF            [12] 3151 	mov	r7,a
   0A63 90r00r57      [24] 3152 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_wd_value_1_164
   0A66 EC            [12] 3153 	mov	a,r4
   0A67 F0            [24] 3154 	movx	@dptr,a
   0A68 ED            [12] 3155 	mov	a,r5
   0A69 A3            [24] 3156 	inc	dptr
   0A6A F0            [24] 3157 	movx	@dptr,a
   0A6B                    3158 00107$:
                           3159 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:93: watchdog_set_wdsv_count(wd_value);
   0A6B 90r00r57      [24] 3160 	mov	dptr,#_watchdog_start_and_set_timeout_in_ms_wd_value_1_164
   0A6E E0            [24] 3161 	movx	a,@dptr
   0A6F FE            [12] 3162 	mov	r6,a
   0A70 A3            [24] 3163 	inc	dptr
   0A71 E0            [24] 3164 	movx	a,@dptr
   0A72 FF            [12] 3165 	mov	r7,a
   0A73 8E 82         [24] 3166 	mov	dpl,r6
   0A75 8F 83         [24] 3167 	mov	dph,r7
   0A77 C0 07         [24] 3168 	push	ar7
   0A79 C0 06         [24] 3169 	push	ar6
   0A7B 12r09rB4      [24] 3170 	lcall	_watchdog_set_wdsv_count
   0A7E D0 06         [24] 3171 	pop	ar6
   0A80 D0 07         [24] 3172 	pop	ar7
                           3173 ;	../src/watchdog/src/watchdog_start_and_set_timeout_in_ms.c:95: return wd_value;
   0A82 8E 82         [24] 3174 	mov	dpl,r6
   0A84 8F 83         [24] 3175 	mov	dph,r7
   0A86 22            [24] 3176 	ret
                           3177 ;------------------------------------------------------------
                           3178 ;Allocation info for local variables in function 'interrupt_configure_ifp'
                           3179 ;------------------------------------------------------------
                           3180 ;ifp_int_config_options    Allocated with name '_interrupt_configure_ifp_PARM_2'
                           3181 ;interrupt_ifp_input       Allocated with name '_interrupt_configure_ifp_interrupt_ifp_input_1_167'
                           3182 ;------------------------------------------------------------
                           3183 ;	../src/interrupt/src/interrupt_configure_ifp.c:57: bool interrupt_configure_ifp(interrupt_ifp_input_t interrupt_ifp_input, uint8_t ifp_int_config_options)
                           3184 ;	-----------------------------------------
                           3185 ;	 function interrupt_configure_ifp
                           3186 ;	-----------------------------------------
   0A87                    3187 _interrupt_configure_ifp:
   0A87 E5 82         [12] 3188 	mov	a,dpl
   0A89 90r00r5A      [24] 3189 	mov	dptr,#_interrupt_configure_ifp_interrupt_ifp_input_1_167
   0A8C F0            [24] 3190 	movx	@dptr,a
                           3191 ;	../src/interrupt/src/interrupt_configure_ifp.c:60: if(ifp_int_config_options & INTERRUPT_IFP_CONFIG_OPTION_ENABLE)
   0A8D 90r00r59      [24] 3192 	mov	dptr,#_interrupt_configure_ifp_PARM_2
   0A90 E0            [24] 3193 	movx	a,@dptr
   0A91 FF            [12] 3194 	mov	r7,a
   0A92 30 E7 41      [24] 3195 	jnb	acc.7,00116$
                           3196 ;	../src/interrupt/src/interrupt_configure_ifp.c:63: if(interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT0)
   0A95 90r00r5A      [24] 3197 	mov	dptr,#_interrupt_configure_ifp_interrupt_ifp_input_1_167
   0A98 E0            [24] 3198 	movx	a,@dptr
   0A99 FE            [12] 3199 	mov	r6,a
   0A9A BE 08 0B      [24] 3200 	cjne	r6,#0x08,00108$
                           3201 ;	../src/interrupt/src/interrupt_configure_ifp.c:65: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK) | INTERRUPT_IFP_INPUT_GPINT0;
   0A9D AD A6         [24] 3202 	mov	r5,_INTEXP
   0A9F 74 C7         [12] 3203 	mov	a,#0xC7
   0AA1 5D            [12] 3204 	anl	a,r5
   0AA2 44 08         [12] 3205 	orl	a,#0x08
   0AA4 F5 A6         [12] 3206 	mov	_INTEXP,a
   0AA6 80 20         [24] 3207 	sjmp	00109$
   0AA8                    3208 00108$:
                           3209 ;	../src/interrupt/src/interrupt_configure_ifp.c:67: else if(interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT1)
   0AA8 BE 10 0B      [24] 3210 	cjne	r6,#0x10,00105$
                           3211 ;	../src/interrupt/src/interrupt_configure_ifp.c:69: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK) | INTERRUPT_IFP_INPUT_GPINT1;
   0AAB AD A6         [24] 3212 	mov	r5,_INTEXP
   0AAD 74 C7         [12] 3213 	mov	a,#0xC7
   0AAF 5D            [12] 3214 	anl	a,r5
   0AB0 44 10         [12] 3215 	orl	a,#0x10
   0AB2 F5 A6         [12] 3216 	mov	_INTEXP,a
   0AB4 80 12         [24] 3217 	sjmp	00109$
   0AB6                    3218 00105$:
                           3219 ;	../src/interrupt/src/interrupt_configure_ifp.c:71: else if(interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT2)
   0AB6 BE 20 0B      [24] 3220 	cjne	r6,#0x20,00102$
                           3221 ;	../src/interrupt/src/interrupt_configure_ifp.c:73: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK) | INTERRUPT_IFP_INPUT_GPINT2;
   0AB9 AE A6         [24] 3222 	mov	r6,_INTEXP
   0ABB 74 C7         [12] 3223 	mov	a,#0xC7
   0ABD 5E            [12] 3224 	anl	a,r6
   0ABE 44 20         [12] 3225 	orl	a,#0x20
   0AC0 F5 A6         [12] 3226 	mov	_INTEXP,a
   0AC2 80 04         [24] 3227 	sjmp	00109$
   0AC4                    3228 00102$:
                           3229 ;	../src/interrupt/src/interrupt_configure_ifp.c:78: return false;
   0AC4 75 82 00      [24] 3230 	mov	dpl,#0x00
   0AC7 22            [24] 3231 	ret
   0AC8                    3232 00109$:
                           3233 ;	../src/interrupt/src/interrupt_configure_ifp.c:82: TCON = (TCON & ~INTERRUPT_IFP_CONFIG_TCON_MASK) | (ifp_int_config_options & INTERRUPT_IFP_CONFIG_TCON_MASK);
   0AC8 AE 88         [24] 3234 	mov	r6,_TCON
   0ACA 53 06 FE      [24] 3235 	anl	ar6,#0xFE
   0ACD 53 07 01      [24] 3236 	anl	ar7,#0x01
   0AD0 EF            [12] 3237 	mov	a,r7
   0AD1 4E            [12] 3238 	orl	a,r6
   0AD2 F5 88         [12] 3239 	mov	_TCON,a
   0AD4 80 1F         [24] 3240 	sjmp	00117$
   0AD6                    3241 00116$:
                           3242 ;	../src/interrupt/src/interrupt_configure_ifp.c:87: if((interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT0) || (interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT1) || (interrupt_ifp_input == INTERRUPT_IFP_INPUT_GPINT2))
   0AD6 90r00r5A      [24] 3243 	mov	dptr,#_interrupt_configure_ifp_interrupt_ifp_input_1_167
   0AD9 E0            [24] 3244 	movx	a,@dptr
   0ADA FF            [12] 3245 	mov	r7,a
   0ADB BF 08 02      [24] 3246 	cjne	r7,#0x08,00145$
   0ADE 80 08         [24] 3247 	sjmp	00110$
   0AE0                    3248 00145$:
   0AE0 BF 10 02      [24] 3249 	cjne	r7,#0x10,00146$
   0AE3 80 03         [24] 3250 	sjmp	00110$
   0AE5                    3251 00146$:
   0AE5 BF 20 09      [24] 3252 	cjne	r7,#0x20,00111$
   0AE8                    3253 00110$:
                           3254 ;	../src/interrupt/src/interrupt_configure_ifp.c:89: INTEXP = (INTEXP & ~INTERRUPT_IFP_CONFIG_INTEXP_GPINTX_MASK);
   0AE8 AF A6         [24] 3255 	mov	r7,_INTEXP
   0AEA 74 C7         [12] 3256 	mov	a,#0xC7
   0AEC 5F            [12] 3257 	anl	a,r7
   0AED F5 A6         [12] 3258 	mov	_INTEXP,a
   0AEF 80 04         [24] 3259 	sjmp	00117$
   0AF1                    3260 00111$:
                           3261 ;	../src/interrupt/src/interrupt_configure_ifp.c:94: return false;
   0AF1 75 82 00      [24] 3262 	mov	dpl,#0x00
   0AF4 22            [24] 3263 	ret
   0AF5                    3264 00117$:
                           3265 ;	../src/interrupt/src/interrupt_configure_ifp.c:98: return true;
   0AF5 75 82 01      [24] 3266 	mov	dpl,#0x01
   0AF8 22            [24] 3267 	ret
                           3268 ;------------------------------------------------------------
                           3269 ;Allocation info for local variables in function 'adc_configure'
                           3270 ;------------------------------------------------------------
                           3271 ;adc_config_options        Allocated with name '_adc_configure_adc_config_options_1_181'
                           3272 ;------------------------------------------------------------
                           3273 ;	../src/adc/src/adc_configure.c:54: void adc_configure(unsigned int adc_config_options)
                           3274 ;	-----------------------------------------
                           3275 ;	 function adc_configure
                           3276 ;	-----------------------------------------
   0AF9                    3277 _adc_configure:
   0AF9 AF 83         [24] 3278 	mov	r7,dph
   0AFB E5 82         [12] 3279 	mov	a,dpl
   0AFD 90r00r5B      [24] 3280 	mov	dptr,#_adc_configure_adc_config_options_1_181
   0B00 F0            [24] 3281 	movx	@dptr,a
   0B01 EF            [12] 3282 	mov	a,r7
   0B02 A3            [24] 3283 	inc	dptr
   0B03 F0            [24] 3284 	movx	@dptr,a
                           3285 ;	../src/adc/src/adc_configure.c:57: ADCCON1 = (adc_config_options >> 8) & ADC_CONFIG_OPTION_ADCCON1_WRITE_MASK;
   0B04 90r00r5B      [24] 3286 	mov	dptr,#_adc_configure_adc_config_options_1_181
   0B07 E0            [24] 3287 	movx	a,@dptr
   0B08 FE            [12] 3288 	mov	r6,a
   0B09 A3            [24] 3289 	inc	dptr
   0B0A E0            [24] 3290 	movx	a,@dptr
   0B0B FD            [12] 3291 	mov	r5,a
   0B0C 74 03         [12] 3292 	mov	a,#0x03
   0B0E 5D            [12] 3293 	anl	a,r5
   0B0F F5 D3         [12] 3294 	mov	_ADCCON1,a
                           3295 ;	../src/adc/src/adc_configure.c:58: ADCCON2 = (adc_config_options)      & ADC_CONFIG_OPTION_ADCCON2_WRITE_MASK;
   0B11 8E D2         [24] 3296 	mov	_ADCCON2,r6
                           3297 ;	../src/adc/src/adc_configure.c:59: ADCCON3 = (adc_config_options >> 8) & ADC_CONFIG_OPTION_ADCCON3_WRITE_MASK;
   0B13 74 E0         [12] 3298 	mov	a,#0xE0
   0B15 5D            [12] 3299 	anl	a,r5
   0B16 F5 D1         [12] 3300 	mov	_ADCCON3,a
   0B18 22            [24] 3301 	ret
                           3302 ;------------------------------------------------------------
                           3303 ;Allocation info for local variables in function 'adc_set_input_channel'
                           3304 ;------------------------------------------------------------
                           3305 ;adc_channel               Allocated with name '_adc_set_input_channel_adc_channel_1_183'
                           3306 ;------------------------------------------------------------
                           3307 ;	../src/adc/src/adc_set_input_channel.c:46: void adc_set_input_channel(adc_channel_t adc_channel)
                           3308 ;	-----------------------------------------
                           3309 ;	 function adc_set_input_channel
                           3310 ;	-----------------------------------------
   0B19                    3311 _adc_set_input_channel:
   0B19 E5 82         [12] 3312 	mov	a,dpl
                           3313 ;	../src/adc/src/adc_set_input_channel.c:49: adc_channel &= (ADCCON1_CHAN_SEL_MASK >> ADCCON1_CHAN_SEL_SHIFT);
   0B1B 90r00r5D      [24] 3314 	mov	dptr,#_adc_set_input_channel_adc_channel_1_183
   0B1E F0            [24] 3315 	movx	@dptr,a
   0B1F FF            [12] 3316 	mov	r7,a
   0B20 90r00r5D      [24] 3317 	mov	dptr,#_adc_set_input_channel_adc_channel_1_183
   0B23 74 0F         [12] 3318 	mov	a,#0x0F
   0B25 5F            [12] 3319 	anl	a,r7
   0B26 F0            [24] 3320 	movx	@dptr,a
                           3321 ;	../src/adc/src/adc_set_input_channel.c:52: ADCCON1 = (ADCCON1 & ~ADCCON1_CHAN_SEL_MASK) | (adc_channel << ADCCON1_CHAN_SEL_SHIFT);
   0B27 AF D3         [24] 3322 	mov	r7,_ADCCON1
   0B29 53 07 C3      [24] 3323 	anl	ar7,#0xC3
   0B2C 90r00r5D      [24] 3324 	mov	dptr,#_adc_set_input_channel_adc_channel_1_183
   0B2F E0            [24] 3325 	movx	a,@dptr
   0B30 25 E0         [12] 3326 	add	a,acc
   0B32 25 E0         [12] 3327 	add	a,acc
   0B34 4F            [12] 3328 	orl	a,r7
   0B35 F5 D3         [12] 3329 	mov	_ADCCON1,a
   0B37 22            [24] 3330 	ret
                           3331 ;------------------------------------------------------------
                           3332 ;Allocation info for local variables in function 'adc_start_single_conversion'
                           3333 ;------------------------------------------------------------
                           3334 ;adc_channel               Allocated with name '_adc_start_single_conversion_adc_channel_1_185'
                           3335 ;------------------------------------------------------------
                           3336 ;	../src/adc/src/adc_start_single_conversion.c:47: void adc_start_single_conversion(adc_channel_t adc_channel)
                           3337 ;	-----------------------------------------
                           3338 ;	 function adc_start_single_conversion
                           3339 ;	-----------------------------------------
   0B38                    3340 _adc_start_single_conversion:
   0B38 E5 82         [12] 3341 	mov	a,dpl
                           3342 ;	../src/adc/src/adc_start_single_conversion.c:49: adc_set_input_channel(adc_channel);
   0B3A 90r00r5E      [24] 3343 	mov	dptr,#_adc_start_single_conversion_adc_channel_1_185
   0B3D F0            [24] 3344 	movx	@dptr,a
   0B3E F5 82         [12] 3345 	mov	dpl,a
   0B40 12r0Br19      [24] 3346 	lcall	_adc_set_input_channel
                           3347 ;	../src/adc/src/adc_start_single_conversion.c:52: adc_power_up();
   0B43 43 D3 80      [24] 3348 	orl	_ADCCON1,#0x80
                           3349 ;	../src/adc/src/adc_start_single_conversion.c:53: nop(); nop(); nop(); nop(); //4 clock cycles must elapse before busy flag is set (datasheet v1.3, p. 165)
   0B46 00            [12] 3350 	nop 
   0B47 00            [12] 3351 	nop 
   0B48 00            [12] 3352 	nop 
   0B49 00            [12] 3353 	nop 
   0B4A 22            [24] 3354 	ret
                           3355 ;------------------------------------------------------------
                           3356 ;Allocation info for local variables in function 'adc_start_single_conversion_get_value'
                           3357 ;------------------------------------------------------------
                           3358 ;adc_channel               Allocated with name '_adc_start_single_conversion_get_value_adc_channel_1_187'
                           3359 ;------------------------------------------------------------
                           3360 ;	../src/adc/src/adc_start_single_conversion_get_value.c:48: uint16_t adc_start_single_conversion_get_value(adc_channel_t adc_channel)
                           3361 ;	-----------------------------------------
                           3362 ;	 function adc_start_single_conversion_get_value
                           3363 ;	-----------------------------------------
   0B4B                    3364 _adc_start_single_conversion_get_value:
   0B4B E5 82         [12] 3365 	mov	a,dpl
                           3366 ;	../src/adc/src/adc_start_single_conversion_get_value.c:50: adc_start_single_conversion(adc_channel);
   0B4D 90r00r5F      [24] 3367 	mov	dptr,#_adc_start_single_conversion_get_value_adc_channel_1_187
   0B50 F0            [24] 3368 	movx	@dptr,a
   0B51 F5 82         [12] 3369 	mov	dpl,a
   0B53 12r0Br38      [24] 3370 	lcall	_adc_start_single_conversion
                           3371 ;	../src/adc/src/adc_start_single_conversion_get_value.c:52: while(adc_is_conversion_in_progress());
   0B56                    3372 00101$:
   0B56 74 40         [12] 3373 	mov	a,#0x40
   0B58 55 D3         [12] 3374 	anl	a,_ADCCON1
   0B5A FF            [12] 3375 	mov	r7,a
   0B5B BF 40 02      [24] 3376 	cjne	r7,#0x40,00112$
   0B5E 80 F6         [24] 3377 	sjmp	00101$
   0B60                    3378 00112$:
                           3379 ;	../src/adc/src/adc_start_single_conversion_get_value.c:54: return adc_get_result();
   0B60 85 D5 82      [24] 3380 	mov	dpl,((_ADCDAT >> 0) & 0xFF)
   0B63 85 D4 83      [24] 3381 	mov	dph,((_ADCDAT >> 8) & 0xFF)
   0B66 22            [24] 3382 	ret
                           3383 ;------------------------------------------------------------
                           3384 ;Allocation info for local variables in function 'timer0_configure'
                           3385 ;------------------------------------------------------------
                           3386 ;t0_val                    Allocated with name '_timer0_configure_PARM_2'
                           3387 ;timer0_config_options     Allocated with name '_timer0_configure_timer0_config_options_1_190'
                           3388 ;------------------------------------------------------------
                           3389 ;	../src/timer0/src/timer0_configure.c:53: void timer0_configure(uint8_t timer0_config_options, uint16_t t0_val)
                           3390 ;	-----------------------------------------
                           3391 ;	 function timer0_configure
                           3392 ;	-----------------------------------------
   0B67                    3393 _timer0_configure:
   0B67 E5 82         [12] 3394 	mov	a,dpl
                           3395 ;	../src/timer0/src/timer0_configure.c:56: if((timer0_config_options & TMOD_MODE0_MASK) == TIMER0_CONFIG_OPTION_MODE_2_8_BIT_AUTO_RLD_TMR)
   0B69 90r00r62      [24] 3396 	mov	dptr,#_timer0_configure_timer0_config_options_1_190
   0B6C F0            [24] 3397 	movx	@dptr,a
   0B6D FF            [12] 3398 	mov	r7,a
   0B6E 74 03         [12] 3399 	mov	a,#0x03
   0B70 5F            [12] 3400 	anl	a,r7
   0B71 FE            [12] 3401 	mov	r6,a
   0B72 BE 02 0E      [24] 3402 	cjne	r6,#0x02,00102$
                           3403 ;	../src/timer0/src/timer0_configure.c:58: TH0 = (uint8_t)t0_val;
   0B75 90r00r60      [24] 3404 	mov	dptr,#_timer0_configure_PARM_2
   0B78 E0            [24] 3405 	movx	a,@dptr
   0B79 FD            [12] 3406 	mov	r5,a
   0B7A A3            [24] 3407 	inc	dptr
   0B7B E0            [24] 3408 	movx	a,@dptr
   0B7C FE            [12] 3409 	mov	r6,a
   0B7D 8D 8C         [24] 3410 	mov	_TH0,r5
                           3411 ;	../src/timer0/src/timer0_configure.c:59: TL0 = (uint8_t)t0_val;
   0B7F 8D 8A         [24] 3412 	mov	_TL0,r5
   0B81 80 0A         [24] 3413 	sjmp	00103$
   0B83                    3414 00102$:
                           3415 ;	../src/timer0/src/timer0_configure.c:63: timer0_set_t0_val(t0_val);
   0B83 90r00r60      [24] 3416 	mov	dptr,#_timer0_configure_PARM_2
   0B86 E0            [24] 3417 	movx	a,@dptr
   0B87 F5 8A         [12] 3418 	mov	((_T0 >> 0) & 0xFF),a
   0B89 A3            [24] 3419 	inc	dptr
   0B8A E0            [24] 3420 	movx	a,@dptr
   0B8B F5 8C         [12] 3421 	mov	((_T0 >> 8) & 0xFF),a
   0B8D                    3422 00103$:
                           3423 ;	../src/timer0/src/timer0_configure.c:67: TMOD = (TMOD & ~TIMER0_CONFIG_OPTION_TMOD_MASK) | (timer0_config_options & TIMER0_CONFIG_OPTION_TMOD_MASK);
   0B8D AE 89         [24] 3424 	mov	r6,_TMOD
   0B8F 53 06 F0      [24] 3425 	anl	ar6,#0xF0
   0B92 53 07 0F      [24] 3426 	anl	ar7,#0x0F
   0B95 EF            [12] 3427 	mov	a,r7
   0B96 4E            [12] 3428 	orl	a,r6
   0B97 F5 89         [12] 3429 	mov	_TMOD,a
   0B99 22            [24] 3430 	ret
                           3431 ;------------------------------------------------------------
                           3432 ;Allocation info for local variables in function 'timer1_configure'
                           3433 ;------------------------------------------------------------
                           3434 ;t1_val                    Allocated with name '_timer1_configure_PARM_2'
                           3435 ;timer1_config_options     Allocated with name '_timer1_configure_timer1_config_options_1_195'
                           3436 ;------------------------------------------------------------
                           3437 ;	../src/timer1/src/timer1_configure.c:53: void timer1_configure(uint8_t timer1_config_options, uint16_t t1_val)
                           3438 ;	-----------------------------------------
                           3439 ;	 function timer1_configure
                           3440 ;	-----------------------------------------
   0B9A                    3441 _timer1_configure:
   0B9A E5 82         [12] 3442 	mov	a,dpl
                           3443 ;	../src/timer1/src/timer1_configure.c:56: if((timer1_config_options & TMOD_MODE1_MASK) == TIMER1_CONFIG_OPTION_MODE_2_8_BIT_AUTO_RLD_TMR)
   0B9C 90r00r65      [24] 3444 	mov	dptr,#_timer1_configure_timer1_config_options_1_195
   0B9F F0            [24] 3445 	movx	@dptr,a
   0BA0 FF            [12] 3446 	mov	r7,a
   0BA1 74 30         [12] 3447 	mov	a,#0x30
   0BA3 5F            [12] 3448 	anl	a,r7
   0BA4 FE            [12] 3449 	mov	r6,a
   0BA5 BE 20 0E      [24] 3450 	cjne	r6,#0x20,00102$
                           3451 ;	../src/timer1/src/timer1_configure.c:58: TH1 = (uint8_t)t1_val;
   0BA8 90r00r63      [24] 3452 	mov	dptr,#_timer1_configure_PARM_2
   0BAB E0            [24] 3453 	movx	a,@dptr
   0BAC FD            [12] 3454 	mov	r5,a
   0BAD A3            [24] 3455 	inc	dptr
   0BAE E0            [24] 3456 	movx	a,@dptr
   0BAF FE            [12] 3457 	mov	r6,a
   0BB0 8D 8D         [24] 3458 	mov	_TH1,r5
                           3459 ;	../src/timer1/src/timer1_configure.c:59: TL1 = (uint8_t)t1_val;
   0BB2 8D 8B         [24] 3460 	mov	_TL1,r5
   0BB4 80 0A         [24] 3461 	sjmp	00103$
   0BB6                    3462 00102$:
                           3463 ;	../src/timer1/src/timer1_configure.c:63: timer1_set_t1_val(t1_val);
   0BB6 90r00r63      [24] 3464 	mov	dptr,#_timer1_configure_PARM_2
   0BB9 E0            [24] 3465 	movx	a,@dptr
   0BBA F5 8B         [12] 3466 	mov	((_T1 >> 0) & 0xFF),a
   0BBC A3            [24] 3467 	inc	dptr
   0BBD E0            [24] 3468 	movx	a,@dptr
   0BBE F5 8D         [12] 3469 	mov	((_T1 >> 8) & 0xFF),a
   0BC0                    3470 00103$:
                           3471 ;	../src/timer1/src/timer1_configure.c:67: TMOD = (TMOD & ~TIMER1_CONFIG_OPTION_TMOD_MASK) | (timer1_config_options & TIMER1_CONFIG_OPTION_TMOD_MASK);
   0BC0 AE 89         [24] 3472 	mov	r6,_TMOD
   0BC2 53 06 0F      [24] 3473 	anl	ar6,#0x0F
   0BC5 53 07 F0      [24] 3474 	anl	ar7,#0xF0
   0BC8 EF            [12] 3475 	mov	a,r7
   0BC9 4E            [12] 3476 	orl	a,r6
   0BCA F5 89         [12] 3477 	mov	_TMOD,a
   0BCC 22            [24] 3478 	ret
                           3479 ;------------------------------------------------------------
                           3480 ;Allocation info for local variables in function 'uart_configure_manual_baud_calc'
                           3481 ;------------------------------------------------------------
                           3482 ;s0rel_val_if_br_gen_or_th1_val_if_tmr1 Allocated with name '_uart_configure_manual_baud_calc_PARM_2'
                           3483 ;uart_config_options       Allocated with name '_uart_configure_manual_baud_calc_uart_config_options_1_205'
                           3484 ;------------------------------------------------------------
                           3485 ;	../src/uart/src/uart_configure_manual_baud_calc.c:55: void uart_configure_manual_baud_calc(uint8_t uart_config_options, uint16_t s0rel_val_if_br_gen_or_th1_val_if_tmr1)
                           3486 ;	-----------------------------------------
                           3487 ;	 function uart_configure_manual_baud_calc
                           3488 ;	-----------------------------------------
   0BCD                    3489 _uart_configure_manual_baud_calc:
   0BCD E5 82         [12] 3490 	mov	a,dpl
                           3491 ;	../src/uart/src/uart_configure_manual_baud_calc.c:58: if(uart_config_options & UART_CONFIG_OPTION_BIT_SMOD_SET)
   0BCF 90r00r68      [24] 3492 	mov	dptr,#_uart_configure_manual_baud_calc_uart_config_options_1_205
   0BD2 F0            [24] 3493 	movx	@dptr,a
   0BD3 FF            [12] 3494 	mov	r7,a
   0BD4 30 E2 05      [24] 3495 	jnb	acc.2,00102$
                           3496 ;	../src/uart/src/uart_configure_manual_baud_calc.c:60: reg_bits_set(PCON, PCON_SMOD);
   0BD7 43 87 80      [24] 3497 	orl	_PCON,#0x80
   0BDA 80 07         [24] 3498 	sjmp	00103$
   0BDC                    3499 00102$:
                           3500 ;	../src/uart/src/uart_configure_manual_baud_calc.c:64: reg_bits_clear(PCON, PCON_SMOD);
   0BDC AE 87         [24] 3501 	mov	r6,_PCON
   0BDE 74 7F         [12] 3502 	mov	a,#0x7F
   0BE0 5E            [12] 3503 	anl	a,r6
   0BE1 F5 87         [12] 3504 	mov	_PCON,a
   0BE3                    3505 00103$:
                           3506 ;	../src/uart/src/uart_configure_manual_baud_calc.c:68: if(((uart_config_options & UART_CONFIG_OPTION_MODE_MASK) == UART_CONFIG_OPTION_MODE_1_UART_8_BIT) ||
   0BE3 74 C0         [12] 3507 	mov	a,#0xC0
   0BE5 5F            [12] 3508 	anl	a,r7
   0BE6 FE            [12] 3509 	mov	r6,a
   0BE7 BE 40 02      [24] 3510 	cjne	r6,#0x40,00122$
   0BEA 80 07         [24] 3511 	sjmp	00107$
   0BEC                    3512 00122$:
                           3513 ;	../src/uart/src/uart_configure_manual_baud_calc.c:69: ((uart_config_options & UART_CONFIG_OPTION_MODE_MASK) == UART_CONFIG_OPTION_MODE_3_UART_9_BIT))
   0BEC 74 C0         [12] 3514 	mov	a,#0xC0
   0BEE 5F            [12] 3515 	anl	a,r7
   0BEF FE            [12] 3516 	mov	r6,a
   0BF0 BE C0 32      [24] 3517 	cjne	r6,#0xC0,00108$
   0BF3                    3518 00107$:
                           3519 ;	../src/uart/src/uart_configure_manual_baud_calc.c:72: if((uart_config_options & UART_CONFIG_OPTION_CLOCK_MASK) == UART_CONFIG_OPTION_CLOCK_FOR_MODES_1_3_USE_BR_GEN)
   0BF3 74 02         [12] 3520 	mov	a,#0x02
   0BF5 5F            [12] 3521 	anl	a,r7
   0BF6 FE            [12] 3522 	mov	r6,a
   0BF7 BE 02 0E      [24] 3523 	cjne	r6,#0x02,00105$
                           3524 ;	../src/uart/src/uart_configure_manual_baud_calc.c:74: S0REL = s0rel_val_if_br_gen_or_th1_val_if_tmr1; //set S0REL to the value requested
   0BFA 90r00r66      [24] 3525 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   0BFD E0            [24] 3526 	movx	a,@dptr
   0BFE F5 AA         [12] 3527 	mov	((_S0REL >> 0) & 0xFF),a
   0C00 A3            [24] 3528 	inc	dptr
   0C01 E0            [24] 3529 	movx	a,@dptr
   0C02 F5 BA         [12] 3530 	mov	((_S0REL >> 8) & 0xFF),a
                           3531 ;	../src/uart/src/uart_configure_manual_baud_calc.c:75: sbit_set(ADCON_SB_BD); //enable BR generator
   0C04 D2 DF         [12] 3532 	setb _ADCON_SB_BD 
   0C06 80 1D         [24] 3533 	sjmp	00108$
   0C08                    3534 00105$:
                           3535 ;	../src/uart/src/uart_configure_manual_baud_calc.c:79: sbit_clear(ADCON_SB_BD); //disable BR generator and use TMR1 overflow
   0C08 C2 DF         [12] 3536 	clr _ADCON_SB_BD 
                           3537 ;	../src/uart/src/uart_configure_manual_baud_calc.c:85: (uint8_t)s0rel_val_if_br_gen_or_th1_val_if_tmr1);
   0C0A 90r00r66      [24] 3538 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   0C0D E0            [24] 3539 	movx	a,@dptr
   0C0E FD            [12] 3540 	mov	r5,a
   0C0F A3            [24] 3541 	inc	dptr
   0C10 E0            [24] 3542 	movx	a,@dptr
   0C11 90r00r63      [24] 3543 	mov	dptr,#_timer1_configure_PARM_2
   0C14 ED            [12] 3544 	mov	a,r5
   0C15 F0            [24] 3545 	movx	@dptr,a
   0C16 E4            [12] 3546 	clr	a
   0C17 A3            [24] 3547 	inc	dptr
   0C18 F0            [24] 3548 	movx	@dptr,a
   0C19 75 82 20      [24] 3549 	mov	dpl,#0x20
   0C1C C0 07         [24] 3550 	push	ar7
   0C1E 12r0Br9A      [24] 3551 	lcall	_timer1_configure
   0C21 D0 07         [24] 3552 	pop	ar7
                           3553 ;	../src/uart/src/uart_configure_manual_baud_calc.c:87: timer1_run(); //enable the timer
   0C23 D2 8E         [12] 3554 	setb _TCON_SB_TR1 
   0C25                    3555 00108$:
                           3556 ;	../src/uart/src/uart_configure_manual_baud_calc.c:92: S0CON = uart_config_options & UART_CONFIG_OPTION_S0CON_MASK;
   0C25 74 F0         [12] 3557 	mov	a,#0xF0
   0C27 5F            [12] 3558 	anl	a,r7
   0C28 F5 98         [12] 3559 	mov	_S0CON,a
   0C2A 22            [24] 3560 	ret
                           3561 ;------------------------------------------------------------
                           3562 ;Allocation info for local variables in function 'uart_calc_actual_baud_rate_from_s0rel'
                           3563 ;------------------------------------------------------------
                           3564 ;smod_bit_value            Allocated with name '_uart_calc_actual_baud_rate_from_s0rel_PARM_2'
                           3565 ;s0rel_reg_value           Allocated with name '_uart_calc_actual_baud_rate_from_s0rel_s0rel_reg_value_1_212'
                           3566 ;------------------------------------------------------------
                           3567 ;	../src/uart/src/uart_calc_actual_baud_rate_from_s0rel.c:48: uint32_t uart_calc_actual_baud_rate_from_s0rel(uint16_t s0rel_reg_value, bool smod_bit_value)
                           3568 ;	-----------------------------------------
                           3569 ;	 function uart_calc_actual_baud_rate_from_s0rel
                           3570 ;	-----------------------------------------
   0C2B                    3571 _uart_calc_actual_baud_rate_from_s0rel:
   0C2B AF 83         [24] 3572 	mov	r7,dph
   0C2D E5 82         [12] 3573 	mov	a,dpl
   0C2F 90r00r6A      [24] 3574 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_s0rel_reg_value_1_212
   0C32 F0            [24] 3575 	movx	@dptr,a
   0C33 EF            [12] 3576 	mov	a,r7
   0C34 A3            [24] 3577 	inc	dptr
   0C35 F0            [24] 3578 	movx	@dptr,a
                           3579 ;	../src/uart/src/uart_calc_actual_baud_rate_from_s0rel.c:57: return (uint32_t)(((((uint32_t)(2 * ((smod_bit_value != 0) ? 2 : 1) * pwr_clk_mgmt_get_cclk_freq_in_hz())) / ((uint32_t)(64 * (1024 - s0rel_reg_value)))) + 1) / 2);
   0C36 90r00r69      [24] 3580 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_PARM_2
   0C39 E0            [24] 3581 	movx	a,@dptr
   0C3A FF            [12] 3582 	mov	r7,a
   0C3B 60 04         [24] 3583 	jz	00103$
   0C3D 7F 02         [12] 3584 	mov	r7,#0x02
   0C3F 80 02         [24] 3585 	sjmp	00104$
   0C41                    3586 00103$:
   0C41 7F 01         [12] 3587 	mov	r7,#0x01
   0C43                    3588 00104$:
   0C43 EF            [12] 3589 	mov	a,r7
   0C44 75 F0 02      [24] 3590 	mov	b,#0x02
   0C47 A4            [48] 3591 	mul	ab
   0C48 FF            [12] 3592 	mov	r7,a
   0C49 AE F0         [24] 3593 	mov	r6,b
   0C4B C0 07         [24] 3594 	push	ar7
   0C4D C0 06         [24] 3595 	push	ar6
   0C4F 12r09r42      [24] 3596 	lcall	_pwr_clk_mgmt_get_cclk_freq_in_hz
   0C52 AA 82         [24] 3597 	mov	r2,dpl
   0C54 AB 83         [24] 3598 	mov	r3,dph
   0C56 AC F0         [24] 3599 	mov	r4,b
   0C58 FD            [12] 3600 	mov	r5,a
   0C59 D0 06         [24] 3601 	pop	ar6
   0C5B D0 07         [24] 3602 	pop	ar7
   0C5D 8F 00         [24] 3603 	mov	ar0,r7
   0C5F EE            [12] 3604 	mov	a,r6
   0C60 F9            [12] 3605 	mov	r1,a
   0C61 33            [12] 3606 	rlc	a
   0C62 95 E0         [12] 3607 	subb	a,acc
   0C64 FE            [12] 3608 	mov	r6,a
   0C65 FF            [12] 3609 	mov	r7,a
   0C66 90r00r00      [24] 3610 	mov	dptr,#__mullong_PARM_2
   0C69 EA            [12] 3611 	mov	a,r2
   0C6A F0            [24] 3612 	movx	@dptr,a
   0C6B EB            [12] 3613 	mov	a,r3
   0C6C A3            [24] 3614 	inc	dptr
   0C6D F0            [24] 3615 	movx	@dptr,a
   0C6E EC            [12] 3616 	mov	a,r4
   0C6F A3            [24] 3617 	inc	dptr
   0C70 F0            [24] 3618 	movx	@dptr,a
   0C71 ED            [12] 3619 	mov	a,r5
   0C72 A3            [24] 3620 	inc	dptr
   0C73 F0            [24] 3621 	movx	@dptr,a
   0C74 88 82         [24] 3622 	mov	dpl,r0
   0C76 89 83         [24] 3623 	mov	dph,r1
   0C78 8E F0         [24] 3624 	mov	b,r6
   0C7A EF            [12] 3625 	mov	a,r7
   0C7B 12r00r00      [24] 3626 	lcall	__mullong
   0C7E AC 82         [24] 3627 	mov	r4,dpl
   0C80 AD 83         [24] 3628 	mov	r5,dph
   0C82 AE F0         [24] 3629 	mov	r6,b
   0C84 FF            [12] 3630 	mov	r7,a
   0C85 90r00r6A      [24] 3631 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_s0rel_reg_value_1_212
   0C88 E0            [24] 3632 	movx	a,@dptr
   0C89 FA            [12] 3633 	mov	r2,a
   0C8A A3            [24] 3634 	inc	dptr
   0C8B E0            [24] 3635 	movx	a,@dptr
   0C8C FB            [12] 3636 	mov	r3,a
   0C8D E4            [12] 3637 	clr	a
   0C8E C3            [12] 3638 	clr	c
   0C8F 9A            [12] 3639 	subb	a,r2
   0C90 FA            [12] 3640 	mov	r2,a
   0C91 74 04         [12] 3641 	mov	a,#0x04
   0C93 9B            [12] 3642 	subb	a,r3
   0C94 54 03         [12] 3643 	anl	a,#0x03
   0C96 A2 E0         [12] 3644 	mov	c,acc.0
   0C98 CA            [12] 3645 	xch	a,r2
   0C99 13            [12] 3646 	rrc	a
   0C9A CA            [12] 3647 	xch	a,r2
   0C9B 13            [12] 3648 	rrc	a
   0C9C A2 E0         [12] 3649 	mov	c,acc.0
   0C9E CA            [12] 3650 	xch	a,r2
   0C9F 13            [12] 3651 	rrc	a
   0CA0 CA            [12] 3652 	xch	a,r2
   0CA1 13            [12] 3653 	rrc	a
   0CA2 CA            [12] 3654 	xch	a,r2
   0CA3 FB            [12] 3655 	mov	r3,a
   0CA4 90r00r00      [24] 3656 	mov	dptr,#__divulong_PARM_2
   0CA7 EA            [12] 3657 	mov	a,r2
   0CA8 F0            [24] 3658 	movx	@dptr,a
   0CA9 EB            [12] 3659 	mov	a,r3
   0CAA A3            [24] 3660 	inc	dptr
   0CAB F0            [24] 3661 	movx	@dptr,a
   0CAC E4            [12] 3662 	clr	a
   0CAD A3            [24] 3663 	inc	dptr
   0CAE F0            [24] 3664 	movx	@dptr,a
   0CAF E4            [12] 3665 	clr	a
   0CB0 A3            [24] 3666 	inc	dptr
   0CB1 F0            [24] 3667 	movx	@dptr,a
   0CB2 8C 82         [24] 3668 	mov	dpl,r4
   0CB4 8D 83         [24] 3669 	mov	dph,r5
   0CB6 8E F0         [24] 3670 	mov	b,r6
   0CB8 EF            [12] 3671 	mov	a,r7
   0CB9 12r00r00      [24] 3672 	lcall	__divulong
   0CBC AC 82         [24] 3673 	mov	r4,dpl
   0CBE AD 83         [24] 3674 	mov	r5,dph
   0CC0 AE F0         [24] 3675 	mov	r6,b
   0CC2 FF            [12] 3676 	mov	r7,a
   0CC3 0C            [12] 3677 	inc	r4
   0CC4 BC 00 09      [24] 3678 	cjne	r4,#0x00,00109$
   0CC7 0D            [12] 3679 	inc	r5
   0CC8 BD 00 05      [24] 3680 	cjne	r5,#0x00,00109$
   0CCB 0E            [12] 3681 	inc	r6
   0CCC BE 00 01      [24] 3682 	cjne	r6,#0x00,00109$
   0CCF 0F            [12] 3683 	inc	r7
   0CD0                    3684 00109$:
   0CD0 EF            [12] 3685 	mov	a,r7
   0CD1 C3            [12] 3686 	clr	c
   0CD2 13            [12] 3687 	rrc	a
   0CD3 FF            [12] 3688 	mov	r7,a
   0CD4 EE            [12] 3689 	mov	a,r6
   0CD5 13            [12] 3690 	rrc	a
   0CD6 FE            [12] 3691 	mov	r6,a
   0CD7 ED            [12] 3692 	mov	a,r5
   0CD8 13            [12] 3693 	rrc	a
   0CD9 FD            [12] 3694 	mov	r5,a
   0CDA EC            [12] 3695 	mov	a,r4
   0CDB 13            [12] 3696 	rrc	a
   0CDC F5 82         [12] 3697 	mov	dpl,a
   0CDE 8D 83         [24] 3698 	mov	dph,r5
   0CE0 8E F0         [24] 3699 	mov	b,r6
   0CE2 EF            [12] 3700 	mov	a,r7
   0CE3 22            [24] 3701 	ret
                           3702 ;------------------------------------------------------------
                           3703 ;Allocation info for local variables in function 'uart_calc_actual_baud_rate_from_th1'
                           3704 ;------------------------------------------------------------
                           3705 ;smod_bit_value            Allocated with name '_uart_calc_actual_baud_rate_from_th1_PARM_2'
                           3706 ;th1_reg_value             Allocated with name '_uart_calc_actual_baud_rate_from_th1_th1_reg_value_1_214'
                           3707 ;------------------------------------------------------------
                           3708 ;	../src/uart/src/uart_calc_actual_baud_rate_from_th1.c:48: uint32_t uart_calc_actual_baud_rate_from_th1(uint8_t th1_reg_value, bool smod_bit_value)
                           3709 ;	-----------------------------------------
                           3710 ;	 function uart_calc_actual_baud_rate_from_th1
                           3711 ;	-----------------------------------------
   0CE4                    3712 _uart_calc_actual_baud_rate_from_th1:
   0CE4 E5 82         [12] 3713 	mov	a,dpl
   0CE6 90r00r6D      [24] 3714 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_th1_reg_value_1_214
   0CE9 F0            [24] 3715 	movx	@dptr,a
                           3716 ;	../src/uart/src/uart_calc_actual_baud_rate_from_th1.c:57: return (uint32_t)(((((uint32_t)(2 * ((smod_bit_value != 0) ? 2 : 1) * pwr_clk_mgmt_get_cclk_freq_in_hz())) / ((uint32_t)(384 * (256 - th1_reg_value)))) + 1) / 2);
   0CEA 90r00r6C      [24] 3717 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_PARM_2
   0CED E0            [24] 3718 	movx	a,@dptr
   0CEE FF            [12] 3719 	mov	r7,a
   0CEF 60 04         [24] 3720 	jz	00103$
   0CF1 7F 02         [12] 3721 	mov	r7,#0x02
   0CF3 80 02         [24] 3722 	sjmp	00104$
   0CF5                    3723 00103$:
   0CF5 7F 01         [12] 3724 	mov	r7,#0x01
   0CF7                    3725 00104$:
   0CF7 EF            [12] 3726 	mov	a,r7
   0CF8 75 F0 02      [24] 3727 	mov	b,#0x02
   0CFB A4            [48] 3728 	mul	ab
   0CFC FF            [12] 3729 	mov	r7,a
   0CFD AE F0         [24] 3730 	mov	r6,b
   0CFF C0 07         [24] 3731 	push	ar7
   0D01 C0 06         [24] 3732 	push	ar6
   0D03 12r09r42      [24] 3733 	lcall	_pwr_clk_mgmt_get_cclk_freq_in_hz
   0D06 AA 82         [24] 3734 	mov	r2,dpl
   0D08 AB 83         [24] 3735 	mov	r3,dph
   0D0A AC F0         [24] 3736 	mov	r4,b
   0D0C FD            [12] 3737 	mov	r5,a
   0D0D D0 06         [24] 3738 	pop	ar6
   0D0F D0 07         [24] 3739 	pop	ar7
   0D11 8F 00         [24] 3740 	mov	ar0,r7
   0D13 EE            [12] 3741 	mov	a,r6
   0D14 F9            [12] 3742 	mov	r1,a
   0D15 33            [12] 3743 	rlc	a
   0D16 95 E0         [12] 3744 	subb	a,acc
   0D18 FE            [12] 3745 	mov	r6,a
   0D19 FF            [12] 3746 	mov	r7,a
   0D1A 90r00r00      [24] 3747 	mov	dptr,#__mullong_PARM_2
   0D1D EA            [12] 3748 	mov	a,r2
   0D1E F0            [24] 3749 	movx	@dptr,a
   0D1F EB            [12] 3750 	mov	a,r3
   0D20 A3            [24] 3751 	inc	dptr
   0D21 F0            [24] 3752 	movx	@dptr,a
   0D22 EC            [12] 3753 	mov	a,r4
   0D23 A3            [24] 3754 	inc	dptr
   0D24 F0            [24] 3755 	movx	@dptr,a
   0D25 ED            [12] 3756 	mov	a,r5
   0D26 A3            [24] 3757 	inc	dptr
   0D27 F0            [24] 3758 	movx	@dptr,a
   0D28 88 82         [24] 3759 	mov	dpl,r0
   0D2A 89 83         [24] 3760 	mov	dph,r1
   0D2C 8E F0         [24] 3761 	mov	b,r6
   0D2E EF            [12] 3762 	mov	a,r7
   0D2F 12r00r00      [24] 3763 	lcall	__mullong
   0D32 AC 82         [24] 3764 	mov	r4,dpl
   0D34 AD 83         [24] 3765 	mov	r5,dph
   0D36 AE F0         [24] 3766 	mov	r6,b
   0D38 FF            [12] 3767 	mov	r7,a
   0D39 90r00r6D      [24] 3768 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_th1_reg_value_1_214
   0D3C E0            [24] 3769 	movx	a,@dptr
   0D3D FB            [12] 3770 	mov	r3,a
   0D3E 7A 00         [12] 3771 	mov	r2,#0x00
   0D40 90r00r00      [24] 3772 	mov	dptr,#__mulint_PARM_2
   0D43 E4            [12] 3773 	clr	a
   0D44 C3            [12] 3774 	clr	c
   0D45 9B            [12] 3775 	subb	a,r3
   0D46 F0            [24] 3776 	movx	@dptr,a
   0D47 74 01         [12] 3777 	mov	a,#0x01
   0D49 9A            [12] 3778 	subb	a,r2
   0D4A A3            [24] 3779 	inc	dptr
   0D4B F0            [24] 3780 	movx	@dptr,a
   0D4C 90 01 80      [24] 3781 	mov	dptr,#0x0180
   0D4F C0 07         [24] 3782 	push	ar7
   0D51 C0 06         [24] 3783 	push	ar6
   0D53 C0 05         [24] 3784 	push	ar5
   0D55 C0 04         [24] 3785 	push	ar4
   0D57 12r00r00      [24] 3786 	lcall	__mulint
   0D5A AA 82         [24] 3787 	mov	r2,dpl
   0D5C AB 83         [24] 3788 	mov	r3,dph
   0D5E D0 04         [24] 3789 	pop	ar4
   0D60 D0 05         [24] 3790 	pop	ar5
   0D62 D0 06         [24] 3791 	pop	ar6
   0D64 D0 07         [24] 3792 	pop	ar7
   0D66 90r00r00      [24] 3793 	mov	dptr,#__divulong_PARM_2
   0D69 EA            [12] 3794 	mov	a,r2
   0D6A F0            [24] 3795 	movx	@dptr,a
   0D6B EB            [12] 3796 	mov	a,r3
   0D6C A3            [24] 3797 	inc	dptr
   0D6D F0            [24] 3798 	movx	@dptr,a
   0D6E EB            [12] 3799 	mov	a,r3
   0D6F 33            [12] 3800 	rlc	a
   0D70 95 E0         [12] 3801 	subb	a,acc
   0D72 A3            [24] 3802 	inc	dptr
   0D73 F0            [24] 3803 	movx	@dptr,a
   0D74 A3            [24] 3804 	inc	dptr
   0D75 F0            [24] 3805 	movx	@dptr,a
   0D76 8C 82         [24] 3806 	mov	dpl,r4
   0D78 8D 83         [24] 3807 	mov	dph,r5
   0D7A 8E F0         [24] 3808 	mov	b,r6
   0D7C EF            [12] 3809 	mov	a,r7
   0D7D 12r00r00      [24] 3810 	lcall	__divulong
   0D80 AC 82         [24] 3811 	mov	r4,dpl
   0D82 AD 83         [24] 3812 	mov	r5,dph
   0D84 AE F0         [24] 3813 	mov	r6,b
   0D86 FF            [12] 3814 	mov	r7,a
   0D87 0C            [12] 3815 	inc	r4
   0D88 BC 00 09      [24] 3816 	cjne	r4,#0x00,00109$
   0D8B 0D            [12] 3817 	inc	r5
   0D8C BD 00 05      [24] 3818 	cjne	r5,#0x00,00109$
   0D8F 0E            [12] 3819 	inc	r6
   0D90 BE 00 01      [24] 3820 	cjne	r6,#0x00,00109$
   0D93 0F            [12] 3821 	inc	r7
   0D94                    3822 00109$:
   0D94 EF            [12] 3823 	mov	a,r7
   0D95 C3            [12] 3824 	clr	c
   0D96 13            [12] 3825 	rrc	a
   0D97 FF            [12] 3826 	mov	r7,a
   0D98 EE            [12] 3827 	mov	a,r6
   0D99 13            [12] 3828 	rrc	a
   0D9A FE            [12] 3829 	mov	r6,a
   0D9B ED            [12] 3830 	mov	a,r5
   0D9C 13            [12] 3831 	rrc	a
   0D9D FD            [12] 3832 	mov	r5,a
   0D9E EC            [12] 3833 	mov	a,r4
   0D9F 13            [12] 3834 	rrc	a
   0DA0 F5 82         [12] 3835 	mov	dpl,a
   0DA2 8D 83         [24] 3836 	mov	dph,r5
   0DA4 8E F0         [24] 3837 	mov	b,r6
   0DA6 EF            [12] 3838 	mov	a,r7
   0DA7 22            [24] 3839 	ret
                           3840 ;------------------------------------------------------------
                           3841 ;Allocation info for local variables in function 'uart_calc_s0rel_value'
                           3842 ;------------------------------------------------------------
                           3843 ;smod_bit_value            Allocated with name '_uart_calc_s0rel_value_PARM_2'
                           3844 ;desired_baud_rate         Allocated with name '_uart_calc_s0rel_value_desired_baud_rate_1_216'
                           3845 ;------------------------------------------------------------
                           3846 ;	../src/uart/src/uart_calc_s0rel_value.c:48: uint16_t uart_calc_s0rel_value(uint32_t desired_baud_rate, bool smod_bit_value)
                           3847 ;	-----------------------------------------
                           3848 ;	 function uart_calc_s0rel_value
                           3849 ;	-----------------------------------------
   0DA8                    3850 _uart_calc_s0rel_value:
   0DA8 AF 82         [24] 3851 	mov	r7,dpl
   0DAA AE 83         [24] 3852 	mov	r6,dph
   0DAC AD F0         [24] 3853 	mov	r5,b
   0DAE FC            [12] 3854 	mov	r4,a
   0DAF 90r00r6F      [24] 3855 	mov	dptr,#_uart_calc_s0rel_value_desired_baud_rate_1_216
   0DB2 EF            [12] 3856 	mov	a,r7
   0DB3 F0            [24] 3857 	movx	@dptr,a
   0DB4 EE            [12] 3858 	mov	a,r6
   0DB5 A3            [24] 3859 	inc	dptr
   0DB6 F0            [24] 3860 	movx	@dptr,a
   0DB7 ED            [12] 3861 	mov	a,r5
   0DB8 A3            [24] 3862 	inc	dptr
   0DB9 F0            [24] 3863 	movx	@dptr,a
   0DBA EC            [12] 3864 	mov	a,r4
   0DBB A3            [24] 3865 	inc	dptr
   0DBC F0            [24] 3866 	movx	@dptr,a
                           3867 ;	../src/uart/src/uart_calc_s0rel_value.c:57: return (uint16_t)(1024 - (((((uint32_t)(2 * ((smod_bit_value != 0) ? 2 : 1) * pwr_clk_mgmt_get_cclk_freq_in_hz())) / ((uint32_t)(64 * desired_baud_rate))) + 1) / 2));
   0DBD 90r00r6E      [24] 3868 	mov	dptr,#_uart_calc_s0rel_value_PARM_2
   0DC0 E0            [24] 3869 	movx	a,@dptr
   0DC1 FF            [12] 3870 	mov	r7,a
   0DC2 60 04         [24] 3871 	jz	00103$
   0DC4 7F 02         [12] 3872 	mov	r7,#0x02
   0DC6 80 02         [24] 3873 	sjmp	00104$
   0DC8                    3874 00103$:
   0DC8 7F 01         [12] 3875 	mov	r7,#0x01
   0DCA                    3876 00104$:
   0DCA EF            [12] 3877 	mov	a,r7
   0DCB 75 F0 02      [24] 3878 	mov	b,#0x02
   0DCE A4            [48] 3879 	mul	ab
   0DCF FF            [12] 3880 	mov	r7,a
   0DD0 AE F0         [24] 3881 	mov	r6,b
   0DD2 C0 07         [24] 3882 	push	ar7
   0DD4 C0 06         [24] 3883 	push	ar6
   0DD6 12r09r42      [24] 3884 	lcall	_pwr_clk_mgmt_get_cclk_freq_in_hz
   0DD9 AA 82         [24] 3885 	mov	r2,dpl
   0DDB AB 83         [24] 3886 	mov	r3,dph
   0DDD AC F0         [24] 3887 	mov	r4,b
   0DDF FD            [12] 3888 	mov	r5,a
   0DE0 D0 06         [24] 3889 	pop	ar6
   0DE2 D0 07         [24] 3890 	pop	ar7
   0DE4 8F 00         [24] 3891 	mov	ar0,r7
   0DE6 EE            [12] 3892 	mov	a,r6
   0DE7 F9            [12] 3893 	mov	r1,a
   0DE8 33            [12] 3894 	rlc	a
   0DE9 95 E0         [12] 3895 	subb	a,acc
   0DEB FE            [12] 3896 	mov	r6,a
   0DEC FF            [12] 3897 	mov	r7,a
   0DED 90r00r00      [24] 3898 	mov	dptr,#__mullong_PARM_2
   0DF0 EA            [12] 3899 	mov	a,r2
   0DF1 F0            [24] 3900 	movx	@dptr,a
   0DF2 EB            [12] 3901 	mov	a,r3
   0DF3 A3            [24] 3902 	inc	dptr
   0DF4 F0            [24] 3903 	movx	@dptr,a
   0DF5 EC            [12] 3904 	mov	a,r4
   0DF6 A3            [24] 3905 	inc	dptr
   0DF7 F0            [24] 3906 	movx	@dptr,a
   0DF8 ED            [12] 3907 	mov	a,r5
   0DF9 A3            [24] 3908 	inc	dptr
   0DFA F0            [24] 3909 	movx	@dptr,a
   0DFB 88 82         [24] 3910 	mov	dpl,r0
   0DFD 89 83         [24] 3911 	mov	dph,r1
   0DFF 8E F0         [24] 3912 	mov	b,r6
   0E01 EF            [12] 3913 	mov	a,r7
   0E02 12r00r00      [24] 3914 	lcall	__mullong
   0E05 AC 82         [24] 3915 	mov	r4,dpl
   0E07 AD 83         [24] 3916 	mov	r5,dph
   0E09 AE F0         [24] 3917 	mov	r6,b
   0E0B FF            [12] 3918 	mov	r7,a
   0E0C 90r00r6F      [24] 3919 	mov	dptr,#_uart_calc_s0rel_value_desired_baud_rate_1_216
   0E0F E0            [24] 3920 	movx	a,@dptr
   0E10 F8            [12] 3921 	mov	r0,a
   0E11 A3            [24] 3922 	inc	dptr
   0E12 E0            [24] 3923 	movx	a,@dptr
   0E13 F9            [12] 3924 	mov	r1,a
   0E14 A3            [24] 3925 	inc	dptr
   0E15 E0            [24] 3926 	movx	a,@dptr
   0E16 FA            [12] 3927 	mov	r2,a
   0E17 A3            [24] 3928 	inc	dptr
   0E18 E0            [24] 3929 	movx	a,@dptr
   0E19 54 03         [12] 3930 	anl	a,#0x03
   0E1B A2 E0         [12] 3931 	mov	c,acc.0
   0E1D CA            [12] 3932 	xch	a,r2
   0E1E 13            [12] 3933 	rrc	a
   0E1F CA            [12] 3934 	xch	a,r2
   0E20 13            [12] 3935 	rrc	a
   0E21 A2 E0         [12] 3936 	mov	c,acc.0
   0E23 CA            [12] 3937 	xch	a,r2
   0E24 13            [12] 3938 	rrc	a
   0E25 CA            [12] 3939 	xch	a,r2
   0E26 13            [12] 3940 	rrc	a
   0E27 CA            [12] 3941 	xch	a,r2
   0E28 FB            [12] 3942 	mov	r3,a
   0E29 E9            [12] 3943 	mov	a,r1
   0E2A 03            [12] 3944 	rr	a
   0E2B 03            [12] 3945 	rr	a
   0E2C 54 3F         [12] 3946 	anl	a,#0x3F
   0E2E 4A            [12] 3947 	orl	a,r2
   0E2F FA            [12] 3948 	mov	r2,a
   0E30 E9            [12] 3949 	mov	a,r1
   0E31 54 03         [12] 3950 	anl	a,#0x03
   0E33 A2 E0         [12] 3951 	mov	c,acc.0
   0E35 C8            [12] 3952 	xch	a,r0
   0E36 13            [12] 3953 	rrc	a
   0E37 C8            [12] 3954 	xch	a,r0
   0E38 13            [12] 3955 	rrc	a
   0E39 A2 E0         [12] 3956 	mov	c,acc.0
   0E3B C8            [12] 3957 	xch	a,r0
   0E3C 13            [12] 3958 	rrc	a
   0E3D C8            [12] 3959 	xch	a,r0
   0E3E 13            [12] 3960 	rrc	a
   0E3F C8            [12] 3961 	xch	a,r0
   0E40 F9            [12] 3962 	mov	r1,a
   0E41 90r00r00      [24] 3963 	mov	dptr,#__divulong_PARM_2
   0E44 E8            [12] 3964 	mov	a,r0
   0E45 F0            [24] 3965 	movx	@dptr,a
   0E46 E9            [12] 3966 	mov	a,r1
   0E47 A3            [24] 3967 	inc	dptr
   0E48 F0            [24] 3968 	movx	@dptr,a
   0E49 EA            [12] 3969 	mov	a,r2
   0E4A A3            [24] 3970 	inc	dptr
   0E4B F0            [24] 3971 	movx	@dptr,a
   0E4C EB            [12] 3972 	mov	a,r3
   0E4D A3            [24] 3973 	inc	dptr
   0E4E F0            [24] 3974 	movx	@dptr,a
   0E4F 8C 82         [24] 3975 	mov	dpl,r4
   0E51 8D 83         [24] 3976 	mov	dph,r5
   0E53 8E F0         [24] 3977 	mov	b,r6
   0E55 EF            [12] 3978 	mov	a,r7
   0E56 12r00r00      [24] 3979 	lcall	__divulong
   0E59 AC 82         [24] 3980 	mov	r4,dpl
   0E5B AD 83         [24] 3981 	mov	r5,dph
   0E5D AE F0         [24] 3982 	mov	r6,b
   0E5F FF            [12] 3983 	mov	r7,a
   0E60 0C            [12] 3984 	inc	r4
   0E61 BC 00 09      [24] 3985 	cjne	r4,#0x00,00109$
   0E64 0D            [12] 3986 	inc	r5
   0E65 BD 00 05      [24] 3987 	cjne	r5,#0x00,00109$
   0E68 0E            [12] 3988 	inc	r6
   0E69 BE 00 01      [24] 3989 	cjne	r6,#0x00,00109$
   0E6C 0F            [12] 3990 	inc	r7
   0E6D                    3991 00109$:
   0E6D EF            [12] 3992 	mov	a,r7
   0E6E C3            [12] 3993 	clr	c
   0E6F 13            [12] 3994 	rrc	a
   0E70 FF            [12] 3995 	mov	r7,a
   0E71 EE            [12] 3996 	mov	a,r6
   0E72 13            [12] 3997 	rrc	a
   0E73 FE            [12] 3998 	mov	r6,a
   0E74 ED            [12] 3999 	mov	a,r5
   0E75 13            [12] 4000 	rrc	a
   0E76 FD            [12] 4001 	mov	r5,a
   0E77 EC            [12] 4002 	mov	a,r4
   0E78 13            [12] 4003 	rrc	a
   0E79 FC            [12] 4004 	mov	r4,a
   0E7A E4            [12] 4005 	clr	a
   0E7B C3            [12] 4006 	clr	c
   0E7C 9C            [12] 4007 	subb	a,r4
   0E7D FC            [12] 4008 	mov	r4,a
   0E7E 74 04         [12] 4009 	mov	a,#0x04
   0E80 9D            [12] 4010 	subb	a,r5
   0E81 FD            [12] 4011 	mov	r5,a
   0E82 E4            [12] 4012 	clr	a
   0E83 9E            [12] 4013 	subb	a,r6
   0E84 E4            [12] 4014 	clr	a
   0E85 9F            [12] 4015 	subb	a,r7
   0E86 8C 82         [24] 4016 	mov	dpl,r4
   0E88 8D 83         [24] 4017 	mov	dph,r5
   0E8A 22            [24] 4018 	ret
                           4019 ;------------------------------------------------------------
                           4020 ;Allocation info for local variables in function 'uart_calc_th1_value'
                           4021 ;------------------------------------------------------------
                           4022 ;smod_bit_value            Allocated with name '_uart_calc_th1_value_PARM_2'
                           4023 ;desired_baud_rate         Allocated with name '_uart_calc_th1_value_desired_baud_rate_1_218'
                           4024 ;------------------------------------------------------------
                           4025 ;	../src/uart/src/uart_calc_th1_value.c:48: uint8_t uart_calc_th1_value(uint32_t desired_baud_rate, bool smod_bit_value)
                           4026 ;	-----------------------------------------
                           4027 ;	 function uart_calc_th1_value
                           4028 ;	-----------------------------------------
   0E8B                    4029 _uart_calc_th1_value:
   0E8B AF 82         [24] 4030 	mov	r7,dpl
   0E8D AE 83         [24] 4031 	mov	r6,dph
   0E8F AD F0         [24] 4032 	mov	r5,b
   0E91 FC            [12] 4033 	mov	r4,a
   0E92 90r00r74      [24] 4034 	mov	dptr,#_uart_calc_th1_value_desired_baud_rate_1_218
   0E95 EF            [12] 4035 	mov	a,r7
   0E96 F0            [24] 4036 	movx	@dptr,a
   0E97 EE            [12] 4037 	mov	a,r6
   0E98 A3            [24] 4038 	inc	dptr
   0E99 F0            [24] 4039 	movx	@dptr,a
   0E9A ED            [12] 4040 	mov	a,r5
   0E9B A3            [24] 4041 	inc	dptr
   0E9C F0            [24] 4042 	movx	@dptr,a
   0E9D EC            [12] 4043 	mov	a,r4
   0E9E A3            [24] 4044 	inc	dptr
   0E9F F0            [24] 4045 	movx	@dptr,a
                           4046 ;	../src/uart/src/uart_calc_th1_value.c:57: return (uint8_t)(256 - (((((uint32_t)(2 * ((smod_bit_value != 0) ? 2 : 1) * pwr_clk_mgmt_get_cclk_freq_in_hz())) / ((uint32_t)(384 * desired_baud_rate))) + 1) / 2));
   0EA0 90r00r73      [24] 4047 	mov	dptr,#_uart_calc_th1_value_PARM_2
   0EA3 E0            [24] 4048 	movx	a,@dptr
   0EA4 FF            [12] 4049 	mov	r7,a
   0EA5 60 04         [24] 4050 	jz	00103$
   0EA7 7F 02         [12] 4051 	mov	r7,#0x02
   0EA9 80 02         [24] 4052 	sjmp	00104$
   0EAB                    4053 00103$:
   0EAB 7F 01         [12] 4054 	mov	r7,#0x01
   0EAD                    4055 00104$:
   0EAD EF            [12] 4056 	mov	a,r7
   0EAE 75 F0 02      [24] 4057 	mov	b,#0x02
   0EB1 A4            [48] 4058 	mul	ab
   0EB2 FF            [12] 4059 	mov	r7,a
   0EB3 AE F0         [24] 4060 	mov	r6,b
   0EB5 C0 07         [24] 4061 	push	ar7
   0EB7 C0 06         [24] 4062 	push	ar6
   0EB9 12r09r42      [24] 4063 	lcall	_pwr_clk_mgmt_get_cclk_freq_in_hz
   0EBC AA 82         [24] 4064 	mov	r2,dpl
   0EBE AB 83         [24] 4065 	mov	r3,dph
   0EC0 AC F0         [24] 4066 	mov	r4,b
   0EC2 FD            [12] 4067 	mov	r5,a
   0EC3 D0 06         [24] 4068 	pop	ar6
   0EC5 D0 07         [24] 4069 	pop	ar7
   0EC7 8F 00         [24] 4070 	mov	ar0,r7
   0EC9 EE            [12] 4071 	mov	a,r6
   0ECA F9            [12] 4072 	mov	r1,a
   0ECB 33            [12] 4073 	rlc	a
   0ECC 95 E0         [12] 4074 	subb	a,acc
   0ECE FE            [12] 4075 	mov	r6,a
   0ECF FF            [12] 4076 	mov	r7,a
   0ED0 90r00r00      [24] 4077 	mov	dptr,#__mullong_PARM_2
   0ED3 EA            [12] 4078 	mov	a,r2
   0ED4 F0            [24] 4079 	movx	@dptr,a
   0ED5 EB            [12] 4080 	mov	a,r3
   0ED6 A3            [24] 4081 	inc	dptr
   0ED7 F0            [24] 4082 	movx	@dptr,a
   0ED8 EC            [12] 4083 	mov	a,r4
   0ED9 A3            [24] 4084 	inc	dptr
   0EDA F0            [24] 4085 	movx	@dptr,a
   0EDB ED            [12] 4086 	mov	a,r5
   0EDC A3            [24] 4087 	inc	dptr
   0EDD F0            [24] 4088 	movx	@dptr,a
   0EDE 88 82         [24] 4089 	mov	dpl,r0
   0EE0 89 83         [24] 4090 	mov	dph,r1
   0EE2 8E F0         [24] 4091 	mov	b,r6
   0EE4 EF            [12] 4092 	mov	a,r7
   0EE5 12r00r00      [24] 4093 	lcall	__mullong
   0EE8 AC 82         [24] 4094 	mov	r4,dpl
   0EEA AD 83         [24] 4095 	mov	r5,dph
   0EEC AE F0         [24] 4096 	mov	r6,b
   0EEE FF            [12] 4097 	mov	r7,a
   0EEF 90r00r74      [24] 4098 	mov	dptr,#_uart_calc_th1_value_desired_baud_rate_1_218
   0EF2 E0            [24] 4099 	movx	a,@dptr
   0EF3 F8            [12] 4100 	mov	r0,a
   0EF4 A3            [24] 4101 	inc	dptr
   0EF5 E0            [24] 4102 	movx	a,@dptr
   0EF6 F9            [12] 4103 	mov	r1,a
   0EF7 A3            [24] 4104 	inc	dptr
   0EF8 E0            [24] 4105 	movx	a,@dptr
   0EF9 FA            [12] 4106 	mov	r2,a
   0EFA A3            [24] 4107 	inc	dptr
   0EFB E0            [24] 4108 	movx	a,@dptr
   0EFC FB            [12] 4109 	mov	r3,a
   0EFD 90r00r00      [24] 4110 	mov	dptr,#__mullong_PARM_2
   0F00 E8            [12] 4111 	mov	a,r0
   0F01 F0            [24] 4112 	movx	@dptr,a
   0F02 E9            [12] 4113 	mov	a,r1
   0F03 A3            [24] 4114 	inc	dptr
   0F04 F0            [24] 4115 	movx	@dptr,a
   0F05 EA            [12] 4116 	mov	a,r2
   0F06 A3            [24] 4117 	inc	dptr
   0F07 F0            [24] 4118 	movx	@dptr,a
   0F08 EB            [12] 4119 	mov	a,r3
   0F09 A3            [24] 4120 	inc	dptr
   0F0A F0            [24] 4121 	movx	@dptr,a
   0F0B 90 01 80      [24] 4122 	mov	dptr,#0x0180
   0F0E E4            [12] 4123 	clr	a
   0F0F F5 F0         [12] 4124 	mov	b,a
   0F11 C0 07         [24] 4125 	push	ar7
   0F13 C0 06         [24] 4126 	push	ar6
   0F15 C0 05         [24] 4127 	push	ar5
   0F17 C0 04         [24] 4128 	push	ar4
   0F19 12r00r00      [24] 4129 	lcall	__mullong
   0F1C A8 82         [24] 4130 	mov	r0,dpl
   0F1E A9 83         [24] 4131 	mov	r1,dph
   0F20 AA F0         [24] 4132 	mov	r2,b
   0F22 FB            [12] 4133 	mov	r3,a
   0F23 D0 04         [24] 4134 	pop	ar4
   0F25 D0 05         [24] 4135 	pop	ar5
   0F27 D0 06         [24] 4136 	pop	ar6
   0F29 D0 07         [24] 4137 	pop	ar7
   0F2B 90r00r00      [24] 4138 	mov	dptr,#__divulong_PARM_2
   0F2E E8            [12] 4139 	mov	a,r0
   0F2F F0            [24] 4140 	movx	@dptr,a
   0F30 E9            [12] 4141 	mov	a,r1
   0F31 A3            [24] 4142 	inc	dptr
   0F32 F0            [24] 4143 	movx	@dptr,a
   0F33 EA            [12] 4144 	mov	a,r2
   0F34 A3            [24] 4145 	inc	dptr
   0F35 F0            [24] 4146 	movx	@dptr,a
   0F36 EB            [12] 4147 	mov	a,r3
   0F37 A3            [24] 4148 	inc	dptr
   0F38 F0            [24] 4149 	movx	@dptr,a
   0F39 8C 82         [24] 4150 	mov	dpl,r4
   0F3B 8D 83         [24] 4151 	mov	dph,r5
   0F3D 8E F0         [24] 4152 	mov	b,r6
   0F3F EF            [12] 4153 	mov	a,r7
   0F40 12r00r00      [24] 4154 	lcall	__divulong
   0F43 AC 82         [24] 4155 	mov	r4,dpl
   0F45 AD 83         [24] 4156 	mov	r5,dph
   0F47 AE F0         [24] 4157 	mov	r6,b
   0F49 FF            [12] 4158 	mov	r7,a
   0F4A 0C            [12] 4159 	inc	r4
   0F4B BC 00 09      [24] 4160 	cjne	r4,#0x00,00109$
   0F4E 0D            [12] 4161 	inc	r5
   0F4F BD 00 05      [24] 4162 	cjne	r5,#0x00,00109$
   0F52 0E            [12] 4163 	inc	r6
   0F53 BE 00 01      [24] 4164 	cjne	r6,#0x00,00109$
   0F56 0F            [12] 4165 	inc	r7
   0F57                    4166 00109$:
   0F57 EF            [12] 4167 	mov	a,r7
   0F58 C3            [12] 4168 	clr	c
   0F59 13            [12] 4169 	rrc	a
   0F5A EE            [12] 4170 	mov	a,r6
   0F5B 13            [12] 4171 	rrc	a
   0F5C ED            [12] 4172 	mov	a,r5
   0F5D 13            [12] 4173 	rrc	a
   0F5E EC            [12] 4174 	mov	a,r4
   0F5F 13            [12] 4175 	rrc	a
   0F60 FC            [12] 4176 	mov	r4,a
   0F61 C3            [12] 4177 	clr	c
   0F62 E4            [12] 4178 	clr	a
   0F63 9C            [12] 4179 	subb	a,r4
   0F64 F5 82         [12] 4180 	mov	dpl,a
   0F66 22            [24] 4181 	ret
                           4182 ;------------------------------------------------------------
                           4183 ;Allocation info for local variables in function 'uart_configure_auto_baud_calc'
                           4184 ;------------------------------------------------------------
                           4185 ;sloc0                     Allocated with name '_uart_configure_auto_baud_calc_sloc0_1_0'
                           4186 ;sloc1                     Allocated with name '_uart_configure_auto_baud_calc_sloc1_1_0'
                           4187 ;sloc2                     Allocated with name '_uart_configure_auto_baud_calc_sloc2_1_0'
                           4188 ;sloc3                     Allocated with name '_uart_configure_auto_baud_calc_sloc3_1_0'
                           4189 ;baud_rate                 Allocated with name '_uart_configure_auto_baud_calc_PARM_2'
                           4190 ;uart_config_options       Allocated with name '_uart_configure_auto_baud_calc_uart_config_options_1_220'
                           4191 ;calc_br_with_smod_cleared Allocated with name '_uart_configure_auto_baud_calc_calc_br_with_smod_cleared_2_222'
                           4192 ;calc_br_with_smod_set     Allocated with name '_uart_configure_auto_baud_calc_calc_br_with_smod_set_2_222'
                           4193 ;error_calc_br_with_smod_cleared Allocated with name '_uart_configure_auto_baud_calc_error_calc_br_with_smod_cleared_2_222'
                           4194 ;error_calc_br_with_smod_set Allocated with name '_uart_configure_auto_baud_calc_error_calc_br_with_smod_set_2_222'
                           4195 ;s0rel_with_smod_cleared   Allocated with name '_uart_configure_auto_baud_calc_s0rel_with_smod_cleared_3_223'
                           4196 ;s0rel_with_smod_set       Allocated with name '_uart_configure_auto_baud_calc_s0rel_with_smod_set_3_223'
                           4197 ;th1_with_smod_cleared     Allocated with name '_uart_configure_auto_baud_calc_th1_with_smod_cleared_3_226'
                           4198 ;th1_with_smod_set         Allocated with name '_uart_configure_auto_baud_calc_th1_with_smod_set_3_226'
                           4199 ;------------------------------------------------------------
                           4200 ;	../src/uart/src/uart_configure_auto_baud_calc.c:48: void uart_configure_auto_baud_calc(uint8_t uart_config_options, uint32_t baud_rate)
                           4201 ;	-----------------------------------------
                           4202 ;	 function uart_configure_auto_baud_calc
                           4203 ;	-----------------------------------------
   0F67                    4204 _uart_configure_auto_baud_calc:
   0F67 E5 82         [12] 4205 	mov	a,dpl
                           4206 ;	../src/uart/src/uart_configure_auto_baud_calc.c:51: if(((uart_config_options & UART_CONFIG_OPTION_MODE_MASK) == UART_CONFIG_OPTION_MODE_1_UART_8_BIT) ||
   0F69 90r00r7C      [24] 4207 	mov	dptr,#_uart_configure_auto_baud_calc_uart_config_options_1_220
   0F6C F0            [24] 4208 	movx	@dptr,a
   0F6D FF            [12] 4209 	mov	r7,a
   0F6E 74 C0         [12] 4210 	mov	a,#0xC0
   0F70 5F            [12] 4211 	anl	a,r7
   0F71 FE            [12] 4212 	mov	r6,a
   0F72 BE 40 02      [24] 4213 	cjne	r6,#0x40,00147$
   0F75 80 0A         [24] 4214 	sjmp	00110$
   0F77                    4215 00147$:
                           4216 ;	../src/uart/src/uart_configure_auto_baud_calc.c:52: ((uart_config_options & UART_CONFIG_OPTION_MODE_MASK) == UART_CONFIG_OPTION_MODE_3_UART_9_BIT))
   0F77 74 C0         [12] 4217 	mov	a,#0xC0
   0F79 5F            [12] 4218 	anl	a,r7
   0F7A FE            [12] 4219 	mov	r6,a
   0F7B BE C0 02      [24] 4220 	cjne	r6,#0xC0,00148$
   0F7E 80 01         [24] 4221 	sjmp	00149$
   0F80                    4222 00148$:
   0F80 22            [24] 4223 	ret
   0F81                    4224 00149$:
   0F81                    4225 00110$:
                           4226 ;	../src/uart/src/uart_configure_auto_baud_calc.c:58: if((uart_config_options & UART_CONFIG_OPTION_CLOCK_MASK) == UART_CONFIG_OPTION_CLOCK_FOR_MODES_1_3_USE_BR_GEN)
   0F81 74 02         [12] 4227 	mov	a,#0x02
   0F83 5F            [12] 4228 	anl	a,r7
   0F84 FE            [12] 4229 	mov	r6,a
   0F85 BE 02 02      [24] 4230 	cjne	r6,#0x02,00150$
   0F88 80 03         [24] 4231 	sjmp	00151$
   0F8A                    4232 00150$:
   0F8A 02r10rDB      [24] 4233 	ljmp	00108$
   0F8D                    4234 00151$:
                           4235 ;	../src/uart/src/uart_configure_auto_baud_calc.c:63: s0rel_with_smod_cleared = uart_calc_s0rel_value(baud_rate, 0);
   0F8D 90r00r78      [24] 4236 	mov	dptr,#_uart_configure_auto_baud_calc_PARM_2
   0F90 E0            [24] 4237 	movx	a,@dptr
   0F91 FB            [12] 4238 	mov	r3,a
   0F92 A3            [24] 4239 	inc	dptr
   0F93 E0            [24] 4240 	movx	a,@dptr
   0F94 FC            [12] 4241 	mov	r4,a
   0F95 A3            [24] 4242 	inc	dptr
   0F96 E0            [24] 4243 	movx	a,@dptr
   0F97 FD            [12] 4244 	mov	r5,a
   0F98 A3            [24] 4245 	inc	dptr
   0F99 E0            [24] 4246 	movx	a,@dptr
   0F9A FE            [12] 4247 	mov	r6,a
   0F9B 90r00r6E      [24] 4248 	mov	dptr,#_uart_calc_s0rel_value_PARM_2
   0F9E E4            [12] 4249 	clr	a
   0F9F F0            [24] 4250 	movx	@dptr,a
   0FA0 8B 82         [24] 4251 	mov	dpl,r3
   0FA2 8C 83         [24] 4252 	mov	dph,r4
   0FA4 8D F0         [24] 4253 	mov	b,r5
   0FA6 EE            [12] 4254 	mov	a,r6
   0FA7 C0 07         [24] 4255 	push	ar7
   0FA9 C0 06         [24] 4256 	push	ar6
   0FAB C0 05         [24] 4257 	push	ar5
   0FAD C0 04         [24] 4258 	push	ar4
   0FAF C0 03         [24] 4259 	push	ar3
   0FB1 12r0DrA8      [24] 4260 	lcall	_uart_calc_s0rel_value
   0FB4 A9 82         [24] 4261 	mov	r1,dpl
   0FB6 AA 83         [24] 4262 	mov	r2,dph
   0FB8 D0 03         [24] 4263 	pop	ar3
   0FBA D0 04         [24] 4264 	pop	ar4
   0FBC D0 05         [24] 4265 	pop	ar5
   0FBE D0 06         [24] 4266 	pop	ar6
                           4267 ;	../src/uart/src/uart_configure_auto_baud_calc.c:64: s0rel_with_smod_set = uart_calc_s0rel_value(baud_rate, 1);
   0FC0 90r00r6E      [24] 4268 	mov	dptr,#_uart_calc_s0rel_value_PARM_2
   0FC3 74 01         [12] 4269 	mov	a,#0x01
   0FC5 F0            [24] 4270 	movx	@dptr,a
   0FC6 8B 82         [24] 4271 	mov	dpl,r3
   0FC8 8C 83         [24] 4272 	mov	dph,r4
   0FCA 8D F0         [24] 4273 	mov	b,r5
   0FCC EE            [12] 4274 	mov	a,r6
   0FCD C0 06         [24] 4275 	push	ar6
   0FCF C0 05         [24] 4276 	push	ar5
   0FD1 C0 04         [24] 4277 	push	ar4
   0FD3 C0 03         [24] 4278 	push	ar3
   0FD5 C0 02         [24] 4279 	push	ar2
   0FD7 C0 01         [24] 4280 	push	ar1
   0FD9 12r0DrA8      [24] 4281 	lcall	_uart_calc_s0rel_value
   0FDC 85 82*04      [24] 4282 	mov	_uart_configure_auto_baud_calc_sloc0_1_0,dpl
   0FDF 85 83*05      [24] 4283 	mov	(_uart_configure_auto_baud_calc_sloc0_1_0 + 1),dph
   0FE2 D0 01         [24] 4284 	pop	ar1
   0FE4 D0 02         [24] 4285 	pop	ar2
                           4286 ;	../src/uart/src/uart_configure_auto_baud_calc.c:67: calc_br_with_smod_cleared = uart_calc_actual_baud_rate_from_s0rel(s0rel_with_smod_cleared, false);
   0FE6 90r00r69      [24] 4287 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_PARM_2
   0FE9 E4            [12] 4288 	clr	a
   0FEA F0            [24] 4289 	movx	@dptr,a
   0FEB 89 82         [24] 4290 	mov	dpl,r1
   0FED 8A 83         [24] 4291 	mov	dph,r2
   0FEF C0 02         [24] 4292 	push	ar2
   0FF1 C0 01         [24] 4293 	push	ar1
   0FF3 12r0Cr2B      [24] 4294 	lcall	_uart_calc_actual_baud_rate_from_s0rel
   0FF6 85 82*06      [24] 4295 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,dpl
   0FF9 85 83*07      [24] 4296 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),dph
   0FFC 85 F0*08      [24] 4297 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),b
   0FFF F5*09         [12] 4298 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
                           4299 ;	../src/uart/src/uart_configure_auto_baud_calc.c:68: calc_br_with_smod_set = uart_calc_actual_baud_rate_from_s0rel(s0rel_with_smod_set, true);
   1001 90r00r69      [24] 4300 	mov	dptr,#_uart_calc_actual_baud_rate_from_s0rel_PARM_2
   1004 74 01         [12] 4301 	mov	a,#0x01
   1006 F0            [24] 4302 	movx	@dptr,a
   1007 85*04 82      [24] 4303 	mov	dpl,_uart_configure_auto_baud_calc_sloc0_1_0
   100A 85*05 83      [24] 4304 	mov	dph,(_uart_configure_auto_baud_calc_sloc0_1_0 + 1)
   100D 12r0Cr2B      [24] 4305 	lcall	_uart_calc_actual_baud_rate_from_s0rel
   1010 85 82*0A      [24] 4306 	mov	_uart_configure_auto_baud_calc_sloc2_1_0,dpl
   1013 85 83*0B      [24] 4307 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 1),dph
   1016 85 F0*0C      [24] 4308 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 2),b
   1019 F5*0D         [12] 4309 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 3),a
   101B D0 01         [24] 4310 	pop	ar1
   101D D0 02         [24] 4311 	pop	ar2
   101F D0 03         [24] 4312 	pop	ar3
   1021 D0 04         [24] 4313 	pop	ar4
   1023 D0 05         [24] 4314 	pop	ar5
   1025 D0 06         [24] 4315 	pop	ar6
   1027 D0 07         [24] 4316 	pop	ar7
                           4317 ;	../src/uart/src/uart_configure_auto_baud_calc.c:71: error_calc_br_with_smod_cleared = (calc_br_with_smod_cleared > baud_rate) ? (calc_br_with_smod_cleared - baud_rate) : (baud_rate - calc_br_with_smod_cleared);
   1029 C3            [12] 4318 	clr	c
   102A EB            [12] 4319 	mov	a,r3
   102B 95*06         [12] 4320 	subb	a,_uart_configure_auto_baud_calc_sloc1_1_0
   102D EC            [12] 4321 	mov	a,r4
   102E 95*07         [12] 4322 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   1030 ED            [12] 4323 	mov	a,r5
   1031 95*08         [12] 4324 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   1033 EE            [12] 4325 	mov	a,r6
   1034 95*09         [12] 4326 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   1036 50 17         [24] 4327 	jnc	00115$
   1038 E5*06         [12] 4328 	mov	a,_uart_configure_auto_baud_calc_sloc1_1_0
   103A C3            [12] 4329 	clr	c
   103B 9B            [12] 4330 	subb	a,r3
   103C F5*0E         [12] 4331 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,a
   103E E5*07         [12] 4332 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   1040 9C            [12] 4333 	subb	a,r4
   1041 F5*0F         [12] 4334 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),a
   1043 E5*08         [12] 4335 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   1045 9D            [12] 4336 	subb	a,r5
   1046 F5*10         [12] 4337 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),a
   1048 E5*09         [12] 4338 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   104A 9E            [12] 4339 	subb	a,r6
   104B F5*11         [12] 4340 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   104D 80 15         [24] 4341 	sjmp	00116$
   104F                    4342 00115$:
   104F EB            [12] 4343 	mov	a,r3
   1050 C3            [12] 4344 	clr	c
   1051 95*06         [12] 4345 	subb	a,_uart_configure_auto_baud_calc_sloc1_1_0
   1053 F5*0E         [12] 4346 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,a
   1055 EC            [12] 4347 	mov	a,r4
   1056 95*07         [12] 4348 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   1058 F5*0F         [12] 4349 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),a
   105A ED            [12] 4350 	mov	a,r5
   105B 95*08         [12] 4351 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   105D F5*10         [12] 4352 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),a
   105F EE            [12] 4353 	mov	a,r6
   1060 95*09         [12] 4354 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   1062 F5*11         [12] 4355 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   1064                    4356 00116$:
                           4357 ;	../src/uart/src/uart_configure_auto_baud_calc.c:72: error_calc_br_with_smod_set = (calc_br_with_smod_set > baud_rate) ? (calc_br_with_smod_set - baud_rate) : (baud_rate - calc_br_with_smod_set);
   1064 C3            [12] 4358 	clr	c
   1065 EB            [12] 4359 	mov	a,r3
   1066 95*0A         [12] 4360 	subb	a,_uart_configure_auto_baud_calc_sloc2_1_0
   1068 EC            [12] 4361 	mov	a,r4
   1069 95*0B         [12] 4362 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   106B ED            [12] 4363 	mov	a,r5
   106C 95*0C         [12] 4364 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   106E EE            [12] 4365 	mov	a,r6
   106F 95*0D         [12] 4366 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   1071 50 17         [24] 4367 	jnc	00117$
   1073 E5*0A         [12] 4368 	mov	a,_uart_configure_auto_baud_calc_sloc2_1_0
   1075 C3            [12] 4369 	clr	c
   1076 9B            [12] 4370 	subb	a,r3
   1077 F5*06         [12] 4371 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,a
   1079 E5*0B         [12] 4372 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   107B 9C            [12] 4373 	subb	a,r4
   107C F5*07         [12] 4374 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),a
   107E E5*0C         [12] 4375 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   1080 9D            [12] 4376 	subb	a,r5
   1081 F5*08         [12] 4377 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),a
   1083 E5*0D         [12] 4378 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   1085 9E            [12] 4379 	subb	a,r6
   1086 F5*09         [12] 4380 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
   1088 80 15         [24] 4381 	sjmp	00118$
   108A                    4382 00117$:
   108A EB            [12] 4383 	mov	a,r3
   108B C3            [12] 4384 	clr	c
   108C 95*0A         [12] 4385 	subb	a,_uart_configure_auto_baud_calc_sloc2_1_0
   108E F5*06         [12] 4386 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,a
   1090 EC            [12] 4387 	mov	a,r4
   1091 95*0B         [12] 4388 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   1093 F5*07         [12] 4389 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),a
   1095 ED            [12] 4390 	mov	a,r5
   1096 95*0C         [12] 4391 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   1098 F5*08         [12] 4392 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),a
   109A EE            [12] 4393 	mov	a,r6
   109B 95*0D         [12] 4394 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   109D F5*09         [12] 4395 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
   109F                    4396 00118$:
                           4397 ;	../src/uart/src/uart_configure_auto_baud_calc.c:75: if(error_calc_br_with_smod_cleared < error_calc_br_with_smod_set)
   109F C3            [12] 4398 	clr	c
   10A0 E5*0E         [12] 4399 	mov	a,_uart_configure_auto_baud_calc_sloc3_1_0
   10A2 95*06         [12] 4400 	subb	a,_uart_configure_auto_baud_calc_sloc1_1_0
   10A4 E5*0F         [12] 4401 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   10A6 95*07         [12] 4402 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   10A8 E5*10         [12] 4403 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   10AA 95*08         [12] 4404 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   10AC E5*11         [12] 4405 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   10AE 95*09         [12] 4406 	subb	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   10B0 50 12         [24] 4407 	jnc	00102$
                           4408 ;	../src/uart/src/uart_configure_auto_baud_calc.c:77: uart_configure_manual_baud_calc(((uart_config_options & ~UART_CONFIG_OPTION_BIT_SMOD_MASK) | UART_CONFIG_OPTION_BIT_SMOD_CLEAR),
   10B2 8F 06         [24] 4409 	mov	ar6,r7
   10B4 53 06 FB      [24] 4410 	anl	ar6,#0xFB
                           4411 ;	../src/uart/src/uart_configure_auto_baud_calc.c:78: s0rel_with_smod_cleared);
   10B7 90r00r66      [24] 4412 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   10BA E9            [12] 4413 	mov	a,r1
   10BB F0            [24] 4414 	movx	@dptr,a
   10BC EA            [12] 4415 	mov	a,r2
   10BD A3            [24] 4416 	inc	dptr
   10BE F0            [24] 4417 	movx	@dptr,a
   10BF 8E 82         [24] 4418 	mov	dpl,r6
   10C1 02r0BrCD      [24] 4419 	ljmp	_uart_configure_manual_baud_calc
   10C4                    4420 00102$:
                           4421 ;	../src/uart/src/uart_configure_auto_baud_calc.c:82: uart_configure_manual_baud_calc(((uart_config_options & ~UART_CONFIG_OPTION_BIT_SMOD_MASK) | UART_CONFIG_OPTION_BIT_SMOD_SET),
   10C4 8F 06         [24] 4422 	mov	ar6,r7
   10C6 74 FB         [12] 4423 	mov	a,#0xFB
   10C8 5E            [12] 4424 	anl	a,r6
   10C9 44 04         [12] 4425 	orl	a,#0x04
   10CB FE            [12] 4426 	mov	r6,a
                           4427 ;	../src/uart/src/uart_configure_auto_baud_calc.c:83: s0rel_with_smod_set);
   10CC 90r00r66      [24] 4428 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   10CF E5*04         [12] 4429 	mov	a,_uart_configure_auto_baud_calc_sloc0_1_0
   10D1 F0            [24] 4430 	movx	@dptr,a
   10D2 E5*05         [12] 4431 	mov	a,(_uart_configure_auto_baud_calc_sloc0_1_0 + 1)
   10D4 A3            [24] 4432 	inc	dptr
   10D5 F0            [24] 4433 	movx	@dptr,a
   10D6 8E 82         [24] 4434 	mov	dpl,r6
   10D8 02r0BrCD      [24] 4435 	ljmp	_uart_configure_manual_baud_calc
   10DB                    4436 00108$:
                           4437 ;	../src/uart/src/uart_configure_auto_baud_calc.c:91: th1_with_smod_cleared = uart_calc_th1_value(baud_rate, 0);
   10DB 90r00r78      [24] 4438 	mov	dptr,#_uart_configure_auto_baud_calc_PARM_2
   10DE E0            [24] 4439 	movx	a,@dptr
   10DF FB            [12] 4440 	mov	r3,a
   10E0 A3            [24] 4441 	inc	dptr
   10E1 E0            [24] 4442 	movx	a,@dptr
   10E2 FC            [12] 4443 	mov	r4,a
   10E3 A3            [24] 4444 	inc	dptr
   10E4 E0            [24] 4445 	movx	a,@dptr
   10E5 FD            [12] 4446 	mov	r5,a
   10E6 A3            [24] 4447 	inc	dptr
   10E7 E0            [24] 4448 	movx	a,@dptr
   10E8 FE            [12] 4449 	mov	r6,a
   10E9 90r00r73      [24] 4450 	mov	dptr,#_uart_calc_th1_value_PARM_2
   10EC E4            [12] 4451 	clr	a
   10ED F0            [24] 4452 	movx	@dptr,a
   10EE 8B 82         [24] 4453 	mov	dpl,r3
   10F0 8C 83         [24] 4454 	mov	dph,r4
   10F2 8D F0         [24] 4455 	mov	b,r5
   10F4 EE            [12] 4456 	mov	a,r6
   10F5 C0 07         [24] 4457 	push	ar7
   10F7 C0 06         [24] 4458 	push	ar6
   10F9 C0 05         [24] 4459 	push	ar5
   10FB C0 04         [24] 4460 	push	ar4
   10FD C0 03         [24] 4461 	push	ar3
   10FF 12r0Er8B      [24] 4462 	lcall	_uart_calc_th1_value
   1102 AA 82         [24] 4463 	mov	r2,dpl
   1104 D0 03         [24] 4464 	pop	ar3
   1106 D0 04         [24] 4465 	pop	ar4
   1108 D0 05         [24] 4466 	pop	ar5
   110A D0 06         [24] 4467 	pop	ar6
                           4468 ;	../src/uart/src/uart_configure_auto_baud_calc.c:92: th1_with_smod_set = uart_calc_th1_value(baud_rate, 1);
   110C 90r00r73      [24] 4469 	mov	dptr,#_uart_calc_th1_value_PARM_2
   110F 74 01         [12] 4470 	mov	a,#0x01
   1111 F0            [24] 4471 	movx	@dptr,a
   1112 8B 82         [24] 4472 	mov	dpl,r3
   1114 8C 83         [24] 4473 	mov	dph,r4
   1116 8D F0         [24] 4474 	mov	b,r5
   1118 EE            [12] 4475 	mov	a,r6
   1119 C0 06         [24] 4476 	push	ar6
   111B C0 05         [24] 4477 	push	ar5
   111D C0 04         [24] 4478 	push	ar4
   111F C0 03         [24] 4479 	push	ar3
   1121 C0 02         [24] 4480 	push	ar2
   1123 12r0Er8B      [24] 4481 	lcall	_uart_calc_th1_value
   1126 A9 82         [24] 4482 	mov	r1,dpl
   1128 D0 02         [24] 4483 	pop	ar2
                           4484 ;	../src/uart/src/uart_configure_auto_baud_calc.c:95: calc_br_with_smod_cleared = uart_calc_actual_baud_rate_from_th1(th1_with_smod_cleared, false);
   112A 90r00r6C      [24] 4485 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_PARM_2
   112D E4            [12] 4486 	clr	a
   112E F0            [24] 4487 	movx	@dptr,a
   112F 8A 82         [24] 4488 	mov	dpl,r2
   1131 C0 02         [24] 4489 	push	ar2
   1133 C0 01         [24] 4490 	push	ar1
   1135 12r0CrE4      [24] 4491 	lcall	_uart_calc_actual_baud_rate_from_th1
   1138 85 82*0E      [24] 4492 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,dpl
   113B 85 83*0F      [24] 4493 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),dph
   113E 85 F0*10      [24] 4494 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),b
   1141 F5*11         [12] 4495 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   1143 D0 01         [24] 4496 	pop	ar1
                           4497 ;	../src/uart/src/uart_configure_auto_baud_calc.c:96: calc_br_with_smod_set = uart_calc_actual_baud_rate_from_th1(th1_with_smod_set, true);
   1145 90r00r6C      [24] 4498 	mov	dptr,#_uart_calc_actual_baud_rate_from_th1_PARM_2
   1148 74 01         [12] 4499 	mov	a,#0x01
   114A F0            [24] 4500 	movx	@dptr,a
   114B 89 82         [24] 4501 	mov	dpl,r1
   114D C0 01         [24] 4502 	push	ar1
   114F 12r0CrE4      [24] 4503 	lcall	_uart_calc_actual_baud_rate_from_th1
   1152 85 82*0A      [24] 4504 	mov	_uart_configure_auto_baud_calc_sloc2_1_0,dpl
   1155 85 83*0B      [24] 4505 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 1),dph
   1158 85 F0*0C      [24] 4506 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 2),b
   115B F5*0D         [12] 4507 	mov	(_uart_configure_auto_baud_calc_sloc2_1_0 + 3),a
   115D D0 01         [24] 4508 	pop	ar1
   115F D0 02         [24] 4509 	pop	ar2
   1161 D0 03         [24] 4510 	pop	ar3
   1163 D0 04         [24] 4511 	pop	ar4
   1165 D0 05         [24] 4512 	pop	ar5
   1167 D0 06         [24] 4513 	pop	ar6
   1169 D0 07         [24] 4514 	pop	ar7
                           4515 ;	../src/uart/src/uart_configure_auto_baud_calc.c:99: error_calc_br_with_smod_cleared = (calc_br_with_smod_cleared > baud_rate) ? (calc_br_with_smod_cleared - baud_rate) : (baud_rate - calc_br_with_smod_cleared);
   116B C3            [12] 4516 	clr	c
   116C EB            [12] 4517 	mov	a,r3
   116D 95*0E         [12] 4518 	subb	a,_uart_configure_auto_baud_calc_sloc3_1_0
   116F EC            [12] 4519 	mov	a,r4
   1170 95*0F         [12] 4520 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   1172 ED            [12] 4521 	mov	a,r5
   1173 95*10         [12] 4522 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   1175 EE            [12] 4523 	mov	a,r6
   1176 95*11         [12] 4524 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   1178 50 17         [24] 4525 	jnc	00119$
   117A E5*0E         [12] 4526 	mov	a,_uart_configure_auto_baud_calc_sloc3_1_0
   117C C3            [12] 4527 	clr	c
   117D 9B            [12] 4528 	subb	a,r3
   117E F5*06         [12] 4529 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,a
   1180 E5*0F         [12] 4530 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   1182 9C            [12] 4531 	subb	a,r4
   1183 F5*07         [12] 4532 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),a
   1185 E5*10         [12] 4533 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   1187 9D            [12] 4534 	subb	a,r5
   1188 F5*08         [12] 4535 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),a
   118A E5*11         [12] 4536 	mov	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   118C 9E            [12] 4537 	subb	a,r6
   118D F5*09         [12] 4538 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
   118F 80 15         [24] 4539 	sjmp	00120$
   1191                    4540 00119$:
   1191 EB            [12] 4541 	mov	a,r3
   1192 C3            [12] 4542 	clr	c
   1193 95*0E         [12] 4543 	subb	a,_uart_configure_auto_baud_calc_sloc3_1_0
   1195 F5*06         [12] 4544 	mov	_uart_configure_auto_baud_calc_sloc1_1_0,a
   1197 EC            [12] 4545 	mov	a,r4
   1198 95*0F         [12] 4546 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   119A F5*07         [12] 4547 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 1),a
   119C ED            [12] 4548 	mov	a,r5
   119D 95*10         [12] 4549 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   119F F5*08         [12] 4550 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 2),a
   11A1 EE            [12] 4551 	mov	a,r6
   11A2 95*11         [12] 4552 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   11A4 F5*09         [12] 4553 	mov	(_uart_configure_auto_baud_calc_sloc1_1_0 + 3),a
   11A6                    4554 00120$:
                           4555 ;	../src/uart/src/uart_configure_auto_baud_calc.c:100: error_calc_br_with_smod_set = (calc_br_with_smod_set > baud_rate) ? (calc_br_with_smod_set - baud_rate) : (baud_rate - calc_br_with_smod_set);
   11A6 C3            [12] 4556 	clr	c
   11A7 EB            [12] 4557 	mov	a,r3
   11A8 95*0A         [12] 4558 	subb	a,_uart_configure_auto_baud_calc_sloc2_1_0
   11AA EC            [12] 4559 	mov	a,r4
   11AB 95*0B         [12] 4560 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   11AD ED            [12] 4561 	mov	a,r5
   11AE 95*0C         [12] 4562 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   11B0 EE            [12] 4563 	mov	a,r6
   11B1 95*0D         [12] 4564 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   11B3 50 17         [24] 4565 	jnc	00121$
   11B5 E5*0A         [12] 4566 	mov	a,_uart_configure_auto_baud_calc_sloc2_1_0
   11B7 C3            [12] 4567 	clr	c
   11B8 9B            [12] 4568 	subb	a,r3
   11B9 F5*0E         [12] 4569 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,a
   11BB E5*0B         [12] 4570 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   11BD 9C            [12] 4571 	subb	a,r4
   11BE F5*0F         [12] 4572 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),a
   11C0 E5*0C         [12] 4573 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   11C2 9D            [12] 4574 	subb	a,r5
   11C3 F5*10         [12] 4575 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),a
   11C5 E5*0D         [12] 4576 	mov	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   11C7 9E            [12] 4577 	subb	a,r6
   11C8 F5*11         [12] 4578 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   11CA 80 15         [24] 4579 	sjmp	00122$
   11CC                    4580 00121$:
   11CC EB            [12] 4581 	mov	a,r3
   11CD C3            [12] 4582 	clr	c
   11CE 95*0A         [12] 4583 	subb	a,_uart_configure_auto_baud_calc_sloc2_1_0
   11D0 F5*0E         [12] 4584 	mov	_uart_configure_auto_baud_calc_sloc3_1_0,a
   11D2 EC            [12] 4585 	mov	a,r4
   11D3 95*0B         [12] 4586 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 1)
   11D5 F5*0F         [12] 4587 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 1),a
   11D7 ED            [12] 4588 	mov	a,r5
   11D8 95*0C         [12] 4589 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 2)
   11DA F5*10         [12] 4590 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 2),a
   11DC EE            [12] 4591 	mov	a,r6
   11DD 95*0D         [12] 4592 	subb	a,(_uart_configure_auto_baud_calc_sloc2_1_0 + 3)
   11DF F5*11         [12] 4593 	mov	(_uart_configure_auto_baud_calc_sloc3_1_0 + 3),a
   11E1                    4594 00122$:
                           4595 ;	../src/uart/src/uart_configure_auto_baud_calc.c:103: if(error_calc_br_with_smod_cleared < error_calc_br_with_smod_set)
   11E1 C3            [12] 4596 	clr	c
   11E2 E5*06         [12] 4597 	mov	a,_uart_configure_auto_baud_calc_sloc1_1_0
   11E4 95*0E         [12] 4598 	subb	a,_uart_configure_auto_baud_calc_sloc3_1_0
   11E6 E5*07         [12] 4599 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 1)
   11E8 95*0F         [12] 4600 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 1)
   11EA E5*08         [12] 4601 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 2)
   11EC 95*10         [12] 4602 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 2)
   11EE E5*09         [12] 4603 	mov	a,(_uart_configure_auto_baud_calc_sloc1_1_0 + 3)
   11F0 95*11         [12] 4604 	subb	a,(_uart_configure_auto_baud_calc_sloc3_1_0 + 3)
   11F2 50 12         [24] 4605 	jnc	00105$
                           4606 ;	../src/uart/src/uart_configure_auto_baud_calc.c:105: uart_configure_manual_baud_calc(((uart_config_options & ~UART_CONFIG_OPTION_BIT_SMOD_MASK) | UART_CONFIG_OPTION_BIT_SMOD_CLEAR),
   11F4 8F 06         [24] 4607 	mov	ar6,r7
   11F6 53 06 FB      [24] 4608 	anl	ar6,#0xFB
                           4609 ;	../src/uart/src/uart_configure_auto_baud_calc.c:106: (uint16_t)th1_with_smod_cleared);
   11F9 90r00r66      [24] 4610 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   11FC EA            [12] 4611 	mov	a,r2
   11FD F0            [24] 4612 	movx	@dptr,a
   11FE E4            [12] 4613 	clr	a
   11FF A3            [24] 4614 	inc	dptr
   1200 F0            [24] 4615 	movx	@dptr,a
   1201 8E 82         [24] 4616 	mov	dpl,r6
   1203 02r0BrCD      [24] 4617 	ljmp	_uart_configure_manual_baud_calc
   1206                    4618 00105$:
                           4619 ;	../src/uart/src/uart_configure_auto_baud_calc.c:110: uart_configure_manual_baud_calc(((uart_config_options & ~UART_CONFIG_OPTION_BIT_SMOD_MASK) | UART_CONFIG_OPTION_BIT_SMOD_SET),
   1206 74 FB         [12] 4620 	mov	a,#0xFB
   1208 5F            [12] 4621 	anl	a,r7
   1209 44 04         [12] 4622 	orl	a,#0x04
   120B FF            [12] 4623 	mov	r7,a
                           4624 ;	../src/uart/src/uart_configure_auto_baud_calc.c:111: (uint16_t)th1_with_smod_set);
   120C 90r00r66      [24] 4625 	mov	dptr,#_uart_configure_manual_baud_calc_PARM_2
   120F E9            [12] 4626 	mov	a,r1
   1210 F0            [24] 4627 	movx	@dptr,a
   1211 E4            [12] 4628 	clr	a
   1212 A3            [24] 4629 	inc	dptr
   1213 F0            [24] 4630 	movx	@dptr,a
   1214 8F 82         [24] 4631 	mov	dpl,r7
   1216 02r0BrCD      [24] 4632 	ljmp	_uart_configure_manual_baud_calc
                           4633 ;------------------------------------------------------------
                           4634 ;Allocation info for local variables in function 'rtc2_configure'
                           4635 ;------------------------------------------------------------
                           4636 ;compare_value             Allocated with name '_rtc2_configure_PARM_2'
                           4637 ;rtc2_config_options       Allocated with name '_rtc2_configure_rtc2_config_options_1_230'
                           4638 ;------------------------------------------------------------
                           4639 ;	../src/rtc2/src/rtc2_configure.c:53: void rtc2_configure(unsigned char rtc2_config_options, unsigned int compare_value)
                           4640 ;	-----------------------------------------
                           4641 ;	 function rtc2_configure
                           4642 ;	-----------------------------------------
   1219                    4643 _rtc2_configure:
   1219 E5 82         [12] 4644 	mov	a,dpl
                           4645 ;	../src/rtc2/src/rtc2_configure.c:56: if(((rtc2_config_options & RTC2CON_COMPARE_MODE_MASK) == RTC2_CONFIG_OPTION_COMPARE_MODE_0_RESET_AT_IRQ) ||
   121B 90r00r7F      [24] 4646 	mov	dptr,#_rtc2_configure_rtc2_config_options_1_230
   121E F0            [24] 4647 	movx	@dptr,a
   121F FF            [12] 4648 	mov	r7,a
   1220 74 06         [12] 4649 	mov	a,#0x06
   1222 5F            [12] 4650 	anl	a,r7
   1223 FE            [12] 4651 	mov	r6,a
   1224 BE 06 02      [24] 4652 	cjne	r6,#0x06,00109$
   1227 80 07         [24] 4653 	sjmp	00101$
   1229                    4654 00109$:
                           4655 ;	../src/rtc2/src/rtc2_configure.c:57: ((rtc2_config_options & RTC2CON_COMPARE_MODE_MASK) == RTC2_CONFIG_OPTION_COMPARE_MODE_1_WRAP_AT_IRQ))
   1229 74 06         [12] 4656 	mov	a,#0x06
   122B 5F            [12] 4657 	anl	a,r7
   122C FE            [12] 4658 	mov	r6,a
   122D BE 04 0C      [24] 4659 	cjne	r6,#0x04,00102$
   1230                    4660 00101$:
                           4661 ;	../src/rtc2/src/rtc2_configure.c:59: RTC2CMP0 = (unsigned char)compare_value;
   1230 90r00r7D      [24] 4662 	mov	dptr,#_rtc2_configure_PARM_2
   1233 E0            [24] 4663 	movx	a,@dptr
   1234 FD            [12] 4664 	mov	r5,a
   1235 A3            [24] 4665 	inc	dptr
   1236 E0            [24] 4666 	movx	a,@dptr
   1237 FE            [12] 4667 	mov	r6,a
   1238 8D B4         [24] 4668 	mov	_RTC2CMP0,r5
                           4669 ;	../src/rtc2/src/rtc2_configure.c:60: RTC2CMP1 = (unsigned char)(compare_value >> 8);
   123A 8E B5         [24] 4670 	mov	_RTC2CMP1,r6
   123C                    4671 00102$:
                           4672 ;	../src/rtc2/src/rtc2_configure.c:64: RTC2CON = (RTC2CON & ~RTC2_CONFIG_OPTION_RTC2CON_MASK) | (rtc2_config_options & RTC2_CONFIG_OPTION_RTC2CON_MASK);
   123C AE B3         [24] 4673 	mov	r6,_RTC2CON
   123E 53 06 F0      [24] 4674 	anl	ar6,#0xF0
   1241 53 07 0F      [24] 4675 	anl	ar7,#0x0F
   1244 EF            [12] 4676 	mov	a,r7
   1245 4E            [12] 4677 	orl	a,r6
   1246 F5 B3         [12] 4678 	mov	_RTC2CON,a
   1248 22            [24] 4679 	ret
                           4680 ;------------------------------------------------------------
                           4681 ;Allocation info for local variables in function 'radiobegin'
                           4682 ;------------------------------------------------------------
                           4683 ;setup                     Allocated with name '_radiobegin_setup_1_233'
                           4684 ;------------------------------------------------------------
                           4685 ;	../nRFLE.c:22: void radiobegin() {
                           4686 ;	-----------------------------------------
                           4687 ;	 function radiobegin
                           4688 ;	-----------------------------------------
   1249                    4689 _radiobegin:
                           4690 ;	../nRFLE.c:26: rf_spi_configure_enable();
   1249 12r00rF9      [24] 4691 	lcall	_rf_spi_configure_enable
                           4692 ;	../nRFLE.c:28: setup = 255; // setup_retr setRetries 15*16+15
   124C 90r00r80      [24] 4693 	mov	dptr,#_radiobegin_setup_1_233
   124F 74 FF         [12] 4694 	mov	a,#0xFF
   1251 F0            [24] 4695 	movx	@dptr,a
                           4696 ;	../nRFLE.c:29: rf_write_register(RF_SETUP_RETR, &setup, 1);
   1252 90r00r08      [24] 4697 	mov	dptr,#_rf_write_register_PARM_2
   1255 74r80         [12] 4698 	mov	a,#_radiobegin_setup_1_233
   1257 F0            [24] 4699 	movx	@dptr,a
   1258 74s00         [12] 4700 	mov	a,#(_radiobegin_setup_1_233 >> 8)
   125A A3            [24] 4701 	inc	dptr
   125B F0            [24] 4702 	movx	@dptr,a
   125C E4            [12] 4703 	clr	a
   125D A3            [24] 4704 	inc	dptr
   125E F0            [24] 4705 	movx	@dptr,a
   125F 90r00r0B      [24] 4706 	mov	dptr,#_rf_write_register_PARM_3
   1262 74 01         [12] 4707 	mov	a,#0x01
   1264 F0            [24] 4708 	movx	@dptr,a
   1265 E4            [12] 4709 	clr	a
   1266 A3            [24] 4710 	inc	dptr
   1267 F0            [24] 4711 	movx	@dptr,a
   1268 75 82 04      [24] 4712 	mov	dpl,#0x04
   126B 02r00rBC      [24] 4713 	ljmp	_rf_write_register
                           4714 ;------------------------------------------------------------
                           4715 ;Allocation info for local variables in function 'setChannel'
                           4716 ;------------------------------------------------------------
                           4717 ;channel                   Allocated with name '_setChannel_channel_1_234'
                           4718 ;------------------------------------------------------------
                           4719 ;	../nRFLE.c:35: void setChannel(unsigned char channel){
                           4720 ;	-----------------------------------------
                           4721 ;	 function setChannel
                           4722 ;	-----------------------------------------
   126E                    4723 _setChannel:
   126E E5 82         [12] 4724 	mov	a,dpl
   1270 90r00r81      [24] 4725 	mov	dptr,#_setChannel_channel_1_234
   1273 F0            [24] 4726 	movx	@dptr,a
                           4727 ;	../nRFLE.c:36: rf_write_register(RF_RF_CH, &channel, 1);
   1274 90r00r08      [24] 4728 	mov	dptr,#_rf_write_register_PARM_2
   1277 74r81         [12] 4729 	mov	a,#_setChannel_channel_1_234
   1279 F0            [24] 4730 	movx	@dptr,a
   127A 74s00         [12] 4731 	mov	a,#(_setChannel_channel_1_234 >> 8)
   127C A3            [24] 4732 	inc	dptr
   127D F0            [24] 4733 	movx	@dptr,a
   127E E4            [12] 4734 	clr	a
   127F A3            [24] 4735 	inc	dptr
   1280 F0            [24] 4736 	movx	@dptr,a
   1281 90r00r0B      [24] 4737 	mov	dptr,#_rf_write_register_PARM_3
   1284 74 01         [12] 4738 	mov	a,#0x01
   1286 F0            [24] 4739 	movx	@dptr,a
   1287 E4            [12] 4740 	clr	a
   1288 A3            [24] 4741 	inc	dptr
   1289 F0            [24] 4742 	movx	@dptr,a
   128A 75 82 05      [24] 4743 	mov	dpl,#0x05
   128D 02r00rBC      [24] 4744 	ljmp	_rf_write_register
                           4745 ;------------------------------------------------------------
                           4746 ;Allocation info for local variables in function 'setDataRate'
                           4747 ;------------------------------------------------------------
                           4748 ;speed                     Allocated with name '_setDataRate_speed_1_236'
                           4749 ;buffer                    Allocated with name '_setDataRate_buffer_1_237'
                           4750 ;------------------------------------------------------------
                           4751 ;	../nRFLE.c:41: void setDataRate(unsigned char speed){
                           4752 ;	-----------------------------------------
                           4753 ;	 function setDataRate
                           4754 ;	-----------------------------------------
   1290                    4755 _setDataRate:
   1290 E5 82         [12] 4756 	mov	a,dpl
   1292 90r00r82      [24] 4757 	mov	dptr,#_setDataRate_speed_1_236
   1295 F0            [24] 4758 	movx	@dptr,a
                           4759 ;	../nRFLE.c:43: rf_read_register(RF_RF_SETUP,&buffer,1);
   1296 90r00r28      [24] 4760 	mov	dptr,#_rf_read_register_PARM_2
   1299 74r83         [12] 4761 	mov	a,#_setDataRate_buffer_1_237
   129B F0            [24] 4762 	movx	@dptr,a
   129C 74s00         [12] 4763 	mov	a,#(_setDataRate_buffer_1_237 >> 8)
   129E A3            [24] 4764 	inc	dptr
   129F F0            [24] 4765 	movx	@dptr,a
   12A0 E4            [12] 4766 	clr	a
   12A1 A3            [24] 4767 	inc	dptr
   12A2 F0            [24] 4768 	movx	@dptr,a
   12A3 90r00r2B      [24] 4769 	mov	dptr,#_rf_read_register_PARM_3
   12A6 74 01         [12] 4770 	mov	a,#0x01
   12A8 F0            [24] 4771 	movx	@dptr,a
   12A9 E4            [12] 4772 	clr	a
   12AA A3            [24] 4773 	inc	dptr
   12AB F0            [24] 4774 	movx	@dptr,a
   12AC 75 82 06      [24] 4775 	mov	dpl,#0x06
   12AF 12r03r70      [24] 4776 	lcall	_rf_read_register
                           4777 ;	../nRFLE.c:45: buffer &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   12B2 90r00r83      [24] 4778 	mov	dptr,#_setDataRate_buffer_1_237
   12B5 E0            [24] 4779 	movx	a,@dptr
   12B6 54 D7         [12] 4780 	anl	a,#0xD7
   12B8 F0            [24] 4781 	movx	@dptr,a
                           4782 ;	../nRFLE.c:47: if( speed == 1 )	 buffer |= _BV(RF_DR_LOW);
   12B9 90r00r82      [24] 4783 	mov	dptr,#_setDataRate_speed_1_236
   12BC E0            [24] 4784 	movx	a,@dptr
   12BD FF            [12] 4785 	mov	r7,a
   12BE BF 01 0A      [24] 4786 	cjne	r7,#0x01,00104$
   12C1 90r00r83      [24] 4787 	mov	dptr,#_setDataRate_buffer_1_237
   12C4 E0            [24] 4788 	movx	a,@dptr
   12C5 FE            [12] 4789 	mov	r6,a
   12C6 44 20         [12] 4790 	orl	a,#0x20
   12C8 F0            [24] 4791 	movx	@dptr,a
   12C9 80 0B         [24] 4792 	sjmp	00105$
   12CB                    4793 00104$:
                           4794 ;	../nRFLE.c:49: else if ( speed == 3 ) buffer |= _BV(RF_DR_HIGH);
   12CB BF 03 08      [24] 4795 	cjne	r7,#0x03,00105$
   12CE 90r00r83      [24] 4796 	mov	dptr,#_setDataRate_buffer_1_237
   12D1 E0            [24] 4797 	movx	a,@dptr
   12D2 FF            [12] 4798 	mov	r7,a
   12D3 44 08         [12] 4799 	orl	a,#0x08
   12D5 F0            [24] 4800 	movx	@dptr,a
   12D6                    4801 00105$:
                           4802 ;	../nRFLE.c:51: rf_write_register(RF_RF_SETUP,&buffer,1 ) ;
   12D6 90r00r08      [24] 4803 	mov	dptr,#_rf_write_register_PARM_2
   12D9 74r83         [12] 4804 	mov	a,#_setDataRate_buffer_1_237
   12DB F0            [24] 4805 	movx	@dptr,a
   12DC 74s00         [12] 4806 	mov	a,#(_setDataRate_buffer_1_237 >> 8)
   12DE A3            [24] 4807 	inc	dptr
   12DF F0            [24] 4808 	movx	@dptr,a
   12E0 E4            [12] 4809 	clr	a
   12E1 A3            [24] 4810 	inc	dptr
   12E2 F0            [24] 4811 	movx	@dptr,a
   12E3 90r00r0B      [24] 4812 	mov	dptr,#_rf_write_register_PARM_3
   12E6 74 01         [12] 4813 	mov	a,#0x01
   12E8 F0            [24] 4814 	movx	@dptr,a
   12E9 E4            [12] 4815 	clr	a
   12EA A3            [24] 4816 	inc	dptr
   12EB F0            [24] 4817 	movx	@dptr,a
   12EC 75 82 06      [24] 4818 	mov	dpl,#0x06
   12EF 02r00rBC      [24] 4819 	ljmp	_rf_write_register
                           4820 ;------------------------------------------------------------
                           4821 ;Allocation info for local variables in function 'setAutoAck'
                           4822 ;------------------------------------------------------------
                           4823 ;enable                    Allocated with name '_setAutoAck_enable_1_238'
                           4824 ;buffer                    Allocated with name '_setAutoAck_buffer_1_239'
                           4825 ;------------------------------------------------------------
                           4826 ;	../nRFLE.c:56: void setAutoAck(unsigned char enable)
                           4827 ;	-----------------------------------------
                           4828 ;	 function setAutoAck
                           4829 ;	-----------------------------------------
   12F2                    4830 _setAutoAck:
   12F2 E5 82         [12] 4831 	mov	a,dpl
                           4832 ;	../nRFLE.c:60: if (enable==1) buffer=63;
   12F4 90r00r84      [24] 4833 	mov	dptr,#_setAutoAck_enable_1_238
   12F7 F0            [24] 4834 	movx	@dptr,a
   12F8 FF            [12] 4835 	mov	r7,a
   12F9 BF 01 08      [24] 4836 	cjne	r7,#0x01,00102$
   12FC 90r00r85      [24] 4837 	mov	dptr,#_setAutoAck_buffer_1_239
   12FF 74 3F         [12] 4838 	mov	a,#0x3F
   1301 F0            [24] 4839 	movx	@dptr,a
   1302 80 05         [24] 4840 	sjmp	00103$
   1304                    4841 00102$:
                           4842 ;	../nRFLE.c:61: else        buffer=0;
   1304 90r00r85      [24] 4843 	mov	dptr,#_setAutoAck_buffer_1_239
   1307 E4            [12] 4844 	clr	a
   1308 F0            [24] 4845 	movx	@dptr,a
   1309                    4846 00103$:
                           4847 ;	../nRFLE.c:62: rf_write_register(RF_EN_AA, &buffer,1);
   1309 90r00r08      [24] 4848 	mov	dptr,#_rf_write_register_PARM_2
   130C 74r85         [12] 4849 	mov	a,#_setAutoAck_buffer_1_239
   130E F0            [24] 4850 	movx	@dptr,a
   130F 74s00         [12] 4851 	mov	a,#(_setAutoAck_buffer_1_239 >> 8)
   1311 A3            [24] 4852 	inc	dptr
   1312 F0            [24] 4853 	movx	@dptr,a
   1313 E4            [12] 4854 	clr	a
   1314 A3            [24] 4855 	inc	dptr
   1315 F0            [24] 4856 	movx	@dptr,a
   1316 90r00r0B      [24] 4857 	mov	dptr,#_rf_write_register_PARM_3
   1319 74 01         [12] 4858 	mov	a,#0x01
   131B F0            [24] 4859 	movx	@dptr,a
   131C E4            [12] 4860 	clr	a
   131D A3            [24] 4861 	inc	dptr
   131E F0            [24] 4862 	movx	@dptr,a
   131F 75 82 01      [24] 4863 	mov	dpl,#0x01
   1322 02r00rBC      [24] 4864 	ljmp	_rf_write_register
                           4865 ;------------------------------------------------------------
                           4866 ;Allocation info for local variables in function 'setCRCLength'
                           4867 ;------------------------------------------------------------
                           4868 ;length                    Allocated with name '_setCRCLength_length_1_240'
                           4869 ;buffer                    Allocated with name '_setCRCLength_buffer_1_241'
                           4870 ;------------------------------------------------------------
                           4871 ;	../nRFLE.c:67: void setCRCLength(unsigned char length)
                           4872 ;	-----------------------------------------
                           4873 ;	 function setCRCLength
                           4874 ;	-----------------------------------------
   1325                    4875 _setCRCLength:
   1325 E5 82         [12] 4876 	mov	a,dpl
   1327 90r00r86      [24] 4877 	mov	dptr,#_setCRCLength_length_1_240
   132A F0            [24] 4878 	movx	@dptr,a
                           4879 ;	../nRFLE.c:71: rf_read_register(RF_CONFIG,&buffer,1);
   132B 90r00r28      [24] 4880 	mov	dptr,#_rf_read_register_PARM_2
   132E 74r87         [12] 4881 	mov	a,#_setCRCLength_buffer_1_241
   1330 F0            [24] 4882 	movx	@dptr,a
   1331 74s00         [12] 4883 	mov	a,#(_setCRCLength_buffer_1_241 >> 8)
   1333 A3            [24] 4884 	inc	dptr
   1334 F0            [24] 4885 	movx	@dptr,a
   1335 E4            [12] 4886 	clr	a
   1336 A3            [24] 4887 	inc	dptr
   1337 F0            [24] 4888 	movx	@dptr,a
   1338 90r00r2B      [24] 4889 	mov	dptr,#_rf_read_register_PARM_3
   133B 74 01         [12] 4890 	mov	a,#0x01
   133D F0            [24] 4891 	movx	@dptr,a
   133E E4            [12] 4892 	clr	a
   133F A3            [24] 4893 	inc	dptr
   1340 F0            [24] 4894 	movx	@dptr,a
   1341 75 82 00      [24] 4895 	mov	dpl,#0x00
   1344 12r03r70      [24] 4896 	lcall	_rf_read_register
                           4897 ;	../nRFLE.c:73: buffer = buffer & ~( _BV(RF_CRCO) | _BV(RF_EN_CRC)) ;
   1347 90r00r87      [24] 4898 	mov	dptr,#_setCRCLength_buffer_1_241
   134A E0            [24] 4899 	movx	a,@dptr
   134B 54 F3         [12] 4900 	anl	a,#0xF3
   134D F0            [24] 4901 	movx	@dptr,a
                           4902 ;	../nRFLE.c:75: if (length==1) buffer |= _BV(RF_EN_CRC);
   134E 90r00r86      [24] 4903 	mov	dptr,#_setCRCLength_length_1_240
   1351 E0            [24] 4904 	movx	a,@dptr
   1352 FF            [12] 4905 	mov	r7,a
   1353 BF 01 0A      [24] 4906 	cjne	r7,#0x01,00104$
   1356 90r00r87      [24] 4907 	mov	dptr,#_setCRCLength_buffer_1_241
   1359 E0            [24] 4908 	movx	a,@dptr
   135A FE            [12] 4909 	mov	r6,a
   135B 44 08         [12] 4910 	orl	a,#0x08
   135D F0            [24] 4911 	movx	@dptr,a
   135E 80 0B         [24] 4912 	sjmp	00105$
   1360                    4913 00104$:
                           4914 ;	../nRFLE.c:76: else if (length==2) buffer |= _BV(RF_EN_CRC) | _BV( RF_CRCO );
   1360 BF 02 08      [24] 4915 	cjne	r7,#0x02,00105$
   1363 90r00r87      [24] 4916 	mov	dptr,#_setCRCLength_buffer_1_241
   1366 E0            [24] 4917 	movx	a,@dptr
   1367 FF            [12] 4918 	mov	r7,a
   1368 44 0C         [12] 4919 	orl	a,#0x0C
   136A F0            [24] 4920 	movx	@dptr,a
   136B                    4921 00105$:
                           4922 ;	../nRFLE.c:78: buffer |=1<<PWR_UP;
   136B 90r00r87      [24] 4923 	mov	dptr,#_setCRCLength_buffer_1_241
   136E E0            [24] 4924 	movx	a,@dptr
   136F 44 02         [12] 4925 	orl	a,#0x02
   1371 F0            [24] 4926 	movx	@dptr,a
                           4927 ;	../nRFLE.c:80: rf_write_register(RF_CONFIG,&buffer,1 ) ;
   1372 90r00r08      [24] 4928 	mov	dptr,#_rf_write_register_PARM_2
   1375 74r87         [12] 4929 	mov	a,#_setCRCLength_buffer_1_241
   1377 F0            [24] 4930 	movx	@dptr,a
   1378 74s00         [12] 4931 	mov	a,#(_setCRCLength_buffer_1_241 >> 8)
   137A A3            [24] 4932 	inc	dptr
   137B F0            [24] 4933 	movx	@dptr,a
   137C E4            [12] 4934 	clr	a
   137D A3            [24] 4935 	inc	dptr
   137E F0            [24] 4936 	movx	@dptr,a
   137F 90r00r0B      [24] 4937 	mov	dptr,#_rf_write_register_PARM_3
   1382 74 01         [12] 4938 	mov	a,#0x01
   1384 F0            [24] 4939 	movx	@dptr,a
   1385 E4            [12] 4940 	clr	a
   1386 A3            [24] 4941 	inc	dptr
   1387 F0            [24] 4942 	movx	@dptr,a
   1388 75 82 00      [24] 4943 	mov	dpl,#0x00
   138B 02r00rBC      [24] 4944 	ljmp	_rf_write_register
                           4945 ;------------------------------------------------------------
                           4946 ;Allocation info for local variables in function 'setPALevel'
                           4947 ;------------------------------------------------------------
                           4948 ;level                     Allocated with name '_setPALevel_level_1_242'
                           4949 ;setup                     Allocated with name '_setPALevel_setup_1_243'
                           4950 ;------------------------------------------------------------
                           4951 ;	../nRFLE.c:84: void setPALevel(unsigned char level)
                           4952 ;	-----------------------------------------
                           4953 ;	 function setPALevel
                           4954 ;	-----------------------------------------
   138E                    4955 _setPALevel:
                           4956 ;	../nRFLE.c:88: rf_read_register(RF_RF_SETUP,&setup,1) ;
   138E 90r00r28      [24] 4957 	mov	dptr,#_rf_read_register_PARM_2
   1391 74r88         [12] 4958 	mov	a,#_setPALevel_setup_1_243
   1393 F0            [24] 4959 	movx	@dptr,a
   1394 74s00         [12] 4960 	mov	a,#(_setPALevel_setup_1_243 >> 8)
   1396 A3            [24] 4961 	inc	dptr
   1397 F0            [24] 4962 	movx	@dptr,a
   1398 E4            [12] 4963 	clr	a
   1399 A3            [24] 4964 	inc	dptr
   139A F0            [24] 4965 	movx	@dptr,a
   139B 90r00r2B      [24] 4966 	mov	dptr,#_rf_read_register_PARM_3
   139E 74 01         [12] 4967 	mov	a,#0x01
   13A0 F0            [24] 4968 	movx	@dptr,a
   13A1 E4            [12] 4969 	clr	a
   13A2 A3            [24] 4970 	inc	dptr
   13A3 F0            [24] 4971 	movx	@dptr,a
   13A4 75 82 06      [24] 4972 	mov	dpl,#0x06
   13A7 12r03r70      [24] 4973 	lcall	_rf_read_register
                           4974 ;	../nRFLE.c:90: setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
   13AA 90r00r88      [24] 4975 	mov	dptr,#_setPALevel_setup_1_243
   13AD E0            [24] 4976 	movx	a,@dptr
   13AE 54 F9         [12] 4977 	anl	a,#0xF9
   13B0 F0            [24] 4978 	movx	@dptr,a
                           4979 ;	../nRFLE.c:93: rf_write_register(RF_RF_SETUP,&setup,1);
   13B1 90r00r08      [24] 4980 	mov	dptr,#_rf_write_register_PARM_2
   13B4 74r88         [12] 4981 	mov	a,#_setPALevel_setup_1_243
   13B6 F0            [24] 4982 	movx	@dptr,a
   13B7 74s00         [12] 4983 	mov	a,#(_setPALevel_setup_1_243 >> 8)
   13B9 A3            [24] 4984 	inc	dptr
   13BA F0            [24] 4985 	movx	@dptr,a
   13BB E4            [12] 4986 	clr	a
   13BC A3            [24] 4987 	inc	dptr
   13BD F0            [24] 4988 	movx	@dptr,a
   13BE 90r00r0B      [24] 4989 	mov	dptr,#_rf_write_register_PARM_3
   13C1 74 01         [12] 4990 	mov	a,#0x01
   13C3 F0            [24] 4991 	movx	@dptr,a
   13C4 E4            [12] 4992 	clr	a
   13C5 A3            [24] 4993 	inc	dptr
   13C6 F0            [24] 4994 	movx	@dptr,a
   13C7 75 82 06      [24] 4995 	mov	dpl,#0x06
   13CA 02r00rBC      [24] 4996 	ljmp	_rf_write_register
                           4997 ;------------------------------------------------------------
                           4998 ;Allocation info for local variables in function 'openAllPipe'
                           4999 ;------------------------------------------------------------
                           5000 ;buffer                    Allocated with name '_openAllPipe_buffer_1_244'
                           5001 ;setup                     Allocated with name '_openAllPipe_setup_1_244'
                           5002 ;------------------------------------------------------------
                           5003 ;	../nRFLE.c:101: void openAllPipe()
                           5004 ;	-----------------------------------------
                           5005 ;	 function openAllPipe
                           5006 ;	-----------------------------------------
   13CD                    5007 _openAllPipe:
                           5008 ;	../nRFLE.c:106: buffer[1]=adr1;
   13CD 90r00r8A      [24] 5009 	mov	dptr,#(_openAllPipe_buffer_1_244 + 0x0001)
   13D0 74 F0         [12] 5010 	mov	a,#0xF0
   13D2 F0            [24] 5011 	movx	@dptr,a
                           5012 ;	../nRFLE.c:107: buffer[2]=adr2;
   13D3 90r00r8B      [24] 5013 	mov	dptr,#(_openAllPipe_buffer_1_244 + 0x0002)
   13D6 74 F0         [12] 5014 	mov	a,#0xF0
   13D8 F0            [24] 5015 	movx	@dptr,a
                           5016 ;	../nRFLE.c:108: buffer[3]=adr3;
   13D9 90r00r8C      [24] 5017 	mov	dptr,#(_openAllPipe_buffer_1_244 + 0x0003)
   13DC 74 F0         [12] 5018 	mov	a,#0xF0
   13DE F0            [24] 5019 	movx	@dptr,a
                           5020 ;	../nRFLE.c:109: buffer[4]=adr4;
   13DF 90r00r8D      [24] 5021 	mov	dptr,#(_openAllPipe_buffer_1_244 + 0x0004)
   13E2 74 F0         [12] 5022 	mov	a,#0xF0
   13E4 F0            [24] 5023 	movx	@dptr,a
                           5024 ;	../nRFLE.c:111: setup = 2; // en_rxaddr ,биты включения каналов B00000010 на прием
   13E5 90r00r8E      [24] 5025 	mov	dptr,#_openAllPipe_setup_1_244
   13E8 74 02         [12] 5026 	mov	a,#0x02
   13EA F0            [24] 5027 	movx	@dptr,a
                           5028 ;	../nRFLE.c:112: rf_write_register(RF_EN_RXADDR, &setup, 1);
   13EB 90r00r08      [24] 5029 	mov	dptr,#_rf_write_register_PARM_2
   13EE 74r8E         [12] 5030 	mov	a,#_openAllPipe_setup_1_244
   13F0 F0            [24] 5031 	movx	@dptr,a
   13F1 74s00         [12] 5032 	mov	a,#(_openAllPipe_setup_1_244 >> 8)
   13F3 A3            [24] 5033 	inc	dptr
   13F4 F0            [24] 5034 	movx	@dptr,a
   13F5 E4            [12] 5035 	clr	a
   13F6 A3            [24] 5036 	inc	dptr
   13F7 F0            [24] 5037 	movx	@dptr,a
   13F8 90r00r0B      [24] 5038 	mov	dptr,#_rf_write_register_PARM_3
   13FB 74 01         [12] 5039 	mov	a,#0x01
   13FD F0            [24] 5040 	movx	@dptr,a
   13FE E4            [12] 5041 	clr	a
   13FF A3            [24] 5042 	inc	dptr
   1400 F0            [24] 5043 	movx	@dptr,a
   1401 75 82 02      [24] 5044 	mov	dpl,#0x02
   1404 12r00rBC      [24] 5045 	lcall	_rf_write_register
                           5046 ;	../nRFLE.c:115: buffer[0]=0xD2;
   1407 90r00r89      [24] 5047 	mov	dptr,#_openAllPipe_buffer_1_244
   140A 74 D2         [12] 5048 	mov	a,#0xD2
   140C F0            [24] 5049 	movx	@dptr,a
                           5050 ;	../nRFLE.c:117: rf_write_register(RF_RX_ADDR_P0,buffer,5);
   140D 90r00r08      [24] 5051 	mov	dptr,#_rf_write_register_PARM_2
   1410 74r89         [12] 5052 	mov	a,#_openAllPipe_buffer_1_244
   1412 F0            [24] 5053 	movx	@dptr,a
   1413 74s00         [12] 5054 	mov	a,#(_openAllPipe_buffer_1_244 >> 8)
   1415 A3            [24] 5055 	inc	dptr
   1416 F0            [24] 5056 	movx	@dptr,a
   1417 E4            [12] 5057 	clr	a
   1418 A3            [24] 5058 	inc	dptr
   1419 F0            [24] 5059 	movx	@dptr,a
   141A 90r00r0B      [24] 5060 	mov	dptr,#_rf_write_register_PARM_3
   141D 74 05         [12] 5061 	mov	a,#0x05
   141F F0            [24] 5062 	movx	@dptr,a
   1420 E4            [12] 5063 	clr	a
   1421 A3            [24] 5064 	inc	dptr
   1422 F0            [24] 5065 	movx	@dptr,a
   1423 75 82 0A      [24] 5066 	mov	dpl,#0x0A
   1426 12r00rBC      [24] 5067 	lcall	_rf_write_register
                           5068 ;	../nRFLE.c:118: rf_write_register(RF_TX_ADDR,buffer,5);
   1429 90r00r08      [24] 5069 	mov	dptr,#_rf_write_register_PARM_2
   142C 74r89         [12] 5070 	mov	a,#_openAllPipe_buffer_1_244
   142E F0            [24] 5071 	movx	@dptr,a
   142F 74s00         [12] 5072 	mov	a,#(_openAllPipe_buffer_1_244 >> 8)
   1431 A3            [24] 5073 	inc	dptr
   1432 F0            [24] 5074 	movx	@dptr,a
   1433 E4            [12] 5075 	clr	a
   1434 A3            [24] 5076 	inc	dptr
   1435 F0            [24] 5077 	movx	@dptr,a
   1436 90r00r0B      [24] 5078 	mov	dptr,#_rf_write_register_PARM_3
   1439 74 05         [12] 5079 	mov	a,#0x05
   143B F0            [24] 5080 	movx	@dptr,a
   143C E4            [12] 5081 	clr	a
   143D A3            [24] 5082 	inc	dptr
   143E F0            [24] 5083 	movx	@dptr,a
   143F 75 82 10      [24] 5084 	mov	dpl,#0x10
   1442 12r00rBC      [24] 5085 	lcall	_rf_write_register
                           5086 ;	../nRFLE.c:122: buffer[0]=0xE1;
   1445 90r00r89      [24] 5087 	mov	dptr,#_openAllPipe_buffer_1_244
   1448 74 E1         [12] 5088 	mov	a,#0xE1
   144A F0            [24] 5089 	movx	@dptr,a
                           5090 ;	../nRFLE.c:124: rf_write_register(RF_RX_ADDR_P0+1,buffer,5);
   144B 90r00r08      [24] 5091 	mov	dptr,#_rf_write_register_PARM_2
   144E 74r89         [12] 5092 	mov	a,#_openAllPipe_buffer_1_244
   1450 F0            [24] 5093 	movx	@dptr,a
   1451 74s00         [12] 5094 	mov	a,#(_openAllPipe_buffer_1_244 >> 8)
   1453 A3            [24] 5095 	inc	dptr
   1454 F0            [24] 5096 	movx	@dptr,a
   1455 E4            [12] 5097 	clr	a
   1456 A3            [24] 5098 	inc	dptr
   1457 F0            [24] 5099 	movx	@dptr,a
   1458 90r00r0B      [24] 5100 	mov	dptr,#_rf_write_register_PARM_3
   145B 74 05         [12] 5101 	mov	a,#0x05
   145D F0            [24] 5102 	movx	@dptr,a
   145E E4            [12] 5103 	clr	a
   145F A3            [24] 5104 	inc	dptr
   1460 F0            [24] 5105 	movx	@dptr,a
   1461 75 82 0B      [24] 5106 	mov	dpl,#0x0B
   1464 12r00rBC      [24] 5107 	lcall	_rf_write_register
                           5108 ;	../nRFLE.c:126: setup=32; //
   1467 90r00r8E      [24] 5109 	mov	dptr,#_openAllPipe_setup_1_244
   146A 74 20         [12] 5110 	mov	a,#0x20
   146C F0            [24] 5111 	movx	@dptr,a
                           5112 ;	../nRFLE.c:127: rf_write_register(RF_RX_PW_P0+1,&setup,1);
   146D 90r00r08      [24] 5113 	mov	dptr,#_rf_write_register_PARM_2
   1470 74r8E         [12] 5114 	mov	a,#_openAllPipe_setup_1_244
   1472 F0            [24] 5115 	movx	@dptr,a
   1473 74s00         [12] 5116 	mov	a,#(_openAllPipe_setup_1_244 >> 8)
   1475 A3            [24] 5117 	inc	dptr
   1476 F0            [24] 5118 	movx	@dptr,a
   1477 E4            [12] 5119 	clr	a
   1478 A3            [24] 5120 	inc	dptr
   1479 F0            [24] 5121 	movx	@dptr,a
   147A 90r00r0B      [24] 5122 	mov	dptr,#_rf_write_register_PARM_3
   147D 74 01         [12] 5123 	mov	a,#0x01
   147F F0            [24] 5124 	movx	@dptr,a
   1480 E4            [12] 5125 	clr	a
   1481 A3            [24] 5126 	inc	dptr
   1482 F0            [24] 5127 	movx	@dptr,a
   1483 75 82 12      [24] 5128 	mov	dpl,#0x12
   1486 02r00rBC      [24] 5129 	ljmp	_rf_write_register
                           5130 ;------------------------------------------------------------
                           5131 ;Allocation info for local variables in function 'isr_ifp'
                           5132 ;------------------------------------------------------------
                           5133 ;	main.c:50: interrupt_isr_ifp()
                           5134 ;	-----------------------------------------
                           5135 ;	 function isr_ifp
                           5136 ;	-----------------------------------------
   1489                    5137 _isr_ifp:
   1489 C0*00         [24] 5138 	push	bits
   148B C0 E0         [24] 5139 	push	acc
   148D C0 F0         [24] 5140 	push	b
   148F C0 82         [24] 5141 	push	dpl
   1491 C0 83         [24] 5142 	push	dph
   1493 C0 07         [24] 5143 	push	(0+7)
   1495 C0 06         [24] 5144 	push	(0+6)
   1497 C0 05         [24] 5145 	push	(0+5)
   1499 C0 04         [24] 5146 	push	(0+4)
   149B C0 03         [24] 5147 	push	(0+3)
   149D C0 02         [24] 5148 	push	(0+2)
   149F C0 01         [24] 5149 	push	(0+1)
   14A1 C0 00         [24] 5150 	push	(0+0)
   14A3 C0 D0         [24] 5151 	push	psw
   14A5 75 D0 00      [24] 5152 	mov	psw,#0x00
                           5153 ;	main.c:52: timer1_stop();
   14A8 C2 8E         [12] 5154 	clr _TCON_SB_TR1 
                           5155 ;	main.c:53: if(clientnf.countPWM !=0) {
   14AA 90r00r90      [24] 5156 	mov	dptr,#(_clientnf + 0x0001)
   14AD E0            [24] 5157 	movx	a,@dptr
   14AE FE            [12] 5158 	mov	r6,a
   14AF A3            [24] 5159 	inc	dptr
   14B0 E0            [24] 5160 	movx	a,@dptr
   14B1 FF            [12] 5161 	mov	r7,a
   14B2 4E            [12] 5162 	orl	a,r6
   14B3 60 3F         [24] 5163 	jz	00102$
                           5164 ;	main.c:55: timer1_set_t1_val(65535-DIMSTART*(DIMMERSTEP-clientnf.countPWM) );
   14B5 74 64         [12] 5165 	mov	a,#0x64
   14B7 C3            [12] 5166 	clr	c
   14B8 9E            [12] 5167 	subb	a,r6
   14B9 FE            [12] 5168 	mov	r6,a
   14BA E4            [12] 5169 	clr	a
   14BB 9F            [12] 5170 	subb	a,r7
   14BC FF            [12] 5171 	mov	r7,a
   14BD 90r00r00      [24] 5172 	mov	dptr,#__mullong_PARM_2
   14C0 EE            [12] 5173 	mov	a,r6
   14C1 F0            [24] 5174 	movx	@dptr,a
   14C2 EF            [12] 5175 	mov	a,r7
   14C3 A3            [24] 5176 	inc	dptr
   14C4 F0            [24] 5177 	movx	@dptr,a
   14C5 EF            [12] 5178 	mov	a,r7
   14C6 33            [12] 5179 	rlc	a
   14C7 95 E0         [12] 5180 	subb	a,acc
   14C9 A3            [24] 5181 	inc	dptr
   14CA F0            [24] 5182 	movx	@dptr,a
   14CB A3            [24] 5183 	inc	dptr
   14CC F0            [24] 5184 	movx	@dptr,a
   14CD 90 00 85      [24] 5185 	mov	dptr,#(0x85&0x00ff)
   14D0 E4            [12] 5186 	clr	a
   14D1 F5 F0         [12] 5187 	mov	b,a
   14D3 12r00r00      [24] 5188 	lcall	__mullong
   14D6 AC 82         [24] 5189 	mov	r4,dpl
   14D8 AD 83         [24] 5190 	mov	r5,dph
   14DA AE F0         [24] 5191 	mov	r6,b
   14DC FF            [12] 5192 	mov	r7,a
   14DD 74 FF         [12] 5193 	mov	a,#0xFF
   14DF C3            [12] 5194 	clr	c
   14E0 9C            [12] 5195 	subb	a,r4
   14E1 FC            [12] 5196 	mov	r4,a
   14E2 74 FF         [12] 5197 	mov	a,#0xFF
   14E4 9D            [12] 5198 	subb	a,r5
   14E5 FD            [12] 5199 	mov	r5,a
   14E6 E4            [12] 5200 	clr	a
   14E7 9E            [12] 5201 	subb	a,r6
   14E8 FE            [12] 5202 	mov	r6,a
   14E9 E4            [12] 5203 	clr	a
   14EA 9F            [12] 5204 	subb	a,r7
   14EB FF            [12] 5205 	mov	r7,a
   14EC 8C 8B         [24] 5206 	mov	((_T1 >> 0) & 0xFF),r4
   14EE 8D 8D         [24] 5207 	mov	((_T1 >> 8) & 0xFF),r5
                           5208 ;	main.c:57: timer1_run();
   14F0 D2 8E         [12] 5209 	setb _TCON_SB_TR1 
   14F2 80 06         [24] 5210 	sjmp	00103$
   14F4                    5211 00102$:
                           5212 ;	main.c:59: else gpio_pin_val_clear(DIMMPIN);
   14F4 75 82 02      [24] 5213 	mov	dpl,#0x02
   14F7 12r07r51      [24] 5214 	lcall	_gpio_pin_val_clear
   14FA                    5215 00103$:
                           5216 ;	main.c:60: stdimm=1;
   14FA 90r00rA1      [24] 5217 	mov	dptr,#_stdimm
   14FD 74 01         [12] 5218 	mov	a,#0x01
   14FF F0            [24] 5219 	movx	@dptr,a
   1500 D0 D0         [24] 5220 	pop	psw
   1502 D0 00         [24] 5221 	pop	(0+0)
   1504 D0 01         [24] 5222 	pop	(0+1)
   1506 D0 02         [24] 5223 	pop	(0+2)
   1508 D0 03         [24] 5224 	pop	(0+3)
   150A D0 04         [24] 5225 	pop	(0+4)
   150C D0 05         [24] 5226 	pop	(0+5)
   150E D0 06         [24] 5227 	pop	(0+6)
   1510 D0 07         [24] 5228 	pop	(0+7)
   1512 D0 83         [24] 5229 	pop	dph
   1514 D0 82         [24] 5230 	pop	dpl
   1516 D0 F0         [24] 5231 	pop	b
   1518 D0 E0         [24] 5232 	pop	acc
   151A D0*00         [24] 5233 	pop	bits
   151C 32            [24] 5234 	reti
                           5235 ;------------------------------------------------------------
                           5236 ;Allocation info for local variables in function 'isr_t1'
                           5237 ;------------------------------------------------------------
                           5238 ;	main.c:64: interrupt_isr_t1() {
                           5239 ;	-----------------------------------------
                           5240 ;	 function isr_t1
                           5241 ;	-----------------------------------------
   151D                    5242 _isr_t1:
   151D C0*00         [24] 5243 	push	bits
   151F C0 E0         [24] 5244 	push	acc
   1521 C0 F0         [24] 5245 	push	b
   1523 C0 82         [24] 5246 	push	dpl
   1525 C0 83         [24] 5247 	push	dph
   1527 C0 07         [24] 5248 	push	(0+7)
   1529 C0 06         [24] 5249 	push	(0+6)
   152B C0 05         [24] 5250 	push	(0+5)
   152D C0 04         [24] 5251 	push	(0+4)
   152F C0 03         [24] 5252 	push	(0+3)
   1531 C0 02         [24] 5253 	push	(0+2)
   1533 C0 01         [24] 5254 	push	(0+1)
   1535 C0 00         [24] 5255 	push	(0+0)
   1537 C0 D0         [24] 5256 	push	psw
   1539 75 D0 00      [24] 5257 	mov	psw,#0x00
                           5258 ;	main.c:66: if (stdimm) {
   153C 90r00rA1      [24] 5259 	mov	dptr,#_stdimm
   153F E0            [24] 5260 	movx	a,@dptr
   1540 FF            [12] 5261 	mov	r7,a
   1541 60 13         [24] 5262 	jz	00102$
                           5263 ;	main.c:67: gpio_pin_val_set(DIMMPIN); 
   1543 75 82 02      [24] 5264 	mov	dpl,#0x02
   1546 12r07rBC      [24] 5265 	lcall	_gpio_pin_val_set
                           5266 ;	main.c:68: timer1_set_t1_val(65535-100);
   1549 75 8B 9B      [24] 5267 	mov	((_T1 >> 0) & 0xFF),#0x9B
   154C 75 8D FF      [24] 5268 	mov	((_T1 >> 8) & 0xFF),#0xFF
                           5269 ;	main.c:69: stdimm=0;
   154F 90r00rA1      [24] 5270 	mov	dptr,#_stdimm
   1552 E4            [12] 5271 	clr	a
   1553 F0            [24] 5272 	movx	@dptr,a
   1554 80 06         [24] 5273 	sjmp	00104$
   1556                    5274 00102$:
                           5275 ;	main.c:71: gpio_pin_val_clear(DIMMPIN);
   1556 75 82 02      [24] 5276 	mov	dpl,#0x02
   1559 12r07r51      [24] 5277 	lcall	_gpio_pin_val_clear
   155C                    5278 00104$:
   155C D0 D0         [24] 5279 	pop	psw
   155E D0 00         [24] 5280 	pop	(0+0)
   1560 D0 01         [24] 5281 	pop	(0+1)
   1562 D0 02         [24] 5282 	pop	(0+2)
   1564 D0 03         [24] 5283 	pop	(0+3)
   1566 D0 04         [24] 5284 	pop	(0+4)
   1568 D0 05         [24] 5285 	pop	(0+5)
   156A D0 06         [24] 5286 	pop	(0+6)
   156C D0 07         [24] 5287 	pop	(0+7)
   156E D0 83         [24] 5288 	pop	dph
   1570 D0 82         [24] 5289 	pop	dpl
   1572 D0 F0         [24] 5290 	pop	b
   1574 D0 E0         [24] 5291 	pop	acc
   1576 D0*00         [24] 5292 	pop	bits
   1578 32            [24] 5293 	reti
                           5294 ;------------------------------------------------------------
                           5295 ;Allocation info for local variables in function 'dimmon'
                           5296 ;------------------------------------------------------------
                           5297 ;mode                      Allocated with name '_dimmon_mode_1_249'
                           5298 ;------------------------------------------------------------
                           5299 ;	main.c:74: void dimmon(uint8_t mode) // функция управлением вкл/выкл
                           5300 ;	-----------------------------------------
                           5301 ;	 function dimmon
                           5302 ;	-----------------------------------------
   1579                    5303 _dimmon:
   1579 E5 82         [12] 5304 	mov	a,dpl
                           5305 ;	main.c:76: if (mode) interrupt_control_ifp_enable();
   157B 90r00rA2      [24] 5306 	mov	dptr,#_dimmon_mode_1_249
   157E F0            [24] 5307 	movx	@dptr,a
   157F FF            [12] 5308 	mov	r7,a
   1580 60 04         [24] 5309 	jz	00102$
   1582 D2 A8         [12] 5310 	setb _IEN0_SB_IFP 
   1584 80 0E         [24] 5311 	sjmp	00103$
   1586                    5312 00102$:
                           5313 ;	main.c:78: interrupt_control_ifp_disable();
   1586 C2 A8         [12] 5314 	clr _IEN0_SB_IFP 
                           5315 ;	main.c:79: timer1_stop();
   1588 C2 8E         [12] 5316 	clr _TCON_SB_TR1 
                           5317 ;	main.c:80: gpio_pin_val_clear(DIMMPIN);
   158A 75 82 02      [24] 5318 	mov	dpl,#0x02
   158D C0 07         [24] 5319 	push	ar7
   158F 12r07r51      [24] 5320 	lcall	_gpio_pin_val_clear
   1592 D0 07         [24] 5321 	pop	ar7
   1594                    5322 00103$:
                           5323 ;	main.c:82: clientnf.test_data=mode;
   1594 90r00r92      [24] 5324 	mov	dptr,#(_clientnf + 0x0003)
   1597 EF            [12] 5325 	mov	a,r7
   1598 F0            [24] 5326 	movx	@dptr,a
   1599 22            [24] 5327 	ret
                           5328 ;------------------------------------------------------------
                           5329 ;Allocation info for local variables in function 'isr_rtc2'
                           5330 ;------------------------------------------------------------
                           5331 ;	main.c:89: interrupt_isr_rtc2()
                           5332 ;	-----------------------------------------
                           5333 ;	 function isr_rtc2
                           5334 ;	-----------------------------------------
   159A                    5335 _isr_rtc2:
   159A C0 E0         [24] 5336 	push	acc
   159C C0 82         [24] 5337 	push	dpl
   159E C0 83         [24] 5338 	push	dph
   15A0 C0 D0         [24] 5339 	push	psw
                           5340 ;	main.c:91: countrtc++;
   15A2 90r00r00      [24] 5341 	mov	dptr,#_countrtc
   15A5 E0            [24] 5342 	movx	a,@dptr
   15A6 24 01         [12] 5343 	add	a,#0x01
   15A8 F0            [24] 5344 	movx	@dptr,a
   15A9 A3            [24] 5345 	inc	dptr
   15AA E0            [24] 5346 	movx	a,@dptr
   15AB 34 00         [12] 5347 	addc	a,#0x00
   15AD F0            [24] 5348 	movx	@dptr,a
   15AE A3            [24] 5349 	inc	dptr
   15AF E0            [24] 5350 	movx	a,@dptr
   15B0 34 00         [12] 5351 	addc	a,#0x00
   15B2 F0            [24] 5352 	movx	@dptr,a
   15B3 A3            [24] 5353 	inc	dptr
   15B4 E0            [24] 5354 	movx	a,@dptr
   15B5 34 00         [12] 5355 	addc	a,#0x00
   15B7 F0            [24] 5356 	movx	@dptr,a
   15B8 D0 D0         [24] 5357 	pop	psw
   15BA D0 83         [24] 5358 	pop	dph
   15BC D0 82         [24] 5359 	pop	dpl
   15BE D0 E0         [24] 5360 	pop	acc
   15C0 32            [24] 5361 	reti
                           5362 ;	eliminated unneeded mov psw,# (no regs used in bank)
                           5363 ;	eliminated unneeded push/pop b
                           5364 ;------------------------------------------------------------
                           5365 ;Allocation info for local variables in function 'main'
                           5366 ;------------------------------------------------------------
                           5367 ;state                     Allocated with name '_main_state_1_253'
                           5368 ;count                     Allocated with name '_main_count_1_253'
                           5369 ;dat                       Allocated with name '_main_dat_1_253'
                           5370 ;st                        Allocated with name '_main_st_1_253'
                           5371 ;countpause                Allocated with name '_main_countpause_1_253'
                           5372 ;rewers                    Allocated with name '_main_rewers_1_253'
                           5373 ;statesend                 Allocated with name '_main_statesend_1_253'
                           5374 ;radiosend                 Allocated with name '_main_radiosend_1_253'
                           5375 ;------------------------------------------------------------
                           5376 ;	main.c:96: void main()
                           5377 ;	-----------------------------------------
                           5378 ;	 function main
                           5379 ;	-----------------------------------------
   15C1                    5380 _main:
                           5381 ;	main.c:106: CLKLFCTRL=1; // 0 -внешний кварц на P0.1 и P0.0. 1 - внутренний кварц.
   15C1 75 AD 01      [24] 5382 	mov	_CLKLFCTRL,#0x01
                           5383 ;	main.c:107: rtc2_configure(RTC2_CONFIG_OPTION_COMPARE_MODE_0_RESET_AT_IRQ ,8191); //65535=2 сек, 32767=1 сек,16383 = 0.250 сек ,8191 = 0.125 сек
   15C4 90r00r7D      [24] 5384 	mov	dptr,#_rtc2_configure_PARM_2
   15C7 74 FF         [12] 5385 	mov	a,#0xFF
   15C9 F0            [24] 5386 	movx	@dptr,a
   15CA 74 1F         [12] 5387 	mov	a,#0x1F
   15CC A3            [24] 5388 	inc	dptr
   15CD F0            [24] 5389 	movx	@dptr,a
   15CE 75 82 06      [24] 5390 	mov	dpl,#0x06
   15D1 12r12r19      [24] 5391 	lcall	_rtc2_configure
                           5392 ;	main.c:108: rtc2_run();
   15D4 43 B3 01      [24] 5393 	orl	_RTC2CON,#0x01
                           5394 ;	main.c:109: pwr_clk_mgmt_wakeup_configure(PWR_CLK_MGMT_WAKEUP_CONFIG_OPTION_WAKEUP_ON_RTC2_TICK_IF_INT_ENABLED,0);
   15D7 90r00r4E      [24] 5395 	mov	dptr,#_pwr_clk_mgmt_wakeup_configure_PARM_2
   15DA E4            [12] 5396 	clr	a
   15DB F0            [24] 5397 	movx	@dptr,a
   15DC E4            [12] 5398 	clr	a
   15DD A3            [24] 5399 	inc	dptr
   15DE F0            [24] 5400 	movx	@dptr,a
   15DF 75 82 00      [24] 5401 	mov	dpl,#0x00
   15E2 12r09r9B      [24] 5402 	lcall	_pwr_clk_mgmt_wakeup_configure
                           5403 ;	main.c:111: gpio_pin_configure(BUTTON,GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT|GPIO_PIN_CONFIG_OPTION_PIN_MODE_INPUT_BUFFER_ON_PULL_UP_RESISTOR); // для кнопки на вход и подтянуть резистором. 
   15E5 90r00r38      [24] 5404 	mov	dptr,#_gpio_pin_configure_PARM_2
   15E8 74 41         [12] 5405 	mov	a,#0x41
   15EA F0            [24] 5406 	movx	@dptr,a
   15EB 75 82 04      [24] 5407 	mov	dpl,#0x04
   15EE 12r04rC2      [24] 5408 	lcall	_gpio_pin_configure
                           5409 ;	main.c:113: gpio_pin_configure(DIMMPIN,GPIO_PIN_CONFIG_OPTION_DIR_OUTPUT);
   15F1 90r00r38      [24] 5410 	mov	dptr,#_gpio_pin_configure_PARM_2
   15F4 74 01         [12] 5411 	mov	a,#0x01
   15F6 F0            [24] 5412 	movx	@dptr,a
   15F7 75 82 02      [24] 5413 	mov	dpl,#0x02
   15FA 12r04rC2      [24] 5414 	lcall	_gpio_pin_configure
                           5415 ;	main.c:114: gpio_pin_val_set(DIMMPIN);
   15FD 75 82 02      [24] 5416 	mov	dpl,#0x02
   1600 12r07rBC      [24] 5417 	lcall	_gpio_pin_val_set
                           5418 ;	main.c:115: delay_ms(500); 
   1603 90 01 F4      [24] 5419 	mov	dptr,#0x01F4
   1606 12r08rBF      [24] 5420 	lcall	_delay_ms
                           5421 ;	main.c:116: gpio_pin_val_clear(DIMMPIN);
   1609 75 82 02      [24] 5422 	mov	dpl,#0x02
   160C 12r07r51      [24] 5423 	lcall	_gpio_pin_val_clear
                           5424 ;	main.c:117: delay_ms(500); 
   160F 90 01 F4      [24] 5425 	mov	dptr,#0x01F4
   1612 12r08rBF      [24] 5426 	lcall	_delay_ms
                           5427 ;	main.c:120: radiobegin(); //
   1615 12r12r49      [24] 5428 	lcall	_radiobegin
                           5429 ;	main.c:121: openAllPipe(); // открываем прием/передачу
   1618 12r13rCD      [24] 5430 	lcall	_openAllPipe
                           5431 ;	main.c:123: setChannel(100);
   161B 75 82 64      [24] 5432 	mov	dpl,#0x64
   161E 12r12r6E      [24] 5433 	lcall	_setChannel
                           5434 ;	main.c:124: setDataRate(2); // 1 - 250кб , 2 - 1 мб , 3 -2 мб.
   1621 75 82 02      [24] 5435 	mov	dpl,#0x02
   1624 12r12r90      [24] 5436 	lcall	_setDataRate
                           5437 ;	main.c:125: setAutoAck(false);
   1627 75 82 00      [24] 5438 	mov	dpl,#0x00
   162A 12r12rF2      [24] 5439 	lcall	_setAutoAck
                           5440 ;	main.c:126: setCRCLength(2); // 0 - crc off ,1 - 8bit ,2 - 16bit
   162D 75 82 02      [24] 5441 	mov	dpl,#0x02
   1630 12r13r25      [24] 5442 	lcall	_setCRCLength
                           5443 ;	main.c:127: setPALevel(3) ; // мощность 0..3
   1633 75 82 03      [24] 5444 	mov	dpl,#0x03
   1636 12r13r8E      [24] 5445 	lcall	_setPALevel
                           5446 ;	main.c:130: clientnf.identifier=chclient;
   1639 90r00r8F      [24] 5447 	mov	dptr,#_clientnf
   163C 74 01         [12] 5448 	mov	a,#0x01
   163E F0            [24] 5449 	movx	@dptr,a
                           5450 ;	main.c:131: clientnf.countPWM=10;
   163F 90r00r90      [24] 5451 	mov	dptr,#(_clientnf + 0x0001)
   1642 74 0A         [12] 5452 	mov	a,#0x0A
   1644 F0            [24] 5453 	movx	@dptr,a
   1645 E4            [12] 5454 	clr	a
   1646 A3            [24] 5455 	inc	dptr
   1647 F0            [24] 5456 	movx	@dptr,a
                           5457 ;	main.c:133: sti();
   1648 D2 AF         [12] 5458 	setb _IEN0_SB_GLOBAL 
                           5459 ;	main.c:134: interrupt_configure_ifp(INTERRUPT_IFP_INPUT_GPINT0,INTERRUPT_IFP_CONFIG_OPTION_ENABLE | INTERRUPT_IFP_CONFIG_OPTION_TYPE_FALLING_EDGE);
   164A 90r00r59      [24] 5460 	mov	dptr,#_interrupt_configure_ifp_PARM_2
   164D 74 81         [12] 5461 	mov	a,#0x81
   164F F0            [24] 5462 	movx	@dptr,a
   1650 75 82 08      [24] 5463 	mov	dpl,#0x08
   1653 12r0Ar87      [24] 5464 	lcall	_interrupt_configure_ifp
                           5465 ;	main.c:135: interrupt_control_ifp_enable();
   1656 D2 A8         [12] 5466 	setb _IEN0_SB_IFP 
                           5467 ;	main.c:137: interrupt_control_t1_enable()	;
   1658 D2 AB         [12] 5468 	setb _IEN0_SB_T1 
                           5469 ;	main.c:138: timer1_configure(TIMER1_CONFIG_OPTION_MODE_1_16_BIT_CTR_TMR,0);
   165A 90r00r63      [24] 5470 	mov	dptr,#_timer1_configure_PARM_2
   165D E4            [12] 5471 	clr	a
   165E F0            [24] 5472 	movx	@dptr,a
   165F E4            [12] 5473 	clr	a
   1660 A3            [24] 5474 	inc	dptr
   1661 F0            [24] 5475 	movx	@dptr,a
   1662 75 82 10      [24] 5476 	mov	dpl,#0x10
   1665 12r0Br9A      [24] 5477 	lcall	_timer1_configure
                           5478 ;	main.c:139: timer1_run();
   1668 D2 8E         [12] 5479 	setb _TCON_SB_TR1 
                           5480 ;	main.c:144: while(1)
   166A                    5481 00123$:
                           5482 ;	main.c:151: if (countrtc-radiosend >timesend) {
   166A 90r00r00      [24] 5483 	mov	dptr,#_countrtc
   166D E0            [24] 5484 	movx	a,@dptr
   166E FC            [12] 5485 	mov	r4,a
   166F A3            [24] 5486 	inc	dptr
   1670 E0            [24] 5487 	movx	a,@dptr
   1671 FD            [12] 5488 	mov	r5,a
   1672 A3            [24] 5489 	inc	dptr
   1673 E0            [24] 5490 	movx	a,@dptr
   1674 FE            [12] 5491 	mov	r6,a
   1675 A3            [24] 5492 	inc	dptr
   1676 E0            [24] 5493 	movx	a,@dptr
   1677 FF            [12] 5494 	mov	r7,a
   1678 C3            [12] 5495 	clr	c
   1679 74 02         [12] 5496 	mov	a,#0x02
   167B 9C            [12] 5497 	subb	a,r4
   167C E4            [12] 5498 	clr	a
   167D 9D            [12] 5499 	subb	a,r5
   167E E4            [12] 5500 	clr	a
   167F 9E            [12] 5501 	subb	a,r6
   1680 E4            [12] 5502 	clr	a
   1681 9F            [12] 5503 	subb	a,r7
   1682 50 E6         [24] 5504 	jnc	00123$
                           5505 ;	main.c:153: rf_write_tx_payload((const uint8_t*)&clientnf, 32, true); //transmit received char over RF
   1684 7Er8F         [12] 5506 	mov	r6,#_clientnf
   1686 7Fs00         [12] 5507 	mov	r7,#(_clientnf >> 8)
   1688 7D 00         [12] 5508 	mov	r5,#0x00
   168A 90r00r0E      [24] 5509 	mov	dptr,#_rf_write_tx_payload_PARM_2
   168D 74 20         [12] 5510 	mov	a,#0x20
   168F F0            [24] 5511 	movx	@dptr,a
   1690 E4            [12] 5512 	clr	a
   1691 A3            [24] 5513 	inc	dptr
   1692 F0            [24] 5514 	movx	@dptr,a
   1693 90r00r10      [24] 5515 	mov	dptr,#_rf_write_tx_payload_PARM_3
   1696 74 01         [12] 5516 	mov	a,#0x01
   1698 F0            [24] 5517 	movx	@dptr,a
   1699 8E 82         [24] 5518 	mov	dpl,r6
   169B 8F 83         [24] 5519 	mov	dph,r7
   169D 8D F0         [24] 5520 	mov	b,r5
   169F 12r01r00      [24] 5521 	lcall	_rf_write_tx_payload
                           5522 ;	main.c:156: while(!(rf_irq_pin_active() && rf_irq_tx_ds_active()));
   16A2                    5523 00102$:
   16A2 30 C1 FD      [24] 5524 	jnb	_IRCON_SB_RFIRQ,00102$
   16A5 90r00r18      [24] 5525 	mov	dptr,#_rf_spi_execute_command_PARM_2
   16A8 E4            [12] 5526 	clr	a
   16A9 F0            [24] 5527 	movx	@dptr,a
   16AA E4            [12] 5528 	clr	a
   16AB A3            [24] 5529 	inc	dptr
   16AC F0            [24] 5530 	movx	@dptr,a
   16AD E4            [12] 5531 	clr	a
   16AE A3            [24] 5532 	inc	dptr
   16AF F0            [24] 5533 	movx	@dptr,a
   16B0 90r00r1B      [24] 5534 	mov	dptr,#_rf_spi_execute_command_PARM_3
   16B3 E4            [12] 5535 	clr	a
   16B4 F0            [24] 5536 	movx	@dptr,a
   16B5 E4            [12] 5537 	clr	a
   16B6 A3            [24] 5538 	inc	dptr
   16B7 F0            [24] 5539 	movx	@dptr,a
   16B8 90r00r1D      [24] 5540 	mov	dptr,#_rf_spi_execute_command_PARM_4
   16BB 74 01         [12] 5541 	mov	a,#0x01
   16BD F0            [24] 5542 	movx	@dptr,a
   16BE 75 82 FF      [24] 5543 	mov	dpl,#0xFF
   16C1 12r02r35      [24] 5544 	lcall	_rf_spi_execute_command
   16C4 E5 82         [12] 5545 	mov	a,dpl
   16C6 30 E5 D9      [24] 5546 	jnb	acc.5,00102$
                           5547 ;	main.c:158: rf_irq_clear_all(); //clear all interrupts in the 24L01
   16C9 12r01rC6      [24] 5548 	lcall	_rf_irq_clear_all
                           5549 ;	main.c:159: rf_set_as_rx(true); //change the device to an RX to get the character back from the other 24L01
   16CC 75 82 01      [24] 5550 	mov	dpl,#0x01
   16CF 12r01r66      [24] 5551 	lcall	_rf_set_as_rx
                           5552 ;	main.c:163: for(count = 0; count < 25000; count++)
   16D2 7E 00         [12] 5553 	mov	r6,#0x00
   16D4 7F 00         [12] 5554 	mov	r7,#0x00
   16D6                    5555 00125$:
                           5556 ;	main.c:166: if((rf_irq_pin_active() && rf_irq_rx_dr_active()))
   16D6 20 C1 03      [24] 5557 	jb	_IRCON_SB_RFIRQ,00171$
   16D9 02r17r6A      [24] 5558 	ljmp	00109$
   16DC                    5559 00171$:
   16DC 90r00r18      [24] 5560 	mov	dptr,#_rf_spi_execute_command_PARM_2
   16DF E4            [12] 5561 	clr	a
   16E0 F0            [24] 5562 	movx	@dptr,a
   16E1 E4            [12] 5563 	clr	a
   16E2 A3            [24] 5564 	inc	dptr
   16E3 F0            [24] 5565 	movx	@dptr,a
   16E4 E4            [12] 5566 	clr	a
   16E5 A3            [24] 5567 	inc	dptr
   16E6 F0            [24] 5568 	movx	@dptr,a
   16E7 90r00r1B      [24] 5569 	mov	dptr,#_rf_spi_execute_command_PARM_3
   16EA E4            [12] 5570 	clr	a
   16EB F0            [24] 5571 	movx	@dptr,a
   16EC E4            [12] 5572 	clr	a
   16ED A3            [24] 5573 	inc	dptr
   16EE F0            [24] 5574 	movx	@dptr,a
   16EF 90r00r1D      [24] 5575 	mov	dptr,#_rf_spi_execute_command_PARM_4
   16F2 74 01         [12] 5576 	mov	a,#0x01
   16F4 F0            [24] 5577 	movx	@dptr,a
   16F5 75 82 FF      [24] 5578 	mov	dpl,#0xFF
   16F8 C0 07         [24] 5579 	push	ar7
   16FA C0 06         [24] 5580 	push	ar6
   16FC 12r02r35      [24] 5581 	lcall	_rf_spi_execute_command
   16FF E5 82         [12] 5582 	mov	a,dpl
   1701 D0 06         [24] 5583 	pop	ar6
   1703 D0 07         [24] 5584 	pop	ar7
   1705 30 E6 62      [24] 5585 	jnb	acc.6,00109$
                           5586 ;	main.c:169: if (clientnf.count <= 2147483646) clientnf.count++;      /// счетчик передач для контроля качества канала
   1708 90r00r95      [24] 5587 	mov	dptr,#(_clientnf + 0x0006)
   170B E0            [24] 5588 	movx	a,@dptr
   170C FA            [12] 5589 	mov	r2,a
   170D A3            [24] 5590 	inc	dptr
   170E E0            [24] 5591 	movx	a,@dptr
   170F FB            [12] 5592 	mov	r3,a
   1710 A3            [24] 5593 	inc	dptr
   1711 E0            [24] 5594 	movx	a,@dptr
   1712 FC            [12] 5595 	mov	r4,a
   1713 A3            [24] 5596 	inc	dptr
   1714 E0            [24] 5597 	movx	a,@dptr
   1715 FD            [12] 5598 	mov	r5,a
   1716 C3            [12] 5599 	clr	c
   1717 74 FE         [12] 5600 	mov	a,#0xFE
   1719 9A            [12] 5601 	subb	a,r2
   171A 74 FF         [12] 5602 	mov	a,#0xFF
   171C 9B            [12] 5603 	subb	a,r3
   171D 74 FF         [12] 5604 	mov	a,#0xFF
   171F 9C            [12] 5605 	subb	a,r4
   1720 74 FF         [12] 5606 	mov	a,#(0x7F ^ 0x80)
   1722 8D F0         [24] 5607 	mov	b,r5
   1724 63 F0 80      [24] 5608 	xrl	b,#0x80
   1727 95 F0         [12] 5609 	subb	a,b
   1729 40 1D         [24] 5610 	jc	00106$
   172B 0A            [12] 5611 	inc	r2
   172C BA 00 09      [24] 5612 	cjne	r2,#0x00,00174$
   172F 0B            [12] 5613 	inc	r3
   1730 BB 00 05      [24] 5614 	cjne	r3,#0x00,00174$
   1733 0C            [12] 5615 	inc	r4
   1734 BC 00 01      [24] 5616 	cjne	r4,#0x00,00174$
   1737 0D            [12] 5617 	inc	r5
   1738                    5618 00174$:
   1738 90r00r95      [24] 5619 	mov	dptr,#(_clientnf + 0x0006)
   173B EA            [12] 5620 	mov	a,r2
   173C F0            [24] 5621 	movx	@dptr,a
   173D EB            [12] 5622 	mov	a,r3
   173E A3            [24] 5623 	inc	dptr
   173F F0            [24] 5624 	movx	@dptr,a
   1740 EC            [12] 5625 	mov	a,r4
   1741 A3            [24] 5626 	inc	dptr
   1742 F0            [24] 5627 	movx	@dptr,a
   1743 ED            [12] 5628 	mov	a,r5
   1744 A3            [24] 5629 	inc	dptr
   1745 F0            [24] 5630 	movx	@dptr,a
   1746 80 0E         [24] 5631 	sjmp	00107$
   1748                    5632 00106$:
                           5633 ;	main.c:170: else clientnf.count = 0;
   1748 90r00r95      [24] 5634 	mov	dptr,#(_clientnf + 0x0006)
   174B E4            [12] 5635 	clr	a
   174C F0            [24] 5636 	movx	@dptr,a
   174D E4            [12] 5637 	clr	a
   174E A3            [24] 5638 	inc	dptr
   174F F0            [24] 5639 	movx	@dptr,a
   1750 E4            [12] 5640 	clr	a
   1751 A3            [24] 5641 	inc	dptr
   1752 F0            [24] 5642 	movx	@dptr,a
   1753 E4            [12] 5643 	clr	a
   1754 A3            [24] 5644 	inc	dptr
   1755 F0            [24] 5645 	movx	@dptr,a
   1756                    5646 00107$:
                           5647 ;	main.c:172: rf_read_rx_payload((const uint8_t*)&servernf, 32); //get the payload into data
   1756 90r00r00      [24] 5648 	mov	dptr,#_rf_read_rx_payload_PARM_2
   1759 74 20         [12] 5649 	mov	a,#0x20
   175B F0            [24] 5650 	movx	@dptr,a
   175C E4            [12] 5651 	clr	a
   175D A3            [24] 5652 	inc	dptr
   175E F0            [24] 5653 	movx	@dptr,a
   175F 90r00rA3      [24] 5654 	mov	dptr,#_servernf
   1762 75 F0 00      [24] 5655 	mov	b,#0x00
   1765 12r00r00      [24] 5656 	lcall	_rf_read_rx_payload
                           5657 ;	main.c:173: break;
   1768 80 2C         [24] 5658 	sjmp	00113$
   176A                    5659 00109$:
                           5660 ;	main.c:180: if(count == 24999) clientnf.Error_Message++;
   176A BE A7 18      [24] 5661 	cjne	r6,#0xA7,00126$
   176D BF 61 15      [24] 5662 	cjne	r7,#0x61,00126$
   1770 90r00r93      [24] 5663 	mov	dptr,#(_clientnf + 0x0004)
   1773 E0            [24] 5664 	movx	a,@dptr
   1774 FC            [12] 5665 	mov	r4,a
   1775 A3            [24] 5666 	inc	dptr
   1776 E0            [24] 5667 	movx	a,@dptr
   1777 FD            [12] 5668 	mov	r5,a
   1778 0C            [12] 5669 	inc	r4
   1779 BC 00 01      [24] 5670 	cjne	r4,#0x00,00177$
   177C 0D            [12] 5671 	inc	r5
   177D                    5672 00177$:
   177D 90r00r93      [24] 5673 	mov	dptr,#(_clientnf + 0x0004)
   1780 EC            [12] 5674 	mov	a,r4
   1781 F0            [24] 5675 	movx	@dptr,a
   1782 ED            [12] 5676 	mov	a,r5
   1783 A3            [24] 5677 	inc	dptr
   1784 F0            [24] 5678 	movx	@dptr,a
   1785                    5679 00126$:
                           5680 ;	main.c:163: for(count = 0; count < 25000; count++)
   1785 0E            [12] 5681 	inc	r6
   1786 BE 00 01      [24] 5682 	cjne	r6,#0x00,00178$
   1789 0F            [12] 5683 	inc	r7
   178A                    5684 00178$:
   178A C3            [12] 5685 	clr	c
   178B EE            [12] 5686 	mov	a,r6
   178C 94 A8         [12] 5687 	subb	a,#0xA8
   178E EF            [12] 5688 	mov	a,r7
   178F 94 61         [12] 5689 	subb	a,#0x61
   1791 50 03         [24] 5690 	jnc	00179$
   1793 02r16rD6      [24] 5691 	ljmp	00125$
   1796                    5692 00179$:
   1796                    5693 00113$:
                           5694 ;	main.c:185: rf_irq_clear_all(); //clear interrupts again
   1796 12r01rC6      [24] 5695 	lcall	_rf_irq_clear_all
                           5696 ;	main.c:187: rf_set_as_tx(); //resume normal operation as a TX
   1799 12r01rEB      [24] 5697 	lcall	_rf_set_as_tx
                           5698 ;	main.c:190: if (servernf[0]==chclient){	
   179C 90r00rA3      [24] 5699 	mov	dptr,#_servernf
   179F E0            [24] 5700 	movx	a,@dptr
   17A0 FF            [12] 5701 	mov	r7,a
   17A1 BF 01 02      [24] 5702 	cjne	r7,#0x01,00180$
   17A4 80 03         [24] 5703 	sjmp	00181$
   17A6                    5704 00180$:
   17A6 02r16r6A      [24] 5705 	ljmp	00123$
   17A9                    5706 00181$:
                           5707 ;	main.c:193: if (servernf[1]==10) {
   17A9 90r00rA4      [24] 5708 	mov	dptr,#(_servernf + 0x0001)
   17AC E0            [24] 5709 	movx	a,@dptr
   17AD FF            [12] 5710 	mov	r7,a
   17AE BF 0A 09      [24] 5711 	cjne	r7,#0x0A,00115$
                           5712 ;	main.c:195: dimmon(servernf[3]);
   17B1 90r00rA6      [24] 5713 	mov	dptr,#(_servernf + 0x0003)
   17B4 E0            [24] 5714 	movx	a,@dptr
   17B5 F5 82         [12] 5715 	mov	dpl,a
   17B7 12r15r79      [24] 5716 	lcall	_dimmon
   17BA                    5717 00115$:
                           5718 ;	main.c:198: if (servernf[1]==11) clientnf.countPWM=servernf[3];
   17BA 90r00rA4      [24] 5719 	mov	dptr,#(_servernf + 0x0001)
   17BD E0            [24] 5720 	movx	a,@dptr
   17BE FF            [12] 5721 	mov	r7,a
   17BF BF 0B 02      [24] 5722 	cjne	r7,#0x0B,00184$
   17C2 80 03         [24] 5723 	sjmp	00185$
   17C4                    5724 00184$:
   17C4 02r16r6A      [24] 5725 	ljmp	00123$
   17C7                    5726 00185$:
   17C7 90r00rA6      [24] 5727 	mov	dptr,#(_servernf + 0x0003)
   17CA E0            [24] 5728 	movx	a,@dptr
   17CB FF            [12] 5729 	mov	r7,a
   17CC 7E 00         [12] 5730 	mov	r6,#0x00
   17CE 90r00r90      [24] 5731 	mov	dptr,#(_clientnf + 0x0001)
   17D1 EF            [12] 5732 	mov	a,r7
   17D2 F0            [24] 5733 	movx	@dptr,a
   17D3 EE            [12] 5734 	mov	a,r6
   17D4 A3            [24] 5735 	inc	dptr
   17D5 F0            [24] 5736 	movx	@dptr,a
   17D6 02r16r6A      [24] 5737 	ljmp	00123$
                           5738 	.area CSEG    (CODE)
                           5739 	.area CONST   (CODE)
                           5740 	.area XINIT   (CODE)
   0000                    5741 __xinit__countrtc:
   0000 00 00 00 00        5742 	.byte #0x00,#0x00,#0x00,#0x00	; 0
                           5743 	.area CABS    (ABS,CODE)
